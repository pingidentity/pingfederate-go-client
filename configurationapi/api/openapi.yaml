openapi: 3.0.1
info:
  description: "The PingFederate Administrative API is a REST-based interface that\
    \ provides a programmatic way to make configuration changes to PingFederate as\
    \ an alternative to using the administrative console.<br/><br/>Expand the resources\
    \ below to display implementation details on that resource such as the available\
    \ endpoints, the parameter and response models for the operation, and the model\
    \ structure of the resources themselves. Each resource operation comes with the\
    \ ability to interact with the API. You are prompted for proper administration\
    \ credentials when you try to perform an API operation."
  title: Administrative API Documentation
  version: 12.0.0.9
servers:
- url: https://localhost:9999/pf-admin-api/v1
security:
- basicAuth: []
- bearer: []
- oauth2: []
tags:
- name: /oauth/accessTokenManagers
- name: /oauth/accessTokenMappings
- name: /administrativeAccounts
- name: /sp/authenticationPolicyContractMappings
- name: /authenticationApi
- name: /authenticationPolicies
- name: /authenticationPolicyContracts
- name: /authenticationSelectors
- name: /session
- name: /oauth/authorizationDetailProcessors
- name: /oauth/authServerSettings
- name: /bulk
- name: /captchaProviders
- name: /certificates/groups
- name: /certificates/revocation
- name: /cluster
- name: /configArchive
- name: /configStore
- name: /configurationEncryptionKeys
- name: /connectionMetadata
- name: /idp/connectors
- name: /dataStores
- name: /extendedProperties
- name: /identityStoreProvisioners
- name: /idp/adapters
- name: /sp/idpConnections
- name: /idp/defaultUrls
- name: /idpToSpAdapterMapping
- name: /incomingProxySettings
- name: /kerberos/realms
- name: /license
- name: /localIdentity/identityProfiles
- name: /metadataUrls
- name: /notificationPublishers
- name: /oauth/authenticationPolicyContractMappings
- name: /oauth/cibaServerPolicy
- name: /oauth/clients
- name: /oauth/clientSettings
- name: /oauth/clientRegistrationPolicies
- name: /oauth/idpAdapterMappings
- name: /oauth/outOfBandAuthPlugins
- name: /keyPairs/oauthOpenIdConnect
- name: /oauth/resourceOwnerCredentialsMappings
- name: /oauth/openIdConnect
- name: /passwordCredentialValidators
- name: /pingOneConnections
- name: /pingOneForEnterprise
- name: /protocolMetadata
- name: /redirectValidation
- name: /keyPairs
- name: /secretManagers
- name: /serverSettings
- name: /serviceAuthentication
- name: /keyPairs/signing
- name: /sp/adapters
- name: /idp/spConnections
- name: /sp/defaultUrls
- name: /sp/targetUrlMappings
- name: /keyPairs/sslClient
- name: /keyPairs/sslServer
- name: /idp/stsRequestParametersContracts
- name: /sp/tokenGenerators
- name: /idp/tokenProcessors
- name: /tokenProcessorToTokenGeneratorMappings
- name: /certificates/ca
- name: /version
- name: /virtualHostNames
- name: /oauth/authorizationDetailTypes
- name: /oauth/issuers
- name: /oauth/tokenExchange/tokenGeneratorMappings
- name: /oauth/tokenExchange/generator
- name: /oauth/tokenExchange/processor
paths:
  /oauth/accessTokenManagers/settings:
    get:
      operationId: getOauthAccessTokenManagersSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenManagementSettings'
          description: Success.
      summary: Get general access token management settings.
      tags:
      - /oauth/accessTokenManagers
    put:
      operationId: updateOauthAccessTokenManagersSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessTokenManagementSettings'
        description: Access token management settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenManagementSettings'
          description: Settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update general access token management settings.
      tags:
      - /oauth/accessTokenManagers
      x-codegen-request-body-name: body
  /oauth/accessTokenManagers/descriptors:
    get:
      operationId: getTokenManagerDescriptors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenManagerDescriptors'
          description: Success.
      summary: Get the list of available token management plugin descriptors.
      tags:
      - /oauth/accessTokenManagers
  /oauth/accessTokenManagers/descriptors/{id}:
    get:
      operationId: getTokenManagerDescriptor
      parameters:
      - description: ID of token management plugin descriptor.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenManagerDescriptor'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get the description of a token management plugin descriptor.
      tags:
      - /oauth/accessTokenManagers
  /oauth/accessTokenManagers:
    get:
      operationId: getTokenManagers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenManagers'
          description: Success.
      summary: Get a list of all token management plugin instances.
      tags:
      - /oauth/accessTokenManagers
    post:
      operationId: createTokenManager
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessTokenManager'
        description: Configuration for plugin instance.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenManager'
          description: Access Token Management instance created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a token management plugin instance.
      tags:
      - /oauth/accessTokenManagers
      x-codegen-request-body-name: body
  /oauth/accessTokenManagers/{id}:
    delete:
      operationId: deleteTokenManager
      parameters:
      - description: ID of token management plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Access token management instance deleted.
        "403":
          content: {}
          description: "The operation is not permitted, based on the current configuration\
            \ of the server."
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete a token management plugin instance.
      tags:
      - /oauth/accessTokenManagers
    get:
      operationId: getTokenManager
      parameters:
      - description: ID of token management plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenManager'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get a specific token management plugin instance.
      tags:
      - /oauth/accessTokenManagers
    put:
      operationId: updateTokenManager
      parameters:
      - description: ID of token management plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessTokenManager'
        description: Configuration for token management plugin instance.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenManager'
          description: Access Token Management instance updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update a token management plugin instance.
      tags:
      - /oauth/accessTokenManagers
      x-codegen-request-body-name: body
  /oauth/accessTokenMappings:
    get:
      operationId: getMappings
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AccessTokenMapping'
                type: array
          description: Success.
      summary: Get the list of Access Token Mappings.
      tags:
      - /oauth/accessTokenMappings
    post:
      description: "Create a new Access Token Mapping. If the mapping is not properly\
        \ configured, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: createMapping
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessTokenMapping'
        description: Configuration for the new Access Token Mapping.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenMapping'
          description: Access token attribute mapping created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new Access Token Mapping.
      tags:
      - /oauth/accessTokenMappings
      x-codegen-request-body-name: body
  /oauth/accessTokenMappings/{id}:
    delete:
      operationId: deleteMapping
      parameters:
      - description: ID of the Access Token Mapping.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Access token attribute mapping deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete an Access Token Mapping.
      tags:
      - /oauth/accessTokenMappings
    get:
      operationId: getMapping
      parameters:
      - description: ID of the Access Token Mapping.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenMapping'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find the Access Token Mapping by its ID.
      tags:
      - /oauth/accessTokenMappings
    put:
      description: "Update an Access Token Mapping with the matching ID. If the mapping\
        \ is not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected. Note: A 404 status code is\
        \ returned for nonexistent mapping ID."
      operationId: updateMapping
      parameters:
      - description: ID of the Access Token Mapping to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessTokenMapping'
        description: Configuration for updated mapping.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenMapping'
          description: Access token attribute mapping updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an Access Token Mapping.
      tags:
      - /oauth/accessTokenMappings
      x-codegen-request-body-name: body
  /administrativeAccounts:
    get:
      operationId: getAccounts
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdministrativeAccounts'
          description: Success.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Get all the PingFederate native Administrative Accounts.
      tags:
      - /administrativeAccounts
    post:
      operationId: addAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdministrativeAccount'
        description: Administrative account information.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdministrativeAccount'
          description: New Administrative Account created.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Add a new PingFederate native Administrative Account.
      tags:
      - /administrativeAccounts
      x-codegen-request-body-name: body
  /administrativeAccounts/{username}:
    delete:
      operationId: deleteAccount
      parameters:
      - description: Username of the account to be deleted.
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Administrator Account Deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Delete a PingFederate native Administrative Account information.
      tags:
      - /administrativeAccounts
    get:
      operationId: getAccount
      parameters:
      - description: Username of the administrative account.
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdministrativeAccount'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get a PingFederate native Administrative Account.
      tags:
      - /administrativeAccounts
    put:
      operationId: updateAccount
      parameters:
      - description: Username of the account to be updated.
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdministrativeAccount'
        description: Administrative account information.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdministrativeAccount'
          description: Administrator Account updated.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the information for a native Administrative Account.
      tags:
      - /administrativeAccounts
      x-codegen-request-body-name: body
  /administrativeAccounts/{username}/resetPassword:
    post:
      operationId: resetPassword
      parameters:
      - description: Username of the administrative account.
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
        description: New password.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCredentials'
          description: Administrator password reset.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Reset the Password of an existing PingFederate native Administrative
        Account.
      tags:
      - /administrativeAccounts
      x-codegen-request-body-name: body
  /administrativeAccounts/changePassword:
    post:
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
        description: User Account credential.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCredentials'
          description: Administrator password changed.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Change the Password of current PingFederate native Account.
      tags:
      - /administrativeAccounts
      x-codegen-request-body-name: body
  /sp/authenticationPolicyContractMappings:
    get:
      operationId: getApcToSpAdapterMappings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApcToSpAdapterMappings'
          description: Success.
      summary: Get the list of APC-to-SP Adapter Mappings.
      tags:
      - /sp/authenticationPolicyContractMappings
    post:
      operationId: createApcToSpAdapterMapping
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApcToSpAdapterMapping'
        description: Configuration for a new APC-to-SP Adapter Mapping.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApcToSpAdapterMapping'
          description: Authentication policy contract-to-SP adapter mapping created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new APC-to-SP Adapter Mapping.
      tags:
      - /sp/authenticationPolicyContractMappings
      x-codegen-request-body-name: body
  /sp/authenticationPolicyContractMappings/{id}:
    delete:
      operationId: deleteApcToSpAdapterMappingById
      parameters:
      - description: ID of APC-to-SP Adapter Mapping to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Authentication policy contract-to-SP adapter mapping deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete an APC-to-SP Adapter Mapping.
      tags:
      - /sp/authenticationPolicyContractMappings
    get:
      operationId: getApcToSpAdapterMappingById
      parameters:
      - description: ID of APC-to-SP Adapter Mapping to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApcToSpAdapterMapping'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get an APC-to-SP Adapter Mapping.
      tags:
      - /sp/authenticationPolicyContractMappings
    put:
      operationId: updateApcToSpAdapterMappingById
      parameters:
      - description: ID of APC-to-SP Adapter Mapping to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ApcToSpAdapterMapping'
        description: Configuration for updated APC-to-SP Adapter Mapping.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApcToSpAdapterMapping'
          description: Authentication policy contract-to-SP adapter mapping updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an APC-to-SP Adapter Mapping.
      tags:
      - /sp/authenticationPolicyContractMappings
      x-codegen-request-body-name: body
  /authenticationApi/applications:
    get:
      operationId: getAuthenticationApiApplications
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthnApiApplications'
          description: Success.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Get the collection of Authentication API Applications.
      tags:
      - /authenticationApi
    post:
      operationId: createApplication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthnApiApplication'
        description: Configuration for new Authentication API Application.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthnApiApplication'
          description: Authentication API Application created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new Authentication API Application.
      tags:
      - /authenticationApi
      x-codegen-request-body-name: body
  /authenticationApi/applications/{id}:
    delete:
      description: "Delete an Authentication API Application with the specified ID.\
        \ A 404 status code is returned for nonexistent IDs. Note: If the request\
        \ succeeds, the response body is empty. If the request fails, an ApiResult\
        \ is returned with details of the error."
      operationId: deleteApplication
      parameters:
      - description: ID of Authentication API Application to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Authentication API Application deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Delete an Authentication API Application.
      tags:
      - /authenticationApi
    get:
      description: Get an Authentication API Application with the specified ID. A
        404 status code is returned for nonexistent IDs.
      operationId: getApplication
      parameters:
      - description: ID of the Authentication API Application to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthnApiApplication'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find Authentication API Application by ID.
      tags:
      - /authenticationApi
    put:
      description: "Update an Authentication API Application with the matching ID.\
        \ If the application is not properly configured, a 422 status code is returned\
        \ along with a list of validation errors that must be corrected. Note: A 404\
        \ status code is returned for nonexistent IDs."
      operationId: updateApplication
      parameters:
      - description: ID of the Authentication API Application to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthnApiApplication'
        description: Configuration for updated application.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthnApiApplication'
          description: Authentication API Application updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an Authentication API Application.
      tags:
      - /authenticationApi
      x-codegen-request-body-name: body
  /authenticationApi/settings:
    get:
      operationId: getAuthenticationApiSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthnApiSettings'
          description: Success.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Get the Authentication API settings.
      tags:
      - /authenticationApi
    put:
      operationId: updateAuthenticationApiSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthnApiSettings'
        description: Authentication API Settings
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthnApiSettings'
          description: Settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Set the Authentication API settings.
      tags:
      - /authenticationApi
      x-codegen-request-body-name: body
  /authenticationPolicies/settings:
    get:
      operationId: getAuthenticationPolicySettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationPoliciesSettings'
          description: Success.
      summary: Get the authentication policies settings.
      tags:
      - /authenticationPolicies
    put:
      operationId: updateAuthenticationPolicySettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationPoliciesSettings'
        description: Authentication policies settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationPoliciesSettings'
          description: Settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
      summary: Set the authentication policies settings.
      tags:
      - /authenticationPolicies
      x-codegen-request-body-name: body
  /authenticationPolicies/policy/{id}:
    delete:
      operationId: deletePolicy
      parameters:
      - description: Authentication policy Id.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Authentication policy deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete an authentication policy.
      tags:
      - /authenticationPolicies
    get:
      operationId: getPolicy
      parameters:
      - description: Authentication policy Id.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationPolicyTree'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get an authentication policy by ID.
      tags:
      - /authenticationPolicies
    put:
      operationId: updatePolicy
      parameters:
      - description: Authentication policy Id.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AuthenticationPolicyTree'
        description: Configuration of the authentication policy.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationPolicyTree'
          description: Authentication policy updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an authentication policy.
      tags:
      - /authenticationPolicies
      x-codegen-request-body-name: body
  /authenticationPolicies/fragments/{id}:
    delete:
      operationId: deleteFragment
      parameters:
      - description: ID of the policy fragment to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Authentication policy fragment deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Delete an authentication policy fragment.
      tags:
      - /authenticationPolicies
    get:
      operationId: getFragment
      parameters:
      - description: ID of the policy fragment to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationPolicyFragment'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get an authentication policy fragment by ID.
      tags:
      - /authenticationPolicies
    put:
      operationId: updateFragment
      parameters:
      - description: ID of the policy fragment to  update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AuthenticationPolicyFragment'
        description: Configuration of the authentication policy fragment.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationPolicyFragment'
          description: Authentication policy fragment updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an authentication policy fragment.
      tags:
      - /authenticationPolicies
      x-codegen-request-body-name: body
  /authenticationPolicies/fragments:
    get:
      operationId: getFragments
      parameters:
      - description: Page number to retrieve.
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of fragments per page.
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Filter criteria limits the fragments that are returned to only
          those that match it. The filter criteria is compared to the fragment instance
          name and ID fields. The comparison is a case-insensitive partial match.
          No additional pattern based matching is supported.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationPolicyFragments'
          description: Success.
      summary: Get all of the authentication policies fragments.
      tags:
      - /authenticationPolicies
    post:
      operationId: createFragment
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AuthenticationPolicyFragment'
        description: Configuration of the authentication policy fragment.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationPolicyFragment'
          description: Authentication policy fragment created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create an authentication policy fragment.
      tags:
      - /authenticationPolicies
      x-codegen-request-body-name: body
  /authenticationPolicies/policy/{id}/move:
    post:
      operationId: movePolicy
      parameters:
      - description: Authentication policy Id.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/MoveItemRequest'
        description: Metadata about where to move the policy
        required: true
      responses:
        "200":
          content: {}
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Move an authentication policy to a location within the policy tree.
      tags:
      - /authenticationPolicies
      x-codegen-request-body-name: body
  /authenticationPolicies/default:
    get:
      operationId: getDefaultAuthenticationPolicy
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationPolicy'
          description: Success.
      summary: Get the default configured authentication policy.
      tags:
      - /authenticationPolicies
    put:
      operationId: updateDefaultAuthenticationPolicy
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AuthenticationPolicy'
        description: Default authentication policy.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationPolicy'
          description: Default authentication policy updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Set the default authentication policy.
      tags:
      - /authenticationPolicies
      x-codegen-request-body-name: body
  /authenticationPolicies/policy:
    post:
      operationId: createPolicy
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AuthenticationPolicyTree'
        description: Configuration of the authentication policy.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationPolicyTree'
          description: Authentication policy created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new authentication policy.
      tags:
      - /authenticationPolicies
      x-codegen-request-body-name: body
  /authenticationPolicyContracts:
    get:
      operationId: getAuthenticationPolicyContracts
      parameters:
      - description: Page number to retrieve.
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of contracts per page.
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Filter criteria limits the authentication policy contracts that
          are returned to only those that match it. The filter criteria is compared
          to the authentication policy contract name and ID fields. The comparison
          is a case-insensitive partial match. No additional pattern based matching
          is supported.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationPolicyContracts'
          description: Success.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Gets the Authentication Policy Contracts.
      tags:
      - /authenticationPolicyContracts
    post:
      description: "Create a new Authentication Policy Contract. If the Authentication\
        \ Policy Contract is not properly configured, a 422 status code is returned\
        \ along with a list of validation errors that must be corrected."
      operationId: createAuthenticationPolicyContract
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationPolicyContract'
        description: Configuration for a new contract.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationPolicyContract'
          description: Authentication policy contract created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new Authentication Policy Contract.
      tags:
      - /authenticationPolicyContracts
      x-codegen-request-body-name: body
  /authenticationPolicyContracts/{id}:
    delete:
      description: "Delete an Authentication Policy Contract with the specified ID.\
        \ A 404 status code is returned for nonexistent IDs. Note: If the request\
        \ succeeds, the response body is empty. If the request fails, an ApiResult\
        \ is returned with details of the error."
      operationId: deleteAuthenticationPolicyContract
      parameters:
      - description: ID of Authentication Policy Contract to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Authentication policy contract deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource is in use and cannot be deleted.
      summary: Delete an Authentication Policy Contract.
      tags:
      - /authenticationPolicyContracts
    get:
      description: Get an Authentication Policy Contract with the specified ID. A
        404 status code is returned for nonexistent IDs
      operationId: getAuthenticationPolicyContract
      parameters:
      - description: ID of contract to fetch
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationPolicyContract'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Gets the Authentication Policy Contract by ID.
      tags:
      - /authenticationPolicyContracts
    put:
      description: Update an Authentication Policy Contract with the specified ID.
        A 404 status code is returned for nonexistent IDs.
      operationId: updateAuthenticationPolicyContract
      parameters:
      - description: ID of the Authentication Policy Contract to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AuthenticationPolicyContract'
        description: Configuration for updated Authentication Policy Contract.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationPolicyContract'
          description: Authentication policy contract updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an Authentication Policy Contract by ID.
      tags:
      - /authenticationPolicyContracts
      x-codegen-request-body-name: body
  /authenticationSelectors:
    get:
      operationId: getAuthenticationSelectors
      parameters:
      - description: Page number to retrieve.
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of selectors per page.
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Filter criteria limits the authentication selector instances
          that are returned to only those that match it. The filter criteria is compared
          to the authentication selector instance name and ID fields. The comparison
          is a case-insensitive partial match. No additional pattern based matching
          is supported.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSelectors'
          description: Success.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Get the list of configured Authentication Selector instances.
      tags:
      - /authenticationSelectors
    post:
      description: "Create a new authentication selector instance. If the authentication\
        \ selector is not properly configured, a 422 status code is returned along\
        \ with a list of validation errors that must be corrected."
      operationId: createAuthenticationSelector
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AuthenticationSelector'
        description: Configuration for a new authentication selector instance.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSelector'
          description: Authentication selector created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new authentication selector instance.
      tags:
      - /authenticationSelectors
      x-codegen-request-body-name: body
  /authenticationSelectors/{id}:
    delete:
      description: "Delete an Authentication Selector instance with the specified\
        \ ID. A 404 status code is returned for nonexistent IDs. Note: Only selectors\
        \ not in use can be deleted. If the request succeeds, the response body is\
        \ empty. If the request fails, an ApiResult is returned with details of the\
        \ error."
      operationId: deleteAuthenticationSelector
      parameters:
      - description: ID of Authentication Selector to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Authentication selector deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource is in use and cannot be deleted.
      summary: Delete an Authentication Selector instance.
      tags:
      - /authenticationSelectors
    get:
      description: Get the configured Authentication Selector instance with the specified
        ID. A 404 status code is returned for nonexistent IDs.
      operationId: getAuthenticationSelector
      parameters:
      - description: ID of Authentication Selector instance to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSelector'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get an Authentication Selector instance by ID.
      tags:
      - /authenticationSelectors
    put:
      description: "Update an authentication selector instance. If the authentication\
        \ selector is not properly configured, a 422 status code is returned along\
        \ with a list of validation errors that must be corrected."
      operationId: updateAuthenticationSelector
      parameters:
      - description: ID of the authentication selector instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AuthenticationSelector'
        description: Configuration for updated authentication selector instance.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSelector'
          description: Authentication selector updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an authentication selector instance.
      tags:
      - /authenticationSelectors
      x-codegen-request-body-name: body
  /authenticationSelectors/descriptors:
    get:
      operationId: getAuthenticationSelectorDescriptors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSelectorDescriptors'
          description: Success.
      summary: Get the list of available Authentication Selector descriptors.
      tags:
      - /authenticationSelectors
  /authenticationSelectors/descriptors/{id}:
    get:
      description: Get the description of an Authentication Selector plugin by ID.
        A 404 status code is returned for nonexistent IDs.
      operationId: getAuthenticationSelectorDescriptorsById
      parameters:
      - description: ID of Authentication Selector descriptor to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSelectorDescriptor'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get the description of an Authentication Selector plugin by ID.
      tags:
      - /authenticationSelectors
  /session/settings:
    get:
      operationId: getSessionSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionSettings'
          description: Success.
      summary: Get general session management settings.
      tags:
      - /session
    put:
      operationId: updateSessionSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionSettings'
        description: Session settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionSettings'
          description: General session management settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update general session management settings.
      tags:
      - /session
      x-codegen-request-body-name: body
  /session/applicationSessionPolicy:
    get:
      operationId: getApplicationPolicy
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationSessionPolicy'
          description: Success.
      summary: Get the application session policy.
      tags:
      - /session
    put:
      operationId: updateApplicationPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationSessionPolicy'
        description: Application session policy.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationSessionPolicy'
          description: Application session policy updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the application session policy.
      tags:
      - /session
      x-codegen-request-body-name: body
  /session/authenticationSessionPolicies/global:
    get:
      operationId: getGlobalPolicy
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalAuthenticationSessionPolicy'
          description: Success.
      summary: Get the global authentication session policy.
      tags:
      - /session
    put:
      operationId: updateGlobalPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalAuthenticationSessionPolicy'
        description: Global authentication session policy.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalAuthenticationSessionPolicy'
          description: Global authentication session policy updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the global authentication session policy.
      tags:
      - /session
      x-codegen-request-body-name: body
  /session/authenticationSessionPolicies:
    get:
      description: Get a list of all session policies that are associated with specific
        authentication sources.
      operationId: getSourcePolicies
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSessionPolicies'
          description: Success.
      summary: Get list of session policies.
      tags:
      - /session
    post:
      description: "Create a new session policy for a specified authentication source.\
        \ If the session policy is not properly configured, a 422 status code is returned\
        \ along with a list of validation errors that must be corrected."
      operationId: createSourcePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationSessionPolicy'
        description: Configuration for new policy.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSessionPolicy'
          description: Authentication session policy created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new session policy.
      tags:
      - /session
      x-codegen-request-body-name: body
  /session/authenticationSessionPolicies/{id}:
    delete:
      description: "Delete the session policy with the specified ID. A 404 status\
        \ code is returned for nonexistent IDs. If the request succeeds, the response\
        \ body is empty. If the request fails, an ApiResult is returned with details\
        \ of the error."
      operationId: deleteSourcePolicy
      parameters:
      - description: ID of session policy to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Authentication session policy deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete a session policy.
      tags:
      - /session
    get:
      description: Get the session policy with the specified ID. A 404 status code
        is returned for nonexistent IDs.
      operationId: getSourcePolicy
      parameters:
      - description: ID of the session policy to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSessionPolicy'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find session policy by ID.
      tags:
      - /session
    put:
      description: "Update the session policy with the matching ID. If the policy\
        \ is not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected."
      operationId: updateSourcePolicy
      parameters:
      - description: ID of the session policy to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationSessionPolicy'
        description: Configuration for updated policy.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSessionPolicy'
          description: Authentication session policy updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update a session policy.
      tags:
      - /session
      x-codegen-request-body-name: body
  /oauth/authorizationDetailProcessors/descriptors:
    get:
      operationId: getAuthorizationDetailProcessorPluginDescriptors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationDetailProcessorDescriptors'
          description: Success.
      summary: Get a list of available authorization detail processor plugin descriptors.
      tags:
      - /oauth/authorizationDetailProcessors
  /oauth/authorizationDetailProcessors/descriptors/{id}:
    get:
      operationId: getAuthorizationDetailProcessorPluginDescriptor
      parameters:
      - description: ID of authorization detail processor plugin descriptor.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationDetailProcessorDescriptor'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get an authorization detail processor plugin descriptor.
      tags:
      - /oauth/authorizationDetailProcessors
  /oauth/authorizationDetailProcessors:
    get:
      operationId: getAuthorizationDetailProcessors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationDetailProcessors'
          description: Success.
      summary: Get a list of authorization detail processor plugin instances.
      tags:
      - /oauth/authorizationDetailProcessors
    post:
      operationId: createAuthorizationDetailProcessor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationDetailProcessor'
        description: Configuration for a authorization detail processor plugin instance.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationDetailProcessor'
          description: Authorization Detail Processor plugin created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create an authorization detail processor plugin instance.
      tags:
      - /oauth/authorizationDetailProcessors
      x-codegen-request-body-name: body
  /oauth/authorizationDetailProcessors/{id}:
    delete:
      operationId: deleteAuthorizationDetailProcessor
      parameters:
      - description: ID of an authorization detail processor plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Authorization Detail Processor plugin deleted.
        "403":
          content: {}
          description: "The operation is not permitted, based on the current configuration\
            \ of the server."
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete an authorization detail processor plugin instance.
      tags:
      - /oauth/authorizationDetailProcessors
    get:
      operationId: getAuthorizationDetailProcessor
      parameters:
      - description: ID of an authorization detail processor plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationDetailProcessor'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get a specific authorization detail processor plugin instance.
      tags:
      - /oauth/authorizationDetailProcessors
    put:
      operationId: updateAuthorizationDetailProcessor
      parameters:
      - description: ID of an authorization detail processor plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationDetailProcessor'
        description: Configuration for a authorization detail processor plugin instance.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationDetailProcessor'
          description: Authorization Detail Processor plugin updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an authorization detail processor plugin instance.
      tags:
      - /oauth/authorizationDetailProcessors
      x-codegen-request-body-name: body
  /oauth/authServerSettings:
    get:
      operationId: getAuthorizationServerSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerSettings'
          description: Success.
      summary: Get the Authorization Server Settings.
      tags:
      - /oauth/authServerSettings
    put:
      operationId: updateAuthorizationServerSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServerSettings'
        description: Configuration for updated server settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerSettings'
          description: Authorization Server Settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the Authorization Server Settings.
      tags:
      - /oauth/authServerSettings
      x-codegen-request-body-name: body
  /oauth/authServerSettings/scopes/commonScopes/{name}:
    delete:
      operationId: removeCommonScope
      parameters:
      - description: Name of the common scope.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Common Scope deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Remove an existing common scope.
      tags:
      - /oauth/authServerSettings
    get:
      operationId: getCommonScope
      parameters:
      - description: Name of the common scope.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeEntry'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get an existing common scope.
      tags:
      - /oauth/authServerSettings
    put:
      operationId: updateCommonScope
      parameters:
      - description: Name of the common scope.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScopeEntry'
        description: The scope definition
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeEntry'
          description: Common Scope updated.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an existing common scope.
      tags:
      - /oauth/authServerSettings
      x-codegen-request-body-name: body
  /oauth/authServerSettings/scopes/commonScopes:
    post:
      operationId: addCommonScope
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScopeEntry'
        description: The scope definition.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeEntry'
          description: Common Scope added.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Add a new common scope.
      tags:
      - /oauth/authServerSettings
      x-codegen-request-body-name: body
  /oauth/authServerSettings/scopes/exclusiveScopes:
    post:
      operationId: addExclusiveScope
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScopeEntry'
        description: A new exclusive scope
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeEntry'
          description: Exclusive Scope added.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Add a new exclusive scope.
      tags:
      - /oauth/authServerSettings
      x-codegen-request-body-name: body
  /oauth/authServerSettings/scopes/exclusiveScopes/{name}:
    delete:
      operationId: removeExclusiveScope
      parameters:
      - description: Name of the exclusive scope.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Exclusive Scope deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Remove an existing exclusive scope.
      tags:
      - /oauth/authServerSettings
    get:
      operationId: getExclusiveScope
      parameters:
      - description: Name of the exclusive scope.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeEntry'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get an existing exclusive scope.
      tags:
      - /oauth/authServerSettings
    put:
      operationId: updateExclusiveScope
      parameters:
      - description: Name of the exclusive scope.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScopeEntry'
        description: The scope definition.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeEntry'
          description: Exclusive Scope updated.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an existing exclusive scope.
      tags:
      - /oauth/authServerSettings
      x-codegen-request-body-name: body
  /oauth/authServerSettings/scopes/commonScopeGroups:
    post:
      operationId: addCommonScopeGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScopeGroupEntry'
        description: The scope group definition
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeGroupEntry'
          description: Common Scope Group created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new common scope group.
      tags:
      - /oauth/authServerSettings
      x-codegen-request-body-name: body
  /oauth/authServerSettings/scopes/commonScopeGroups/{name}:
    delete:
      operationId: removeCommonScopeGroup
      parameters:
      - description: Name of the common scope group.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Common Scope Group deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Remove an existing common scope group.
      tags:
      - /oauth/authServerSettings
    get:
      operationId: getCommonScopeGroup
      parameters:
      - description: Name of the common scope group.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeGroupEntry'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get an existing common scope group.
      tags:
      - /oauth/authServerSettings
    put:
      operationId: updateCommonScopeGroup
      parameters:
      - description: Name of the common scope group.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScopeGroupEntry'
        description: The scope group definition.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeGroupEntry'
          description: Common Scope Group updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an existing common scope group.
      tags:
      - /oauth/authServerSettings
      x-codegen-request-body-name: body
  /oauth/authServerSettings/scopes/exclusiveScopeGroups:
    post:
      operationId: addExclusiveScopeGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScopeGroupEntry'
        description: The scope group definition
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeGroupEntry'
          description: Exclusive Scope Group created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new exclusive scope group.
      tags:
      - /oauth/authServerSettings
      x-codegen-request-body-name: body
  /oauth/authServerSettings/scopes/exclusiveScopeGroups/{name}:
    delete:
      operationId: removeExclusiveScopeGroup
      parameters:
      - description: Name of the exclusive scope group.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Exclusive Scope Group deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Remove an existing exclusive scope group.
      tags:
      - /oauth/authServerSettings
    get:
      operationId: getExclusiveScopeGroup
      parameters:
      - description: Name of the exclusive scope group.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeGroupEntry'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get an existing exclusive scope group.
      tags:
      - /oauth/authServerSettings
    put:
      operationId: updateExclusiveScopeGroups
      parameters:
      - description: Name of the exclusive scope group.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScopeGroupEntry'
        description: The scope group definition
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeGroupEntry'
          description: Exclusive Scope Group updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an existing exclusive scope group.
      tags:
      - /oauth/authServerSettings
      x-codegen-request-body-name: body
  /bulk/export:
    get:
      description: "For the /configStore resource type, only the settings that are\
        \ different from the defaults for this version of PingFederate are included\
        \ in the export.<br><br>Only resource types currently supported by the Administrative\
        \ API are included in the exported data. Resources not yet supported include:<br><br>-\
        \ SMS Provider Settings<br>"
      operationId: exportConfiguration
      parameters:
      - description: Include external resources like OAuth clients stored outside
          of PingFederate.
        explode: true
        in: query
        name: includeExternalResources
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkConfig'
          description: Success.
        "403":
          content: {}
          description: The current configuration cannot be bulk exported.
      summary: Export all API resources to a JSON file.
      tags:
      - /bulk
  /bulk/import:
    post:
      description: |-
        All existing configuration will be wiped before the import begins. If any validation errors are found, PingFederate will roll back to the previous configuration. The master key set in pf.jwk must include the key in use when the JSON configuration was originally exported.

        JSON configurations exported from earlier versions of PingFederate can be imported. However, this is not a supported way of upgrading from an earlier version. Instead, you should run the upgrade utility and then reexport to get an updated configuration JSON.
      operationId: importConfiguration
      parameters:
      - description: "When set to true, stops the import as soon as any validation\
          \ errors are encountered. When false, import will continue to validate configuration\
          \ after the first failure to identify all validation errors. If any validation\
          \ errors are present PingFederate will roll back to the state prior to the\
          \ import attempt."
        explode: true
        in: query
        name: failFast
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkConfig'
        description: Configuration to import.
        required: true
      responses:
        "200":
          content: {}
          description: Success.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Import configuration for a PingFederate deployment from a JSON file.
      tags:
      - /bulk
      x-codegen-request-body-name: body
  /captchaProviders/settings:
    get:
      operationId: getCaptchaProvidersSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptchaProvidersSettings'
          description: Success.
      summary: Get general CAPTCHA providers settings.
      tags:
      - /captchaProviders
    put:
      operationId: updateCaptchaProvidersSettings
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CaptchaProvidersSettings'
        description: CAPTCHA providers settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptchaProvidersSettings'
          description: Settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update general CAPTCHA providers settings.
      tags:
      - /captchaProviders
      x-codegen-request-body-name: body
  /captchaProviders/descriptors:
    get:
      operationId: getCaptchaProviderPluginDescriptors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/A collection of CAPTCHA provider plugin
                  descriptors.'
          description: Success.
      summary: Get a list of available CAPTCHA provider plugin descriptors.
      tags:
      - /captchaProviders
  /captchaProviders/descriptors/{id}:
    get:
      operationId: getCaptchaProviderPluginDescriptor
      parameters:
      - description: ID of CAPTCHA provider plugin descriptor.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/A CAPTCHA provider plugin descriptor.'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get a CAPTCHA provider plugin descriptor.
      tags:
      - /captchaProviders
  /captchaProviders:
    get:
      operationId: getCaptchaProviders
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptchaProviders'
          description: Success.
      summary: Get a list of CAPTCHA provider plugin instances.
      tags:
      - /captchaProviders
    post:
      operationId: createCaptchaProvider
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaptchaProvider'
        description: Configuration for a CAPTCHA provider plugin instance.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptchaProvider'
          description: CAPTCHA Provider plugin created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a CAPTCHA provider plugin instance.
      tags:
      - /captchaProviders
      x-codegen-request-body-name: body
  /captchaProviders/{id}:
    delete:
      operationId: deleteCaptchaProvider
      parameters:
      - description: ID of a CAPTCHA provider plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: CAPTCHA Provider plugin deleted.
        "403":
          content: {}
          description: "The operation is not permitted, based on the current configuration\
            \ of the server."
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete a CAPTCHA provider plugin instance.
      tags:
      - /captchaProviders
    get:
      operationId: getCaptchaProvider
      parameters:
      - description: ID of a CAPTCHA provider plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptchaProvider'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get a specific CAPTCHA provider plugin instance.
      tags:
      - /captchaProviders
    put:
      operationId: updateCaptchaProvider
      parameters:
      - description: ID of a CAPTCHA provider plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaptchaProvider'
        description: Configuration for a CAPTCHA provider plugin instance.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptchaProvider'
          description: CAPTCHA Provider plugin updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update a CAPTCHA provider plugin instance.
      tags:
      - /captchaProviders
      x-codegen-request-body-name: body
  /certificates/groups/{groupName}:
    get:
      operationId: getCertificatesForGroup
      parameters:
      - description: Name of the group to retrieve certificates for.
        explode: false
        in: path
        name: groupName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertViews'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get list of all certificates for a group.
      tags:
      - /certificates/groups
  /certificates/groups/{groupName}/{id}:
    delete:
      description: "If the request is successful, the response body is empty. If the\
        \ request fails, an ApiResult is returned with details of the error."
      operationId: deleteCertificateFromGroup
      parameters:
      - description: Name of the group to retrieve certificates for.
        explode: false
        in: path
        name: groupName
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the certificate to retrieve.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Group certificate deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete a certificate from a group.
      tags:
      - /certificates/groups
    get:
      operationId: getCertificateFromGroup
      parameters:
      - description: Name of the group to retrieve certificates for.
        explode: false
        in: path
        name: groupName
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the certificate to retrieve.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertView'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Retrieve details of a certificate.
      tags:
      - /certificates/groups
  /certificates/groups/{groupName}/import:
    post:
      operationId: importFeatureCert
      parameters:
      - description: Name of the group to retrieve certificates for.
        explode: false
        in: path
        name: groupName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/X509File'
        description: File data to import.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertView'
          description: Group certificate imported.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Import a new certificate to a group.
      tags:
      - /certificates/groups
      x-codegen-request-body-name: body
  /certificates/revocation/settings:
    get:
      operationId: getRevocationSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateRevocationSettings'
          description: Success.
      summary: Get certificate revocation settings.
      tags:
      - /certificates/revocation
    put:
      operationId: updateRevocationSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateRevocationSettings'
        description: Certificate revocation settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateRevocationSettings'
          description: Certificate revocation settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update certificate revocation settings.
      tags:
      - /certificates/revocation
      x-codegen-request-body-name: body
  /certificates/revocation/ocspCertificates:
    get:
      operationId: getOcspCertificates
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertViews'
          description: Success.
      summary: Get the list of available OCSP responder signature verification certificates.
      tags:
      - /certificates/revocation
    post:
      operationId: importOcspCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/X509File'
        description: File to import.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertView'
          description: OCSP responder signature verification certificate imported.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Import an OCSP responder signature verification certificate.
      tags:
      - /certificates/revocation
      x-codegen-request-body-name: body
  /certificates/revocation/ocspCertificates/{id}:
    delete:
      operationId: deleteOcspCertificateById
      parameters:
      - description: Certificate ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: OCSP responder signature verification certificate deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content: {}
          description: Resource is in use and cannot be deleted.
      summary: Delete an OCSP responder signature verification certificate by ID.
      tags:
      - /certificates/revocation
    get:
      operationId: getOcspCertificateById
      parameters:
      - description: Certificate ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertView'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get an OCSP responder signature verification certificate by ID.
      tags:
      - /certificates/revocation
  /cluster/settings:
    get:
      operationId: getClusterSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterSettings'
          description: Success.
        "403":
          content: {}
          description: This PingFederate instance is not deployed in clustered mode.
      summary: Get the cluster configuration settings.
      tags:
      - /cluster
    put:
      operationId: updateClusterSettings
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ClusterSettings'
        description: Configuration for cluster settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterSettings'
          description: Cluster settings updated.
        "403":
          content: {}
          description: This PingFederate instance is not deployed in clustered mode.
      summary: Update the cluster configuration settings.
      tags:
      - /cluster
      x-codegen-request-body-name: body
  /cluster/status:
    get:
      operationId: getClusterStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterStatus'
          description: Success.
        "403":
          content: {}
          description: This PingFederate instance is not deployed in clustered mode.
      summary: Get information on the current status of the cluster.
      tags:
      - /cluster
  /cluster/replicate:
    post:
      operationId: startReplication
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Replication completed successfully.
        "403":
          content: {}
          description: This PingFederate instance is not deployed in clustered mode.
      summary: Replicate configuration updates to all nodes in the cluster.
      tags:
      - /cluster
  /configArchive/import:
    post:
      description: "If there are missing components or license inconsistencies, the\
        \ import is halted by default to allow you to install the necessary components\
        \ or license. However, you can choose to force the deployment by setting 'forceImport'\
        \ to true and then install the necessary files later."
      operationId: importConfigArchive
      parameters:
      - explode: true
        in: query
        name: forceImport
        required: false
        schema:
          type: boolean
        style: form
      - description: Force import of unsupported versions.
        explode: true
        in: query
        name: forceUnsupportedImport
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Reencrypt configuration archive data with the current deployment's
          encryption key.
        explode: true
        in: query
        name: reencryptData
        required: false
        schema:
          default: false
          type: boolean
        style: form
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/importConfigArchive_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Configuration Archive imported.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Import a configuration archive.
      tags:
      - /configArchive
  /configArchive/export:
    get:
      operationId: exportConfigArchive
      responses:
        "200":
          content: {}
          description: Success.
      summary: Export a configuration archive.
      tags:
      - /configArchive
  /configStore/{bundle}/{id}:
    delete:
      description: Delete a setting. This is an advanced operation with minimal validation.
        Incorrect use of this operation can harm the integrity of your PingFederate
        configuration. Please ensure you have specified the correct bundle name and
        setting ID before invoking this operation.
      operationId: deleteConfigStoreSetting
      parameters:
      - description: This field represents a configuration file that contains a bundle
          of settings.
        explode: false
        in: path
        name: bundle
        required: true
        schema:
          type: string
        style: simple
      - description: ID of setting to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Configuration setting deleted.
        "403":
          content: {}
          description: The specified configuration bundle is unavailable.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete a setting.
      tags:
      - /configStore
    get:
      operationId: getConfigStoreSetting
      parameters:
      - description: This field represents a configuration file that contains a bundle
          of settings.
        explode: false
        in: path
        name: bundle
        required: true
        schema:
          type: string
        style: simple
      - description: ID of setting to retrieve.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigStoreSetting'
          description: Success.
        "403":
          content: {}
          description: The specified configuration bundle is unavailable.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get a single setting from a bundle.
      tags:
      - /configStore
    put:
      description: "Create or update a setting/bundle. This is an advanced operation\
        \ with minimal validation. Incorrect use of this operation can harm the integrity\
        \ of your PingFederate configuration. Please ensure you have specified the\
        \ correct bundle name, setting ID, and setting value before invoking this\
        \ operation."
      operationId: updateConfigStoreSetting
      parameters:
      - description: This field represents a configuration file that contains a bundle
          of settings.
        explode: false
        in: path
        name: bundle
        required: true
        schema:
          type: string
        style: simple
      - description: ID of setting to create/update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigStoreSetting'
        description: Configuration setting.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigStoreSetting'
          description: Configuration setting created/updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "403":
          content: {}
          description: The specified configuration bundle is unavailable.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create or update a setting/bundle.
      tags:
      - /configStore
      x-codegen-request-body-name: body
  /configStore/{bundle}:
    get:
      operationId: getConfigStoreSettings
      parameters:
      - description: This field represents a configuration file that contains a bundle
          of settings.
        explode: false
        in: path
        name: bundle
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigStoreBundle'
          description: Success.
        "403":
          content: {}
          description: The specified configuration bundle is unavailable.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get all settings from a bundle.
      tags:
      - /configStore
  /configurationEncryptionKeys:
    get:
      description: The first key in the list is the current key used for encryption
        and decryption. Other keys are used for decryption.
      operationId: getConfigurationEncryptionKeys
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationEncryptionKeys'
          description: Success.
      summary: Get the list of Configuration Encryption Keys.
      tags:
      - /configurationEncryptionKeys
  /configurationEncryptionKeys/rotate:
    post:
      description: A new key will be generated and will be used for encryption and
        decryption. The previous encryption key will continue to be used for decryption.
      operationId: rotateConfigurationEncryptionKey
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationEncryptionKeys'
          description: Configuration encryption key rotated.
      summary: Rotate the current Configuration Encryption Key.
      tags:
      - /configurationEncryptionKeys
  /connectionMetadata/export:
    post:
      operationId: export
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportMetadataRequest'
        description: Export metadata request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Connection SAML metadata exported.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Export a connection's SAML metadata that can be given to a partner.
      tags:
      - /connectionMetadata
      x-codegen-request-body-name: body
  /connectionMetadata/convert:
    post:
      description: "Convert a partner's SAML metadata into an API JSON representation\
        \ that can be later saved using one of the connection creation endpoints.\
        \ The metadata can also be overlaid on top of a specified template connection.\
        \ The convert operation also returns the authenticity of the metadata based\
        \ on its certificate. If a certificate isn't embedded in the metadata, one\
        \ can be provided. Bindings and profiles are only enabled in the resulting\
        \ connection if the partner metadata provides related endpoints. In several\
        \ scenarios, additional connection configuration details (such as backchannel\
        \ authentication) may be required in the connection."
      operationId: convert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvertMetadataRequest'
        description: Convert metadata request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvertMetadataResponse'
          description: Partner's SAML metadata converted.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Convert a partner's SAML metadata into a JSON representation.
      tags:
      - /connectionMetadata
      x-codegen-request-body-name: body
  /idp/connectors/descriptors:
    get:
      operationId: getIdpConnectorDescriptors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaasPluginDescriptors'
          description: Success.
      summary: Get the list of available IdP connector descriptors.
      tags:
      - /idp/connectors
  /idp/connectors/descriptors/{id}:
    get:
      operationId: getIdpConnectorDescriptorById
      parameters:
      - description: the type of connector descriptor to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaasPluginDescriptor'
          description: Success.
      summary: Get the list of available connector descriptors.
      tags:
      - /idp/connectors
  /dataStores/{id}/actions/{actionId}/invokeAction:
    post:
      description: "Invokes an action for a data source instance. A 404 status code\
        \ is returned for nonexistent IDs. If the action produces a download file,\
        \ the file will be returned directly in the response. Otherwise an ActionResult\
        \ will be returned."
      operationId: invokeActionWithOptions
      parameters:
      - description: ID of data store to which these actions belong to.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the action.
        explode: false
        in: path
        name: actionId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionOptions'
        description: Action options for action invoked.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
          description: Action invoked on Data store.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Invokes an action for a data source instance.
      tags:
      - /dataStores
      x-codegen-request-body-name: body
  /dataStores/descriptors:
    get:
      operationId: getCustomDataStoreDescriptors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomDataStoreDescriptors'
          description: Success.
      summary: Get the list of available custom data store descriptors.
      tags:
      - /dataStores
  /dataStores/descriptors/{id}:
    get:
      description: Get the description of a custom data store plugin by ID. A 404
        status code is returned for nonexistent IDs.
      operationId: getCustomDataStoreDescriptor
      parameters:
      - description: ID of custom data store descriptor to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomDataStoreDescriptor'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get the description of a custom data store plugin by ID.
      tags:
      - /dataStores
  /dataStores:
    get:
      operationId: getDataStores
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataStores'
          description: Success.
      summary: Get list of all data stores.
      tags:
      - /dataStores
    post:
      description: "Create a new data store. If the data store is not properly configured,\
        \ a 422 status code is returned along with a list of validation errors that\
        \ must be corrected."
      operationId: createDataStore
      parameters:
      - description: Connection test will be bypassed when set to true. Default to
          false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataStoreAggregation'
        description: Configuration for new data store.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataStoreAggregation'
          description: Data store created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new data store.
      tags:
      - /dataStores
      x-codegen-request-body-name: body
  /dataStores/{id}:
    delete:
      description: "Delete a data store with the specified ID. A 404 status code is\
        \ returned for nonexistent IDs. Note: Only unused data stores can be deleted.\
        \ If the request succeeds, the response body is empty. If the request fails,\
        \ an ApiResult is returned with details of the error."
      operationId: deleteDataStore
      parameters:
      - description: ID of data store instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Data store deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource is in use and cannot be deleted.
      summary: Delete a data store.
      tags:
      - /dataStores
    get:
      description: Get a data store with the specified ID. A 404 status code is returned
        for nonexistent IDs.
      operationId: getDataStore
      parameters:
      - description: ID of data store instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataStoreAggregation'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find data store by ID.
      tags:
      - /dataStores
    put:
      description: "Update a data store with the matching ID. If the data store is\
        \ not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected. Note: A 404 status code is\
        \ returned for nonexistent IDs."
      operationId: updateDataStore
      parameters:
      - description: ID of data store instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Connection test will be bypassed when set to true. Default to
          false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataStoreAggregation'
        description: Configuration for the data store.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataStoreAggregation'
          description: Data store updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update a data store.
      tags:
      - /dataStores
      x-codegen-request-body-name: body
  /dataStores/{id}/actions/{actionId}:
    get:
      description: Find a data store instance's action by ID. A 404 status code is
        returned for nonexistent IDs.
      operationId: getDataStoresActionById
      parameters:
      - description: ID of data store to which these actions belong to.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the action.
        explode: false
        in: path
        name: actionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find a data store instance's action by ID.
      tags:
      - /dataStores
  /dataStores/{id}/actions:
    get:
      description: List the actions for a data store instance. A 404 status code is
        returned for nonexistent IDs.
      operationId: getDataStoresActions
      parameters:
      - description: ID of data store to which these actions belong to.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Actions'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: List the actions for a data store instance.
      tags:
      - /dataStores
  /extendedProperties:
    get:
      operationId: getExtendedProperties
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedProperties'
          description: Success.
      summary: Get the defined Extended Properties.
      tags:
      - /extendedProperties
    put:
      operationId: updateExtendedProperties
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtendedProperties'
        description: Definition of extended properties.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedProperties'
          description: Extended properties updated.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the Extended Properties.
      tags:
      - /extendedProperties
      x-codegen-request-body-name: body
  /identityStoreProvisioners/descriptors:
    get:
      operationId: getIdentityStoreProvisionerDescriptors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityStoreProvisionerDescriptors'
          description: Success.
      summary: Get the list of available identity store provisioner descriptors.
      tags:
      - /identityStoreProvisioners
  /identityStoreProvisioners/descriptors/{id}:
    get:
      operationId: getIdentityStoreProvisionerDescriptorById
      parameters:
      - description: ID of identity store provisioner descriptor
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityStoreProvisionerDescriptor'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get the descriptor of an identity store provisioner by ID.
      tags:
      - /identityStoreProvisioners
  /identityStoreProvisioners:
    get:
      operationId: getIdentityStoreProvisioners
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityStoreProvisioners'
          description: Success.
      summary: Get the list of configured identity store provisioner instances.
      tags:
      - /identityStoreProvisioners
    post:
      operationId: createIdentityStoreProvisioner
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/IdentityStoreProvisioner'
        description: Configuration for the identity store provisioner instance.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityStoreProvisioner'
          description: successful operation
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityStoreProvisioner'
          description: Identity store provisioner created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new identity store provisioner instance.
      tags:
      - /identityStoreProvisioners
      x-codegen-request-body-name: body
  /identityStoreProvisioners/{id}:
    delete:
      operationId: deleteIdentityStoreProvisioner
      parameters:
      - description: ID of identity store provisioner instance
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Identity store provisioner deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource is in use and cannot be deleted.
      summary: Delete an identity store provisioner instance
      tags:
      - /identityStoreProvisioners
    get:
      operationId: getIdentityStoreProvisioner
      parameters:
      - description: ID of identity store provisioner instance
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityStoreProvisioner'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get an identity store provisioner by ID.
      tags:
      - /identityStoreProvisioners
    put:
      operationId: updateIdentityStoreProvisioner
      parameters:
      - description: ID of identity store provisioner instance
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/IdentityStoreProvisioner'
        description: Configuration for the identity store provisioner instance
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityStoreProvisioner'
          description: Identity store provisioner updated
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an identity store provisioner instance
      tags:
      - /identityStoreProvisioners
      x-codegen-request-body-name: body
  /idp/adapters/{id}/actions/{actionId}/invokeAction:
    post:
      description: "Invokes an action for an IdP adapter instance. A 404 status code\
        \ is returned for nonexistent IDs. If the action produces a download file,\
        \ the file will be returned directly in the response. Otherwise an ActionResult\
        \ will be returned."
      operationId: invokeIdpAdaptersActionWithOptions
      parameters:
      - description: ID of the IdP adapter instance to which these actions belongs
          to.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the action.
        explode: false
        in: path
        name: actionId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionOptions'
        description: Action options for action invoked.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
          description: Action invoked on adapter.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Invokes an action for an IdP adapter instance.
      tags:
      - /idp/adapters
      x-codegen-request-body-name: body
  /idp/adapters/descriptors:
    get:
      operationId: getIdpAdapterDescriptors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpAdapterDescriptors'
          description: Success.
      summary: Get the list of available IdP adapter descriptors.
      tags:
      - /idp/adapters
  /idp/adapters/descriptors/{id}:
    get:
      description: Get the description of an IdP adapter plugin by ID. A 404 status
        code is returned for nonexistent IDs.
      operationId: getIdpAdapterDescriptorsById
      parameters:
      - description: ID of IdP adapter descriptor to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpAdapterDescriptor'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get the description of an IdP adapter plugin by ID.
      tags:
      - /idp/adapters
  /idp/adapters:
    get:
      operationId: getIdpAdapters
      parameters:
      - description: Page number to retrieve.
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of adapters per page.
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Filter criteria limits the IdP adapters that are returned to
          only those that match it. The filter criteria is compared to the IdP adapter
          instance name and ID fields. The comparison is a case-insensitive partial
          match. No additional pattern based matching is supported.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpAdapters'
          description: Success.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Get the list of configured IdP adapter instances.
      tags:
      - /idp/adapters
    post:
      description: "Create a new IdP adapter instance. If the IdP adapter is not properly\
        \ configured, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: createIdpAdapter
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/IdpAdapter'
        description: Configuration for the IdP adapter instance.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpAdapter'
          description: Adapter created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new IdP adapter instance.
      tags:
      - /idp/adapters
      x-codegen-request-body-name: body
  /idp/adapters/{id}:
    delete:
      description: "Delete an IdP adapter instance with the specified ID. A 404 status\
        \ code is returned for nonexistent IDs. Note: Only adapters not in use can\
        \ be deleted. If the request succeeds, the response body is empty. If the\
        \ request fails, an ApiResult is returned with details of the error."
      operationId: deleteIdpAdapter
      parameters:
      - description: ID of IdP adapter instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Adapter deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource is in use and cannot be deleted.
      summary: Delete an IdP adapter instance.
      tags:
      - /idp/adapters
    get:
      description: Get the configured IdP adapter instance with the specified ID.
        A 404 status code is returned for nonexistent IDs.
      operationId: getIdpAdapter
      parameters:
      - description: ID of IdP adapter instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpAdapter'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find an IdP adapter instance by ID.
      tags:
      - /idp/adapters
    put:
      description: "Update an IdP adapter instance.If the IdP adapter is not properly\
        \ configured, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: updateIdpAdapter
      parameters:
      - description: ID of IdP adapter instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/IdpAdapter'
        description: Configuration for the IdP adapter instance.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpAdapter'
          description: Adapter updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an IdP adapter instance.
      tags:
      - /idp/adapters
      x-codegen-request-body-name: body
  /idp/adapters/{id}/actions/{actionId}:
    get:
      description: Find an IdP adapter instance's action by ID. A 404 status code
        is returned for nonexistent IDs.
      operationId: getIdpAdaptersActionById
      parameters:
      - description: ID of the IdP adapter instance to which these actions belongs
          to.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the action.
        explode: false
        in: path
        name: actionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find an IdP adapter instance's action by ID.
      tags:
      - /idp/adapters
  /idp/adapters/{id}/actions:
    get:
      description: List the actions for an IdP adapter instance. A 404 status code
        is returned for nonexistent IDs.
      operationId: getIdpAdaptersActions
      parameters:
      - description: ID of the IdP adapter instance to which these actions belongs
          to.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Actions'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: List the actions for an IdP adapter instance.
      tags:
      - /idp/adapters
  /sp/idpConnections/{id}/credentials/signingSettings:
    get:
      operationId: getIdpConnectionSigningSettings
      parameters:
      - description: ID of the IdP Connection.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigningSettings'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get the IdP connection's signature settings.
      tags:
      - /sp/idpConnections
    put:
      operationId: updateIdpConnectionSigningSettings
      parameters:
      - description: ID of the IdP Connection to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SigningSettings'
        description: Signature settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigningSettings'
          description: Connection updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the IdP connection's signature settings.
      tags:
      - /sp/idpConnections
      x-codegen-request-body-name: body
  /sp/idpConnections/{id}/credentials/certs:
    get:
      operationId: getConnectionCerts
      parameters:
      - description: ID of the IdP Connection.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionCerts'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get the IdP connection's certificates.
      tags:
      - /sp/idpConnections
    post:
      description: "If the certificate's activeVerificationCert flag is set to true,\
        \ it will become the connection's primary verification certificate."
      operationId: addConnectionCert
      parameters:
      - description: ID of the IdP Connection to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionCert'
        description: Configuration for a verification certificate.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionCert'
          description: Connection Certificate added.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Add a new IdP connection certificate.
      tags:
      - /sp/idpConnections
      x-codegen-request-body-name: body
    put:
      operationId: updateConnectionCerts
      parameters:
      - description: ID of the IdP Connection to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionCerts'
        description: Configuration for a verification certificates.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionCerts'
          description: Connection updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the IdP connection's certificates.
      tags:
      - /sp/idpConnections
      x-codegen-request-body-name: body
  /sp/idpConnections/{id}/credentials/decryptionKeys:
    get:
      operationId: getIdpConnectionsDecryptionKeys
      parameters:
      - description: ID of the IdP Connection to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecryptionKeys'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get the decryption keys of an IdP connection.
      tags:
      - /sp/idpConnections
    put:
      operationId: updateIdpConnectionsDecryptionKeys
      parameters:
      - description: ID of the IdP Connection to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DecryptionKeys'
        description: Configuration for decryption keys.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecryptionKeys'
          description: Connection updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Updating the IdP connection's decryption keys.
      tags:
      - /sp/idpConnections
      x-codegen-request-body-name: body
  /sp/idpConnections/{id}:
    delete:
      description: "Delete an IdP connection with the specified ID. A 404 status code\
        \ is returned for nonexistent IDs. Note: Only inactive connections can be\
        \ deleted. If the request succeeds, the response body is empty. If the request\
        \ fails, an ApiResult is returned with details of the error."
      operationId: deleteConnection
      parameters:
      - description: ID of IdP Connection to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Connection deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource is in use and cannot be deleted.
      summary: Delete an IdP connection.
      tags:
      - /sp/idpConnections
    get:
      description: Get a SAML 2.0 IdP connection with the specified ID. A 404 status
        code is returned for nonexistent IDs.
      operationId: getConnection
      parameters:
      - description: ID of IdP Connection to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpConnection'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find IdP connection by ID.
      tags:
      - /sp/idpConnections
    put:
      description: "Update an IdP connection with the matching ID. If the IdP connection\
        \ is not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected. Note: A 404 status code is\
        \ returned for nonexistent IDs."
      operationId: updateConnection
      parameters:
      - description: ID of IdP Connection to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdpConnection'
        description: Configuration for updated connection.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpConnection'
          description: Connection updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an IdP connection.
      tags:
      - /sp/idpConnections
      x-codegen-request-body-name: body
  /sp/idpConnections:
    get:
      description: "Get a list of all the OIDC, WS-Trust, WS-Fed, SAML1.0, SAML1.1\
        \ and SAML 2.0 IdP connections."
      operationId: getConnections
      parameters:
      - description: Entity ID of the connection to fetch. (case-sensitive)
        explode: true
        in: query
        name: entityId
        required: false
        schema:
          type: string
        style: form
      - description: Page number to retrieve.
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of connections per page.
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Filter criteria limits the IdP connections that are returned
          to only those that match it. The filter criteria is compared to the IdP
          connection name and partner entity ID fields. The comparison is a case-insensitive
          partial match. No additional pattern based matching is supported.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpConnections'
          description: Success.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Get list of IdP connections.
      tags:
      - /sp/idpConnections
    post:
      description: "Create a new IdP connection. If the IdP connection is not properly\
        \ configured, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: createConnection
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdpConnection'
        description: Configuration for new connection.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpConnection'
          description: Connection created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new IdP connection.
      tags:
      - /sp/idpConnections
      x-codegen-request-body-name: body
  /idp/defaultUrls:
    get:
      operationId: getDefaultUrl
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpDefaultUrl'
          description: Success.
      summary: Gets the IDP Default URL settings.
      tags:
      - /idp/defaultUrls
    put:
      operationId: updateDefaultUrlSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdpDefaultUrl'
        description: Configuration for the IdP Default URL settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpDefaultUrl'
          description: Default URL updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the IDP Default URL settings.
      tags:
      - /idp/defaultUrls
      x-codegen-request-body-name: body
  /idpToSpAdapterMapping:
    get:
      operationId: getIdpToSpAdapterMappings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpToSpAdapterMappings'
          description: Success.
      summary: Get list of IdP-to-SP Adapter Mappings.
      tags:
      - /idpToSpAdapterMapping
    post:
      operationId: createIdpToSpAdapterMapping
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdpToSpAdapterMapping'
        description: Configuration for new IdP-to-SP Adapter Mapping.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpToSpAdapterMapping'
          description: IdP-to-SP adapter mapping created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new IdP-to-SP Adapter mapping.
      tags:
      - /idpToSpAdapterMapping
      x-codegen-request-body-name: body
  /idpToSpAdapterMapping/{id}:
    delete:
      operationId: deleteIdpToSpAdapterMappingsById
      parameters:
      - description: ID of the IdP-to-SP Adapter Mapping to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: IdP-to-SP adapter mapping deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete an Adapter to Adapter Mapping.
      tags:
      - /idpToSpAdapterMapping
    get:
      operationId: getIdpToSpAdapterMappingsById
      parameters:
      - description: ID of IdP-to-SP Adapter Mapping to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpToSpAdapterMapping'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get an IdP-to-SP Adapter Mapping.
      tags:
      - /idpToSpAdapterMapping
    put:
      operationId: updateIdpToSpAdapterMapping
      parameters:
      - description: ID of source adapter in the IdP-to-SP Adapter Mapping to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdpToSpAdapterMapping'
        description: Configuration for updated IdP-to-SP Adapter Mapping.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpToSpAdapterMapping'
          description: IdP-to-SP adapter mapping updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the specified IdP-to-SP Adapter mapping.
      tags:
      - /idpToSpAdapterMapping
      x-codegen-request-body-name: body
  /incomingProxySettings:
    get:
      description: "When PingFederate is deployed behind a proxy server or load balancer,\
        \ use information in HTTP headers added by the proxy server to construct correct\
        \ responses."
      operationId: getIncomingProxySettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomingProxySettings'
          description: Success.
      summary: Get incoming proxy settings.
      tags:
      - /incomingProxySettings
    put:
      description: "When PingFederate is deployed behind a proxy server or load balancer,\
        \ use information in HTTP headers added by the proxy server to construct correct\
        \ responses."
      operationId: updateIncomingProxySettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncomingProxySettings'
        description: Incoming proxy settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomingProxySettings'
          description: Incoming proxy settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update incoming proxy settings.
      tags:
      - /incomingProxySettings
      x-codegen-request-body-name: body
  /kerberos/realms/settings:
    get:
      operationId: getKerberosRealmSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KerberosRealmsSettings'
          description: Success.
      summary: Gets the Kerberos Realms Settings.
      tags:
      - /kerberos/realms
    put:
      operationId: updateKerberosRealmSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KerberosRealmsSettings'
        description: Kerberos Realms Settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KerberosRealmsSettings'
          description: Settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Set/Update the Kerberos Realms Settings.
      tags:
      - /kerberos/realms
      x-codegen-request-body-name: body
  /kerberos/realms:
    get:
      operationId: getKerberosRealms
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KerberosRealms'
          description: Success.
      summary: Gets the Kerberos Realms.
      tags:
      - /kerberos/realms
    post:
      description: "Create a new Kerberos Realm. If the Kerberos Realm is not properly\
        \ configured, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: createKerberosRealm
      parameters:
      - description: External validation will be bypassed when set to true. Defaults
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KerberosRealm'
        description: Configuration for new policy.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KerberosRealm'
          description: Kerberos realm created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new Kerberos Realm.
      tags:
      - /kerberos/realms
      x-codegen-request-body-name: body
  /kerberos/realms/{id}:
    delete:
      description: "Delete a Kerberos Realm with the specified ID. A 404 status code\
        \ is returned for nonexistent IDs. Note: If the request succeeds, the response\
        \ body is empty. If the request fails, an ApiResult is returned with details\
        \ of the error."
      operationId: deleteKerberosRealm
      parameters:
      - description: ID of Kerberos Realm to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Kerberos realm deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Delete a Kerberos Realm.
      tags:
      - /kerberos/realms
    get:
      description: Get a Kerberos Realm with the specified ID. A 404 status code is
        returned for nonexistent IDs.
      operationId: getKerberosRealm
      parameters:
      - description: ID of the Kerberos Realm to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KerberosRealm'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find a Kerberos Realm by ID.
      tags:
      - /kerberos/realms
    put:
      description: Update a Kerberos Realm with the specified ID. A 404 status code
        is returned for nonexistent IDs.
      operationId: updateKerberosRealm
      parameters:
      - description: ID of the Kerberos Realm to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: External validation will be bypassed when set to true. Defaults
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/KerberosRealm'
        description: Configuration for updated Domain/Realm.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KerberosRealm'
          description: Kerberos realm updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update a Kerberos Realm by ID.
      tags:
      - /kerberos/realms
      x-codegen-request-body-name: body
  /license:
    get:
      operationId: getLicense
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseView'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Get a license summary.
      tags:
      - /license
    put:
      operationId: updateLicense
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/LicenseFile'
        description: Base64 encoded value of a license.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseView'
          description: License imported.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Import a license.
      tags:
      - /license
      x-codegen-request-body-name: body
  /license/agreement:
    get:
      description: The license agreement has to be accepted before performing any
        other API calls.
      operationId: getLicenseAgreement
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseAgreementInfo'
          description: Success.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Get license agreement link.
      tags:
      - /license
    put:
      description: The license agreement has to be accepted before performing any
        other API calls.
      operationId: updateLicenseAgreement
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/LicenseAgreementInfo'
        description: License Agreement reference.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseAgreementInfo'
          description: License agreement accepted.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Accept license agreement.
      tags:
      - /license
      x-codegen-request-body-name: body
  /localIdentity/identityProfiles/{id}:
    delete:
      description: "Delete a local identity profile with the specified ID. A 404 status\
        \ code is returned for nonexistent IDs. Note: If the request succeeds, the\
        \ response body is empty. If the request fails, an ApiResult is returned with\
        \ details of the error."
      operationId: deleteIdentityProfile
      parameters:
      - description: ID of the profile to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Local identity profile deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Delete the local identity profile by ID.
      tags:
      - /localIdentity/identityProfiles
    get:
      description: Get a local identity profile with the specified ID. A 404 status
        code is returned for nonexistent IDs.
      operationId: getIdentityProfile
      parameters:
      - description: ID of profile to fetch
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalIdentityProfile'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get the local identity profile by ID.
      tags:
      - /localIdentity/identityProfiles
    put:
      description: Update a local identity profile with the specified ID. A 404 status
        code is returned for nonexistent IDs.
      operationId: updateIdentityProfile
      parameters:
      - description: ID of the profile to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/LocalIdentityProfile'
        description: Configuration for updated local identity profile.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalIdentityProfile'
          description: Local identity profile updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the local identity profile by ID.
      tags:
      - /localIdentity/identityProfiles
      x-codegen-request-body-name: body
  /localIdentity/identityProfiles:
    get:
      operationId: getIdentityProfiles
      parameters:
      - description: Page number to retrieve.
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of local identity profiles per page.
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Filter criteria limits the local identity profiles that are returned
          to only those that match it. The filter criteria is compared to the local
          identity profile name and ID fields. The comparison is a case-insensitive
          partial match. No additional pattern based matching is supported.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Filter the local identity profiles by matching policy contract
          ID.
        explode: true
        in: query
        name: apcId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalIdentityProfiles'
          description: Success.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Get the list of configured local identity profiles.
      tags:
      - /localIdentity/identityProfiles
    post:
      description: "Create a new local identity profile. If the local identity profile\
        \ is not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected."
      operationId: createIdentityProfile
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalIdentityProfile'
        description: Configuration for a new profile.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalIdentityProfile'
          description: Local identity profile created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new local identity profile.
      tags:
      - /localIdentity/identityProfiles
      x-codegen-request-body-name: body
  /metadataUrls:
    get:
      operationId: getMetadataUrls
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataUrls'
          description: Success.
      summary: Get a list of Metadata URLs
      tags:
      - /metadataUrls
    post:
      description: "Add a new Metadata URL. If the Metadata URL is not properly configured,\
        \ a 422 status code is returned along with a list of validation errors that\
        \ must be corrected."
      operationId: addMetadataUrl
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataUrl'
        description: Configuration for a new Metadata URL.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataUrl'
          description: Metadata URL added.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Add a new Metadata URL.
      tags:
      - /metadataUrls
      x-codegen-request-body-name: body
  /metadataUrls/{id}:
    delete:
      description: "Delete Metadata URL with the specified ID. A 404 status code is\
        \ returned for nonexistent IDs. Note: If the request succeeds, the response\
        \ body is empty. If the request fails, an ApiResult is returned with details\
        \ of the error."
      operationId: deleteMetadataUrl
      parameters:
      - description: ID of Metadata URL to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Metadata URL deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource is in use and cannot be deleted.
      summary: Delete a Metadata URL by ID.
      tags:
      - /metadataUrls
    get:
      description: Get a Metadata URL with the specified ID. A 404 status code is
        returned for nonexistent IDs
      operationId: getMetadataUrl
      parameters:
      - description: ID of Metadata URL to fetch
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataUrl'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get a Metadata URL by ID.
      tags:
      - /metadataUrls
    put:
      description: "Update a Metadata URL by ID. If the Metadata URL is not properly\
        \ configured, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: updateMetadataUrl
      parameters:
      - description: ID of the Metadata URL to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataUrl'
        description: Configuration for the Metadata URL.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataUrl'
          description: Metadata URL updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update a Metadata URL by ID.
      tags:
      - /metadataUrls
      x-codegen-request-body-name: body
  /notificationPublishers/descriptors:
    get:
      operationId: getNotificationPublisherPluginDescriptors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPublisherDescriptors'
          description: Success.
      summary: Get the list of available Notification Publisher Plugin descriptors.
      tags:
      - /notificationPublishers
  /notificationPublishers/descriptors/{id}:
    get:
      operationId: getNotificationPublisherPluginDescriptor
      parameters:
      - description: ID of notification publisher plugin descriptor.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPublisherDescriptor'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get the description of a notification publisher plugin descriptor.
      tags:
      - /notificationPublishers
  /notificationPublishers/settings:
    get:
      operationId: getNotificationPublishersSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPublishersSettings'
          description: Success.
      summary: Get general notification publisher settings.
      tags:
      - /notificationPublishers
    put:
      operationId: updateNotificationPublishersSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationPublishersSettings'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPublishersSettings'
          description: Notification publisher settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update general notification publisher settings.
      tags:
      - /notificationPublishers
      x-codegen-request-body-name: body
  /notificationPublishers:
    get:
      operationId: getNotificationPublishers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPublishers'
          description: Success.
      summary: Get a list of notification publisher plugin instances.
      tags:
      - /notificationPublishers
    post:
      operationId: createNotificationPublisher
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationPublisher'
        description: Configuration for a notification publisher plugin instance.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPublisher'
          description: Notification Publisher plugin created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a notification publisher plugin instance.
      tags:
      - /notificationPublishers
      x-codegen-request-body-name: body
  /notificationPublishers/{id}:
    delete:
      operationId: deleteNotificationPublisher
      parameters:
      - description: ID of a notification publisher plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Notification Publisher plugin deleted.
        "403":
          content: {}
          description: "The operation is not permitted, based on the current configuration\
            \ of the server."
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete a notification publisher plugin instance.
      tags:
      - /notificationPublishers
    get:
      operationId: getNotificationPublisher
      parameters:
      - description: ID of a notification publisher plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPublisher'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get a specific notification publisher plugin instance.
      tags:
      - /notificationPublishers
    put:
      operationId: updateNotificationPublisher
      parameters:
      - description: ID of a notification publisher plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationPublisher'
        description: Configuration for a notification publisher plugin instance.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPublisher'
          description: Notification Publisher plugin updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update a notification publisher plugin instance.
      tags:
      - /notificationPublishers
      x-codegen-request-body-name: body
  /notificationPublishers/{id}/actions/{actionId}/invokeAction:
    post:
      operationId: invokeNotificationPublishersActionWithOptions
      parameters:
      - description: ID of the notification publisher plugin instance to which these
          actions belongs to.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the action to get.
        explode: false
        in: path
        name: actionId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionOptions'
        description: Action options for action invoked.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
          description: Notification Publisher plugin action invoked.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Invokes an action for notification publisher plugin instance.
      tags:
      - /notificationPublishers
      x-codegen-request-body-name: body
  /notificationPublishers/{id}/actions/{actionId}:
    get:
      operationId: getNotificationPublishersAction
      parameters:
      - description: ID of the notification publisher plugin instance to which these
          actions belongs to.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the action to get.
        explode: false
        in: path
        name: actionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find an notification publisher plugin instance's action by ID.
      tags:
      - /notificationPublishers
  /notificationPublishers/{id}/actions:
    get:
      operationId: getNotificationPublisherActions
      parameters:
      - description: ID of the notification publisher plugin instance to which these
          actions belongs to.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Actions'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: List the actions for a notification publisher plugin instance.
      tags:
      - /notificationPublishers
  /oauth/authenticationPolicyContractMappings:
    get:
      operationId: getApcMappings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApcToPersistentGrantMappings'
          description: Success.
      summary: Get the list of authentication policy contract to persistent grant
        mappings.
      tags:
      - /oauth/authenticationPolicyContractMappings
    post:
      description: "Create a new authentication policy contract to persistent grant\
        \ mapping. If a mapping can't be created, a 422 status code is returned along\
        \ with a list of validation errors that must be corrected."
      operationId: createApcMapping
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApcToPersistentGrantMapping'
        description: Configuration for an authentication policy contract to persistent
          grant mapping.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApcToPersistentGrantMapping'
          description: Authentication policy contract to persistent grant mapping
            created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new authentication policy contract to persistent grant mapping.
      tags:
      - /oauth/authenticationPolicyContractMappings
      x-codegen-request-body-name: body
  /oauth/authenticationPolicyContractMappings/{id}:
    delete:
      operationId: deleteApcMapping
      parameters:
      - description: ID of the authentication policy contract to persistent grant
          mapping.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Authentication policy contract to persistent grant mapping
            deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete an authentication policy contract to persistent grant mapping.
      tags:
      - /oauth/authenticationPolicyContractMappings
    get:
      operationId: getApcMapping
      parameters:
      - description: ID of the authentication policy contract to persistent grant
          mapping.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApcToPersistentGrantMapping'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find the authentication policy contract to persistent grant mapping
        by ID.
      tags:
      - /oauth/authenticationPolicyContractMappings
    put:
      operationId: updateApcMapping
      parameters:
      - description: ID of the authentication policy contract to persistent grant
          mapping to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApcToPersistentGrantMapping'
        description: Configuration for an authentication policy contract to persistent
          grant mapping.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApcToPersistentGrantMapping'
          description: Authentication policy contract to persistent grant mapping
            updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an authentication policy contract to persistent grant mapping.
      tags:
      - /oauth/authenticationPolicyContractMappings
      x-codegen-request-body-name: body
  /oauth/cibaServerPolicy/settings:
    get:
      operationId: getCibaServerPolicySettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CibaServerPolicySettings'
          description: Success.
      summary: Get general ciba server request policy settings.
      tags:
      - /oauth/cibaServerPolicy
    put:
      operationId: updateCibaServerPolicySettings
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CibaServerPolicySettings'
        description: Ciba server request policy settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CibaServerPolicySettings'
          description: Settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update general ciba server request policy settings.
      tags:
      - /oauth/cibaServerPolicy
      x-codegen-request-body-name: body
  /oauth/cibaServerPolicy/requestPolicies/{id}:
    delete:
      description: "Delete a request policy with the specified ID. A 404 status code\
        \ is returned for nonexistent IDs. Note: If the request succeeds, the response\
        \ body is empty. If the request fails, an ApiResult is returned with details\
        \ of the error."
      operationId: deleteCibaServerPolicy
      parameters:
      - description: ID of request policy to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Request Handling Policy deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Delete a request policy.
      tags:
      - /oauth/cibaServerPolicy
    get:
      description: Get a request policy with the specified ID. A 404 status code is
        returned for nonexistent IDs.
      operationId: getCibaServerPolicyById
      parameters:
      - description: ID of the request policy to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestPolicy'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find request policy by ID.
      tags:
      - /oauth/cibaServerPolicy
    put:
      description: "Update a request policy with the matching ID. If the policy is\
        \ not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected. Note: A 404 status code is\
        \ returned for nonexistent IDs."
      operationId: updateCibaServerPolicy
      parameters:
      - description: ID of the request policy to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPolicy'
        description: Configuration for updated policy.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestPolicy'
          description: Request Handling Policy updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update a request policy.
      tags:
      - /oauth/cibaServerPolicy
      x-codegen-request-body-name: body
  /oauth/cibaServerPolicy/requestPolicies:
    get:
      operationId: getCibaServerPolicies
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestPolicies'
          description: Success.
      summary: Get list of request policies.
      tags:
      - /oauth/cibaServerPolicy
    post:
      description: "Create a new request policy. If the request policy is not properly\
        \ configured, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: createCibaServerPolicy
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPolicy'
        description: Configuration for new policy.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestPolicy'
          description: Request Handling Policy created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new request policy.
      tags:
      - /oauth/cibaServerPolicy
      x-codegen-request-body-name: body
  /oauth/clients/{id}/clientAuth/clientSecret:
    get:
      operationId: getOauthClientSecret
      parameters:
      - description: ID of the client.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientSecret'
          description: Success.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Get the client secret of an existing OAuth client.
      tags:
      - /oauth/clients
    put:
      operationId: updateOauthClientSecret
      parameters:
      - description: ID of the client to be updated.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientSecret'
        description: Client Secret.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientSecret'
          description: Client updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the client secret of an existing OAuth client.
      tags:
      - /oauth/clients
      x-codegen-request-body-name: body
  /oauth/clients:
    get:
      operationId: getOauthClients
      parameters:
      - description: Page number to retrieve.
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of OAuth clients per page. (uncapped if unspecified)
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Filter criteria limits the OAuth clients that are returned to
          only those that match it. The filter criteria is compared to the OAuth client
          name and ID fields. The comparison is a case-insensitive partial match.
          No additional pattern based matching is supported.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clients'
          description: Success.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Get the list of OAuth clients.
      tags:
      - /oauth/clients
    post:
      description: "Create a new OAuth client. If an OAuth client can't be created,\
        \ a 422 status code is returned along with a list of validation errors that\
        \ must be corrected."
      operationId: createOauthClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
        description: Configuration for new client.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
          description: Client created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new OAuth client.
      tags:
      - /oauth/clients
      x-codegen-request-body-name: body
  /oauth/clients/{id}:
    delete:
      operationId: deleteOauthClient
      parameters:
      - description: ID of the client.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Client deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource is in use and cannot be deleted.
      summary: Delete an OAuth client.
      tags:
      - /oauth/clients
    get:
      operationId: getOauthClientById
      parameters:
      - description: ID of the client.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find the OAuth client by ID.
      tags:
      - /oauth/clients
    put:
      operationId: updateOauthClient
      parameters:
      - description: ID of the client to be updated.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
        description: Configuration for the client.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
          description: Client updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Updates the OAuth client.
      tags:
      - /oauth/clients
      x-codegen-request-body-name: body
  /oauth/clientSettings:
    get:
      operationId: getOauthClientSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientSettings'
          description: Success.
      summary: Configure the client settings.
      tags:
      - /oauth/clientSettings
    put:
      operationId: updateOauthClientSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientSettings'
        description: Configuration for client settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientSettings'
          description: Client Settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the client settings.
      tags:
      - /oauth/clientSettings
      x-codegen-request-body-name: body
  /oauth/clientRegistrationPolicies/descriptors:
    get:
      operationId: getDynamicClientRegistrationDescriptors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRegistrationPolicyDescriptors'
          description: Success.
      summary: Get the list of available client registration policy plugin descriptors.
      tags:
      - /oauth/clientRegistrationPolicies
  /oauth/clientRegistrationPolicies/descriptors/{id}:
    get:
      operationId: getDynamicClientRegistrationDescriptor
      parameters:
      - description: ID of client registration policy plugin descriptor.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRegistrationPolicyDescriptor'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get the description of a client registration policy plugin descriptor.
      tags:
      - /oauth/clientRegistrationPolicies
  /oauth/clientRegistrationPolicies:
    get:
      operationId: getDynamicClientRegistrationPolicies
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRegistrationPolicies'
          description: Success.
      summary: Get a list of client registration policy plugin instances.
      tags:
      - /oauth/clientRegistrationPolicies
    post:
      operationId: createDynamicClientRegistrationPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRegistrationPolicy'
        description: Configuration for a client registration policy plugin instance.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRegistrationPolicy'
          description: Client Registration Policy plugin created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a client registration policy plugin instance.
      tags:
      - /oauth/clientRegistrationPolicies
      x-codegen-request-body-name: body
  /oauth/clientRegistrationPolicies/{id}:
    delete:
      operationId: deleteDynamicClientRegistrationPolicy
      parameters:
      - description: ID of a client registration policy plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Client Registration Policy plugin deleted.
        "403":
          content: {}
          description: "The operation is not permitted, based on the current configuration\
            \ of the server."
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete a client registration policy plugin instance.
      tags:
      - /oauth/clientRegistrationPolicies
    get:
      operationId: getDynamicClientRegistrationPolicy
      parameters:
      - description: ID of client registration policy plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRegistrationPolicy'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get a specific client registration policy plugin instance.
      tags:
      - /oauth/clientRegistrationPolicies
    put:
      operationId: updateDynamicClientRegistrationPolicy
      parameters:
      - description: ID of a client registration policy plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRegistrationPolicy'
        description: Configuration for a client registration policy plugin instance.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRegistrationPolicy'
          description: Client Registration Policy plugin updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update a client registration policy plugin instance.
      tags:
      - /oauth/clientRegistrationPolicies
      x-codegen-request-body-name: body
  /oauth/idpAdapterMappings:
    get:
      operationId: getIdpAdapterMappings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpAdapterMappings'
          description: Success.
      summary: Get the list of IdP adapter mappings.
      tags:
      - /oauth/idpAdapterMappings
    post:
      description: "Create a new IdP adapter mapping. If an IdP adapter mapping can't\
        \ be created, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: createIdpAdapterMapping
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdpAdapterMapping'
        description: Configuration for IdP adapter mapping.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpAdapterMapping'
          description: IdP adapter mapping created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new IdP adapter mapping.
      tags:
      - /oauth/idpAdapterMappings
      x-codegen-request-body-name: body
  /oauth/idpAdapterMappings/{id}:
    delete:
      operationId: deleteIdpAdapterMapping
      parameters:
      - description: ID of the IdP adapter mapping.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: IdP adapter mapping deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete an IdP adapter mapping.
      tags:
      - /oauth/idpAdapterMappings
    get:
      operationId: getIdpAdapterMapping
      parameters:
      - description: ID of the adapter mapping.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpAdapterMapping'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find the IdP adapter mapping by the ID.
      tags:
      - /oauth/idpAdapterMappings
    put:
      operationId: updateIdpAdapterMapping
      parameters:
      - description: ID of the IdP adapter mapping to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdpAdapterMapping'
        description: Configuration for IdP adapter mapping.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpAdapterMapping'
          description: IdP adapter mapping updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an IdP adapter mapping.
      tags:
      - /oauth/idpAdapterMappings
      x-codegen-request-body-name: body
  /oauth/outOfBandAuthPlugins/{id}/actions/{actionId}/invokeAction:
    post:
      operationId: invokeOOBActionWithOptions
      parameters:
      - description: ID of the Out of Band authenticator plugin instance to which
          these actions belongs to.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the action.
        explode: false
        in: path
        name: actionId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionOptions'
        description: Action options for action invoked.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
          description: Action invoked on Out of Band authenticator.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Invokes an action for Out of Band authenticator plugin instance.
      tags:
      - /oauth/outOfBandAuthPlugins
      x-codegen-request-body-name: body
  /oauth/outOfBandAuthPlugins/descriptors:
    get:
      operationId: getOOBAuthPluginDescriptors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutOfBandAuthPluginDescriptors'
          description: Success.
      summary: Get the list of available Out of Band authenticator plugin descriptors.
      tags:
      - /oauth/outOfBandAuthPlugins
  /oauth/outOfBandAuthPlugins/descriptors/{id}:
    get:
      operationId: getOOBAuthPluginDescriptor
      parameters:
      - description: ID of an Out of Band authenticator plugin descriptor.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutOfBandAuthPluginDescriptor'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get the descriptor of an Out of Band authenticator plugin.
      tags:
      - /oauth/outOfBandAuthPlugins
  /oauth/outOfBandAuthPlugins:
    get:
      operationId: getOOBAuthenticators
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutOfBandAuthenticators'
          description: Success.
      summary: Get a list of Out of Band authenticator plugin instances.
      tags:
      - /oauth/outOfBandAuthPlugins
    post:
      operationId: createOOBAuthenticator
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OutOfBandAuthenticator'
        description: Configuration for an Out of Band authenticator plugin instance.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutOfBandAuthenticator'
          description: Out of Band Authenticator created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create an Out of Band authenticator plugin instance.
      tags:
      - /oauth/outOfBandAuthPlugins
      x-codegen-request-body-name: body
  /oauth/outOfBandAuthPlugins/{id}:
    delete:
      operationId: deleteOOBAuthenticator
      parameters:
      - description: ID of Out of Band authenticator plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Out of Band Authenticator deleted.
        "403":
          content: {}
          description: "The operation is not permitted, based on the current configuration\
            \ of the server."
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete an Out of Band authenticator plugin instance.
      tags:
      - /oauth/outOfBandAuthPlugins
    get:
      operationId: getOOBAuthenticator
      parameters:
      - description: ID of Out of Band authenticator plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutOfBandAuthenticator'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get a specific Out of Band authenticator plugin instance.
      tags:
      - /oauth/outOfBandAuthPlugins
    put:
      operationId: updateOOBAuthenticator
      parameters:
      - description: ID of Out of Band authenticator plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OutOfBandAuthenticator'
        description: Configuration for an Out of Band authenticator plugin instance.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutOfBandAuthenticator'
          description: Out of Band Authenticator updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an Out of Band authenticator plugin instance.
      tags:
      - /oauth/outOfBandAuthPlugins
      x-codegen-request-body-name: body
  /oauth/outOfBandAuthPlugins/{id}/actions/{actionId}:
    get:
      operationId: getOOBAction
      parameters:
      - description: ID of the Out of Band authenticator plugin instance to which
          these actions belongs to.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the action.
        explode: false
        in: path
        name: actionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find an Out of Band authenticator plugin instance's action by ID.
      tags:
      - /oauth/outOfBandAuthPlugins
  /oauth/outOfBandAuthPlugins/{id}/actions:
    get:
      operationId: getOOBActions
      parameters:
      - description: ID of the Out of Band authenticator plugin instance to which
          these actions belongs to.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Actions'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: List of actions for an Out of Band authenticator plugin instance.
      tags:
      - /oauth/outOfBandAuthPlugins
  /keyPairs/oauthOpenIdConnect:
    get:
      operationId: getOauthOidcKeysSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthOidcKeysSettings'
          description: Success.
      summary: Retrieve OAuth/OpenID Connect key settings.
      tags:
      - /keyPairs/oauthOpenIdConnect
    put:
      operationId: updateOAuthOidcKeysSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthOidcKeysSettings'
        description: OAuth and OpenID Connect static key settings
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthOidcKeysSettings'
          description: OAuth/Open ID Connect key settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update OAuth/OpenID Connect key settings.
      tags:
      - /keyPairs/oauthOpenIdConnect
      x-codegen-request-body-name: body
  /keyPairs/oauthOpenIdConnect/additionalKeySets/{id}:
    delete:
      operationId: deleteKeySet
      parameters:
      - description: ID of an additional key set to be deleted.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: OAuth/OpenID Connect key set deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete an existing OAuth/OpenID Connect additional signing key set.
      tags:
      - /keyPairs/oauthOpenIdConnect
    get:
      operationId: getKeySet
      parameters:
      - description: ID of an OAuth/OpenID Connect additional signing key set to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalKeySet'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Retrieve an OAuth/OpenID Connect additional signing key set.
      tags:
      - /keyPairs/oauthOpenIdConnect
    put:
      description: "Update an existing OAuth/OpenID Connect additional signing key\
        \ set.  If not properly configured, a 422 status code is returned along with\
        \ a list of validation errors that must be corrected."
      operationId: updateKeySet
      parameters:
      - description: ID of an OAuth/OpenID Connect additional signing key set to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdditionalKeySet'
        description: Configuration for updated OAuth/OpenID Connect additional signing
          key set.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalKeySet'
          description: OAuth/OpenID Connect key set updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an existing OAuth/OpenID Connect additional signing key set.
      tags:
      - /keyPairs/oauthOpenIdConnect
      x-codegen-request-body-name: body
  /keyPairs/oauthOpenIdConnect/additionalKeySets:
    get:
      operationId: getKeySets
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalKeySets'
          description: Success.
      summary: Retrieve OAuth/OpenID Connect additional signing key sets.
      tags:
      - /keyPairs/oauthOpenIdConnect
    post:
      description: "Create a new OAuth/OpenID Connect additional signing key set.\
        \  If not properly configured, a 422 status code is returned along with a\
        \ list of validation errors that must be corrected."
      operationId: createKeySet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdditionalKeySet'
        description: Configuration for a new signing key set.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalKeySet'
          description: OAuth/OpenID Connect key set created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new OAuth/OpenID Connect additional signing key set.
      tags:
      - /keyPairs/oauthOpenIdConnect
      x-codegen-request-body-name: body
  /oauth/resourceOwnerCredentialsMappings:
    get:
      operationId: getResourceOwnerCredentialsMappings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceOwnerCredentialsMappings'
          description: Success.
      summary: Get the list of Resource Owner Credentials Grant Mapping.
      tags:
      - /oauth/resourceOwnerCredentialsMappings
    post:
      description: "Create a new Resource Owner Credentials mapping. If a Resource\
        \ Owner Credentials mapping can't be created, a 422 status code is returned\
        \ along with a list of validation errors that must be corrected."
      operationId: createResourceOwnerCredentialsMapping
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceOwnerCredentialsMapping'
        description: Configuration for Resource Owner Credentials mapping.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceOwnerCredentialsMapping'
          description: Resource owner credentials mapping created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new Resource Owner Credentials mapping.
      tags:
      - /oauth/resourceOwnerCredentialsMappings
      x-codegen-request-body-name: body
  /oauth/resourceOwnerCredentialsMappings/{id}:
    delete:
      operationId: deleteResourceOwnerCredentialsMapping
      parameters:
      - description: ID of the Resource Owner Credentials mapping.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Resource owner credentials mapping deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete a Resource Owner Credentials mapping.
      tags:
      - /oauth/resourceOwnerCredentialsMappings
    get:
      operationId: getResourceOwnerCredentialsMapping
      parameters:
      - description: ID of the Resource Owner Credentials mapping.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceOwnerCredentialsMapping'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find the Resource Owner Credentials mapping by the ID.
      tags:
      - /oauth/resourceOwnerCredentialsMappings
    put:
      operationId: updateResourceOwnerCredentialsMapping
      parameters:
      - description: ID of the Resource Owner Credentials mapping to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceOwnerCredentialsMapping'
        description: Configuration for Resource Owner Credentials mapping.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceOwnerCredentialsMapping'
          description: Resource owner credentials mapping updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update a Resource Owner Credentials mapping.
      tags:
      - /oauth/resourceOwnerCredentialsMappings
      x-codegen-request-body-name: body
  /oauth/openIdConnect/settings:
    get:
      operationId: getOIDCSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenIdConnectSettings'
          description: Success.
      summary: Get the OpenID Connect Settings.
      tags:
      - /oauth/openIdConnect
    put:
      operationId: updateOIDCSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenIdConnectSettings'
        description: OpenID Connect Settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenIdConnectSettings'
          description: Settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Set the OpenID Connect Settings.
      tags:
      - /oauth/openIdConnect
      x-codegen-request-body-name: body
  /oauth/openIdConnect/policies/{id}:
    delete:
      description: "Delete an OpenID Connect Policy with the specified ID. A 404 status\
        \ code is returned for nonexistent IDs. Note: If the request succeeds, the\
        \ response body is empty. If the request fails, an ApiResult is returned with\
        \ details of the error."
      operationId: deleteOIDCPolicy
      parameters:
      - description: ID of OpenID Connect Policy to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Policy deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Delete an OpenID Connect Policy.
      tags:
      - /oauth/openIdConnect
    get:
      description: Get an OpenID Connect Policy with the specified ID. A 404 status
        code is returned for nonexistent IDs.
      operationId: getOIDCPolicy
      parameters:
      - description: ID of the OpenID Connect Policy to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenIdConnectPolicy'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find OpenID Connect Policy by ID.
      tags:
      - /oauth/openIdConnect
    put:
      description: "Update an OpenID Connect Policy with the matching ID. If the policy\
        \ is not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected. Note: A 404 status code is\
        \ returned for nonexistent IDs."
      operationId: updateOIDCPolicy
      parameters:
      - description: ID of the OpenID Connect Policy to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenIdConnectPolicy'
        description: Configuration for updated policy.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenIdConnectPolicy'
          description: Policy updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an OpenID Connect Policy.
      tags:
      - /oauth/openIdConnect
      x-codegen-request-body-name: body
  /oauth/openIdConnect/policies:
    get:
      operationId: getOIDCPolicies
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenIdConnectPolicies'
          description: Success.
      summary: Get list of OpenID Connect Policies.
      tags:
      - /oauth/openIdConnect
    post:
      description: "Create a new OpenID Connect Policy. If the OpenID Connect policy\
        \ is not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected."
      operationId: createOIDCPolicy
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenIdConnectPolicy'
        description: Configuration for new policy.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenIdConnectPolicy'
          description: Policy created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new OpenID Connect Policy.
      tags:
      - /oauth/openIdConnect
      x-codegen-request-body-name: body
  /passwordCredentialValidators/descriptors:
    get:
      operationId: getPasswordCredentialValidatorDescriptors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordCredentialValidatorDescriptors'
          description: Success.
      summary: Get a list of available password credential validator descriptors.
      tags:
      - /passwordCredentialValidators
  /passwordCredentialValidators/descriptors/{id}:
    get:
      description: Get the description of a password credential validator by ID. A
        404 status code is returned for a nonexistent ID.
      operationId: getPasswordCredentialValidatorDescriptor
      parameters:
      - description: ID of the password credential validator descriptor to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordCredentialValidatorDescriptor'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get the description of a password credential validator by ID.
      tags:
      - /passwordCredentialValidators
  /passwordCredentialValidators:
    get:
      operationId: getPasswordCredentialValidators
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordCredentialValidators'
          description: Success.
      summary: Get the list of available password credential validators
      tags:
      - /passwordCredentialValidators
    post:
      description: "Create a new password credential validator instance. If the password\
        \ credential validator is not properly configured, a 422 status code is returned\
        \ along with a list of validation errors that must be corrected."
      operationId: createPasswordCredentialValidator
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordCredentialValidator'
        description: Configuration for the new password credential validator instance.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordCredentialValidator'
          description: Password credential validator created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new password credential validator instance
      tags:
      - /passwordCredentialValidators
      x-codegen-request-body-name: body
  /passwordCredentialValidators/{id}:
    delete:
      description: "Delete a password credential validator instance with the specified\
        \ ID. A 404 status code is returned for nonexistent IDs. Note: Only validators\
        \ not in use can be deleted. If the request succeeds, the response body is\
        \ empty. If the request fails, an ApiResult is returned with details of the\
        \ errors."
      operationId: deletePasswordCredentialValidator
      parameters:
      - description: ID of the password credential validator to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Password credential validator deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource is in use and cannot be deleted.
      summary: Delete a password credential validator instance.
      tags:
      - /passwordCredentialValidators
    get:
      description: Get the configured password credential validator instance with
        the specified ID. A 404 status code is returned for a nonexistent ID.
      operationId: getPasswordCredentialValidator
      parameters:
      - description: ID of password credential validator instance to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordCredentialValidator'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find a password credential validator by ID.
      tags:
      - /passwordCredentialValidators
    put:
      description: "Update a password credential validator instance. If the password\
        \ credential validator is not properly configured, a 422 status code is returned\
        \ along with a list of validation errors that need to be corrected."
      operationId: updatePasswordCredentialValidator
      parameters:
      - description: ID of the password credential validator instance
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordCredentialValidator'
        description: Configuration for the updated password credential validator instance.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordCredentialValidator'
          description: Password credential validator updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update a password credential validator instance.
      tags:
      - /passwordCredentialValidators
      x-codegen-request-body-name: body
  /pingOneConnections:
    get:
      operationId: getPingOneConnections
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingOneConnections'
          description: Success.
      summary: Get the list of all PingOne connections.
      tags:
      - /pingOneConnections
    post:
      operationId: createPingOneConnection
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PingOneConnection'
        description: Configuration for the new PingOne connection.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingOneConnection'
          description: PingOne connection created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new PingOne connection.
      tags:
      - /pingOneConnections
      x-codegen-request-body-name: body
  /pingOneConnections/{id}/credentialStatus:
    get:
      operationId: getCredentialStatus
      parameters:
      - description: ID of the PingOne connection.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingOneCredentialStatus'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get the status of the credential associated with the PingOne connection
      tags:
      - /pingOneConnections
  /pingOneConnections/{id}/environments:
    get:
      operationId: getPingOneConnectionEnvironments
      parameters:
      - description: ID of the PingOne connection.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Page number to retrieve.
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of environments per page.
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Filter criteria limits the environments that are returned to
          only those that match it. The filter criteria is compared to the environment
          name and ID fields. The comparison is a case-insensitive partial match.
          No additional pattern based matching is supported.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingOneEnvironments'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "500":
          content: {}
          description: Error connecting to PingOne
      summary: Get the list of environments that the PingOne connection has access
        to.
      tags:
      - /pingOneConnections
  /pingOneConnections/{id}/usage:
    get:
      operationId: getPingOneConnectionUsages
      parameters:
      - description: ID of the PingOne connection.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceUsages'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get the list of resources that reference this PingOne connection.
      tags:
      - /pingOneConnections
  /pingOneConnections/{id}/serviceAssociations:
    get:
      operationId: getPingOneConnectionAssociations
      parameters:
      - description: ID of the PingOne connection.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAssociations'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get information about components using this connection to access PingOne
        services.
      tags:
      - /pingOneConnections
  /pingOneConnections/{id}:
    delete:
      operationId: deletePingOneConnection
      parameters:
      - description: ID of the PingOne connection to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: PingOne connection deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Delete a PingOne connection.
      tags:
      - /pingOneConnections
    get:
      operationId: getPingOneConnection
      parameters:
      - description: ID of the connection to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingOneConnection'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get a PingOne connection with the specified ID.
      tags:
      - /pingOneConnections
    put:
      operationId: updatePingOneConnection
      parameters:
      - description: ID of the PingOne connection to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PingOneConnection'
        description: Configuration for the updated connection.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingOneConnection'
          description: PingOne connection updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update a PingOne connection.
      tags:
      - /pingOneConnections
      x-codegen-request-body-name: body
  /pingOneForEnterprise/updateIdentityRepository:
    post:
      description: "Update the identity repository to keep your PingFederate and PingOne\
        \ for Enterprise settings synchronized.<br>CAUTION: Updating the identity\
        \ repository overwrites the existing PingOne for Enterprise identity repository,\
        \ causing users to be directed to the current PingFederate instance for SSO."
      operationId: updatePingOneForEnterpriseIdentityRepository
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingOneForEnterpriseSettings'
          description: Success.
        "403":
          content: {}
          description: PingFederate is not connected to PingOne for Enterprise. Operation
            not available.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the PingOne Identity Repository
      tags:
      - /pingOneForEnterprise
  /pingOneForEnterprise/keyPairs:
    get:
      operationId: getKeyPairs
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P14EKeysView'
          description: Success.
        "403":
          content: {}
          description: PingFederate is not connected to PingOne for Enterprise. Operation
            not available.
      summary: Get the PingOne for Enterprise key pair settings
      tags:
      - /pingOneForEnterprise
  /pingOneForEnterprise:
    get:
      operationId: getPingOneForEnterpriseSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingOneForEnterpriseSettings'
          description: Success.
        "403":
          content: {}
          description: PingFederate is not connected to PingOne for Enterprise. Operation
            not available.
      summary: Get the PingOne for Enterprise settings
      tags:
      - /pingOneForEnterprise
    put:
      operationId: updatePingOneSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PingOneForEnterpriseSettings'
        description: PingOne for Enterprise connection settings
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingOneForEnterpriseSettings'
          description: Success.
        "403":
          content: {}
          description: PingFederate is not connected to PingOne for Enterprise. Operation
            not available.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the PingOne for Enterprise settings.
      tags:
      - /pingOneForEnterprise
      x-codegen-request-body-name: body
  /pingOneForEnterprise/keyPairs/rotate:
    post:
      operationId: rotateKeys
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P14EKeysView'
          description: Success.
        "403":
          content: {}
          description: PingFederate is not connected to PingOne for Enterprise. Operation
            not available.
      summary: Rotate the authentication key
      tags:
      - /pingOneForEnterprise
  /pingOneForEnterprise/disconnect:
    post:
      operationId: disconnect
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingOneForEnterpriseSettings'
          description: Disconnected from PingOne for Enterprise
        "403":
          content: {}
          description: PingFederate is not connected to PingOne for Enterprise. Operation
            not available.
        "422":
          content: {}
          description: Unable to disconnect from PingOne for Enterprise.
      summary: Disconnect from PingOne for Enterprise
      tags:
      - /pingOneForEnterprise
  /protocolMetadata/lifetimeSettings:
    get:
      operationId: getLifetimeSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataLifetimeSettings'
          description: Success.
      summary: Get metadata cache duration and reload delay for automated reloading.
      tags:
      - /protocolMetadata
    put:
      operationId: updateLifetimeSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataLifetimeSettings'
        description: Metadata lifetime settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataLifetimeSettings'
          description: Metadata lifetime settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update metadata cache duration and reload delay for automated reloading.
      tags:
      - /protocolMetadata
      x-codegen-request-body-name: body
  /protocolMetadata/signingSettings:
    get:
      operationId: getSigningSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataSigningSettings'
          description: Success.
      summary: Get the certificate ID and algorithm used for metadata signing.
      tags:
      - /protocolMetadata
    put:
      operationId: updateSigningSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataSigningSettings'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataSigningSettings'
          description: Metadata signing settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the certificate and algorithm for metadata signing.
      tags:
      - /protocolMetadata
      x-codegen-request-body-name: body
  /redirectValidation:
    get:
      operationId: getRedirectValidationSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedirectValidationSettings'
          description: Success.
      summary: Retrieve redirect validation settings.
      tags:
      - /redirectValidation
    put:
      description: "<b>Note: </b>Ensure IdP Discovery and/or WS-Federation is enabled\
        \ for redirect validation to function for IdP Discovery and/or wreply for\
        \ SLO respectively."
      operationId: updateRedirectValidationSettings
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RedirectValidationSettings'
        description: Redirect validation settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedirectValidationSettings'
          description: Redirect validation settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update redirect validation settings.
      tags:
      - /redirectValidation
      x-codegen-request-body-name: body
  /keyPairs/keyAlgorithms:
    get:
      operationId: getKeyAlgorithms
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyAlgorithms'
          description: Success.
      summary: Get list of the key algorithms supported for key pair generation.
      tags:
      - /keyPairs
  /secretManagers/{id}/actions/{actionId}/invokeAction:
    post:
      description: "Invokes an action for secret manager plugin instance. A 404 status\
        \ code is returned for nonexistent IDs. If the action produces a download\
        \ file, the file will be returned directly in the response. Otherwise an ActionResult\
        \ will be returned."
      operationId: invokeSecretManagersActionWithOptions
      parameters:
      - description: ID of a secret manager plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the action.
        explode: false
        in: path
        name: actionId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionOptions'
        description: Action options for action invoked.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
          description: Secret Manager plugin action invoked.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Invokes an action for secret manager plugin instance.
      tags:
      - /secretManagers
      x-codegen-request-body-name: body
  /secretManagers:
    get:
      operationId: getSecretManagers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretManagers'
          description: Success.
      summary: Get a list of secret manager plugin instances.
      tags:
      - /secretManagers
    post:
      operationId: createSecretManager
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretManager'
        description: Configuration for a secret manager plugin instance.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretManager'
          description: Secret Manager plugin created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a secret manager plugin instance.
      tags:
      - /secretManagers
      x-codegen-request-body-name: body
  /secretManagers/descriptors:
    get:
      operationId: getSecretManagerPluginDescriptors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretManagerDescriptors'
          description: Success.
      summary: Get a list of available secret manager plugin descriptors.
      tags:
      - /secretManagers
  /secretManagers/descriptors/{id}:
    get:
      operationId: getSecretManagerPluginDescriptor
      parameters:
      - description: ID of secret manager plugin descriptor.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretManagerDescriptor'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get a secret manager plugin descriptor.
      tags:
      - /secretManagers
  /secretManagers/{id}:
    delete:
      operationId: deleteSecretManager
      parameters:
      - description: ID of a secret manager plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Secret Manager plugin deleted.
        "403":
          content: {}
          description: "The operation is not permitted, based on the current configuration\
            \ of the server."
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete a secret manager plugin instance.
      tags:
      - /secretManagers
    get:
      operationId: getSecretManager
      parameters:
      - description: ID of a secret manager plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretManager'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get a specific secret manager plugin instance.
      tags:
      - /secretManagers
    put:
      operationId: updateSecretManager
      parameters:
      - description: ID of a secret manager plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretManager'
        description: Configuration for a secret manager plugin instance.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretManager'
          description: Secret Manager plugin updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update a secret manager plugin instance.
      tags:
      - /secretManagers
      x-codegen-request-body-name: body
  /secretManagers/{id}/actions/{actionId}:
    get:
      operationId: getSecretManagersAction
      parameters:
      - description: ID of a secret manager plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the action.
        explode: false
        in: path
        name: actionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get a secret manager plugin instance's action by ID.
      tags:
      - /secretManagers
  /secretManagers/{id}/actions:
    get:
      operationId: getSecretManagersActions
      parameters:
      - description: ID of a secret manager plugin instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Actions'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get a list of actions for a secret manager plugin instance.
      tags:
      - /secretManagers
  /serverSettings:
    get:
      operationId: getServerSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerSettings'
          description: Success.
      summary: Gets the server settings
      tags:
      - /serverSettings
    put:
      operationId: updateServerSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerSettings'
        description: Configuration for server settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerSettings'
          description: Server Settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the server settings.
      tags:
      - /serverSettings
      x-codegen-request-body-name: body
  /serverSettings/notifications:
    get:
      operationId: getNotificationSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSettings'
          description: Success.
      summary: Gets the notification settings
      tags:
      - /serverSettings
    put:
      operationId: updateNotificationSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSettings'
        description: Notification settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSettings'
          description: Notifications updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the notification settings.
      tags:
      - /serverSettings
      x-codegen-request-body-name: body
  /serverSettings/emailServer:
    get:
      deprecated: true
      operationId: getEmailServerSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailServerSettings'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: (Deprecated) Gets the email server settings
      tags:
      - /serverSettings
    put:
      deprecated: true
      description: "(Deprecated) If the validationEmail is provided, an email will\
        \ be sent to the validationEmail using the provided email server settings.\
        \  The settings will be saved if the test email is successfully sent.<br>"
      operationId: updateEmailServerSettings
      parameters:
      - description: The email address used to validate the email server settings.
        explode: true
        in: query
        name: validationEmail
        required: false
        schema:
          type: string
        style: form
      - description: Only validation will be performed.  Email server settings will
          not be saved.
        explode: true
        in: query
        name: validateOnly
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailServerSettings'
        description: Configuration for email server settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailServerSettings'
          description: Email Server updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: (Deprecated) Update the email server settings
      tags:
      - /serverSettings
      x-codegen-request-body-name: body
  /serverSettings/captchaSettings:
    get:
      deprecated: true
      operationId: getCaptchaSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptchaSettings'
          description: Success.
      summary: (Deprecated) Gets the CAPTCHA settings.
      tags:
      - /serverSettings
    put:
      deprecated: true
      operationId: updateCaptchaSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaptchaSettings'
        description: CAPTCHA settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptchaSettings'
          description: Captcha settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: (Deprecated) Update the CAPTCHA settings.
      tags:
      - /serverSettings
      x-codegen-request-body-name: body
  /serverSettings/outboundProvisioning:
    get:
      description: Get the settings for database used internally to facilitate outbound
        provisioning to service providers.
      operationId: getOutBoundProvisioningSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutboundProvisionDatabase'
          description: Success.
      summary: Get database used for outbound provisioning
      tags:
      - /serverSettings
    put:
      description: Update the settings for database used internally to facilitate
        outbound provisioning to service providers.
      operationId: updateOutBoundProvisioningSettings
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/OutboundProvisionDatabase'
        description: The Outbound Provision Database settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutboundProvisionDatabase'
          description: Database updated for outbound provisioning.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update database used for outbound provisioning
      tags:
      - /serverSettings
      x-codegen-request-body-name: body
  /serverSettings/systemKeys:
    get:
      description: "For each key, only encryptedKeyData and not keyData will be returned"
      operationId: getSystemKeys
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemKeys'
          description: Success.
      summary: Get the system keys.
      tags:
      - /serverSettings
    put:
      description: "For each key, either encryptedKeyData or keyData must be provided."
      operationId: updateSystemKeys
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SystemKeys'
        description: System keys.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemKeys'
          description: System keys updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the system keys.
      tags:
      - /serverSettings
      x-codegen-request-body-name: body
  /serverSettings/systemKeys/rotate:
    post:
      description: "Upon rotation, previous key will be replaced by the current key,\
        \ the current key will be replaced by the pending key, while the newly generated\
        \ key replaces the pending key. Periodic rotation can ensure optimal security\
        \ of your environment."
      operationId: rotateSystemKeys
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemKeys'
          description: successful operation
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemKeys'
          description: System Keys rotated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Rotate the system keys.
      tags:
      - /serverSettings
  /serverSettings/wsTrustStsSettings/issuerCertificates:
    get:
      operationId: getCerts
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuerCerts'
          description: Success.
      summary: Get the list of certificates for WS-Trust STS Settings.
      tags:
      - /serverSettings
    post:
      operationId: importCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/X509File'
        description: File data to import.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuerCert'
          description: New certificate has been imported to WS-Trust STS Settings
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Validation error(s) occurred.
      summary: Import a new certificate.
      tags:
      - /serverSettings
      x-codegen-request-body-name: body
  /serverSettings/wsTrustStsSettings/issuerCertificates/{id}:
    delete:
      description: "If the request is successful, the response body is empty. If the\
        \ request fails, an ApiResult is returned with details of the error."
      operationId: deleteCertificate
      parameters:
      - description: ID of the certificate to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Certificate has been deleted from WS-Trust STS Settings
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource is in use and cannot be deleted.
      summary: Delete a certificate from WS-Trust STS Settings.
      tags:
      - /serverSettings
    get:
      operationId: getCert
      parameters:
      - description: ID of the certificate to retrieve.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuerCert'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Resource not found.
      summary: Retrieve details of a certificate.
      tags:
      - /serverSettings
  /serverSettings/generalSettings:
    get:
      operationId: getGeneralSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralSettings'
          description: Success.
      summary: Gets the general settings.
      tags:
      - /serverSettings
    put:
      operationId: updateGeneralSettings
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/GeneralSettings'
        description: Configuration for general settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralSettings'
          description: General settings have been updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update general settings.
      tags:
      - /serverSettings
      x-codegen-request-body-name: body
  /serverSettings/logSettings:
    get:
      operationId: getLogSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogSettings'
          description: Success.
      summary: Gets the log settings.
      tags:
      - /serverSettings
    put:
      operationId: updateLogSettings
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/LogSettings'
        description: Configuration for log settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogSettings'
          description: Log settings have been updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update log settings.
      tags:
      - /serverSettings
      x-codegen-request-body-name: body
  /serverSettings/wsTrustStsSettings:
    get:
      operationId: getWsTrustStsSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WsTrustStsSettings'
          description: Success.
      summary: Get the current WS-Trust STS Settings.
      tags:
      - /serverSettings
    put:
      operationId: updateWsTrustStsSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WsTrustStsSettings'
        description: Configuration for WS-Trust STS Settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WsTrustStsSettings'
          description: Server Settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update WS-Trust STS Settings.
      tags:
      - /serverSettings
      x-codegen-request-body-name: body
  /serviceAuthentication:
    get:
      operationId: getServiceAuthentication
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAuthentication'
          description: Success.
      summary: Get the service authentication settings.
      tags:
      - /serviceAuthentication
    put:
      description: "Manage availability and credentials to services responsible for\
        \ federation protocol handling, monitoring and administration."
      operationId: updateServiceAuthentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceAuthentication'
        description: Service authentication settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAuthentication'
          description: Service authentication settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the service authentication settings.
      tags:
      - /serviceAuthentication
      x-codegen-request-body-name: body
  /keyPairs/signing/{id}/rotationSettings:
    delete:
      description: "If the request is successful, the response body is empty. If the\
        \ request fails, an ApiResult is returned with details of the error."
      operationId: deleteKeyPairRotationSettings
      parameters:
      - description: ID of the key pair's rotation settings to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Rotation Settings deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete rotation settings for a signing key pair.
      tags:
      - /keyPairs/signing
    get:
      operationId: getRotationSettings
      parameters:
      - description: ID of the key pair to retrieve its rotation settings.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPairRotationSettings'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Retrieve details of rotation settings for a key pair.
      tags:
      - /keyPairs/signing
    put:
      operationId: updateRotationSettings
      parameters:
      - description: ID of the key pair.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyPairRotationSettings'
        description: The key rotation settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPairRotationSettings'
          description: Key Pair updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Add rotation settings to a key pair
      tags:
      - /keyPairs/signing
      x-codegen-request-body-name: body
  /keyPairs/signing:
    get:
      operationId: getSigningKeyPairs
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPairViews'
          description: Success.
      summary: Get list of key pairs.
      tags:
      - /keyPairs/signing
  /keyPairs/signing/generate:
    post:
      operationId: createSigningKeyPair
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewKeyPairSettings'
        description: Settings for the new key pair.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPairView'
          description: Key Pair created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Generate a new key pair.
      tags:
      - /keyPairs/signing
      x-codegen-request-body-name: body
  /keyPairs/signing/{id}:
    delete:
      description: "If the request is successful, the response body is empty. If the\
        \ request fails, an ApiResult is returned with details of the error."
      operationId: deleteSigningKeyPair
      parameters:
      - description: ID of the key pair to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Key Pair deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content: {}
          description: Resource is in use and cannot be deleted.
      summary: Delete a key pair.
      tags:
      - /keyPairs/signing
    get:
      operationId: getSigningKeyPair
      parameters:
      - description: ID of the key pair to retrieve.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPairView'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Retrieve details of a key pair.
      tags:
      - /keyPairs/signing
  /keyPairs/signing/{id}/csr:
    get:
      description: "For a successful request, the PEM-encoded CSR file is directly\
        \ returned as text and the response content type is application/pkcs10. If\
        \ an error occurs, an ApiResult is returned in JSON format, and the content\
        \ type is application/json."
      operationId: exportCsr
      parameters:
      - description: ID of the key pair.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Success.
      summary: Generate a new certificate signing request (CSR) for this key pair.
      tags:
      - /keyPairs/signing
    post:
      operationId: importCsrResponse
      parameters:
      - description: ID of the key pair.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CSRResponse'
        description: The CSR response.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPairView'
          description: CSR Response imported.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Import a CSR response for this key pair.
      tags:
      - /keyPairs/signing
      x-codegen-request-body-name: body
  /keyPairs/signing/{id}/pkcs12:
    post:
      description: "For a successful request, the PKCS12 file is directly returned\
        \ in binary format and the response content type is application/x-pkcs12.\
        \ If an error occurs, an ApiResult is returned in JSON format and the content\
        \ type is application/json. Due to the sensitivity of the password parameter,\
        \ the method for this operation is POST rather than GET."
      operationId: exportPKCS12File
      parameters:
      - description: ID of the key pair.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyPairExportSettings'
        description: Parameters for the export request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Key Pair downloaded.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "403":
          content: {}
          description: "The operation is not permitted, based on the current configuration\
            \ of the server."
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Download the key pair in PKCS12 format.
      tags:
      - /keyPairs/signing
      x-codegen-request-body-name: body
  /keyPairs/signing/{id}/pem:
    post:
      description: "For a successful request, the PEM file is directly returned in\
        \ PEM format and the response content type is application/x-pem-file. In the\
        \ exported PEM file, the private key is protected with PBES2 encryption and\
        \ AES. If an error occurs, an ApiResult is returned in JSON format and the\
        \ content type is application/json. Due to the sensitivity of the password\
        \ parameter, the method for this operation is POST rather than GET."
      operationId: exportPEMFile
      parameters:
      - description: ID of the key pair.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyPairExportSettings'
        description: Parameters for the export request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Key Pair downloaded.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "403":
          content: {}
          description: "The operation is not permitted, based on the current configuration\
            \ of the server."
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Download the key pair in PEM format.
      tags:
      - /keyPairs/signing
      x-codegen-request-body-name: body
  /keyPairs/signing/{id}/certificate:
    get:
      description: "For a successful request, the PEM-encoded certificate file is\
        \ directly returned as text and the response content type is application/x-x509-ca-cert.\
        \ If an error occurs, an ApiResult is returned in JSON format and the content\
        \ type is application/json."
      operationId: exportCertificateFile
      parameters:
      - description: ID of the key pair.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Download the certificate from a given key pair.
      tags:
      - /keyPairs/signing
  /keyPairs/signing/import:
    post:
      operationId: importSigningKeyPair
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyPairFile'
        description: File to import.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPairView'
          description: Key Pair imported.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "403":
          content: {}
          description: "The operation is not permitted, based on the current configuration\
            \ of the server."
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Import a new key pair.
      tags:
      - /keyPairs/signing
      x-codegen-request-body-name: body
  /sp/adapters/{id}/actions/{actionId}/invokeAction:
    post:
      description: "Invokes an action for an SP adapter instance. A 404 status code\
        \ is returned for nonexistent IDs. If the action produces a download file,\
        \ the file will be returned directly in the response. Otherwise an ActionResult\
        \ will be returned."
      operationId: invokeSpAdapterActionWithOptions
      parameters:
      - description: ID of the SP adapter instance to which this action belongs to.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the action.
        explode: false
        in: path
        name: actionId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionOptions'
        description: Action options for action invoked.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
          description: Action invoked on adapter.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Invokes an action for an SP adapter instance.
      tags:
      - /sp/adapters
      x-codegen-request-body-name: body
  /sp/adapters/descriptors:
    get:
      operationId: getSpAdapterDescriptors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpAdapterDescriptors'
          description: Success.
      summary: Get the list of available SP adapter descriptors.
      tags:
      - /sp/adapters
  /sp/adapters/descriptors/{id}:
    get:
      description: Get the description of an SP adapter plugin by ID. A 404 status
        code is returned for nonexistent IDs.
      operationId: getSpAdapterDescriptorsById
      parameters:
      - description: ID of SP adapter descriptor to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpAdapterDescriptor'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get the description of an SP adapter plugin by ID.
      tags:
      - /sp/adapters
  /sp/adapters:
    get:
      operationId: getSpAdapters
      parameters:
      - description: Page number to retrieve.
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of adapters per page.
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Filter criteria limits the SP adapters that are returned to only
          those that match it. The filter criteria is compared to the SP adapter instance
          name and ID fields. The comparison is a case-insensitive partial match.
          No additional pattern based matching is supported.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpAdapters'
          description: Success.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Get the list of configured SP adapter instances.
      tags:
      - /sp/adapters
    post:
      description: "Create a new SP adapter instance. If the SP adapter is not properly\
        \ configured, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: createSpAdapter
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SpAdapter'
        description: Configuration for the SP adapter instance.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpAdapter'
          description: Adapter created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new SP adapter instance.
      tags:
      - /sp/adapters
      x-codegen-request-body-name: body
  /sp/adapters/{id}:
    delete:
      description: "Delete an SP adapter instance with the specified ID. A 404 status\
        \ code is returned for nonexistent IDs. Note: Only adapters not in use can\
        \ be deleted. If the request succeeds, the response body is empty. If the\
        \ request fails, an ApiResult is returned with details of the error."
      operationId: deleteSpAdapter
      parameters:
      - description: ID of SP adapter instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Adapter deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource is in use and cannot be deleted.
      summary: Delete an SP adapter instance.
      tags:
      - /sp/adapters
    get:
      description: Get the configured SP adapter instance with the specified ID. A
        404 status code is returned for nonexistent IDs.
      operationId: getSpAdapter
      parameters:
      - description: ID of SP adapter instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpAdapter'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find an SP adapter instance by ID.
      tags:
      - /sp/adapters
    put:
      description: "Update an SP adapter instance.If the SP adapter is not properly\
        \ configured, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: updateSpAdapter
      parameters:
      - description: ID of SP adapter instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SpAdapter'
        description: Configuration for the SP adapter instance.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpAdapter'
          description: Adapter updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an SP adapter instance.
      tags:
      - /sp/adapters
      x-codegen-request-body-name: body
  /sp/adapters/urlMappings:
    get:
      deprecated: true
      operationId: getSpAdapterUrlMappings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpAdapterUrlMappings'
          description: Success.
      summary: (Deprecated) List the mappings between URLs and adapter instances.
      tags:
      - /sp/adapters
    put:
      deprecated: true
      operationId: updateSpAdapterUrlMappings
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SpAdapterUrlMappings'
        description: The SP adapter URL mappings to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpAdapterUrlMappings'
          description: Mapping updated.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: (Deprecated) Update the mappings between URLs and adapters instances.
      tags:
      - /sp/adapters
      x-codegen-request-body-name: body
  /sp/adapters/{id}/actions/{actionId}:
    get:
      description: Find an SP adapter instance's action by ID. A 404 status code is
        returned for nonexistent IDs.
      operationId: getSpAdaptersActionById
      parameters:
      - description: ID of the SP adapter instance to which this action belongs to.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the action.
        explode: false
        in: path
        name: actionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find an SP adapter instance's action by ID.
      tags:
      - /sp/adapters
  /sp/adapters/{id}/actions:
    get:
      description: List the actions for an SP adapter instance. A 404 status code
        is returned for nonexistent IDs.
      operationId: getSpAdaptersActions
      parameters:
      - description: ID of the SP adapter instance to which this action belongs to.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Actions'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: List the actions for an SP adapter instance.
      tags:
      - /sp/adapters
  /idp/spConnections/{id}/credentials/signingSettings:
    get:
      operationId: getSpSigningSettings
      parameters:
      - description: ID of the SP Connection.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigningSettings'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get the SP connection's signature settings.
      tags:
      - /idp/spConnections
    put:
      operationId: updateSpSigningSettings
      parameters:
      - description: ID of the SP Connection to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SigningSettings'
        description: Signature settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigningSettings'
          description: Connection updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the SP connection's signature settings.
      tags:
      - /idp/spConnections
      x-codegen-request-body-name: body
  /idp/spConnections/{id}/credentials/certs:
    get:
      operationId: getSpConnectionCerts
      parameters:
      - description: ID of the SP Connection.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionCerts'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get the SP connection's certificates.
      tags:
      - /idp/spConnections
    post:
      description: "If the certificate's activeVerificationCert flag is set to true,\
        \ it will become the connection's primary verification certificate."
      operationId: addSpConnectionCert
      parameters:
      - description: ID of the SP Connection to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionCert'
        description: Configuration for a verification certificate.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionCert'
          description: Connection Certificate added.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Add a new SP connection certificate.
      tags:
      - /idp/spConnections
      x-codegen-request-body-name: body
    put:
      operationId: updateSpConnectionCerts
      parameters:
      - description: ID of the SP Connection to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionCerts'
        description: Configuration for a verification certificates.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionCerts'
          description: Connection updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the SP connection's certificates.
      tags:
      - /idp/spConnections
      x-codegen-request-body-name: body
  /idp/spConnections/{id}/credentials/decryptionKeys:
    get:
      operationId: getDecryptionKeys
      parameters:
      - description: ID of the SP Connection to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecryptionKeys'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get the decryption keys of an SP connection.
      tags:
      - /idp/spConnections
    put:
      operationId: updateDecryptionKeys
      parameters:
      - description: ID of the SP Connection to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DecryptionKeys'
        description: Configuration for decryption keys.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecryptionKeys'
          description: Connection updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Updating the SP connection's decryption keys.
      tags:
      - /idp/spConnections
      x-codegen-request-body-name: body
  /idp/spConnections/{id}:
    delete:
      description: "Delete an SP connection with the specified ID. A 404 status code\
        \ is returned for nonexistent IDs. Note: Only inactive connections can be\
        \ deleted. If the request succeeds, the response body is empty. If the request\
        \ fails, an ApiResult is returned with details of the error."
      operationId: deleteSpConnection
      parameters:
      - description: ID of SP Connection to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Connection deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource is in use and cannot be deleted.
      summary: Delete an SP connection.
      tags:
      - /idp/spConnections
    get:
      description: Get an SP connection with the specified ID. A 404 status code is
        returned for nonexistent IDs.
      operationId: getSpConnection
      parameters:
      - description: ID of the SP Connection to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpConnection'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find SP connection by ID.
      tags:
      - /idp/spConnections
    put:
      description: "Update an SP connection with the matching ID. If the SP connection\
        \ is not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected. Note: A 404 status code is\
        \ returned for nonexistent IDs."
      operationId: updateSpConnection
      parameters:
      - description: ID of SP Connection to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpConnection'
        description: Configuration for updated connection.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpConnection'
          description: Connection updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an SP connection.
      tags:
      - /idp/spConnections
      x-codegen-request-body-name: body
  /idp/spConnections:
    get:
      description: "Get a list of all the WS-Fed, WS-Trust, SAML1.0, SAML1.1 and SAML\
        \ 2.0 SP connections."
      operationId: getSpConnections
      parameters:
      - description: Entity ID of the connection to fetch. (case-sensitive)
        explode: true
        in: query
        name: entityId
        required: false
        schema:
          type: string
        style: form
      - description: Page number to retrieve.
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Number of connections per page.
        explode: true
        in: query
        name: numberPerPage
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Filter criteria limits the SP connections that are returned to
          only those that match it. The filter criteria is compared to the SP connection
          name and partner entity ID fields. The comparison is a case-insensitive
          partial match. No additional pattern based matching is supported.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpConnections'
          description: Success.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Get list of SP connections.
      tags:
      - /idp/spConnections
    post:
      description: "Create a new SP connection. If the SP connection is not properly\
        \ configured, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: createSpConnection
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpConnection'
        description: Configuration for new connection.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpConnection'
          description: Connection created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new SP connection.
      tags:
      - /idp/spConnections
      x-codegen-request-body-name: body
  /sp/defaultUrls:
    get:
      operationId: getSpDefaultUrls
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpDefaultUrls'
          description: Success.
      summary: Gets the SP Default URLs. These are Values that affect the user's experience
        when executing SP-initiated SSO operations.
      tags:
      - /sp/defaultUrls
    put:
      operationId: updateSpDefaultUrls
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpDefaultUrls'
        description: Configuration for the IDP Default URL settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpDefaultUrls'
          description: Default URL updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the SP Default URLs. Enter values that affect the user's experience
        when executing SP-initiated SSO operations.
      tags:
      - /sp/defaultUrls
      x-codegen-request-body-name: body
  /sp/targetUrlMappings:
    get:
      operationId: getSpUrlMappings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpUrlMappings'
          description: Success.
      summary: List the mappings between URLs and adapter or connection instances.
      tags:
      - /sp/targetUrlMappings
    put:
      operationId: updateSpUrlMappings
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SpUrlMappings'
        description: The SP adapter URL mappings to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpUrlMappings'
          description: Mapping updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the mappings between URLs and adapters or connections instances.
      tags:
      - /sp/targetUrlMappings
      x-codegen-request-body-name: body
  /keyPairs/sslClient:
    get:
      operationId: getSslClientKeyPairs
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPairViews'
          description: Success.
      summary: Get list of key pairs.
      tags:
      - /keyPairs/sslClient
  /keyPairs/sslClient/generate:
    post:
      operationId: createSslClientKeyPair
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewKeyPairSettings'
        description: Settings for the new key pair.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPairView'
          description: Key Pair created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Generate a new key pair.
      tags:
      - /keyPairs/sslClient
      x-codegen-request-body-name: body
  /keyPairs/sslClient/{id}:
    delete:
      description: "If the request is successful, the response body is empty. If the\
        \ request fails, an ApiResult is returned with details of the error."
      operationId: deleteSslClientKeyPair
      parameters:
      - description: ID of the key pair to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Key Pair deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content: {}
          description: Resource is in use and cannot be deleted.
      summary: Delete a key pair.
      tags:
      - /keyPairs/sslClient
    get:
      operationId: getSslClientKeyPair
      parameters:
      - description: ID of the key pair to retrieve.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPairView'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Retrieve details of a key pair.
      tags:
      - /keyPairs/sslClient
  /keyPairs/sslClient/{id}/csr:
    get:
      description: "For a successful request, the PEM-encoded CSR file is directly\
        \ returned as text and the response content type is application/pkcs10. If\
        \ an error occurs, an ApiResult is returned in JSON format, and the content\
        \ type is application/json."
      operationId: exportSslClientCsr
      parameters:
      - description: ID of the key pair.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Success.
      summary: Generate a new certificate signing request (CSR) for this key pair.
      tags:
      - /keyPairs/sslClient
    post:
      operationId: importSslClientCsrResponse
      parameters:
      - description: ID of the key pair.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CSRResponse'
        description: The CSR response.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPairView'
          description: CSR Response imported.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Import a CSR response for this key pair.
      tags:
      - /keyPairs/sslClient
      x-codegen-request-body-name: body
  /keyPairs/sslClient/{id}/pkcs12:
    post:
      description: "For a successful request, the PKCS12 file is directly returned\
        \ in binary format and the response content type is application/x-pkcs12.\
        \ If an error occurs, an ApiResult is returned in JSON format and the content\
        \ type is application/json. Due to the sensitivity of the password parameter,\
        \ the method for this operation is POST rather than GET."
      operationId: exportSslClientPKCS12File
      parameters:
      - description: ID of the key pair.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyPairExportSettings'
        description: Parameters for the export request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Key Pair downloaded.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "403":
          content: {}
          description: "The operation is not permitted, based on the current configuration\
            \ of the server."
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Download the key pair in PKCS12 format.
      tags:
      - /keyPairs/sslClient
      x-codegen-request-body-name: body
  /keyPairs/sslClient/{id}/pem:
    post:
      description: "For a successful request, the PEM file is directly returned in\
        \ PEM format and the response content type is application/x-pem-file. In the\
        \ exported PEM file, the private key is protected with PBES2 encryption and\
        \ AES. If an error occurs, an ApiResult is returned in JSON format and the\
        \ content type is application/json. Due to the sensitivity of the password\
        \ parameter, the method for this operation is POST rather than GET."
      operationId: exportSslClientPEMFile
      parameters:
      - description: ID of the key pair.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyPairExportSettings'
        description: Parameters for the export request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Key Pair downloaded.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "403":
          content: {}
          description: "The operation is not permitted, based on the current configuration\
            \ of the server."
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Download the key pair in PEM format.
      tags:
      - /keyPairs/sslClient
      x-codegen-request-body-name: body
  /keyPairs/sslClient/{id}/certificate:
    get:
      description: "For a successful request, the PEM-encoded certificate file is\
        \ directly returned as text and the response content type is application/x-x509-ca-cert.\
        \ If an error occurs, an ApiResult is returned in JSON format and the content\
        \ type is application/json."
      operationId: exportSslClientCertificateFile
      parameters:
      - description: ID of the key pair.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Download the certificate from a given key pair.
      tags:
      - /keyPairs/sslClient
  /keyPairs/sslClient/import:
    post:
      operationId: importSslClientKeyPair
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyPairFile'
        description: File to import.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPairView'
          description: Key Pair imported.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "403":
          content: {}
          description: "The operation is not permitted, based on the current configuration\
            \ of the server."
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Import a new key pair.
      tags:
      - /keyPairs/sslClient
      x-codegen-request-body-name: body
  /keyPairs/sslServer/settings:
    get:
      operationId: getSslServerSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SslServerSettings'
          description: Success.
      summary: Get the SSL Server Certificate Settings.
      tags:
      - /keyPairs/sslServer
    put:
      operationId: updateSslServerSettings
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SslServerSettings'
        description: Configuration for activation of SSL server certificates.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SslServerSettings'
          description: SSL Certificate Settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update the SSL Server Certificate Settings.
      tags:
      - /keyPairs/sslServer
      x-codegen-request-body-name: body
  /keyPairs/sslServer:
    get:
      operationId: getSslServerKeyPairs
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPairViews'
          description: Success.
      summary: Get list of key pairs.
      tags:
      - /keyPairs/sslServer
  /keyPairs/sslServer/generate:
    post:
      operationId: createSslServerKeyPair
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewKeyPairSettings'
        description: Settings for the new key pair.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPairView'
          description: Key Pair created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Generate a new key pair.
      tags:
      - /keyPairs/sslServer
      x-codegen-request-body-name: body
  /keyPairs/sslServer/{id}:
    delete:
      description: "If the request is successful, the response body is empty. If the\
        \ request fails, an ApiResult is returned with details of the error."
      operationId: deleteSslServerKeyPair
      parameters:
      - description: ID of the key pair to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Key Pair deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content: {}
          description: Resource is in use and cannot be deleted.
      summary: Delete a key pair.
      tags:
      - /keyPairs/sslServer
    get:
      operationId: getSslServerKeyPair
      parameters:
      - description: ID of the key pair to retrieve.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPairView'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Retrieve details of a key pair.
      tags:
      - /keyPairs/sslServer
  /keyPairs/sslServer/{id}/csr:
    get:
      description: "For a successful request, the PEM-encoded CSR file is directly\
        \ returned as text and the response content type is application/pkcs10. If\
        \ an error occurs, an ApiResult is returned in JSON format, and the content\
        \ type is application/json."
      operationId: exportSslServerCsr
      parameters:
      - description: ID of the key pair.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Success.
      summary: Generate a new certificate signing request (CSR) for this key pair.
      tags:
      - /keyPairs/sslServer
    post:
      operationId: importSslServerCsrResponse
      parameters:
      - description: ID of the key pair.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CSRResponse'
        description: The CSR response.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPairView'
          description: CSR Response imported.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Import a CSR response for this key pair.
      tags:
      - /keyPairs/sslServer
      x-codegen-request-body-name: body
  /keyPairs/sslServer/{id}/pkcs12:
    post:
      description: "For a successful request, the PKCS12 file is directly returned\
        \ in binary format and the response content type is application/x-pkcs12.\
        \ If an error occurs, an ApiResult is returned in JSON format and the content\
        \ type is application/json. Due to the sensitivity of the password parameter,\
        \ the method for this operation is POST rather than GET."
      operationId: exportSslServerPKCS12File
      parameters:
      - description: ID of the key pair.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyPairExportSettings'
        description: Parameters for the export request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Key Pair downloaded.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "403":
          content: {}
          description: "The operation is not permitted, based on the current configuration\
            \ of the server."
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Download the key pair in PKCS12 format.
      tags:
      - /keyPairs/sslServer
      x-codegen-request-body-name: body
  /keyPairs/sslServer/{id}/pem:
    post:
      description: "For a successful request, the PEM file is directly returned in\
        \ PEM format and the response content type is application/x-pem-file. In the\
        \ exported PEM file, the private key is protected with PBES2 encryption and\
        \ AES. If an error occurs, an ApiResult is returned in JSON format and the\
        \ content type is application/json. Due to the sensitivity of the password\
        \ parameter, the method for this operation is POST rather than GET."
      operationId: exportSslServerPEMFile
      parameters:
      - description: ID of the key pair.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyPairExportSettings'
        description: Parameters for the export request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Key Pair downloaded.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "403":
          content: {}
          description: "The operation is not permitted, based on the current configuration\
            \ of the server."
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Download the key pair in PEM format.
      tags:
      - /keyPairs/sslServer
      x-codegen-request-body-name: body
  /keyPairs/sslServer/{id}/certificate:
    get:
      description: "For a successful request, the PEM-encoded certificate file is\
        \ directly returned as text and the response content type is application/x-x509-ca-cert.\
        \ If an error occurs, an ApiResult is returned in JSON format and the content\
        \ type is application/json."
      operationId: exportSslServerCertificateFile
      parameters:
      - description: ID of the key pair.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Download the certificate from a given key pair.
      tags:
      - /keyPairs/sslServer
  /keyPairs/sslServer/import:
    post:
      operationId: importSslServerKeyPair
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyPairFile'
        description: File to import.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyPairView'
          description: Key Pair imported.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "403":
          content: {}
          description: "The operation is not permitted, based on the current configuration\
            \ of the server."
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Import a new key pair.
      tags:
      - /keyPairs/sslServer
      x-codegen-request-body-name: body
  /idp/stsRequestParametersContracts:
    get:
      operationId: getStsRequestParamContracts
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StsRequestParametersContracts'
          description: Success.
      summary: Get the list of STS Request Parameters Contracts.
      tags:
      - /idp/stsRequestParametersContracts
    post:
      operationId: createStsRequestParamContract
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StsRequestParametersContract'
        description: Details for the STS Request Parameters Contract.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StsRequestParametersContract'
          description: STS Request Parameters Contract created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new STS Request Parameters Contract.
      tags:
      - /idp/stsRequestParametersContracts
      x-codegen-request-body-name: body
  /idp/stsRequestParametersContracts/{id}:
    delete:
      operationId: deleteStsRequestParamContractById
      parameters:
      - description: ID of STS Request Parameters Contract to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: STS Request Parameters Contract deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete a STS Request Parameters Contract.
      tags:
      - /idp/stsRequestParametersContracts
    get:
      operationId: getStsRequestParamContractById
      parameters:
      - description: ID of STS Request Parameters Contract to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StsRequestParametersContract'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get a STS Request Parameters Contract.
      tags:
      - /idp/stsRequestParametersContracts
    put:
      operationId: updateStsRequestParamContractById
      parameters:
      - description: ID of STS Request Parameters Contract to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/StsRequestParametersContract'
        description: Details for updated STS Request Parameters Contract.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StsRequestParametersContract'
          description: STS Request Parameters Contract updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update a STS Request Parameters Contract.
      tags:
      - /idp/stsRequestParametersContracts
      x-codegen-request-body-name: body
  /sp/tokenGenerators/descriptors:
    get:
      operationId: getTokenGeneratorDescriptors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenGeneratorDescriptors'
          description: Success.
      summary: Get the list of available token generators.
      tags:
      - /sp/tokenGenerators
  /sp/tokenGenerators/descriptors/{id}:
    get:
      description: Get the description of a token generator plugin by ID. A 404 status
        code is returned for nonexistent IDs.
      operationId: getTokenGeneratorDescriptorsById
      parameters:
      - description: ID of a token generator descriptor to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenGeneratorDescriptor'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get the description of a token generator plugin by ID.
      tags:
      - /sp/tokenGenerators
  /sp/tokenGenerators:
    get:
      operationId: getTokenGenerators
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenGenerators'
          description: Success.
      summary: Get the list of token generator instances.
      tags:
      - /sp/tokenGenerators
    post:
      description: "Create a new token generator instance. If the token generator\
        \ is not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected."
      operationId: createTokenGenerator
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TokenGenerator'
        description: Configuration for a token generator instance.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenGenerator'
          description: Token generator created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new token generator instance.
      tags:
      - /sp/tokenGenerators
      x-codegen-request-body-name: body
  /sp/tokenGenerators/{id}:
    delete:
      description: "Delete a token generator instance with the specified ID. A 404\
        \ status code is returned for nonexistent IDs. Note: Only token generators\
        \ not in use can be deleted. If the request succeeds, the response body is\
        \ empty. If the request fails, an ApiResult is returned with details of the\
        \ error."
      operationId: deleteTokenGenerator
      parameters:
      - description: ID of the token generator instance to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Token generator deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource is in use and cannot be deleted.
      summary: Delete a token generator instance.
      tags:
      - /sp/tokenGenerators
    get:
      description: Get the configured token generator instance with the specified
        ID. A 404 status code is returned for nonexistent IDs.
      operationId: getTokenGenerator
      parameters:
      - description: ID of the token generator instance to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenGenerator'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find a token generator instance by ID.
      tags:
      - /sp/tokenGenerators
    put:
      description: "Update a token generator instance. If the token generator is not\
        \ properly configured, a 422 status code is returned along with a list of\
        \ validation errors that must be corrected."
      operationId: updateTokenGenerator
      parameters:
      - description: ID of the token generator instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TokenGenerator'
        description: Configuration for the updated token generator instance.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenGenerator'
          description: Token generator updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update a token generator instance.
      tags:
      - /sp/tokenGenerators
      x-codegen-request-body-name: body
  /idp/tokenProcessors:
    get:
      operationId: getTokenProcessors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenProcessors'
          description: Success.
      summary: Get the list of token processor instances.
      tags:
      - /idp/tokenProcessors
    post:
      description: "Create a new token processor instance. If the token processor\
        \ is not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected."
      operationId: createTokenProcessor
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TokenProcessor'
        description: Configuration for a token processor instance.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenProcessor'
          description: Token processor created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new token processor instance.
      tags:
      - /idp/tokenProcessors
      x-codegen-request-body-name: body
  /idp/tokenProcessors/descriptors:
    get:
      operationId: getTokenProcessorDescriptors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenProcessorDescriptors'
          description: Success.
      summary: Get the list of available token processors.
      tags:
      - /idp/tokenProcessors
  /idp/tokenProcessors/descriptors/{id}:
    get:
      description: Get the description of a token processor plugin by ID. A 404 status
        code is returned for nonexistent IDs.
      operationId: getTokenProcessorDescriptorsById
      parameters:
      - description: ID of a token processor descriptor to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenProcessorDescriptor'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get the description of a token processor plugin by ID.
      tags:
      - /idp/tokenProcessors
  /idp/tokenProcessors/{id}:
    delete:
      description: "Delete a token processor instance with the specified ID. A 404\
        \ status code is returned for nonexistent IDs. Note: Only token processors\
        \ not in use can be deleted. If the request succeeds, the response body is\
        \ empty. If the request fails, an ApiResult is returned with details of the\
        \ error."
      operationId: deleteTokenProcessor
      parameters:
      - description: ID of the token processor instance to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Token processor deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource is in use and cannot be deleted.
      summary: Delete a token processor instance.
      tags:
      - /idp/tokenProcessors
    get:
      description: Get the configured token processor instance with the specified
        ID. A 404 status code is returned for nonexistent IDs.
      operationId: getTokenProcessor
      parameters:
      - description: ID of the token processor instance to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenProcessor'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find a token processor instance by ID.
      tags:
      - /idp/tokenProcessors
    put:
      description: "Update a token processor instance. If the token processor is not\
        \ properly configured, a 422 status code is returned along with a list of\
        \ validation errors that must be corrected."
      operationId: updateTokenProcessor
      parameters:
      - description: ID of token processor instance.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TokenProcessor'
        description: Configuration for updated token processor instance.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenProcessor'
          description: Token Processor updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update a token processor instance.
      tags:
      - /idp/tokenProcessors
      x-codegen-request-body-name: body
  /tokenProcessorToTokenGeneratorMappings:
    get:
      operationId: getTokenToTokenMappings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenToTokenMappings'
          description: Success.
      summary: Get the list of Token Processor to Token Generator Mappings.
      tags:
      - /tokenProcessorToTokenGeneratorMappings
    post:
      operationId: createTokenToTokenMapping
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenToTokenMapping'
        description: Configuration for a new Token Processor to Token Generator Mapping.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenToTokenMapping'
          description: Token Processor to Token Generator mapping created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new Token Processor to Token Generator Mapping.
      tags:
      - /tokenProcessorToTokenGeneratorMappings
      x-codegen-request-body-name: body
  /tokenProcessorToTokenGeneratorMappings/{id}:
    delete:
      operationId: deleteTokenToTokenMappingById
      parameters:
      - description: ID of Token Processor to Token Generator Mapping to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Token Processor to Token Generator mapping deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete a Token Processor to Token Generator Mapping.
      tags:
      - /tokenProcessorToTokenGeneratorMappings
    get:
      operationId: getTokenToTokenMappingById
      parameters:
      - description: ID of Token Processor to Token Generator Mapping to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenToTokenMapping'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get a Token Processor to Token Generator Mapping.
      tags:
      - /tokenProcessorToTokenGeneratorMappings
    put:
      operationId: updateTokenToTokenMappingById
      parameters:
      - description: ID of Token Processor to Token Generator Mapping to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TokenToTokenMapping'
        description: Configuration for updated Token Processor to Token Generator
          Mapping.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenToTokenMapping'
          description: Token Processor to Token Generator mapping updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update a Token Processor to Token Generator Mapping.
      tags:
      - /tokenProcessorToTokenGeneratorMappings
      x-codegen-request-body-name: body
  /certificates/ca/{id}/file:
    get:
      description: "For a successful request, the PEM-encoded certificate file is\
        \ directly returned as text and the response content type is application/x-x509-ca-cert.\
        \ If an error occurs, an ApiResult is returned in JSON format and the content\
        \ type is application/json."
      operationId: exportCaCertificateFile
      parameters:
      - description: ID of the trusted certificate authority.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Download the certificate from a given trusted certificate authority.
      tags:
      - /certificates/ca
  /certificates/ca/import:
    post:
      operationId: importTrustedCA
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/X509File'
        description: File data to import.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertView'
          description: Certificate Authority imported.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Import a new trusted certificate authority.
      tags:
      - /certificates/ca
      x-codegen-request-body-name: body
  /certificates/ca:
    get:
      operationId: getTrustedCAs
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertViews'
          description: Success.
      summary: Get list of trusted certificate authorities.
      tags:
      - /certificates/ca
  /certificates/ca/{id}:
    delete:
      description: "If the request is successful, the response body is empty. If the\
        \ request fails, an ApiResult is returned with details of the error."
      operationId: deleteTrustedCA
      parameters:
      - description: ID of the trusted certificate authority to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Certificate Authority deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete a trusted certificate authority.
      tags:
      - /certificates/ca
    get:
      operationId: getTrustedCert
      parameters:
      - description: ID of the trusted certificate authority to retrieve.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertView'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Retrieve details of a trusted certificate authority.
      tags:
      - /certificates/ca
  /version:
    get:
      operationId: getVersion
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
          description: Success.
      summary: Gets the server version.
      tags:
      - /version
  /virtualHostNames:
    get:
      operationId: getVirtualHostNamesSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualHostNameSettings'
          description: Success.
      summary: Retrieve virtual host names settings.
      tags:
      - /virtualHostNames
    put:
      operationId: updateVirtualHostNamesSettings
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/VirtualHostNameSettings'
        description: Virtual host names settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualHostNameSettings'
          description: Virtual host names settings updated.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update virtual host names settings.
      tags:
      - /virtualHostNames
      x-codegen-request-body-name: body
  /oauth/authorizationDetailTypes/{id}:
    delete:
      description: "Delete an authorization detail type with the specified ID. A 404\
        \ status code is returned for nonexistent IDs. Note: If the request succeeds,\
        \ the response body is empty."
      operationId: deleteAuthorizationDetailType
      parameters:
      - description: ID of the authorization detail type.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Authorization Detail Type deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete an authorization detail type.
      tags:
      - /oauth/authorizationDetailTypes
    get:
      description: Get the configured authorization detail type with the specified
        ID. A 404 status code is returned for nonexistent IDs.
      operationId: getAuthorizationDetailTypeById
      parameters:
      - description: ID of the authorization detail type.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationDetailType'
          description: Success.
      summary: Get an authorization detail type.
      tags:
      - /oauth/authorizationDetailTypes
    put:
      description: "Update an authorization detail type with matching ID. If the type\
        \ is not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected. Note: A 404 status code is\
        \ returned for nonexistent IDs."
      operationId: updateAuthorizationDetailType
      parameters:
      - description: ID of the authorization detail type.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationDetailType'
        description: Configuration for updated authorization detail type.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationDetailType'
          description: Authorization Detail Type updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an authorization detail type.
      tags:
      - /oauth/authorizationDetailTypes
      x-codegen-request-body-name: body
  /oauth/authorizationDetailTypes:
    get:
      operationId: getAuthorizationDetailTypes
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationDetailTypes'
          description: Success.
      summary: Get the list of authorization detail types.
      tags:
      - /oauth/authorizationDetailTypes
    post:
      description: "Create an authorization detail type. If the authorization detail\
        \ type is not properly configured, a 422 status code is returned along with\
        \ a list of validation errors that must be corrected."
      operationId: addAuthorizationDetailType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationDetailType'
        description: Configuration for new authorization detail type.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationDetailType'
          description: Authorization Detail Type created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new authorization detail type.
      tags:
      - /oauth/authorizationDetailTypes
      x-codegen-request-body-name: body
  /oauth/issuers:
    get:
      operationId: getOauthIssuers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issuers'
          description: Success.
      summary: Get the list of virtual issuers.
      tags:
      - /oauth/issuers
    post:
      description: "Create a new virtual issuer. If the virtual issuer is not properly\
        \ configured, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: addOauthIssuer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Issuer'
        description: Configuration for new virtual issuer.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issuer'
          description: Issuer created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new virtual issuer.
      tags:
      - /oauth/issuers
      x-codegen-request-body-name: body
  /oauth/issuers/{id}:
    delete:
      description: "Delete a virtual issuer with the specified ID. A 404 status code\
        \ is returned for nonexistent IDs. Note: If the request succeeds, the response\
        \ body is empty. If the request fails, an ApiResult is returned with details\
        \ of the error."
      operationId: deleteOauthIssuer
      parameters:
      - description: ID of the virtual issuer to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Issuer deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Delete a virtual issuer.
      tags:
      - /oauth/issuers
    get:
      description: Get a virtual issuer with the specified ID. A 404 status code is
        returned for nonexistent IDs.
      operationId: getOauthIssuerById
      parameters:
      - description: ID of the virtual issuer to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issuer'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find a virtual issuer by ID.
      tags:
      - /oauth/issuers
    put:
      description: "Update a virtual issuer with the matching ID. If the policy is\
        \ not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected. Note: A 404 status code is\
        \ returned for nonexistent IDs."
      operationId: updateOauthIssuer
      parameters:
      - description: ID of the virtual issuer to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Issuer'
        description: Configuration for updated virtual issuer.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issuer'
          description: Issuer updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update a virtual issuer.
      tags:
      - /oauth/issuers
      x-codegen-request-body-name: body
  /oauth/tokenExchange/tokenGeneratorMappings:
    get:
      operationId: getTokenGeneratorMappings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessorPolicyToGeneratorMappings'
          description: Success.
      summary: Get the list of Token Exchange Processor policy to Token Generator
        Mappings.
      tags:
      - /oauth/tokenExchange/tokenGeneratorMappings
    post:
      operationId: createTokenGeneratorMapping
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessorPolicyToGeneratorMapping'
        description: Configuration for a new Token Exchange Processor policy to Token
          Generator Mapping.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessorPolicyToGeneratorMapping'
          description: Token Exchange Processor policy to Token Generator mapping
            created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new Token Exchange Processor policy to Token Generator Mapping.
      tags:
      - /oauth/tokenExchange/tokenGeneratorMappings
      x-codegen-request-body-name: body
  /oauth/tokenExchange/tokenGeneratorMappings/{id}:
    delete:
      operationId: deleteTokenGeneratorMappingById
      parameters:
      - description: ID of Token Exchange Processor policy to Token Generator Mapping
          to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Token Exchange Processor policy to Token Generator mapping
            deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Delete a Token Exchange Processor policy to Token Generator Mapping.
      tags:
      - /oauth/tokenExchange/tokenGeneratorMappings
    get:
      operationId: getTokenGeneratorMappingById
      parameters:
      - description: ID of Token Exchange Processor policy to Token Generator Mapping
          to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessorPolicyToGeneratorMapping'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Get a Token Exchange Processor policy to Token Generator Mapping.
      tags:
      - /oauth/tokenExchange/tokenGeneratorMappings
    put:
      operationId: updateTokenGeneratorMappingById
      parameters:
      - description: ID of Token Exchange Processor policy to Token Generator Mapping
          to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: X-BypassExternalValidation
        required: false
        schema:
          default: false
          type: boolean
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ProcessorPolicyToGeneratorMapping'
        description: Configuration for updated Token Exchange Processor policy to
          Token Generator Mapping.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessorPolicyToGeneratorMapping'
          description: Token Exchange Processor policy to Token Generator mapping
            updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update a Token Exchange Processor policy to Token Generator Mapping.
      tags:
      - /oauth/tokenExchange/tokenGeneratorMappings
      x-codegen-request-body-name: body
  /oauth/tokenExchange/generator/settings:
    get:
      operationId: getOauthTokenExchangeSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenExchangeGeneratorSettings'
          description: Success.
      summary: Get general OAuth 2.0 Token Exchange Generator settings.
      tags:
      - /oauth/tokenExchange/generator
    put:
      operationId: updateOauthTokenExchangeSettings
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: bypassExternalValidation
        required: false
        schema:
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenExchangeGeneratorSettings'
        description: OAuth 2.0 Token Exchange Generator settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenExchangeGeneratorSettings'
          description: Settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update general OAuth 2.0 Token Exchange Generator settings.
      tags:
      - /oauth/tokenExchange/generator
      x-codegen-request-body-name: body
  /oauth/tokenExchange/generator/groups/{id}:
    delete:
      description: "Delete an OAuth 2.0 Token Exchange Generator group with the specified\
        \ ID. A 404 status code is returned for nonexistent IDs. Note: If the request\
        \ succeeds, the response body is empty. If the request fails, an ApiResult\
        \ is returned with details of the error."
      operationId: deleteOauthTokenExchangeGroup
      parameters:
      - description: ID of OAuth 2.0 Token Exchange Generator group to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Token Exchange Processor Policy deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Delete an OAuth 2.0 Token Exchange Generator group.
      tags:
      - /oauth/tokenExchange/generator
    get:
      description: Get an OAuth 2.0 Token Exchange Generator group with the specified
        ID. A 404 status code is returned for nonexistent IDs.
      operationId: getOauthTokenExchangeGroupById
      parameters:
      - description: ID of the OAuth 2.0 Token Exchange Generator group to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenExchangeGeneratorGroup'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find an OAuth 2.0 Token Exchange Generator group by ID.
      tags:
      - /oauth/tokenExchange/generator
    put:
      description: "Update an OAuth 2.0 Token Exchange Generator group with the matching\
        \ ID. If the group is not properly configured, a 422 status code is returned\
        \ along with a list of validation errors that must be corrected. Note: A 404\
        \ status code is returned for nonexistent IDs."
      operationId: updateOauthTokenExchangeGroup
      parameters:
      - description: ID of the OAuth 2.0 Token Exchange Generator group to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: bypassExternalValidation
        required: false
        schema:
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenExchangeGeneratorGroup'
        description: Configuration for updated OAuth 2.0 Token Exchange Generator
          group.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenExchangeGeneratorGroup'
          description: Token Exchange Processor Policy updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an OAuth 2.0 Token Exchange Generator group.
      tags:
      - /oauth/tokenExchange/generator
      x-codegen-request-body-name: body
  /oauth/tokenExchange/generator/groups:
    get:
      operationId: getOauthTokenExchangeGroups
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenExchangeGeneratorGroups'
          description: Success.
      summary: Get list of OAuth 2.0 Token Exchange Generator groups.
      tags:
      - /oauth/tokenExchange/generator
    post:
      description: "Create a new OAuth 2.0 Token Exchange Generator group. If the\
        \ OAuth 2.0 Token Exchange Generator group is not properly configured, a 422\
        \ status code is returned along with a list of validation errors that must\
        \ be corrected."
      operationId: createGroup
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: bypassExternalValidation
        required: false
        schema:
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenExchangeGeneratorGroup'
        description: Configuration for new OAuth 2.0 Token Exchange Generator.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenExchangeGeneratorGroup'
          description: Token Exchange Processor Policy created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new OAuth 2.0 Token Exchange Generator group.
      tags:
      - /oauth/tokenExchange/generator
      x-codegen-request-body-name: body
  /oauth/tokenExchange/processor/settings:
    get:
      operationId: getOauthTokenExchangeProcessorPolicySettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenExchangeProcessorSettings'
          description: Success.
      summary: Get general OAuth 2.0 Token Exchange Processor settings.
      tags:
      - /oauth/tokenExchange/processor
    put:
      operationId: updateOauthTokenExchangeProcessorPolicySettings
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: bypassExternalValidation
        required: false
        schema:
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenExchangeProcessorSettings'
        description: OAuth 2.0 Token Exchange Processor settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenExchangeProcessorSettings'
          description: Settings updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update general OAuth 2.0 Token Exchange Processor settings.
      tags:
      - /oauth/tokenExchange/processor
      x-codegen-request-body-name: body
  /oauth/tokenExchange/processor/policies/{id}:
    delete:
      description: "Delete an OAuth 2.0 Token Exchange Processor policy with the specified\
        \ ID. A 404 status code is returned for nonexistent IDs. Note: If the request\
        \ succeeds, the response body is empty. If the request fails, an ApiResult\
        \ is returned with details of the error."
      operationId: deleteOauthTokenExchangeProcessorPolicyy
      parameters:
      - description: ID of OAuth 2.0 Token Exchange Processor policy to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Token Exchange Processor Policy deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Delete an OAuth 2.0 Token Exchange Processor policy.
      tags:
      - /oauth/tokenExchange/processor
    get:
      description: Get an OAuth 2.0 Token Exchange Processor policy with the specified
        ID. A 404 status code is returned for nonexistent IDs.
      operationId: getOauthTokenExchangeProcessorPolicyById
      parameters:
      - description: ID of the OAuth 2.0 Token Exchange Processor policy to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenExchangeProcessorPolicy'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
      summary: Find an OAuth 2.0 Token Exchange Processor policy by ID.
      tags:
      - /oauth/tokenExchange/processor
    put:
      description: "Update an OAuth 2.0 Token Exchange Processor policy with the matching\
        \ ID. If the policy is not properly configured, a 422 status code is returned\
        \ along with a list of validation errors that must be corrected. Note: A 404\
        \ status code is returned for nonexistent IDs."
      operationId: updateOauthTokenExchangeProcessorPolicy
      parameters:
      - description: ID of the OAuth 2.0 Token Exchange Processor policy to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: bypassExternalValidation
        required: false
        schema:
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenExchangeProcessorPolicy'
        description: Configuration for updated OAuth 2.0 Token Exchange Processor
          policy.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenExchangeProcessorPolicy'
          description: Token Exchange Processor Policy updated.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Resource not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Update an OAuth 2.0 Token Exchange Processor policy.
      tags:
      - /oauth/tokenExchange/processor
      x-codegen-request-body-name: body
  /oauth/tokenExchange/processor/policies:
    get:
      operationId: getOauthTokenExchangeProcessorPolicyPolicies
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenExchangeProcessorPolicies'
          description: Success.
      summary: Get list of OAuth 2.0 Token Exchange Processor policies.
      tags:
      - /oauth/tokenExchange/processor
    post:
      description: "Create a new OAuth 2.0 Token Exchange Processor policy. If the\
        \ OAuth 2.0 Token Exchange Processor policy is not properly configured, a\
        \ 422 status code is returned along with a list of validation errors that\
        \ must be corrected."
      operationId: createOauthTokenExchangeProcessorPolicy
      parameters:
      - description: External validation will be bypassed when set to true. Default
          to false.
        explode: false
        in: header
        name: bypassExternalValidation
        required: false
        schema:
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenExchangeProcessorPolicy'
        description: Configuration for new OAuth 2.0 Token Exchange Processor.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenExchangeProcessorPolicy'
          description: Token Exchange Processor Policy created.
        "400":
          content: {}
          description: The request was improperly formatted or contained invalid fields.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
          description: Validation error(s) occurred.
      summary: Create a new OAuth 2.0 Token Exchange Processor policy.
      tags:
      - /oauth/tokenExchange/processor
      x-codegen-request-body-name: body
components:
  schemas:
    AccessTokenManagementSettings:
      description: General access token management settings.
      example:
        defaultAccessTokenManagerRef:
          location: location
          id: id
      properties:
        defaultAccessTokenManagerRef:
          $ref: '#/components/schemas/ResourceLink'
      type: object
    ResourceLink:
      description: A reference to a resource.
      example:
        location: location
        id: id
      properties:
        id:
          description: The ID of the resource.
          type: string
        location:
          description: "A read-only URL that references the resource. If the resource\
            \ is not currently URL-accessible, this property will be null."
          type: string
      required:
      - id
      type: object
    ApiResult:
      description: Details on the result of the operation.
      example:
        developerMessage: developerMessage
        resultId: resultId
        validationErrors:
        - developerMessage: developerMessage
          fieldPath: fieldPath
          errorId: errorId
          message: message
        - developerMessage: developerMessage
          fieldPath: fieldPath
          errorId: errorId
          message: message
        message: message
      properties:
        resultId:
          description: Result identifier.
          type: string
        message:
          description: Success or error message.
          type: string
        developerMessage:
          description: "Developer-oriented error message, if available."
          type: string
        validationErrors:
          description: "List of validation errors, if any."
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
      type: object
    ValidationError:
      description: A data input validation error.
      example:
        developerMessage: developerMessage
        fieldPath: fieldPath
        errorId: errorId
        message: message
      properties:
        errorId:
          description: Error identifier.
          type: string
        message:
          description: User-friendly error description.
          type: string
        developerMessage:
          description: "Developer-oriented error message, if available."
          type: string
        fieldPath:
          description: "The path to the model field to which the error relates, if\
            \ one exists."
          type: string
      type: object
    AccessTokenManagerDescriptor:
      allOf:
      - $ref: '#/components/schemas/PluginDescriptor'
      - description: An OAuth access token management plugin descriptor.
        type: object
    AccessTokenManagerDescriptors:
      description: A collection of OAuth access token management plugin descriptors.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The list of OAuth access token management plugin descriptors.
          items:
            $ref: '#/components/schemas/AccessTokenManagerDescriptor'
          type: array
      type: object
    ActionDescriptor:
      description: Describes an arbitrary action that is available for a plugin.
      example:
        download: true
        downloadFileName: downloadFileName
        name: name
        description: description
        downloadContentType: downloadContentType
        parameters:
        - advanced: true
          defaultValue: defaultValue
          name: name
          description: description
          label: label
          type: RADIO_GROUP
          defaultForLegacyConfig: defaultForLegacyConfig
          required: true
        - advanced: true
          defaultValue: defaultValue
          name: name
          description: description
          label: label
          type: RADIO_GROUP
          defaultForLegacyConfig: defaultForLegacyConfig
          required: true
      properties:
        name:
          description: The name of this action
          type: string
        description:
          description: The description of this action
          type: string
        download:
          description: Whether this action will trigger a download or invoke an internal
            action that will return a string result.
          type: boolean
        downloadContentType:
          description: "If this is a download, this is the Content-Type of the downloaded\
            \ file. Otherwise, this is null."
          type: string
        downloadFileName:
          description: "If this is a download, this is the suggested file name of\
            \ the downloaded file. Otherwise, this is null."
          type: string
        parameters:
          description: List of parameters for this action.
          items:
            $ref: '#/components/schemas/FieldDescriptor'
          type: array
      type: object
    AuthenticationSelectorDescriptor:
      allOf:
      - $ref: '#/components/schemas/PluginDescriptor'
      - description: An Authentication Selector descriptor.
        type: object
    AuthorizationDetailProcessorDescriptor:
      allOf:
      - $ref: '#/components/schemas/PluginDescriptor'
      - description: An authorization detail processor plugin descriptor.
        properties:
          supportedAuthorizationDetailTypes:
            description: The supported authorization detail types supported by this
              authorization detail processor plugin type. The default set is populated
              with 'ALL_AUTHORIZATION_DETAIL_TYPES' denoting that the plugin supports
              all authorization detail types.
            items:
              type: string
            type: array
            uniqueItems: true
        type: object
    BaseSelectionFieldDescriptor:
      allOf:
      - $ref: '#/components/schemas/FieldDescriptor'
      - description: Holds fields that are shared by all selection-type field descriptors.
        properties:
          optionValues:
            description: The list of option values for this selection field.
            items:
              $ref: '#/components/schemas/OptionValue'
            type: array
        type: object
    CheckBoxFieldDescriptor:
      allOf:
      - $ref: '#/components/schemas/FieldDescriptor'
      - description: A boolean field typically rendered as a checkbox in a configuration
          UI.
        type: object
    ClientRegistrationPolicyDescriptor:
      allOf:
      - $ref: '#/components/schemas/PluginDescriptor'
      - description: A client registration policy plugin descriptor.
        type: object
    CustomDataStoreDescriptor:
      allOf:
      - $ref: '#/components/schemas/PluginDescriptor'
      - description: A custom data store descriptor.
        type: object
    FieldDescriptor:
      description: Describes a plugin configuration field.
      discriminator:
        propertyName: type
      example:
        advanced: true
        defaultValue: defaultValue
        name: name
        description: description
        label: label
        type: RADIO_GROUP
        defaultForLegacyConfig: defaultForLegacyConfig
        required: true
      properties:
        type:
          description: The type of field descriptor.
          enum:
          - RADIO_GROUP
          - SELECT
          - FILTERABLE_SELECT
          - CHECK_BOX
          - TEXT_AREA
          - TEXT
          - UPLOAD_FILE
          - HASHED_TEXT
          type: string
        name:
          description: Name of the field.
          type: string
        description:
          description: Description of the field.
          type: string
        defaultValue:
          description: Default value of the field. This is the value pre-populated
            in the UI on new plugin instance configuration. This is also the value
            used to populate the field if it is missing in a POST or PUT request and
            no 'defaultForLegacyConfig' is defined.
          type: string
        defaultForLegacyConfig:
          description: "Default value of the field when it is missing from the configuration\
            \ (e.g. in upgrade scenarios). This is the value pre-populated in the\
            \ UI for existing plugin configurations without values for the field.\
            \ This is also the value used to populate the field if it is missing in\
            \ a POST or PUT request. If 'defaultForLegacyConfig' is not defined, PingFederate\
            \ will fall back to applying the 'defaultValue' to the field."
          type: string
        advanced:
          description: Whether this is an advanced field or not.
          type: boolean
        required:
          description: Whether a value is required for this field or not.
          type: boolean
        label:
          description: Label of the field to be displayed in the administrative console.
          type: string
      type: object
    HashedTextFieldDescriptor:
      allOf:
      - $ref: '#/components/schemas/FieldDescriptor'
      - description: A text field that will contain a secure salted hash.
        properties:
          size:
            description: The size of the text field.
            format: int32
            type: integer
        type: object
    IdpAdapterDescriptor:
      allOf:
      - $ref: '#/components/schemas/PluginDescriptor'
      - description: An IdP adapter descriptor.
        type: object
    NotificationPublisherDescriptor:
      allOf:
      - $ref: '#/components/schemas/PluginDescriptor'
      - description: A notification publisher plugin descriptor.
        type: object
    OptionValue:
      description: An option name and value associated with a selection field.
      properties:
        name:
          description: The name of the option.
          type: string
        value:
          description: The value associated with this option.
          type: string
      type: object
    OutOfBandAuthPluginDescriptor:
      allOf:
      - $ref: '#/components/schemas/PluginDescriptor'
      - description: An out of band authenticator plugin descriptor.
        type: object
    PasswordCredentialValidatorDescriptor:
      allOf:
      - $ref: '#/components/schemas/PluginDescriptor'
      - description: A password credential validator descriptor.
        type: object
    PluginConfigDescriptor:
      description: Defines the configuration fields available for a plugin.
      example:
        tables:
        - columns:
          - advanced: true
            defaultValue: defaultValue
            name: name
            description: description
            label: label
            type: RADIO_GROUP
            defaultForLegacyConfig: defaultForLegacyConfig
            required: true
          - advanced: true
            defaultValue: defaultValue
            name: name
            description: description
            label: label
            type: RADIO_GROUP
            defaultForLegacyConfig: defaultForLegacyConfig
            required: true
          name: name
          description: description
          label: label
          requireDefaultRow: true
        - columns:
          - advanced: true
            defaultValue: defaultValue
            name: name
            description: description
            label: label
            type: RADIO_GROUP
            defaultForLegacyConfig: defaultForLegacyConfig
            required: true
          - advanced: true
            defaultValue: defaultValue
            name: name
            description: description
            label: label
            type: RADIO_GROUP
            defaultForLegacyConfig: defaultForLegacyConfig
            required: true
          name: name
          description: description
          label: label
          requireDefaultRow: true
        actionDescriptors:
        - download: true
          downloadFileName: downloadFileName
          name: name
          description: description
          downloadContentType: downloadContentType
          parameters:
          - advanced: true
            defaultValue: defaultValue
            name: name
            description: description
            label: label
            type: RADIO_GROUP
            defaultForLegacyConfig: defaultForLegacyConfig
            required: true
          - advanced: true
            defaultValue: defaultValue
            name: name
            description: description
            label: label
            type: RADIO_GROUP
            defaultForLegacyConfig: defaultForLegacyConfig
            required: true
        - download: true
          downloadFileName: downloadFileName
          name: name
          description: description
          downloadContentType: downloadContentType
          parameters:
          - advanced: true
            defaultValue: defaultValue
            name: name
            description: description
            label: label
            type: RADIO_GROUP
            defaultForLegacyConfig: defaultForLegacyConfig
            required: true
          - advanced: true
            defaultValue: defaultValue
            name: name
            description: description
            label: label
            type: RADIO_GROUP
            defaultForLegacyConfig: defaultForLegacyConfig
            required: true
        description: description
        fields:
        - advanced: true
          defaultValue: defaultValue
          name: name
          description: description
          label: label
          type: RADIO_GROUP
          defaultForLegacyConfig: defaultForLegacyConfig
          required: true
        - advanced: true
          defaultValue: defaultValue
          name: name
          description: description
          label: label
          type: RADIO_GROUP
          defaultForLegacyConfig: defaultForLegacyConfig
          required: true
      properties:
        description:
          description: The description of this plugin.
          type: string
        fields:
          description: The configuration fields available for this plugin.
          items:
            $ref: '#/components/schemas/FieldDescriptor'
          type: array
        tables:
          description: Configuration tables available for this plugin.
          items:
            $ref: '#/components/schemas/TableDescriptor'
          type: array
        actionDescriptors:
          description: The available actions for this plugin.
          items:
            $ref: '#/components/schemas/ActionDescriptor'
          type: array
      type: object
    PluginDescriptor:
      description: "Defines a plugin type, including available configuration parameters."
      properties:
        id:
          description: Unique ID of the plugin.
          type: string
        name:
          description: Friendly name for the plugin.
          type: string
        className:
          description: Full class name of the class that implements this plugin.
          type: string
        attributeContract:
          description: The attribute contract for this plugin.
          items:
            type: string
          type: array
        supportsExtendedContract:
          description: Determines whether this plugin supports extending the attribute
            contract.
          type: boolean
        configDescriptor:
          $ref: '#/components/schemas/PluginConfigDescriptor'
      type: object
    RadioGroupFieldDescriptor:
      allOf:
      - $ref: '#/components/schemas/BaseSelectionFieldDescriptor'
      - description: A selection-type field intended to be rendered as a group of
          radio buttons in a UI.
        type: object
    SecretManagerDescriptor:
      allOf:
      - $ref: '#/components/schemas/PluginDescriptor'
      - description: A secret manager plugin descriptor.
        type: object
    SelectFieldDescriptor:
      allOf:
      - $ref: '#/components/schemas/BaseSelectionFieldDescriptor'
      - description: A selection field that is intended to be rendered as a dropdown
          list of options.
        type: object
    SpAdapterDescriptor:
      allOf:
      - $ref: '#/components/schemas/PluginDescriptor'
      - description: An SP adapter descriptor.
        type: object
    TableDescriptor:
      description: Defines a plugin configuration table.
      example:
        columns:
        - advanced: true
          defaultValue: defaultValue
          name: name
          description: description
          label: label
          type: RADIO_GROUP
          defaultForLegacyConfig: defaultForLegacyConfig
          required: true
        - advanced: true
          defaultValue: defaultValue
          name: name
          description: description
          label: label
          type: RADIO_GROUP
          defaultForLegacyConfig: defaultForLegacyConfig
          required: true
        name: name
        description: description
        label: label
        requireDefaultRow: true
      properties:
        name:
          description: The name of the table.
          type: string
        description:
          description: Description for the table.
          type: string
        columns:
          description: Get the columns in the table.
          items:
            $ref: '#/components/schemas/FieldDescriptor'
          type: array
        label:
          description: Label for the table to be displayed in the administrative console.
          type: string
        requireDefaultRow:
          description: Configure whether this table requires default row to be set.
          type: boolean
      type: object
    TextAreaFieldDescriptor:
      allOf:
      - $ref: '#/components/schemas/FieldDescriptor'
      - description: A field intended to be rendered as a text box in a UI.
        properties:
          rows:
            description: The number of rows for the text box.
            format: int32
            type: integer
          columns:
            description: The number of columns for the text box.
            format: int32
            type: integer
        type: object
    TextFieldDescriptor:
      allOf:
      - $ref: '#/components/schemas/FieldDescriptor'
      - description: A text field.
        properties:
          encrypted:
            description: Determines whether the field value should be masked in the
              UI and encrypted on disk.
            type: boolean
          size:
            description: The size of the text field.
            format: int32
            type: integer
        type: object
    TokenGeneratorDescriptor:
      allOf:
      - $ref: '#/components/schemas/PluginDescriptor'
      - description: A token generator descriptor.
        type: object
    TokenProcessorDescriptor:
      allOf:
      - $ref: '#/components/schemas/PluginDescriptor'
      - description: A token processor descriptor.
        type: object
    UploadFileFieldDescriptor:
      allOf:
      - $ref: '#/components/schemas/FieldDescriptor'
      - description: A field which allows the user to upload a file.
        type: object
    AccessTokenAttribute:
      description: An attribute for an Access Token's attribute contract.
      properties:
        name:
          description: The name of this attribute.
          type: string
        multiValued:
          description: Indicates whether attribute value is always returned as an
            array.
          type: boolean
      required:
      - name
      type: object
    AccessTokenAttributeContract:
      description: A set of attributes exposed by an Access Token Manager.
      properties:
        coreAttributes:
          description: A list of core token attributes that are associated with the
            access token management plugin type. This field is read-only and is ignored
            on POST/PUT.
          items:
            $ref: '#/components/schemas/AccessTokenAttribute'
          type: array
        extendedAttributes:
          description: A list of additional token attributes that are associated with
            this access token management plugin instance.
          items:
            $ref: '#/components/schemas/AccessTokenAttribute'
          type: array
        inherited:
          description: "Whether this attribute contract is inherited from its parent\
            \ instance. If true, the rest of the properties in this model become read-only.\
            \ The default value is false."
          type: boolean
        defaultSubjectAttribute:
          description: Default subject attribute to use for audit logging when validating
            the access token. Blank value means to use USER_KEY attribute value after
            grant lookup.
          type: string
      type: object
    AccessTokenManager:
      allOf:
      - $ref: '#/components/schemas/PluginInstance'
      - description: An OAuth access token management plugin instance.
        properties:
          attributeContract:
            $ref: '#/components/schemas/AccessTokenAttributeContract'
          selectionSettings:
            $ref: '#/components/schemas/AtmSelectionSettings'
          accessControlSettings:
            $ref: '#/components/schemas/AtmAccessControlSettings'
          sessionValidationSettings:
            $ref: '#/components/schemas/SessionValidationSettings'
          sequenceNumber:
            description: Number added to an access token to identify which Access
              Token Manager issued the token.
            format: int32
            type: integer
        type: object
    AccessTokenManagers:
      description: A collection of OAuth access token management plugin instances.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The list of OAuth access token management plugin instances.
          items:
            $ref: '#/components/schemas/AccessTokenManager'
          type: array
      type: object
    AtmAccessControlSettings:
      description: Access control settings for an access token management plugin instance.
      properties:
        inherited:
          description: "If this token manager has a parent, this flag determines whether\
            \ access control settings are inherited from the parent. When set to true,\
            \ the other fields in this model become read-only. The default value is\
            \ false."
          type: boolean
        restrictClients:
          description: "Determines whether access to this token manager is restricted\
            \ to specific OAuth clients. If false, the 'allowedClients' field is ignored.\
            \ The default value is false."
          type: boolean
        allowedClients:
          description: "If 'restrictClients' is true, this field defines the list\
            \ of OAuth clients that are allowed to access the token manager."
          items:
            $ref: '#/components/schemas/ResourceLink'
          type: array
      type: object
    AtmSelectionSettings:
      description: Selection settings for an access token management plugin instance.
      properties:
        inherited:
          description: "If this token manager has a parent, this flag determines whether\
            \ selection settings, such as resource URI's, are inherited from the parent.\
            \ When set to true, the other fields in this model become read-only. The\
            \ default value is false."
          type: boolean
        resourceUris:
          description: "The list of base resource URI's which map to this token manager.\
            \ A resource URI, specified via the 'aud' parameter, can be used to select\
            \ a specific token manager for an OAuth request."
          items:
            type: string
          type: array
      type: object
    AttributeFulfillmentValue:
      description: Defines how an attribute in an attribute contract should be populated.
      example:
        source:
          id: id
          type: TOKEN_EXCHANGE_PROCESSOR_POLICY
        value: value
      properties:
        source:
          $ref: '#/components/schemas/SourceTypeIdKey'
        value:
          description: The value for this attribute.
          type: string
      required:
      - source
      - value
      type: object
    AttributeSourceAggregation:
      discriminator:
        mapping:
          CUSTOM: '#/components/schemas/CustomAttributeSource'
          JDBC: '#/components/schemas/JdbcAttributeSource'
          LDAP: '#/components/schemas/LdapAttributeSource'
          PING_ONE_LDAP_GATEWAY: '#/components/schemas/LdapAttributeSource'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/CustomAttributeSource'
      - $ref: '#/components/schemas/JdbcAttributeSource'
      - $ref: '#/components/schemas/LdapAttributeSource'
    AttributeSource:
      description: The configured settings to look up attributes from an associated
        data store.
      discriminator:
        propertyName: type
      properties:
        type:
          description: The data store type of this attribute source.
          enum:
          - LDAP
          - PING_ONE_LDAP_GATEWAY
          - JDBC
          - CUSTOM
          type: string
        dataStoreRef:
          $ref: '#/components/schemas/ResourceLink'
        id:
          description: "The ID that defines this attribute source. Only alphanumeric\
            \ characters allowed.<br>Note: Required for OpenID Connect policy attribute\
            \ sources, OAuth IdP adapter mappings, OAuth access token mappings and\
            \ APC-to-SP Adapter Mappings. IdP Connections will ignore this property\
            \ since it only allows one attribute source to be defined per mapping.\
            \ IdP-to-SP Adapter Mappings can contain multiple attribute sources."
          type: string
        description:
          description: "The description of this attribute source. The description\
            \ needs to be unique amongst the attribute sources for the mapping.<br>Note:\
            \ Required for APC-to-SP Adapter Mappings"
          type: string
        attributeContractFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of mappings from attribute names to their fulfillment
            values. This field is only valid for the SP Connection's Browser SSO mappings
          type: object
      required:
      - dataStoreRef
      - type
      type: object
    AuthenticationSelector:
      allOf:
      - $ref: '#/components/schemas/PluginInstance'
      - description: An Authentication Selector instance.
        properties:
          attributeContract:
            $ref: '#/components/schemas/AuthenticationSelectorAttributeContract'
        type: object
    AuthenticationSelectorAttribute:
      description: An attribute for the Authentication Selector attribute contract.
      properties:
        name:
          description: The name of this attribute.
          type: string
      required:
      - name
      type: object
    AuthenticationSelectorAttributeContract:
      description: A set of attributes exposed by an Authentication Selector.
      properties:
        extendedAttributes:
          description: A list of additional attributes that can be returned by the
            Authentication Selector. The extended attributes are only used if the
            Authentication Selector supports them.
          items:
            $ref: '#/components/schemas/AuthenticationSelectorAttribute'
          type: array
      type: object
    AuthorizationDetailProcessor:
      allOf:
      - $ref: '#/components/schemas/PluginInstance'
      - description: An authorization detail processor plugin instance.
        type: object
    BinaryLdapAttributeSettings:
      description: Binary settings for a LDAP attribute.
      properties:
        binaryEncoding:
          description: "Get the encoding type for this attribute. If not specified,\
            \ the default is BASE64."
          enum:
          - BASE64
          - HEX
          - SID
          type: string
      type: object
    ClientRegistrationPolicy:
      allOf:
      - $ref: '#/components/schemas/PluginInstance'
      - description: A client registration policy plugin instance.
        type: object
    ConditionalIssuanceCriteriaEntry:
      description: "An issuance criterion that checks a source attribute against a\
        \ particular condition and the expected value. If the condition is true then\
        \ this issuance criterion passes, otherwise the criterion fails."
      example:
        condition: EQUALS
        errorResult: errorResult
        attributeName: attributeName
        source:
          id: id
          type: TOKEN_EXCHANGE_PROCESSOR_POLICY
        value: value
      properties:
        source:
          $ref: '#/components/schemas/SourceTypeIdKey'
        attributeName:
          description: The name of the attribute to use in this issuance criterion.
          type: string
        condition:
          description: The condition that will be applied to the source attribute's
            value and the expected value.
          enum:
          - EQUALS
          - EQUALS_CASE_INSENSITIVE
          - EQUALS_DN
          - NOT_EQUAL
          - NOT_EQUAL_CASE_INSENSITIVE
          - NOT_EQUAL_DN
          - MULTIVALUE_CONTAINS
          - MULTIVALUE_CONTAINS_CASE_INSENSITIVE
          - MULTIVALUE_CONTAINS_DN
          - MULTIVALUE_DOES_NOT_CONTAIN
          - MULTIVALUE_DOES_NOT_CONTAIN_CASE_INSENSITIVE
          - MULTIVALUE_DOES_NOT_CONTAIN_DN
          type: string
        value:
          description: The expected value of this issuance criterion.
          type: string
        errorResult:
          description: The error result to return if this issuance criterion fails.
            This error result will show up in the PingFederate server logs.
          type: string
      required:
      - attributeName
      - condition
      - source
      - value
      type: object
    ConfigField:
      description: A plugin configuration field value.
      example:
        inherited: true
        encryptedValue: encryptedValue
        name: name
        value: value
      properties:
        name:
          description: The name of the configuration field.
          type: string
        value:
          description: "The value for the configuration field. For encrypted or hashed\
            \ fields, GETs will not return this attribute. To update an encrypted\
            \ or hashed field, specify the new value in this attribute."
          type: string
        encryptedValue:
          description: "For encrypted or hashed fields, this attribute contains the\
            \ encrypted representation of the field's value, if a value is defined.\
            \ If you do not want to update the stored value, this attribute should\
            \ be passed back unchanged."
          type: string
        inherited:
          description: "Whether this field is inherited from its parent instance.\
            \ If true, the value/encrypted value properties become read-only. The\
            \ default value is false."
          type: boolean
      required:
      - name
      type: object
    ConfigRow:
      description: A row of configuration values for a plugin configuration table.
      example:
        defaultRow: true
        fields:
        - inherited: true
          encryptedValue: encryptedValue
          name: name
          value: value
        - inherited: true
          encryptedValue: encryptedValue
          name: name
          value: value
      properties:
        fields:
          description: The configuration fields in the row.
          items:
            $ref: '#/components/schemas/ConfigField'
          type: array
        defaultRow:
          description: Whether this row is the default.
          type: boolean
      required:
      - fields
      type: object
    ConfigTable:
      description: A plugin configuration table populated with values.
      example:
        inherited: true
        name: name
        rows:
        - defaultRow: true
          fields:
          - inherited: true
            encryptedValue: encryptedValue
            name: name
            value: value
          - inherited: true
            encryptedValue: encryptedValue
            name: name
            value: value
        - defaultRow: true
          fields:
          - inherited: true
            encryptedValue: encryptedValue
            name: name
            value: value
          - inherited: true
            encryptedValue: encryptedValue
            name: name
            value: value
      properties:
        name:
          description: The name of the table.
          type: string
        rows:
          description: List of table rows.
          items:
            $ref: '#/components/schemas/ConfigRow'
          type: array
        inherited:
          description: "Whether this table is inherited from its parent instance.\
            \ If true, the rows become read-only. The default value is false."
          type: boolean
      required:
      - name
      type: object
    CustomAttributeSource:
      allOf:
      - $ref: '#/components/schemas/AttributeSource'
      - description: The configured settings used to look up attributes from a custom
          data store.
        properties:
          filterFields:
            description: The list of fields that can be used to filter a request to
              the custom data store.
            items:
              $ref: '#/components/schemas/FieldEntry'
            type: array
        type: object
    ExpressionIssuanceCriteriaEntry:
      description: An issuance criterion that uses a Boolean return value from an
        OGNL expression to determine whether or not it passes.
      example:
        expression: expression
        errorResult: errorResult
      properties:
        expression:
          description: The OGNL expression to evaluate.
          type: string
        errorResult:
          description: The error result to return if this issuance criterion fails.
            This error result will show up in the PingFederate server logs.
          type: string
      required:
      - expression
      type: object
    FieldEntry:
      description: A simple name value pair to represent a field entry.
      properties:
        value:
          description: The value of this field. Whether or not the value is required
            will be determined by plugin validation checks.
          type: string
        name:
          description: The name of this field.
          type: string
      required:
      - name
      type: object
      xml:
        name: FieldEntry
    IdpAdapter:
      allOf:
      - $ref: '#/components/schemas/PluginInstance'
      - description: An IdP adapter instance.
        properties:
          authnCtxClassRef:
            description: The fixed value that indicates how the user was authenticated.
            type: string
          attributeMapping:
            $ref: '#/components/schemas/IdpAdapterContractMapping'
          attributeContract:
            $ref: '#/components/schemas/IdpAdapterAttributeContract'
        type: object
    IdpAdapterAttribute:
      description: An attribute for the IdP adapter attribute contract.
      properties:
        name:
          description: The name of this attribute.
          type: string
        pseudonym:
          description: Specifies whether this attribute is used to construct a pseudonym
            for the SP. Defaults to false.
          type: boolean
        masked:
          description: Specifies whether this attribute is masked in PingFederate
            logs. Defaults to false.
          type: boolean
      required:
      - name
      type: object
    IdpAdapterAttributeContract:
      description: A set of attributes exposed by an IdP adapter.
      properties:
        coreAttributes:
          description: A list of IdP adapter attributes that correspond to the attributes
            exposed by the IdP adapter type.
          items:
            $ref: '#/components/schemas/IdpAdapterAttribute'
          type: array
        extendedAttributes:
          description: A list of additional attributes that can be returned by the
            IdP adapter. The extended attributes are only used if the adapter supports
            them.
          items:
            $ref: '#/components/schemas/IdpAdapterAttribute'
          type: array
        uniqueUserKeyAttribute:
          description: The attribute to use for uniquely identify a user's authentication
            sessions.
          type: string
        maskOgnlValues:
          description: Whether or not all OGNL expressions used to fulfill an outgoing
            assertion contract should be masked in the logs. Defaults to false.
          type: boolean
        inherited:
          description: "Whether this attribute contract is inherited from its parent\
            \ instance. If true, the rest of the properties in this model become read-only.\
            \ The default value is false."
          type: boolean
      required:
      - coreAttributes
      type: object
    IdpAdapterContractMapping:
      description: An IdP Adapter Contract Mapping.
      properties:
        attributeSources:
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: '#/components/schemas/AttributeSourceAggregation'
          type: array
        attributeContractFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of mappings from attribute names to their fulfillment
            values.
          type: object
        issuanceCriteria:
          $ref: '#/components/schemas/IssuanceCriteria'
        inherited:
          description: "Whether this attribute mapping is inherited from its parent\
            \ instance. If true, the rest of the properties in this model become read-only.\
            \ The default value is false."
          type: boolean
      required:
      - attributeContractFulfillment
      type: object
    IssuanceCriteria:
      description: A list of criteria that determines whether a transaction (usually
        a SSO transaction) is continued. All criteria must pass in order for the transaction
        to continue.
      example:
        expressionCriteria:
        - expression: expression
          errorResult: errorResult
        - expression: expression
          errorResult: errorResult
        conditionalCriteria:
        - condition: EQUALS
          errorResult: errorResult
          attributeName: attributeName
          source:
            id: id
            type: TOKEN_EXCHANGE_PROCESSOR_POLICY
          value: value
        - condition: EQUALS
          errorResult: errorResult
          attributeName: attributeName
          source:
            id: id
            type: TOKEN_EXCHANGE_PROCESSOR_POLICY
          value: value
      properties:
        conditionalCriteria:
          description: A list of conditional issuance criteria where existing attributes
            must satisfy their conditions against expected values in order for the
            transaction to continue.
          items:
            $ref: '#/components/schemas/ConditionalIssuanceCriteriaEntry'
          type: array
        expressionCriteria:
          description: A list of expression issuance criteria where the OGNL expressions
            must evaluate to true in order for the transaction to continue.
          items:
            $ref: '#/components/schemas/ExpressionIssuanceCriteriaEntry'
          type: array
      type: object
    JdbcAttributeSource:
      allOf:
      - $ref: '#/components/schemas/AttributeSource'
      - description: The configured settings used to look up attributes from a JDBC
          data store.
        properties:
          schema:
            description: "Lists the table structure that stores information within\
              \ a database. Some databases, such as Oracle, require a schema for a\
              \ JDBC query. Other databases, such as MySQL, do not require a schema."
            type: string
          table:
            description: The name of the database table. The name is used to construct
              the SQL query to retrieve data from the data store.
            type: string
          columnNames:
            description: A list of column names used to construct the SQL query to
              retrieve data from the specified table in the datastore.
            items:
              type: string
            type: array
          filter:
            description: The JDBC WHERE clause used to query your data store to locate
              a user record.
            type: string
        required:
        - filter
        - table
        type: object
    LdapAttributeSource:
      allOf:
      - $ref: '#/components/schemas/AttributeSource'
      - description: The configured settings used to look up attributes from a LDAP
          data store.
        properties:
          baseDn:
            description: "The base DN to search from. If not specified, the search\
              \ will start at the LDAP's root."
            type: string
          searchScope:
            description: Determines the node depth of the query.
            enum:
            - OBJECT
            - ONE_LEVEL
            - SUBTREE
            type: string
          searchFilter:
            description: The LDAP filter that will be used to lookup the objects from
              the directory.
            type: string
          searchAttributes:
            description: A list of LDAP attributes returned from search and available
              for mapping.
            items:
              type: string
            type: array
          binaryAttributeSettings:
            additionalProperties:
              $ref: '#/components/schemas/BinaryLdapAttributeSettings'
            description: The advanced settings for binary LDAP attributes.
            type: object
          memberOfNestedGroup:
            description: Set this to true to return transitive group memberships for
              the 'memberOf' attribute.  This only applies for Active Directory data
              sources.  All other data sources will be set to false.
            type: boolean
        required:
        - searchFilter
        - searchScope
        type: object
    NotificationPublisher:
      allOf:
      - $ref: '#/components/schemas/PluginInstance'
      - description: A notification publisher plugin instance.
        type: object
    OutOfBandAuthAttribute:
      description: An attribute for the out of band authenticator plugin instance
        attribute contract.
      properties:
        name:
          description: The name of this attribute.
          type: string
      required:
      - name
      type: object
    OutOfBandAuthAttributeContract:
      description: A set of attributes exposed by an out of band authenticator plugin
        instance.
      properties:
        coreAttributes:
          description: A list of out of band authenticator attributes.
          items:
            $ref: '#/components/schemas/OutOfBandAuthAttribute'
          type: array
        extendedAttributes:
          description: A list of additional attributes that can be returned by the
            out of band authenticator plugin instance. The extended attributes are
            only used if the plugin supports them.
          items:
            $ref: '#/components/schemas/OutOfBandAuthAttribute'
          type: array
      required:
      - coreAttributes
      type: object
    OutOfBandAuthenticator:
      allOf:
      - $ref: '#/components/schemas/PluginInstance'
      - description: An out of band authenticator plugin instance.
        properties:
          attributeContract:
            $ref: '#/components/schemas/OutOfBandAuthAttributeContract'
        type: object
    PasswordCredentialValidator:
      allOf:
      - $ref: '#/components/schemas/PluginInstance'
      - description: The set of attributes used to configure a password credential
          validator
        properties:
          attributeContract:
            $ref: '#/components/schemas/PasswordCredentialValidatorAttributeContract'
        type: object
    PasswordCredentialValidatorAttribute:
      description: An attribute for the password credential validator attribute contract.
      properties:
        name:
          description: The name of this attribute.
          type: string
      required:
      - name
      type: object
    PasswordCredentialValidatorAttributeContract:
      properties:
        coreAttributes:
          description: A list of read-only attributes that are automatically populated
            by the password credential validator descriptor.
          items:
            $ref: '#/components/schemas/PasswordCredentialValidatorAttribute'
          type: array
        extendedAttributes:
          description: A list of additional attributes that can be returned by the
            password credential validator. The extended attributes are only used if
            the adapter supports them.
          items:
            $ref: '#/components/schemas/PasswordCredentialValidatorAttribute'
          type: array
        inherited:
          description: "Whether this attribute contract is inherited from its parent\
            \ instance. If true, the rest of the properties in this model become read-only.\
            \ The default value is false."
          type: boolean
      type: object
    PluginConfiguration:
      description: Configuration settings for a plugin instance.
      example:
        tables:
        - inherited: true
          name: name
          rows:
          - defaultRow: true
            fields:
            - inherited: true
              encryptedValue: encryptedValue
              name: name
              value: value
            - inherited: true
              encryptedValue: encryptedValue
              name: name
              value: value
          - defaultRow: true
            fields:
            - inherited: true
              encryptedValue: encryptedValue
              name: name
              value: value
            - inherited: true
              encryptedValue: encryptedValue
              name: name
              value: value
        - inherited: true
          name: name
          rows:
          - defaultRow: true
            fields:
            - inherited: true
              encryptedValue: encryptedValue
              name: name
              value: value
            - inherited: true
              encryptedValue: encryptedValue
              name: name
              value: value
          - defaultRow: true
            fields:
            - inherited: true
              encryptedValue: encryptedValue
              name: name
              value: value
            - inherited: true
              encryptedValue: encryptedValue
              name: name
              value: value
        fields:
        - inherited: true
          encryptedValue: encryptedValue
          name: name
          value: value
        - inherited: true
          encryptedValue: encryptedValue
          name: name
          value: value
      properties:
        tables:
          description: List of configuration tables.
          items:
            $ref: '#/components/schemas/ConfigTable'
          type: array
        fields:
          description: List of configuration fields.
          items:
            $ref: '#/components/schemas/ConfigField'
          type: array
      type: object
    PluginInstance:
      description: A plugin instance.
      properties:
        id:
          description: "The ID of the plugin instance. The ID cannot be modified once\
            \ the instance is created.<br>Note: Ignored when specifying a connection's\
            \ adapter override."
          type: string
        name:
          description: "The plugin instance name. The name can be modified once the\
            \ instance is created.<br>Note: Ignored when specifying a connection's\
            \ adapter override."
          type: string
        pluginDescriptorRef:
          $ref: '#/components/schemas/ResourceLink'
        parentRef:
          $ref: '#/components/schemas/ResourceLink'
        configuration:
          $ref: '#/components/schemas/PluginConfiguration'
        lastModified:
          description: The time at which the plugin instance was last changed. This
            property is read only and is ignored on PUT and POST requests.
          format: date-time
          type: string
      required:
      - configuration
      - id
      - name
      - pluginDescriptorRef
      type: object
    SecretManager:
      allOf:
      - $ref: '#/components/schemas/PluginInstance'
      - description: A secret manager plugin instance.
        type: object
    SessionValidationSettings:
      description: Session validation settings for an access token management plugin
        instance.
      properties:
        inherited:
          description: "If this token manager has a parent, this flag determines whether\
            \ session validation settings, such as checkValidAuthnSession, are inherited\
            \ from the parent. When set to true, the other fields in this model become\
            \ read-only. The default value is false."
          type: boolean
        includeSessionId:
          description: "Include the session identifier in the access token. Note that\
            \ if any of the session validation features is enabled, the session identifier\
            \ will already be included in the access tokens."
          type: boolean
        checkValidAuthnSession:
          description: Check for a valid authentication session when validating the
            access token.
          type: boolean
        checkSessionRevocationStatus:
          description: Check the session revocation status when validating the access
            token.
          type: boolean
        updateAuthnSessionActivity:
          description: Update authentication session activity when validating the
            access token.
          type: boolean
      type: object
    SourceTypeIdKey:
      description: "A key that is meant to reference a source from which an attribute\
        \ can be retrieved. This model is usually paired with a value which, depending\
        \ on the SourceType, can be a hardcoded value or a reference to an attribute\
        \ name specific to that SourceType. Not all values are applicable - a validation\
        \ error will be returned for incorrect values.<br>For each SourceType, the\
        \ value should be:<br>ACCOUNT_LINK - If account linking was enabled for the\
        \ browser SSO, the value must be 'Local User ID', unless it has been overridden\
        \ in PingFederate's server configuration.<br>ADAPTER - The value is one of\
        \ the attributes of the IdP Adapter.<br>ASSERTION - The value is one of the\
        \ attributes coming from the SAML assertion.<br>AUTHENTICATION_POLICY_CONTRACT\
        \ - The value is one of the attributes coming from an authentication policy\
        \ contract.<br>LOCAL_IDENTITY_PROFILE - The value is one of the fields coming\
        \ from a local identity profile.<br>CONTEXT - The value must be one of the\
        \ following ['TargetResource' or 'OAuthScopes' or 'ClientId' or 'AuthenticationCtx'\
        \ or 'ClientIp' or 'Locale' or 'StsBasicAuthUsername' or 'StsSSLClientCertSubjectDN'\
        \ or 'StsSSLClientCertChain' or 'VirtualServerId' or 'AuthenticatingAuthority'\
        \ or 'DefaultPersistentGrantLifetime'.]<br>CLAIMS - Attributes provided by\
        \ the OIDC Provider.<br>CUSTOM_DATA_STORE - The value is one of the attributes\
        \ returned by this custom data store.<br>EXPRESSION - The value is an OGNL\
        \ expression.<br>EXTENDED_CLIENT_METADATA - The value is from an OAuth extended\
        \ client metadata parameter. This source type is deprecated and has been replaced\
        \ by EXTENDED_PROPERTIES.<br>EXTENDED_PROPERTIES - The value is from an OAuth\
        \ Client's extended property.<br>IDP_CONNECTION - The value is one of the\
        \ attributes passed in by the IdP connection.<br>JDBC_DATA_STORE - The value\
        \ is one of the column names returned from the JDBC attribute source.<br>LDAP_DATA_STORE\
        \ - The value is one of the LDAP attributes supported by your LDAP data store.<br>MAPPED_ATTRIBUTES\
        \ - The value is the name of one of the mapped attributes that is defined\
        \ in the associated attribute mapping.<br>OAUTH_PERSISTENT_GRANT - The value\
        \ is one of the attributes from the persistent grant.<br>PASSWORD_CREDENTIAL_VALIDATOR\
        \ - The value is one of the attributes of the PCV.<br>NO_MAPPING - A placeholder\
        \ value to indicate that an attribute currently has no mapped source.TEXT\
        \ - A hardcoded value that is used to populate the corresponding attribute.<br>TOKEN\
        \ - The value is one of the token attributes.<br>REQUEST - The value is from\
        \ the request context such as the CIBA identity hint contract or the request\
        \ contract for Ws-Trust.<br>TRACKED_HTTP_PARAMS - The value is from the original\
        \ request parameters.<br>SUBJECT_TOKEN - The value is one of the OAuth 2.0\
        \ Token exchange subject_token attributes.<br>ACTOR_TOKEN - The value is one\
        \ of the OAuth 2.0 Token exchange actor_token attributes.<br>TOKEN_EXCHANGE_PROCESSOR_POLICY\
        \ - The value is one of the attributes coming from a Token Exchange Processor\
        \ policy.<br>FRAGMENT - The value is one of the attributes coming from an\
        \ authentication policy fragment.<br>INPUTS - The value is one of the attributes\
        \ coming from an attribute defined in the input authentication policy contract\
        \ for an authentication policy fragment.<br>ATTRIBUTE_QUERY - The value is\
        \ one of the user attributes queried from an Attribute Authority.<br>IDENTITY_STORE_USER\
        \ - The value is one of the attributes from a user identity store provisioner\
        \ for SCIM processing.<br>IDENTITY_STORE_GROUP - The value is one of the attributes\
        \ from a group identity store provisioner for SCIM processing.<br>SCIM_USER\
        \ - The value is one of the attributes passed in from the SCIM user request.<br>SCIM_GROUP\
        \ - The value is one of the attributes passed in from the SCIM group request.<br>"
      example:
        id: id
        type: TOKEN_EXCHANGE_PROCESSOR_POLICY
      properties:
        type:
          description: The source type of this key.
          enum:
          - TOKEN_EXCHANGE_PROCESSOR_POLICY
          - ACCOUNT_LINK
          - ADAPTER
          - ASSERTION
          - CONTEXT
          - CUSTOM_DATA_STORE
          - EXPRESSION
          - JDBC_DATA_STORE
          - LDAP_DATA_STORE
          - PING_ONE_LDAP_GATEWAY_DATA_STORE
          - MAPPED_ATTRIBUTES
          - NO_MAPPING
          - TEXT
          - TOKEN
          - REQUEST
          - OAUTH_PERSISTENT_GRANT
          - SUBJECT_TOKEN
          - ACTOR_TOKEN
          - PASSWORD_CREDENTIAL_VALIDATOR
          - IDP_CONNECTION
          - AUTHENTICATION_POLICY_CONTRACT
          - CLAIMS
          - LOCAL_IDENTITY_PROFILE
          - EXTENDED_CLIENT_METADATA
          - EXTENDED_PROPERTIES
          - TRACKED_HTTP_PARAMS
          - FRAGMENT
          - INPUTS
          - ATTRIBUTE_QUERY
          - IDENTITY_STORE_USER
          - IDENTITY_STORE_GROUP
          - SCIM_USER
          - SCIM_GROUP
          type: string
        id:
          description: "The attribute source ID that refers to the attribute source\
            \ that this key references. In some resources, the ID is optional and\
            \ will be ignored. In these cases the ID should be omitted. If the source\
            \ type is not an attribute source then the ID can be omitted."
          type: string
      required:
      - type
      type: object
    SpAdapter:
      allOf:
      - $ref: '#/components/schemas/PluginInstance'
      - description: An SP adapter instance.
        properties:
          attributeContract:
            $ref: '#/components/schemas/SpAdapterAttributeContract'
          targetApplicationInfo:
            $ref: '#/components/schemas/SpAdapterTargetApplicationInfo'
        type: object
    SpAdapterAttribute:
      description: An attribute for the SP adapter attribute contract.
      properties:
        name:
          description: The name of this attribute.
          type: string
      required:
      - name
      type: object
    SpAdapterAttributeContract:
      description: A set of attributes exposed by an SP adapter.
      properties:
        coreAttributes:
          description: A list of read-only attributes that are automatically populated
            by the SP adapter descriptor.
          items:
            $ref: '#/components/schemas/SpAdapterAttribute'
          type: array
        extendedAttributes:
          description: A list of additional attributes that can be returned by the
            SP adapter. The extended attributes are only used if the adapter supports
            them.
          items:
            $ref: '#/components/schemas/SpAdapterAttribute'
          type: array
        inherited:
          description: "Whether this attribute contract is inherited from its parent\
            \ instance. If true, the rest of the properties in this model become read-only.\
            \ The default value is false."
          type: boolean
      type: object
    SpAdapterTargetApplicationInfo:
      description: Target Application Information exposed by an SP adapter.
      properties:
        applicationName:
          description: The application name.
          type: string
        applicationIconUrl:
          description: The application icon URL.
          type: string
        inherited:
          description: "Specifies Whether target application information is inherited\
            \ from its parent instance. If true, the rest of the properties in this\
            \ model become read-only. The default value is false."
          type: boolean
      type: object
    TokenGenerator:
      allOf:
      - $ref: '#/components/schemas/PluginInstance'
      - description: A token generator instance.
        properties:
          attributeContract:
            $ref: '#/components/schemas/TokenGeneratorAttributeContract'
        type: object
    TokenGeneratorAttribute:
      description: An attribute for the token generator attribute contract.
      properties:
        name:
          description: The name of this attribute.
          type: string
      required:
      - name
      type: object
    TokenGeneratorAttributeContract:
      description: A set of attributes exposed by a token generator.
      properties:
        coreAttributes:
          description: A list of token generator attributes that correspond to the
            attributes exposed by the token generator type.
          items:
            $ref: '#/components/schemas/TokenGeneratorAttribute'
          type: array
        extendedAttributes:
          description: A list of additional attributes that can be returned by the
            token processor. The extended attributes are only used if the token generator
            supports them.
          items:
            $ref: '#/components/schemas/TokenGeneratorAttribute'
          type: array
        inherited:
          description: "Whether this attribute contract is inherited from its parent\
            \ instance. If true, the rest of the properties in this model become read-only.\
            \ The default value is false."
          type: boolean
      required:
      - coreAttributes
      type: object
    TokenProcessor:
      allOf:
      - $ref: '#/components/schemas/PluginInstance'
      - description: A token processor instance.
        properties:
          attributeContract:
            $ref: '#/components/schemas/TokenProcessorAttributeContract'
        type: object
    TokenProcessorAttribute:
      description: An attribute for the token processor attribute contract.
      properties:
        name:
          description: The name of this attribute.
          type: string
        masked:
          description: Specifies whether this attribute is masked in PingFederate
            logs. Defaults to false.
          type: boolean
      required:
      - name
      type: object
    TokenProcessorAttributeContract:
      description: A set of attributes exposed by a token processor.
      properties:
        coreAttributes:
          description: A list of token processor attributes that correspond to the
            attributes exposed by the token processor type.
          items:
            $ref: '#/components/schemas/TokenProcessorAttribute'
          type: array
        extendedAttributes:
          description: A list of additional attributes that can be returned by the
            token processor. The extended attributes are only used if the token processor
            supports them.
          items:
            $ref: '#/components/schemas/TokenProcessorAttribute'
          type: array
        maskOgnlValues:
          description: Whether or not all OGNL expressions used to fulfill an outgoing
            assertion contract should be masked in the logs. Defaults to false.
          type: boolean
        inherited:
          description: "Whether this attribute contract is inherited from its parent\
            \ instance. If true, the rest of the properties in this model become read-only.\
            \ The default value is false."
          type: boolean
      required:
      - coreAttributes
      type: object
    AccessTokenMapping:
      description: The Access Token Attribute Mapping.
      example:
        context:
          contextRef:
            location: location
            id: id
          type: DEFAULT
        attributeContractFulfillment:
          key:
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
        id: id
        attributeSources:
        - null
        - null
        issuanceCriteria:
          expressionCriteria:
          - expression: expression
            errorResult: errorResult
          - expression: expression
            errorResult: errorResult
          conditionalCriteria:
          - condition: EQUALS
            errorResult: errorResult
            attributeName: attributeName
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
          - condition: EQUALS
            errorResult: errorResult
            attributeName: attributeName
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
        accessTokenManagerRef:
          location: location
          id: id
      properties:
        id:
          description: The id of the Access Token Mapping.
          type: string
        context:
          $ref: '#/components/schemas/AccessTokenMappingContext'
        accessTokenManagerRef:
          $ref: '#/components/schemas/ResourceLink'
        attributeSources:
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: '#/components/schemas/AttributeSourceAggregation'
          type: array
        attributeContractFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of mappings from attribute names to their fulfillment
            values.
          type: object
        issuanceCriteria:
          $ref: '#/components/schemas/IssuanceCriteria'
      required:
      - accessTokenManagerRef
      - attributeContractFulfillment
      - context
      type: object
    AccessTokenMappingContext:
      description: The Access Token Attribute Mapping.
      example:
        contextRef:
          location: location
          id: id
        type: DEFAULT
      properties:
        type:
          description: The Access Token Mapping Context type.
          enum:
          - DEFAULT
          - PCV
          - IDP_CONNECTION
          - IDP_ADAPTER
          - AUTHENTICATION_POLICY_CONTRACT
          - CLIENT_CREDENTIALS
          - TOKEN_EXCHANGE_PROCESSOR_POLICY
          type: string
        contextRef:
          $ref: '#/components/schemas/ResourceLink'
      required:
      - contextRef
      - type
      type: object
    AdministrativeAccount:
      description: A PingFederate administrator account.
      example:
        password: password
        emailAddress: emailAddress
        phoneNumber: phoneNumber
        roles:
        - USER_ADMINISTRATOR
        - USER_ADMINISTRATOR
        auditor: true
        active: true
        description: description
        department: department
        username: username
        encryptedPassword: encryptedPassword
      properties:
        username:
          description: Username for the Administrative Account.
          type: string
        password:
          description: Password for the Account. This field is only applicable during
            a POST operation.
          type: string
        encryptedPassword:
          description: "For GET requests, this field contains the encrypted account\
            \ password. For POST and PUT requests, if you wish to re-use the password\
            \ from an API response to this endpoint, this field should be passed back\
            \ unchanged."
          type: string
        active:
          description: Indicates whether the account is active or not.
          type: boolean
        description:
          description: Description of the account.
          type: string
        auditor:
          description: Indicates whether the account belongs to an Auditor. An Auditor
            has View-only permissions for all administrative functions. An Auditor
            cannot have any administrative roles.
          type: boolean
        phoneNumber:
          description: Phone number associated with the account.
          type: string
        emailAddress:
          description: Email address associated with the account.
          type: string
        department:
          description: The Department name of account user.
          type: string
        roles:
          description: "Roles available for an administrator. <br>USER_ADMINISTRATOR\
            \ - Can create, deactivate or delete accounts and reset passwords. Additionally,\
            \ install replacement license keys. <br> CRYPTO_ADMINISTRATOR - Can manage\
            \ local keys and certificates. <br> ADMINISTRATOR - Can configure partner\
            \ connections and most system settings (except the management of native\
            \ accounts and the handling of local keys and certificates. <br>EXPRESSION_ADMINISTRATOR\
            \ - Can add and update OGNL expressions. <br>"
          items:
            enum:
            - USER_ADMINISTRATOR
            - CRYPTO_ADMINISTRATOR
            - ADMINISTRATOR
            - EXPRESSION_ADMINISTRATOR
            type: string
          type: array
          uniqueItems: true
      required:
      - username
      type: object
    AdministrativeAccounts:
      description: PingFederate administrator accounts.
      example:
        items:
        - password: password
          emailAddress: emailAddress
          phoneNumber: phoneNumber
          roles:
          - USER_ADMINISTRATOR
          - USER_ADMINISTRATOR
          auditor: true
          active: true
          description: description
          department: department
          username: username
          encryptedPassword: encryptedPassword
        - password: password
          emailAddress: emailAddress
          phoneNumber: phoneNumber
          roles:
          - USER_ADMINISTRATOR
          - USER_ADMINISTRATOR
          auditor: true
          active: true
          description: description
          department: department
          username: username
          encryptedPassword: encryptedPassword
      properties:
        items:
          description: List of Administrative Accounts.
          items:
            $ref: '#/components/schemas/AdministrativeAccount'
          type: array
      type: object
    UserCredentials:
      description: Credentials for an administrator account.
      example:
        newPassword: newPassword
        currentPassword: currentPassword
      properties:
        currentPassword:
          description: Current password. Required only during Password Change and
            not applicable for Password Reset.
          type: string
        newPassword:
          description: A new password.
          type: string
      required:
      - newPassword
      type: object
    ApcToSpAdapterMapping:
      description: The Authentication Policy Contract (APC) to SP Adapter Mapping.
      example:
        sourceId: sourceId
        targetId: targetId
        licenseConnectionGroupAssignment: licenseConnectionGroupAssignment
        defaultTargetResource: defaultTargetResource
        attributeContractFulfillment:
          key:
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
        id: id
        attributeSources:
        - null
        - null
        issuanceCriteria:
          expressionCriteria:
          - expression: expression
            errorResult: errorResult
          - expression: expression
            errorResult: errorResult
          conditionalCriteria:
          - condition: EQUALS
            errorResult: errorResult
            attributeName: attributeName
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
          - condition: EQUALS
            errorResult: errorResult
            attributeName: attributeName
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
      properties:
        attributeSources:
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: '#/components/schemas/AttributeSourceAggregation'
          type: array
        attributeContractFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of mappings from attribute names to their fulfillment
            values.
          type: object
        issuanceCriteria:
          $ref: '#/components/schemas/IssuanceCriteria'
        sourceId:
          description: The id of the Authentication Policy Contract.
          type: string
        targetId:
          description: The id of the SP Adapter.
          type: string
        id:
          description: The id of the APC-to-SP Adapter mapping. This field is read-only
            and is ignored when passed in with the payload.
          type: string
        defaultTargetResource:
          description: Default target URL for this APC-to-adapter mapping configuration.
          type: string
        licenseConnectionGroupAssignment:
          description: The license connection group.
          type: string
      required:
      - attributeContractFulfillment
      - sourceId
      - targetId
      type: object
    ApcToSpAdapterMappings:
      description: A collection of Authentication Policy Contract (APC) to SP Adapter
        Mappings.
      example:
        items:
        - sourceId: sourceId
          targetId: targetId
          licenseConnectionGroupAssignment: licenseConnectionGroupAssignment
          defaultTargetResource: defaultTargetResource
          attributeContractFulfillment:
            key:
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          id: id
          attributeSources:
          - null
          - null
          issuanceCriteria:
            expressionCriteria:
            - expression: expression
              errorResult: errorResult
            - expression: expression
              errorResult: errorResult
            conditionalCriteria:
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
        - sourceId: sourceId
          targetId: targetId
          licenseConnectionGroupAssignment: licenseConnectionGroupAssignment
          defaultTargetResource: defaultTargetResource
          attributeContractFulfillment:
            key:
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          id: id
          attributeSources:
          - null
          - null
          issuanceCriteria:
            expressionCriteria:
            - expression: expression
              errorResult: errorResult
            - expression: expression
              errorResult: errorResult
            conditionalCriteria:
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
      properties:
        items:
          description: The actual list of mappings.
          items:
            $ref: '#/components/schemas/ApcToSpAdapterMapping'
          type: array
      type: object
    AuthnApiApplication:
      description: Authentication API Application.
      example:
        clientForRedirectlessModeRef:
          location: location
          id: id
        name: name
        additionalAllowedOrigins:
        - additionalAllowedOrigins
        - additionalAllowedOrigins
        description: description
        id: id
        url: url
      properties:
        id:
          description: "The persistent, unique ID for the Authentication API application.\
            \ It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned\
            \ if not specified."
          type: string
        name:
          description: The Authentication API Application Name. Name must be unique.
          type: string
        url:
          description: The Authentication API Application redirect URL.
          type: string
        description:
          description: The Authentication API Application description.
          type: string
        additionalAllowedOrigins:
          description: The domain in the redirect URL is always whitelisted. This
            field contains a list of additional allowed origin URL's for cross-origin
            resource sharing.
          items:
            type: string
          type: array
        clientForRedirectlessModeRef:
          $ref: '#/components/schemas/ResourceLink'
      required:
      - id
      - name
      - url
      type: object
    AuthnApiSettings:
      description: Authentication API Application Settings.
      example:
        apiEnabled: true
        restrictAccessToRedirectlessMode: true
        includeRequestContext: true
        enableApiDescriptions: true
        defaultApplicationRef:
          location: location
          id: id
      properties:
        apiEnabled:
          description: Specifies whether the authentication API is enabled. The default
            value is false.
          type: boolean
        defaultApplicationRef:
          $ref: '#/components/schemas/ResourceLink'
        enableApiDescriptions:
          description: Enable the API Descriptions endpoint.
          type: boolean
        restrictAccessToRedirectlessMode:
          description: Determines whether access to the authentication API redirectless
            mode is restricted to specified applications.
          type: boolean
        includeRequestContext:
          description: Determines whether the request context parameters are included
            in response for authentication API. The default value is false.
          type: boolean
      type: object
    AuthnApiApplications:
      description: A collection of Authentication API Application items.
      example:
        items:
        - clientForRedirectlessModeRef:
            location: location
            id: id
          name: name
          additionalAllowedOrigins:
          - additionalAllowedOrigins
          - additionalAllowedOrigins
          description: description
          id: id
          url: url
        - clientForRedirectlessModeRef:
            location: location
            id: id
          name: name
          additionalAllowedOrigins:
          - additionalAllowedOrigins
          - additionalAllowedOrigins
          description: description
          id: id
          url: url
      properties:
        items:
          description: The actual list of Authentication API Applications.
          items:
            $ref: '#/components/schemas/AuthnApiApplication'
          type: array
      type: object
    AuthenticationPoliciesSettings:
      description: The settings for the authentication policies.
      example:
        enableSpAuthnSelection: true
        enableIdpAuthnSelection: true
      properties:
        enableIdpAuthnSelection:
          description: Enable IdP authentication policies.
          type: boolean
        enableSpAuthnSelection:
          description: Enable SP authentication policies.
          type: boolean
      type: object
    ApcMappingPolicyAction:
      allOf:
      - $ref: '#/components/schemas/PolicyAction'
      - description: An authentication policy contract selection action.
        properties:
          authenticationPolicyContractRef:
            $ref: '#/components/schemas/ResourceLink'
          attributeMapping:
            $ref: '#/components/schemas/AttributeMapping'
        required:
        - attributeMapping
        - authenticationPolicyContractRef
        type: object
    AttributeMapping:
      description: A list of mappings from attribute sources to attribute targets.
      example:
        attributeContractFulfillment:
          key:
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
        attributeSources:
        - null
        - null
        issuanceCriteria:
          expressionCriteria:
          - expression: expression
            errorResult: errorResult
          - expression: expression
            errorResult: errorResult
          conditionalCriteria:
          - condition: EQUALS
            errorResult: errorResult
            attributeName: attributeName
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
          - condition: EQUALS
            errorResult: errorResult
            attributeName: attributeName
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
      properties:
        attributeSources:
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: '#/components/schemas/AttributeSourceAggregation'
          type: array
        attributeContractFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of mappings from attribute names to their fulfillment
            values.
          type: object
        issuanceCriteria:
          $ref: '#/components/schemas/IssuanceCriteria'
      required:
      - attributeContractFulfillment
      type: object
    AttributeRule:
      description: Authentication policy rules using attributes from the previous
        authentication source. Each rule is evaluated to determine the next action
        in the policy.
      properties:
        attributeSource:
          $ref: '#/components/schemas/SourceTypeIdKey'
        attributeName:
          description: The name of the attribute to use in this attribute rule. This
            field is required if the Attribute Source type is not 'EXPRESSION'.
          type: string
        condition:
          description: The condition that will be applied to the attribute's expected
            value. This field is required if the Attribute Source type is not 'EXPRESSION'.
          enum:
          - EQUALS
          - EQUALS_CASE_INSENSITIVE
          - EQUALS_DN
          - NOT_EQUAL
          - NOT_EQUAL_CASE_INSENSITIVE
          - NOT_EQUAL_DN
          - MULTIVALUE_CONTAINS
          - MULTIVALUE_CONTAINS_CASE_INSENSITIVE
          - MULTIVALUE_CONTAINS_DN
          - MULTIVALUE_DOES_NOT_CONTAIN
          - MULTIVALUE_DOES_NOT_CONTAIN_CASE_INSENSITIVE
          - MULTIVALUE_DOES_NOT_CONTAIN_DN
          type: string
        expectedValue:
          description: The expected value of this attribute rule. This field is required
            if the Attribute Source type is not 'EXPRESSION'.
          type: string
        expression:
          description: The expression of this attribute rule. This field is required
            if the Attribute Source type is 'EXPRESSION'.
          type: string
        result:
          description: The result of this attribute rule.
          type: string
      required:
      - result
      type: object
    AttributeRules:
      description: A collection of attribute rules
      properties:
        fallbackToSuccess:
          description: "When all the rules fail, you may choose to default to the\
            \ general success action or fail. Default to success."
          type: boolean
        items:
          description: The actual list of attribute rules.
          items:
            $ref: '#/components/schemas/AttributeRule'
          type: array
      type: object
    AuthenticationPolicyFragment:
      description: An authentication policy fragment.
      example:
        outputs:
          location: location
          id: id
        inputs:
          location: location
          id: id
        name: name
        description: description
        id: id
        rootNode:
          children:
          - null
          - null
          action: null
      properties:
        id:
          description: The authentication policy fragment ID. ID is unique.
          type: string
        name:
          description: The authentication policy fragment name. Name is unique.
          type: string
        description:
          description: A description for the authentication policy fragment.
          type: string
        rootNode:
          $ref: '#/components/schemas/AuthenticationPolicyTreeNode'
        inputs:
          $ref: '#/components/schemas/ResourceLink'
        outputs:
          $ref: '#/components/schemas/ResourceLink'
      type: object
    AuthenticationPolicyTreeNode:
      description: An authentication policy tree node.
      example:
        children:
        - null
        - null
        action: null
      properties:
        action:
          $ref: '#/components/schemas/PolicyActionAggregation'
        children:
          description: The nodes inside the authentication policy tree node of type
            AuthenticationPolicyTreeNode.
          items:
            $ref: '#/components/schemas/AuthenticationPolicyTreeNode'
          type: array
      required:
      - action
      type: object
    AuthenticationSource:
      description: An authentication source (IdP adapter or IdP connection).
      example:
        type: IDP_ADAPTER
        sourceRef:
          location: location
          id: id
      properties:
        type:
          description: The type of this authentication source.
          enum:
          - IDP_ADAPTER
          - IDP_CONNECTION
          type: string
        sourceRef:
          $ref: '#/components/schemas/ResourceLink'
      required:
      - sourceRef
      - type
      type: object
    AuthnSelectorPolicyAction:
      allOf:
      - $ref: '#/components/schemas/PolicyAction'
      - description: An authentication selector selection action.
        properties:
          authenticationSelectorRef:
            $ref: '#/components/schemas/ResourceLink'
        required:
        - authenticationSelectorRef
        type: object
    AuthnSourcePolicyAction:
      allOf:
      - $ref: '#/components/schemas/PolicyAction'
      - description: An authentication source selection action.
        properties:
          attributeRules:
            $ref: '#/components/schemas/AttributeRules'
          authenticationSource:
            $ref: '#/components/schemas/AuthenticationSource'
          inputUserIdMapping:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          userIdAuthenticated:
            description: Indicates whether the user ID obtained by the user ID mapping
              is authenticated.
            type: boolean
        required:
        - authenticationSource
        type: object
    ContinuePolicyAction:
      allOf:
      - $ref: '#/components/schemas/PolicyAction'
      - description: The continue selection action.
        type: object
    DonePolicyAction:
      allOf:
      - $ref: '#/components/schemas/PolicyAction'
      - description: The done selection action.
        type: object
    FragmentPolicyAction:
      allOf:
      - $ref: '#/components/schemas/PolicyAction'
      - description: A authentication policy fragment selection action.
        properties:
          attributeRules:
            $ref: '#/components/schemas/AttributeRules'
          fragment:
            $ref: '#/components/schemas/ResourceLink'
          fragmentMapping:
            $ref: '#/components/schemas/AttributeMapping'
        required:
        - fragment
        type: object
    LocalIdentityMappingPolicyAction:
      allOf:
      - $ref: '#/components/schemas/PolicyAction'
      - description: A local identity profile selection action.
        properties:
          localIdentityRef:
            $ref: '#/components/schemas/ResourceLink'
          inboundMapping:
            $ref: '#/components/schemas/AttributeMapping'
          outboundAttributeMapping:
            $ref: '#/components/schemas/AttributeMapping'
        required:
        - localIdentityRef
        - outboundAttributeMapping
        type: object
    PolicyActionAggregation:
      discriminator:
        mapping:
          APC_MAPPING: '#/components/schemas/ApcMappingPolicyAction'
          AUTHN_SELECTOR: '#/components/schemas/AuthnSelectorPolicyAction'
          AUTHN_SOURCE: '#/components/schemas/AuthnSourcePolicyAction'
          CONTINUE: '#/components/schemas/ContinuePolicyAction'
          DONE: '#/components/schemas/DonePolicyAction'
          FRAGMENT: '#/components/schemas/FragmentPolicyAction'
          LOCAL_IDENTITY_MAPPING: '#/components/schemas/LocalIdentityMappingPolicyAction'
          RESTART: '#/components/schemas/RestartPolicyAction'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/ApcMappingPolicyAction'
      - $ref: '#/components/schemas/AuthnSelectorPolicyAction'
      - $ref: '#/components/schemas/AuthnSourcePolicyAction'
      - $ref: '#/components/schemas/ContinuePolicyAction'
      - $ref: '#/components/schemas/DonePolicyAction'
      - $ref: '#/components/schemas/FragmentPolicyAction'
      - $ref: '#/components/schemas/LocalIdentityMappingPolicyAction'
      - $ref: '#/components/schemas/RestartPolicyAction'
    PolicyAction:
      description: An authentication policy selection action.
      discriminator:
        propertyName: type
      properties:
        type:
          description: The authentication selection type.
          enum:
          - APC_MAPPING
          - LOCAL_IDENTITY_MAPPING
          - AUTHN_SELECTOR
          - AUTHN_SOURCE
          - DONE
          - CONTINUE
          - RESTART
          - FRAGMENT
          type: string
        context:
          description: The result context.
          type: string
      required:
      - type
      type: object
    RestartPolicyAction:
      allOf:
      - $ref: '#/components/schemas/PolicyAction'
      - description: The restart selection action.
        type: object
    MoveItemRequest:
      description: Metadata from a request about where to move a resource
      example:
        moveToId: moveToId
        location: START
      properties:
        location:
          description: Enumeration for where to move the item.
          enum:
          - START
          - END
          - BEFORE
          - AFTER
          type: string
        moveToId:
          description: "When moving an item relative to another, this value indicates\
            \ the target move-to ID."
          type: string
      required:
      - location
      type: object
    AuthenticationPolicy:
      description: An authentication policy.
      example:
        defaultAuthenticationSources:
        - type: IDP_ADAPTER
          sourceRef:
            location: location
            id: id
        - type: IDP_ADAPTER
          sourceRef:
            location: location
            id: id
        failIfNoSelection: true
        authnSelectionTrees:
        - name: name
          description: description
          id: id
          authenticationApiApplicationRef:
            location: location
            id: id
          handleFailuresLocally: true
          enabled: true
          rootNode:
            children:
            - null
            - null
            action: null
        - name: name
          description: description
          id: id
          authenticationApiApplicationRef:
            location: location
            id: id
          handleFailuresLocally: true
          enabled: true
          rootNode:
            children:
            - null
            - null
            action: null
        trackedHttpParameters:
        - trackedHttpParameters
        - trackedHttpParameters
      properties:
        failIfNoSelection:
          description: Fail if policy finds no authentication source.
          type: boolean
        authnSelectionTrees:
          description: The list of authentication policy trees.
          items:
            $ref: '#/components/schemas/AuthenticationPolicyTree'
          type: array
        defaultAuthenticationSources:
          description: The default authentication sources.
          items:
            $ref: '#/components/schemas/AuthenticationSource'
          type: array
        trackedHttpParameters:
          description: "The HTTP request parameters to track and make available to\
            \ authentication sources, selectors, and contract mappings throughout\
            \ the authentication policy."
          items:
            type: string
          type: array
      type: object
    AuthenticationPolicyTree:
      description: An authentication policy tree.
      example:
        name: name
        description: description
        id: id
        authenticationApiApplicationRef:
          location: location
          id: id
        handleFailuresLocally: true
        enabled: true
        rootNode:
          children:
          - null
          - null
          action: null
      properties:
        id:
          description: The authentication policy ID. ID is unique.
          type: string
        name:
          description: The authentication policy name. Name is unique.
          type: string
        description:
          description: A description for the authentication policy.
          type: string
        authenticationApiApplicationRef:
          $ref: '#/components/schemas/ResourceLink'
        enabled:
          description: Whether or not this authentication policy tree is enabled.
            Default is true.
          type: boolean
        rootNode:
          $ref: '#/components/schemas/AuthenticationPolicyTreeNode'
        handleFailuresLocally:
          description: If a policy ends in failure keep the user local.
          type: boolean
      type: object
    AuthenticationPolicyFragments:
      description: A collection of Authentication Policy Fragments
      example:
        items:
        - outputs:
            location: location
            id: id
          inputs:
            location: location
            id: id
          name: name
          description: description
          id: id
          rootNode:
            children:
            - null
            - null
            action: null
        - outputs:
            location: location
            id: id
          inputs:
            location: location
            id: id
          name: name
          description: description
          id: id
          rootNode:
            children:
            - null
            - null
            action: null
      properties:
        items:
          description: The actual list of Authentication Policy Fragments.
          items:
            $ref: '#/components/schemas/AuthenticationPolicyFragment'
          type: array
      type: object
    AuthenticationPolicyContract:
      description: Authentication Policy Contracts carry user attributes from the
        identity provider to the service provider.
      example:
        name: name
        id: id
        lastModified: 2000-01-23T04:56:07.000+00:00
        coreAttributes:
        - name: name
        - name: name
        extendedAttributes:
        - name: name
        - name: name
      properties:
        id:
          description: "The persistent, unique ID for the authentication policy contract.\
            \ It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned\
            \ if not specified."
          type: string
        name:
          description: The Authentication Policy Contract Name. Name is unique.
          type: string
        coreAttributes:
          description: "A list of read-only assertion attributes (for example, subject)\
            \ that are automatically populated by PingFederate."
          items:
            $ref: '#/components/schemas/AuthenticationPolicyContractAttribute'
          type: array
        extendedAttributes:
          description: A list of additional attributes as needed.
          items:
            $ref: '#/components/schemas/AuthenticationPolicyContractAttribute'
          type: array
        lastModified:
          description: The time at which the authentication policy contract was last
            changed. This property is read only and is ignored on PUT and POST requests.
          format: date-time
          type: string
      type: object
    AuthenticationPolicyContractAttribute:
      description: An attribute for the Authentication Policy Contract.
      example:
        name: name
      properties:
        name:
          description: The name of this attribute.
          type: string
      required:
      - name
      type: object
    AuthenticationPolicyContracts:
      description: A collection of Authentication Policy Contracts
      example:
        items:
        - name: name
          id: id
          lastModified: 2000-01-23T04:56:07.000+00:00
          coreAttributes:
          - name: name
          - name: name
          extendedAttributes:
          - name: name
          - name: name
        - name: name
          id: id
          lastModified: 2000-01-23T04:56:07.000+00:00
          coreAttributes:
          - name: name
          - name: name
          extendedAttributes:
          - name: name
          - name: name
      properties:
        items:
          description: The actual list of Authentication Policy Contracts.
          items:
            $ref: '#/components/schemas/AuthenticationPolicyContract'
          type: array
      type: object
    AuthenticationSelectors:
      description: A collection of Authentication Selector instances.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The actual list of Authentication Selectors.
          items:
            $ref: '#/components/schemas/AuthenticationSelector'
          type: array
      type: object
    AuthenticationSelectorDescriptors:
      description: A collection of Authentication Selector descriptors.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The list of Authentication Selector descriptors.
          items:
            $ref: '#/components/schemas/AuthenticationSelectorDescriptor'
          type: array
      type: object
    SessionSettings:
      description: General settings related to session management.
      example:
        trackAdapterSessionsForLogout: true
        sessionRevocationLifetime: 0
        revokeUserSessionOnLogout: true
      properties:
        trackAdapterSessionsForLogout:
          description: Determines whether adapter sessions are tracked for cleanup
            during single logout. The default is false.
          type: boolean
        revokeUserSessionOnLogout:
          description: "Determines whether the user's session is revoked on logout.\
            \ If this property is not provided on a PUT, the setting is left unchanged."
          type: boolean
        sessionRevocationLifetime:
          description: "How long a session revocation is tracked and stored, in minutes.\
            \ If this property is not provided on a PUT, the setting is left unchanged."
          format: int32
          type: integer
      type: object
    ApplicationSessionPolicy:
      description: "Session controls for user facing PingFederate application endpoints,\
        \ such as the profile management endpoint."
      example:
        maxTimeoutMins: 6
        idleTimeoutMins: 0
      properties:
        idleTimeoutMins:
          description: "The idle timeout period, in minutes. If set to -1, the idle\
            \ timeout will be set to the maximum timeout. The default is 60."
          format: int32
          type: integer
        maxTimeoutMins:
          description: "The maximum timeout period, in minutes. If set to -1, sessions\
            \ do not expire. The default is 480."
          format: int32
          type: integer
      type: object
    GlobalAuthenticationSessionPolicy:
      description: The global policy for authentication sessions.
      example:
        persistentSessions: true
        hashUniqueUserKeyAttribute: true
        maxTimeoutMins: 6
        maxTimeoutDisplayUnit: MINUTES
        idleTimeoutMins: 0
        idleTimeoutDisplayUnit: MINUTES
        enableSessions: true
      properties:
        enableSessions:
          description: Determines whether authentication sessions are enabled globally.
          type: boolean
        persistentSessions:
          description: Determines whether authentication sessions are persistent by
            default. Persistent sessions are linked to a persistent cookie and stored
            in a data store. This field is ignored if enableSessions is false.
          type: boolean
        hashUniqueUserKeyAttribute:
          description: Determines whether to hash the value of the unique user key
            attribute.
          type: boolean
        idleTimeoutMins:
          description: "The idle timeout period, in minutes. If set to -1, the idle\
            \ timeout will be set to the maximum timeout. The default is 60."
          format: int32
          type: integer
        idleTimeoutDisplayUnit:
          description: "The display unit for the idle timeout period in the PingFederate\
            \ administrative console. When the display unit is HOURS or DAYS, the\
            \ timeout value in minutes must correspond to a whole number value for\
            \ the specified unit."
          enum:
          - MINUTES
          - HOURS
          - DAYS
          type: string
        maxTimeoutMins:
          description: "The maximum timeout period, in minutes. If set to -1, sessions\
            \ do not expire. The default is 480."
          format: int32
          type: integer
        maxTimeoutDisplayUnit:
          description: "The display unit for the maximum timeout period in the PingFederate\
            \ administrative console. When the display unit is HOURS or DAYS, the\
            \ timeout value in minutes must correspond to a whole number value for\
            \ the specified unit."
          enum:
          - MINUTES
          - HOURS
          - DAYS
          type: string
      required:
      - enableSessions
      type: object
    AuthenticationSessionPolicy:
      description: The session policy for a specified authentication source.
      example:
        authnContextSensitive: true
        maxTimeoutMins: 6
        timeoutDisplayUnit: MINUTES
        userDeviceType: PRIVATE
        authenticationSource:
          type: IDP_ADAPTER
          sourceRef:
            location: location
            id: id
        idleTimeoutMins: 0
        id: id
        persistent: true
        enableSessions: true
      properties:
        id:
          description: "The persistent, unique ID for the session policy. It can be\
            \ any combination of [a-z0-9._-]. This property is system-assigned if\
            \ not specified."
          type: string
        authenticationSource:
          $ref: '#/components/schemas/AuthenticationSource'
        enableSessions:
          description: Determines whether sessions are enabled for the authentication
            source. This value overrides the enableSessions value from the global
            authentication session policy.
          type: boolean
        userDeviceType:
          description: "Determines the type of user device that the authentication\
            \ session can be created on. If empty, the value will default to PRIVATE."
          enum:
          - PRIVATE
          - SHARED
          - ANY
          type: string
        persistent:
          description: Determines whether sessions for the authentication source are
            persistent. This value overrides the persistentSessions value from the
            global authentication session policy.This field is ignored if enableSessions
            is false.
          type: boolean
        idleTimeoutMins:
          description: "The idle timeout period, in minutes. If omitted, the value\
            \ from the global authentication session policy will be used. If set to\
            \ -1, the idle timeout will be set to the maximum timeout. If a value\
            \ is provided for this property, a value must also be provided for maxTimeoutMins."
          format: int32
          type: integer
        maxTimeoutMins:
          description: "The maximum timeout period, in minutes. If omitted, the value\
            \ from the global authentication session policy will be used. If set to\
            \ -1, sessions do not expire. If a value is provided for this property,\
            \ a value must also be provided for idleTimeoutMins."
          format: int32
          type: integer
        timeoutDisplayUnit:
          description: "The display unit for session timeout periods in the PingFederate\
            \ administrative console. When the display unit is HOURS or DAYS, the\
            \ timeout values in minutes must correspond to a whole number value for\
            \ the specified unit."
          enum:
          - MINUTES
          - HOURS
          - DAYS
          type: string
        authnContextSensitive:
          description: Determines whether the requested authentication context is
            considered when deciding whether an existing session is valid for a given
            request. The default is false.
          type: boolean
      required:
      - authenticationSource
      - enableSessions
      type: object
    AuthenticationSessionPolicies:
      description: A collection of authentication session policies.
      example:
        items:
        - authnContextSensitive: true
          maxTimeoutMins: 6
          timeoutDisplayUnit: MINUTES
          userDeviceType: PRIVATE
          authenticationSource:
            type: IDP_ADAPTER
            sourceRef:
              location: location
              id: id
          idleTimeoutMins: 0
          id: id
          persistent: true
          enableSessions: true
        - authnContextSensitive: true
          maxTimeoutMins: 6
          timeoutDisplayUnit: MINUTES
          userDeviceType: PRIVATE
          authenticationSource:
            type: IDP_ADAPTER
            sourceRef:
              location: location
              id: id
          idleTimeoutMins: 0
          id: id
          persistent: true
          enableSessions: true
      properties:
        items:
          description: The actual list of policies.
          items:
            $ref: '#/components/schemas/AuthenticationSessionPolicy'
          type: array
      type: object
    AuthorizationDetailProcessorDescriptors:
      description: A collection of authorization detail processor plugin descriptors.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The list of authorization detail processor plugin descriptors.
          items:
            $ref: '#/components/schemas/AuthorizationDetailProcessorDescriptor'
          type: array
      type: object
    AuthorizationDetailProcessors:
      description: A collection of authorization detail processor plugin instances.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The list of authorization detail processor plugin instances.
          items:
            $ref: '#/components/schemas/AuthorizationDetailProcessor'
          type: array
      type: object
    AuthorizationServerSettings:
      description: Authorization Server Settings attributes.
      example:
        persistentGrantContract:
          coreAttributes:
          - name: name
          - name: name
          extendedAttributes:
          - name: name
          - name: name
        scopeGroups:
        - name: name
          description: description
          scopes:
          - scopes
          - scopes
        - name: name
          description: description
          scopes:
          - scopes
          - scopes
        adminWebServicePcvRef:
          location: location
          id: id
        atmIdForOAuthGrantManagement: atmIdForOAuthGrantManagement
        tokenEndpointBaseUrl: tokenEndpointBaseUrl
        refreshRollingInterval: 7
        trackUserSessionsForLogout: true
        parStatus: DISABLED
        defaultScopeDescription: defaultScopeDescription
        refreshTokenRollingGracePeriod: 2
        authorizationCodeEntropy: 6
        approvedScopesAttribute: approvedScopesAttribute
        persistentGrantIdleTimeout: 5
        rollRefreshTokenValues: true
        allowedOrigins:
        - allowedOrigins
        - allowedOrigins
        allowUnidentifiedClientExtensionGrants: true
        bypassAuthorizationForApprovedConsents: true
        devicePollingInterval: 2
        persistentGrantIdleTimeoutTimeUnit: MINUTES
        userAuthorizationUrl: userAuthorizationUrl
        approvedAuthorizationDetailAttribute: approvedAuthorizationDetailAttribute
        dpopProofRequireNonce: true
        userAuthorizationConsentAdapter: userAuthorizationConsentAdapter
        jwtSecuredAuthorizationResponseModeLifetime: 1
        clientSecretRetentionPeriod: 1
        dpopProofEnforceReplayPrevention: true
        pendingAuthorizationTimeout: 3
        disallowPlainPKCE: true
        consentLifetimeDays: 9
        exclusiveScopeGroups:
        - name: name
          description: description
          scopes:
          - scopes
          - scopes
        - name: name
          description: description
          scopes:
          - scopes
          - scopes
        userAuthorizationConsentPageSetting: INTERNAL
        bypassActivationCodeConfirmation: true
        includeIssuerInAuthorizationResponse: true
        persistentGrantReuseGrantTypes:
        - IMPLICIT
        - IMPLICIT
        registeredAuthorizationPath: registeredAuthorizationPath
        dpopProofLifetimeSeconds: 1
        persistentGrantLifetime: 1
        refreshTokenLength: 5
        allowUnidentifiedClientROCreds: true
        authorizationCodeTimeout: 0
        persistentGrantLifetimeUnit: MINUTES
        activationCodeCheckMode: AFTER_AUTHENTICATION
        scopes:
        - name: name
          description: description
          dynamic: true
        - name: name
          description: description
          dynamic: true
        scopeForOAuthGrantManagement: scopeForOAuthGrantManagement
        parReferenceTimeout: 4
        exclusiveScopes:
        - name: name
          description: description
          dynamic: true
        - name: name
          description: description
          dynamic: true
        parReferenceLength: 7
        bypassAuthorizationForApprovedGrants: true
      properties:
        defaultScopeDescription:
          description: The default scope description.
          type: string
        scopes:
          description: The list of common scopes.
          items:
            $ref: '#/components/schemas/ScopeEntry'
          type: array
        scopeGroups:
          description: The list of common scope groups.
          items:
            $ref: '#/components/schemas/ScopeGroupEntry'
          type: array
        exclusiveScopes:
          description: The list of exclusive scopes.
          items:
            $ref: '#/components/schemas/ScopeEntry'
          type: array
        exclusiveScopeGroups:
          description: The list of exclusive scope groups.
          items:
            $ref: '#/components/schemas/ScopeGroupEntry'
          type: array
        authorizationCodeTimeout:
          description: "The authorization code timeout, in seconds."
          format: int32
          type: integer
        authorizationCodeEntropy:
          description: "The authorization code entropy, in bytes."
          format: int32
          type: integer
        disallowPlainPKCE:
          description: Determines whether PKCE's 'plain' code challenge method will
            be disallowed. The default value is false.
          type: boolean
        includeIssuerInAuthorizationResponse:
          description: Determines whether the authorization server's issuer value
            is added to the authorization response or not. The default value is false.
          type: boolean
        trackUserSessionsForLogout:
          description: "Determines whether user sessions are tracked for logout. If\
            \ this property is not provided on a PUT, the setting is left unchanged."
          type: boolean
        tokenEndpointBaseUrl:
          description: The token endpoint base URL used to validate the 'aud' claim
            during Private Key JWT Client Authentication.
          type: string
        persistentGrantLifetime:
          description: The persistent grant lifetime. The default value is indefinite.
            -1 indicates an indefinite amount of time.
          format: int64
          type: integer
        persistentGrantLifetimeUnit:
          description: The persistent grant lifetime unit.
          enum:
          - MINUTES
          - DAYS
          - HOURS
          type: string
        persistentGrantIdleTimeout:
          description: The persistent grant idle timeout. The default value is 30
            (days). -1 indicates an indefinite amount of time.
          format: int64
          type: integer
        persistentGrantIdleTimeoutTimeUnit:
          description: The persistent grant idle timeout time unit.
          enum:
          - MINUTES
          - DAYS
          - HOURS
          type: string
        refreshTokenLength:
          description: The refresh token length in number of characters.
          format: int32
          type: integer
        rollRefreshTokenValues:
          description: The roll refresh token values default policy. The default value
            is true.
          type: boolean
        refreshTokenRollingGracePeriod:
          description: The grace period that a rolled refresh token remains valid
            in seconds. The default value is 60.
          format: int32
          type: integer
        refreshRollingInterval:
          description: "The minimum interval to roll refresh tokens, in hours."
          format: int64
          type: integer
        persistentGrantReuseGrantTypes:
          description: The grant types that the OAuth AS can reuse rather than creating
            a new grant for each request. Only 'IMPLICIT' or 'AUTHORIZATION_CODE'
            or 'RESOURCE_OWNER_CREDENTIALS' are valid grant types.
          items:
            enum:
            - IMPLICIT
            - AUTHORIZATION_CODE
            - RESOURCE_OWNER_CREDENTIALS
            - CLIENT_CREDENTIALS
            - REFRESH_TOKEN
            - EXTENSION
            - DEVICE_CODE
            - ACCESS_TOKEN_VALIDATION
            - CIBA
            - TOKEN_EXCHANGE
            type: string
          type: array
        persistentGrantContract:
          $ref: '#/components/schemas/PersistentGrantContract'
        bypassAuthorizationForApprovedGrants:
          description: Bypass authorization for previously approved persistent grants.
            The default value is false.
          type: boolean
        bypassAuthorizationForApprovedConsents:
          description: Bypass authorization for previously approved consents. The
            default value is false.
          type: boolean
        consentLifetimeDays:
          description: The consent lifetime in days. The default value is indefinite.
            -1 indicates an indefinite amount of time.
          format: int32
          type: integer
        allowUnidentifiedClientROCreds:
          description: Allow unidentified clients to request resource owner password
            credentials grants. The default value is false.
          type: boolean
        allowUnidentifiedClientExtensionGrants:
          description: Allow unidentified clients to request extension grants. The
            default value is false.
          type: boolean
        adminWebServicePcvRef:
          $ref: '#/components/schemas/ResourceLink'
        atmIdForOAuthGrantManagement:
          description: The ID of the Access Token Manager used for OAuth enabled grant
            management.
          type: string
        scopeForOAuthGrantManagement:
          description: The OAuth scope to validate when accessing grant management
            service.
          type: string
        allowedOrigins:
          description: The list of allowed origins.
          items:
            type: string
          type: array
        userAuthorizationUrl:
          description: The URL used to generate 'verification_url' and 'verification_url_complete'
            values in a Device Authorization request
          type: string
        registeredAuthorizationPath:
          description: The Registered Authorization Path is concatenated to PingFederate
            base URL to generate 'verification_url' and 'verification_url_complete'
            values in a Device Authorization request. PingFederate listens to this
            path if specified
          type: string
        pendingAuthorizationTimeout:
          description: "The 'device_code' and 'user_code' timeout, in seconds."
          format: int32
          type: integer
        devicePollingInterval:
          description: "The amount of time client should wait between polling requests,\
            \ in seconds."
          format: int32
          type: integer
        activationCodeCheckMode:
          description: Determines whether the user is prompted to enter or confirm
            the activation code after authenticating or before. The default is AFTER_AUTHENTICATION.
          enum:
          - AFTER_AUTHENTICATION
          - BEFORE_AUTHENTICATION
          type: string
        bypassActivationCodeConfirmation:
          description: Indicates if the Activation Code Confirmation page should be
            bypassed if 'verification_url_complete' is used by the end user to authorize
            a device.
          type: boolean
        userAuthorizationConsentPageSetting:
          description: User Authorization Consent Page setting to use PingFederate's
            internal consent page or an external system
          enum:
          - INTERNAL
          - ADAPTER
          type: string
        userAuthorizationConsentAdapter:
          description: Adapter ID of the external consent adapter to be used for the
            consent page user interface.
          type: string
        approvedScopesAttribute:
          description: "Attribute from the external consent adapter's contract, intended\
            \ for storing approved scopes returned by the external consent page."
          type: string
        approvedAuthorizationDetailAttribute:
          description: "Attribute from the external consent adapter's contract, intended\
            \ for storing approved authorization details returned by the external\
            \ consent page."
          type: string
        parReferenceTimeout:
          description: "The timeout, in seconds, of the pushed authorization request\
            \ reference. The default value is 60."
          format: int32
          type: integer
        parReferenceLength:
          description: "The entropy of pushed authorization request references, in\
            \ bytes. The default value is 24."
          format: int32
          type: integer
        parStatus:
          description: The status of pushed authorization request support. The default
            value is ENABLED.
          enum:
          - DISABLED
          - ENABLED
          - REQUIRED
          type: string
        clientSecretRetentionPeriod:
          description: "The length of time in minutes that client secrets will be\
            \ retained as secondary secrets after secret change. The default value\
            \ is 0, which will disable secondary client secret retention."
          format: int32
          type: integer
        jwtSecuredAuthorizationResponseModeLifetime:
          description: "The lifetime, in seconds, of the JWT Secured authorization\
            \ response. The default value is 600."
          format: int32
          type: integer
        dpopProofRequireNonce:
          description: Determines whether nonce is required in the Demonstrating Proof-of-Possession
            (DPoP) proof JWT. The default value is false.
          type: boolean
        dpopProofLifetimeSeconds:
          description: "The lifetime, in seconds, of the Demonstrating Proof-of-Possession\
            \ (DPoP) proof JWT. The default value is 120."
          format: int32
          type: integer
        dpopProofEnforceReplayPrevention:
          description: Determines whether Demonstrating Proof-of-Possession (DPoP)
            proof JWT replay prevention is enforced. The default value is false.
          type: boolean
      required:
      - authorizationCodeEntropy
      - authorizationCodeTimeout
      - refreshRollingInterval
      - refreshTokenLength
      type: object
    PersistentGrantAttribute:
      description: A persistent grant contract attribute.
      example:
        name: name
      properties:
        name:
          description: The name of this attribute.
          type: string
      required:
      - name
      type: object
    PersistentGrantContract:
      example:
        coreAttributes:
        - name: name
        - name: name
        extendedAttributes:
        - name: name
        - name: name
      properties:
        coreAttributes:
          description: This is a read-only list of persistent grant attributes and
            includes USER_KEY and USER_NAME. Changes to this field will be ignored.
          items:
            $ref: '#/components/schemas/PersistentGrantAttribute'
          type: array
        extendedAttributes:
          description: A list of additional attributes for the persistent grant contract.
          items:
            $ref: '#/components/schemas/PersistentGrantAttribute'
          type: array
      required:
      - coreAttributes
      type: object
    ScopeEntry:
      description: A scope name and its description.
      example:
        name: name
        description: description
        dynamic: true
      properties:
        name:
          description: The name of the scope.
          type: string
        description:
          description: The description of the scope that appears when the user is
            prompted for authorization.
          type: string
        dynamic:
          description: True if the scope is dynamic. (Defaults to false)
          type: boolean
      required:
      - description
      - name
      type: object
    ScopeGroupEntry:
      description: A scope group name and its description.
      example:
        name: name
        description: description
        scopes:
        - scopes
        - scopes
      properties:
        name:
          description: The name of the scope group.
          type: string
        description:
          description: The description of the scope group.
          type: string
        scopes:
          description: The set of scopes for this scope group.
          items:
            type: string
          type: array
          uniqueItems: true
      required:
      - description
      - name
      - scopes
      type: object
    BulkConfig:
      description: Model describing a series of configuration operations.
      example:
        metadata:
          pfVersion: pfVersion
        operations:
        - itemIds:
          - itemIds
          - itemIds
          operationType: SAVE
          subResource: subResource
          items:
          - "{}"
          - "{}"
          resourceType: resourceType
        - itemIds:
          - itemIds
          - itemIds
          operationType: SAVE
          subResource: subResource
          items:
          - "{}"
          - "{}"
          resourceType: resourceType
      properties:
        metadata:
          $ref: '#/components/schemas/BulkConfigMetadata'
        operations:
          description: A list of configuration operations.
          items:
            $ref: '#/components/schemas/ConfigOperation'
          type: array
      required:
      - metadata
      - operations
      type: object
    BulkConfigMetadata:
      description: Model describing how bulk configuration data was generated.
      example:
        pfVersion: pfVersion
      properties:
        pfVersion:
          description: The version of PingFederate this config was generated from.
          type: string
      required:
      - pfVersion
      type: object
    ConfigOperation:
      description: Model describing a list of configuration operations for a given
        resource type.
      example:
        itemIds:
        - itemIds
        - itemIds
        operationType: SAVE
        subResource: subResource
        items:
        - "{}"
        - "{}"
        resourceType: resourceType
      properties:
        resourceType:
          description: The identifier for the resource type the operation applies
            to.
          type: string
        subResource:
          description: The subresource for the operation.
          type: string
        operationType:
          description: The type of operation to be performed.
          enum:
          - SAVE
          - DELETE
          type: string
        items:
          description: The configuration items for the operation. This field only
            applies to the SAVE operation type.
          items:
            properties: {}
            type: object
          type: array
        itemIds:
          description: The item ID's for the operation. This field only applies to
            the DELETE operation type.
          items:
            type: string
          type: array
      required:
      - operationType
      - resourceType
      type: object
    CaptchaProvidersSettings:
      description: General CAPTCHA provider settings.
      example:
        defaultCaptchaProviderRef:
          location: location
          id: id
      properties:
        defaultCaptchaProviderRef:
          $ref: '#/components/schemas/ResourceLink'
      type: object
    A CAPTCHA provider plugin descriptor.:
      example:
        supportsExtendedContract: true
        configDescriptor:
          tables:
          - columns:
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            name: name
            description: description
            label: label
            requireDefaultRow: true
          - columns:
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            name: name
            description: description
            label: label
            requireDefaultRow: true
          actionDescriptors:
          - download: true
            downloadFileName: downloadFileName
            name: name
            description: description
            downloadContentType: downloadContentType
            parameters:
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
          - download: true
            downloadFileName: downloadFileName
            name: name
            description: description
            downloadContentType: downloadContentType
            parameters:
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
          description: description
          fields:
          - advanced: true
            defaultValue: defaultValue
            name: name
            description: description
            label: label
            type: RADIO_GROUP
            defaultForLegacyConfig: defaultForLegacyConfig
            required: true
          - advanced: true
            defaultValue: defaultValue
            name: name
            description: description
            label: label
            type: RADIO_GROUP
            defaultForLegacyConfig: defaultForLegacyConfig
            required: true
        name: name
        className: className
        id: id
        attributeContract:
        - attributeContract
        - attributeContract
      properties:
        id:
          description: Unique ID of the plugin.
          type: string
        name:
          description: Friendly name for the plugin.
          type: string
        className:
          description: Full class name of the class that implements this plugin.
          type: string
        attributeContract:
          description: The attribute contract for this plugin.
          items:
            type: string
          type: array
        supportsExtendedContract:
          description: Determines whether this plugin supports extending the attribute
            contract.
          type: boolean
        configDescriptor:
          $ref: '#/components/schemas/PluginConfigDescriptor'
      type: object
    A collection of CAPTCHA provider plugin descriptors.:
      example:
        items:
        - supportsExtendedContract: true
          configDescriptor:
            tables:
            - columns:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              name: name
              description: description
              label: label
              requireDefaultRow: true
            - columns:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              name: name
              description: description
              label: label
              requireDefaultRow: true
            actionDescriptors:
            - download: true
              downloadFileName: downloadFileName
              name: name
              description: description
              downloadContentType: downloadContentType
              parameters:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
            - download: true
              downloadFileName: downloadFileName
              name: name
              description: description
              downloadContentType: downloadContentType
              parameters:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
            description: description
            fields:
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
          name: name
          className: className
          id: id
          attributeContract:
          - attributeContract
          - attributeContract
        - supportsExtendedContract: true
          configDescriptor:
            tables:
            - columns:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              name: name
              description: description
              label: label
              requireDefaultRow: true
            - columns:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              name: name
              description: description
              label: label
              requireDefaultRow: true
            actionDescriptors:
            - download: true
              downloadFileName: downloadFileName
              name: name
              description: description
              downloadContentType: downloadContentType
              parameters:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
            - download: true
              downloadFileName: downloadFileName
              name: name
              description: description
              downloadContentType: downloadContentType
              parameters:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
            description: description
            fields:
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
          name: name
          className: className
          id: id
          attributeContract:
          - attributeContract
          - attributeContract
      properties:
        items:
          description: The list of CAPTCHA provider plugin descriptors.
          items:
            $ref: '#/components/schemas/A CAPTCHA provider plugin descriptor.'
          type: array
      type: object
    CaptchaProvider:
      description: A CAPTCHA provider plugin instance.
      example:
        configuration:
          tables:
          - inherited: true
            name: name
            rows:
            - defaultRow: true
              fields:
              - inherited: true
                encryptedValue: encryptedValue
                name: name
                value: value
              - inherited: true
                encryptedValue: encryptedValue
                name: name
                value: value
            - defaultRow: true
              fields:
              - inherited: true
                encryptedValue: encryptedValue
                name: name
                value: value
              - inherited: true
                encryptedValue: encryptedValue
                name: name
                value: value
          - inherited: true
            name: name
            rows:
            - defaultRow: true
              fields:
              - inherited: true
                encryptedValue: encryptedValue
                name: name
                value: value
              - inherited: true
                encryptedValue: encryptedValue
                name: name
                value: value
            - defaultRow: true
              fields:
              - inherited: true
                encryptedValue: encryptedValue
                name: name
                value: value
              - inherited: true
                encryptedValue: encryptedValue
                name: name
                value: value
          fields:
          - inherited: true
            encryptedValue: encryptedValue
            name: name
            value: value
          - inherited: true
            encryptedValue: encryptedValue
            name: name
            value: value
        name: name
        id: id
        lastModified: 2000-01-23T04:56:07.000+00:00
        pluginDescriptorRef:
          location: location
          id: id
        parentRef:
          location: location
          id: id
      properties:
        id:
          description: "The ID of the plugin instance. The ID cannot be modified once\
            \ the instance is created.<br>Note: Ignored when specifying a connection's\
            \ adapter override."
          type: string
        name:
          description: "The plugin instance name. The name can be modified once the\
            \ instance is created.<br>Note: Ignored when specifying a connection's\
            \ adapter override."
          type: string
        pluginDescriptorRef:
          $ref: '#/components/schemas/ResourceLink'
        parentRef:
          $ref: '#/components/schemas/ResourceLink'
        configuration:
          $ref: '#/components/schemas/PluginConfiguration'
        lastModified:
          description: The time at which the plugin instance was last changed. This
            property is read only and is ignored on PUT and POST requests.
          format: date-time
          type: string
      required:
      - configuration
      - id
      - name
      - pluginDescriptorRef
      type: object
    CaptchaProviders:
      description: A collection of CAPTCHA provider plugin instances.
      example:
        items:
        - configuration:
            tables:
            - inherited: true
              name: name
              rows:
              - defaultRow: true
                fields:
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
              - defaultRow: true
                fields:
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
            - inherited: true
              name: name
              rows:
              - defaultRow: true
                fields:
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
              - defaultRow: true
                fields:
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
            fields:
            - inherited: true
              encryptedValue: encryptedValue
              name: name
              value: value
            - inherited: true
              encryptedValue: encryptedValue
              name: name
              value: value
          name: name
          id: id
          lastModified: 2000-01-23T04:56:07.000+00:00
          pluginDescriptorRef:
            location: location
            id: id
          parentRef:
            location: location
            id: id
        - configuration:
            tables:
            - inherited: true
              name: name
              rows:
              - defaultRow: true
                fields:
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
              - defaultRow: true
                fields:
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
            - inherited: true
              name: name
              rows:
              - defaultRow: true
                fields:
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
              - defaultRow: true
                fields:
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
            fields:
            - inherited: true
              encryptedValue: encryptedValue
              name: name
              value: value
            - inherited: true
              encryptedValue: encryptedValue
              name: name
              value: value
          name: name
          id: id
          lastModified: 2000-01-23T04:56:07.000+00:00
          pluginDescriptorRef:
            location: location
            id: id
          parentRef:
            location: location
            id: id
      properties:
        items:
          description: The list of CAPTCHA provider plugin instances.
          items:
            $ref: '#/components/schemas/CaptchaProvider'
          type: array
      type: object
    CertView:
      description: Certificate details.
      example:
        expires: 2000-01-23T04:56:07.000+00:00
        serialNumber: serialNumber
        keyAlgorithm: keyAlgorithm
        keySize: 0
        subjectAlternativeNames:
        - subjectAlternativeNames
        - subjectAlternativeNames
        issuerDN: issuerDN
        cryptoProvider: LOCAL
        sha1Fingerprint: sha1Fingerprint
        validFrom: 2000-01-23T04:56:07.000+00:00
        version: 6
        signatureAlgorithm: signatureAlgorithm
        sha256Fingerprint: sha256Fingerprint
        id: id
        subjectDN: subjectDN
        status: VALID
      properties:
        id:
          description: "The persistent, unique ID for the certificate."
          type: string
        serialNumber:
          description: The serial number assigned by the CA.
          type: string
        subjectDN:
          description: The subject's distinguished name.
          type: string
        subjectAlternativeNames:
          description: The subject alternative names (SAN).
          items:
            type: string
          type: array
        issuerDN:
          description: The issuer's distinguished name.
          type: string
        validFrom:
          description: "The start date from which the item is valid, in ISO 8601 format\
            \ (UTC)."
          format: date-time
          type: string
        expires:
          description: "The end date up until which the item is valid, in ISO 8601\
            \ format (UTC)."
          format: date-time
          type: string
        keyAlgorithm:
          description: The public key algorithm.
          type: string
        keySize:
          description: The public key size.
          format: int32
          type: integer
        signatureAlgorithm:
          description: The signature algorithm.
          type: string
        version:
          description: The X.509 version to which the item conforms.
          format: int32
          type: integer
        sha1Fingerprint:
          description: SHA-1 fingerprint in Hex encoding.
          type: string
        sha256Fingerprint:
          description: SHA-256 fingerprint in Hex encoding.
          type: string
        status:
          description: Status of the item.
          enum:
          - VALID
          - EXPIRED
          - NOT_YET_VALID
          - REVOKED
          type: string
        cryptoProvider:
          description: Cryptographic Provider. This is only applicable if Hybrid HSM
            mode is true.
          enum:
          - LOCAL
          - HSM
          type: string
      type: object
    CertViews:
      description: A collection of Certificate items.
      example:
        items:
        - expires: 2000-01-23T04:56:07.000+00:00
          serialNumber: serialNumber
          keyAlgorithm: keyAlgorithm
          keySize: 0
          subjectAlternativeNames:
          - subjectAlternativeNames
          - subjectAlternativeNames
          issuerDN: issuerDN
          cryptoProvider: LOCAL
          sha1Fingerprint: sha1Fingerprint
          validFrom: 2000-01-23T04:56:07.000+00:00
          version: 6
          signatureAlgorithm: signatureAlgorithm
          sha256Fingerprint: sha256Fingerprint
          id: id
          subjectDN: subjectDN
          status: VALID
        - expires: 2000-01-23T04:56:07.000+00:00
          serialNumber: serialNumber
          keyAlgorithm: keyAlgorithm
          keySize: 0
          subjectAlternativeNames:
          - subjectAlternativeNames
          - subjectAlternativeNames
          issuerDN: issuerDN
          cryptoProvider: LOCAL
          sha1Fingerprint: sha1Fingerprint
          validFrom: 2000-01-23T04:56:07.000+00:00
          version: 6
          signatureAlgorithm: signatureAlgorithm
          sha256Fingerprint: sha256Fingerprint
          id: id
          subjectDN: subjectDN
          status: VALID
      properties:
        items:
          description: The actual list of certificate instances.
          items:
            $ref: '#/components/schemas/CertView'
          type: array
      type: object
    X509File:
      description: Encoded certificate data.
      example:
        fileData: fileData
        cryptoProvider: LOCAL
        id: id
      properties:
        id:
          description: "The persistent, unique ID for the certificate. It can be any\
            \ combination of [a-z0-9._-]. This property is system-assigned if not\
            \ specified."
          type: string
        fileData:
          description: The certificate data in PEM format. New line characters should
            be omitted or encoded in this value.
          type: string
        cryptoProvider:
          description: Cryptographic Provider. This is only applicable if Hybrid HSM
            mode is true.
          enum:
          - LOCAL
          - HSM
          type: string
      required:
      - fileData
      type: object
    CertificateRevocationSettings:
      description: Certificate revocation settings.
      example:
        crlSettings:
          nextRetryMinsWhenNextUpdateInPast: 2
          verifyCrlSignature: true
          nextRetryMinsWhenResolveFailed: 5
          treatNonRetrievableCrlAsRevoked: true
        ocspSettings:
          requesterAddNonce: true
          responderUrl: responderUrl
          currentUpdateGracePeriod: 0
          actionOnStatusUnknown: actionOnStatusUnknown
          actionOnUnsuccessfulResponse: actionOnUnsuccessfulResponse
          actionOnResponderUnavailable: actionOnResponderUnavailable
          nextUpdateGracePeriod: 6
          responderCertReference:
            location: location
            id: id
          responderTimeout: 5
          responseCachePeriod: 1
        proxySettings:
          port: 7
          host: host
      properties:
        ocspSettings:
          $ref: '#/components/schemas/OcspSettings'
        crlSettings:
          $ref: '#/components/schemas/CrlSettings'
        proxySettings:
          $ref: '#/components/schemas/ProxySettings'
      type: object
    CrlSettings:
      description: CRL settings.
      example:
        nextRetryMinsWhenNextUpdateInPast: 2
        verifyCrlSignature: true
        nextRetryMinsWhenResolveFailed: 5
        treatNonRetrievableCrlAsRevoked: true
      properties:
        treatNonRetrievableCrlAsRevoked:
          description: Treat non retrievable CRL as revoked. This setting defaults
            to disabled.
          type: boolean
        verifyCrlSignature:
          description: Verify CRL signature. This setting defaults to enabled.
          type: boolean
        nextRetryMinsWhenResolveFailed:
          description: Next retry on resolution failure in minutes. This value defaults
            to "1440".
          format: int32
          type: integer
        nextRetryMinsWhenNextUpdateInPast:
          description: Next retry on next update expiration in minutes. This value
            defaults to "60".
          format: int32
          type: integer
      type: object
    OcspSettings:
      description: OCSP settings.
      example:
        requesterAddNonce: true
        responderUrl: responderUrl
        currentUpdateGracePeriod: 0
        actionOnStatusUnknown: actionOnStatusUnknown
        actionOnUnsuccessfulResponse: actionOnUnsuccessfulResponse
        actionOnResponderUnavailable: actionOnResponderUnavailable
        nextUpdateGracePeriod: 6
        responderCertReference:
          location: location
          id: id
        responderTimeout: 5
        responseCachePeriod: 1
      properties:
        requesterAddNonce:
          description: Do not allow responder to use cached responses. This setting
            defaults to disabled.
          type: boolean
        responderUrl:
          description: Default responder URL. This URL is used if the certificate
            being checked does not specify an OCSP responder URL.
          type: string
        responderCertReference:
          $ref: '#/components/schemas/ResourceLink'
        currentUpdateGracePeriod:
          description: Current update grace period in minutes. This value defaults
            to "5".
          format: int32
          type: integer
        nextUpdateGracePeriod:
          description: Next update grace period in minutes. This value defaults to
            "5".
          format: int32
          type: integer
        responseCachePeriod:
          description: Response cache period in hours. This value defaults to "48".
          format: int32
          type: integer
        responderTimeout:
          description: Responder connection timeout in seconds. This value defaults
            to "5".
          format: int32
          type: integer
        actionOnResponderUnavailable:
          description: Action on responder unavailable. This value defaults to  "CONTINUE".
          type: string
        actionOnStatusUnknown:
          description: Action on status unknown. This value defaults to  "FAIL".
          type: string
        actionOnUnsuccessfulResponse:
          description: Action on unsuccessful response. This value defaults to  "FAIL".
          type: string
      type: object
    ProxySettings:
      description: Proxy settings.
      example:
        port: 7
        host: host
      properties:
        host:
          description: Host name.
          type: string
        port:
          description: Port number.
          format: int32
          type: integer
      type: object
    ClusterSettings:
      description: Cluster configuration settings.
      example:
        replicateConnectionsOnSave: true
        replicateClientsOnSave: true
      properties:
        replicateConnectionsOnSave:
          description: Whether changes to connections will automatically be replicated
            to the cluster.
          type: boolean
        replicateClientsOnSave:
          description: Whether changes to OAuth clients will automatically be replicated
            to the cluster. This setting only applies when using XML Client storage.
          type: boolean
      type: object
    ClusterNode:
      description: Describes a node in a clustered deployment of PingFederate.
      example:
        mode: CLUSTERED_ENGINE
        address: address
        index: 0
        replicationStatus: RETRIEVING
        nodeTags: nodeTags
        nodeGroup: nodeGroup
        version: version
        configurationTimestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        address:
          description: The IP address and port this node is running on.
          type: string
        index:
          description: "Index of the node within the cluster, or -1 if an index is\
            \ not assigned."
          format: int32
          type: integer
        mode:
          description: "The deployment mode of this node, from a clustering standpoint.\
            \ CLUSTERED_DUAL is not supported."
          enum:
          - CLUSTERED_ENGINE
          - CLUSTERED_CONSOLE
          - CLUSTERED_DUAL
          - STANDALONE
          type: string
        nodeGroup:
          description: The node group for this node. This field is only populated
            if adaptive clustering is enabled.
          type: string
        version:
          description: The PingFederate version this node is running on.
          type: string
        nodeTags:
          description: The node tags for this node. This field is only populated for
            engine nodes.
          type: string
        configurationTimestamp:
          description: The time stamp of the configuration data retrieved by this
            node.
          format: date-time
          type: string
        replicationStatus:
          description: The replication status of the node.
          enum:
          - RETRIEVING
          - APPLYING
          - FAILED
          - SUCCEEDED
          - OUT_OF_DATE
          type: string
      type: object
    ClusterStatus:
      description: Information on cluster nodes and replication status.
      example:
        replicationRequired: true
        nodes:
        - mode: CLUSTERED_ENGINE
          address: address
          index: 0
          replicationStatus: RETRIEVING
          nodeTags: nodeTags
          nodeGroup: nodeGroup
          version: version
          configurationTimestamp: 2000-01-23T04:56:07.000+00:00
        - mode: CLUSTERED_ENGINE
          address: address
          index: 0
          replicationStatus: RETRIEVING
          nodeTags: nodeTags
          nodeGroup: nodeGroup
          version: version
          configurationTimestamp: 2000-01-23T04:56:07.000+00:00
        lastReplicationTime: 2000-01-23T04:56:07.000+00:00
        mixedMode: true
        lastConfigUpdateTime: 2000-01-23T04:56:07.000+00:00
      properties:
        nodes:
          description: List of nodes in the cluster.
          items:
            $ref: '#/components/schemas/ClusterNode'
          type: array
        lastConfigUpdateTime:
          description: Time when the configuration of this node was last updated.
          format: date-time
          type: string
        lastReplicationTime:
          description: Time when configuration changes were last replicated.
          format: date-time
          type: string
        replicationRequired:
          description: Indicates whether a replication is required to propagate config
            updates.
          type: boolean
        mixedMode:
          description: Indicates whether there is more than one version of PingFederate
            in the cluster.
          type: boolean
      type: object
    ConfigStoreSetting:
      description: Single configuration setting.
      example:
        listValue:
        - listValue
        - listValue
        mapValue:
          key: mapValue
        stringValue: stringValue
        id: id
        type: STRING
      properties:
        id:
          description: The id of the configuration setting.
          type: string
        stringValue:
          description: The value of the configuration setting. This is used when the
            setting has a single string value.
          type: string
        listValue:
          description: The list of values for the configuration setting. This is used
            when the setting has a list of string values.
          items:
            type: string
          type: array
        mapValue:
          additionalProperties:
            type: string
          description: The map of key/value pairs for the configuration setting. This
            is used when the setting has a map of string keys and values.
          type: object
        type:
          description: "The type of configuration setting. This could be a single\
            \ string, list of strings, or map of string keys and values."
          enum:
          - STRING
          - LIST
          - MAP
          type: string
      required:
      - id
      - type
      type: object
    ConfigStoreBundle:
      description: List of all configuration settings in a bundle.
      example:
        items:
        - listValue:
          - listValue
          - listValue
          mapValue:
            key: mapValue
          stringValue: stringValue
          id: id
          type: STRING
        - listValue:
          - listValue
          - listValue
          mapValue:
            key: mapValue
          stringValue: stringValue
          id: id
          type: STRING
      properties:
        items:
          description: List of configuration settings.
          items:
            $ref: '#/components/schemas/ConfigStoreSetting'
          type: array
      type: object
    ConfigurationEncryptionKey:
      description: Configuration Encryption Key.
      example:
        keyId: keyId
        creationDate: 2000-01-23T04:56:07.000+00:00
      properties:
        keyId:
          description: The id of the key.
          type: string
        creationDate:
          description: The creation date of the key.
          format: date-time
          type: string
      type: object
    ConfigurationEncryptionKeys:
      description: Configuration Encryption Keys.
      example:
        items:
        - keyId: keyId
          creationDate: 2000-01-23T04:56:07.000+00:00
        - keyId: keyId
          creationDate: 2000-01-23T04:56:07.000+00:00
      properties:
        items:
          description: The list of Configuration Encryption Keys.
          items:
            $ref: '#/components/schemas/ConfigurationEncryptionKey'
          type: array
      type: object
    BaseSigningSettings:
      description: Settings related to signing messages.
      example:
        signingKeyPairRef:
          location: location
          id: id
        includeRawKeyInSignature: true
        algorithm: algorithm
        includeCertInSignature: true
      properties:
        signingKeyPairRef:
          $ref: '#/components/schemas/ResourceLink'
        algorithm:
          description: "The algorithm used to sign messages sent to this partner.\
            \ The default is SHA1withDSA for DSA certs, SHA256withRSA for RSA certs,\
            \ and SHA256withECDSA for EC certs. For RSA certs, SHA1withRSA, SHA384withRSA,\
            \ SHA512withRSA, SHA256withRSAandMGF1, SHA384withRSAandMGF1 and SHA512withRSAandMGF1\
            \ are also supported. For EC certs, SHA384withECDSA and SHA512withECDSA\
            \ are also supported. If the connection is WS-Federation with JWT token\
            \ type, then the possible values are RSA SHA256, RSA SHA384, RSA SHA512,\
            \ RSASSA-PSS SHA256, RSASSA-PSS SHA384, RSASSA-PSS SHA512, ECDSA SHA256,\
            \ ECDSA SHA384, ECDSA SHA512"
          type: string
        includeCertInSignature:
          description: Determines whether the signing certificate is included in the
            signature <KeyInfo> element.
          type: boolean
        includeRawKeyInSignature:
          description: Determines whether the <KeyValue> element with the raw public
            key is included in the signature <KeyInfo> element.
          type: boolean
      required:
      - signingKeyPairRef
      type: object
    ExportMetadataRequest:
      description: The request for exporting a SAML connection's metadata file for
        a partner.
      example:
        virtualServerId: virtualServerId
        useSecondaryPortForSoap: true
        virtualHostName: virtualHostName
        connectionId: connectionId
        connectionType: IDP
        signingSettings:
          signingKeyPairRef:
            location: location
            id: id
          includeRawKeyInSignature: true
          algorithm: algorithm
          includeCertInSignature: true
      properties:
        connectionType:
          description: The type of connection to export.
          enum:
          - IDP
          - SP
          type: string
        connectionId:
          description: The ID of the connection to export.
          type: string
        virtualServerId:
          description: "The virtual server ID to export the metadata with. If null,\
            \ the connection's default will be used."
          type: string
        signingSettings:
          $ref: '#/components/schemas/BaseSigningSettings'
        useSecondaryPortForSoap:
          description: "If PingFederate's secondary SSL port is configured and you\
            \ want to use it for the SOAP channel, set to true. If client-certificate\
            \ authentication is configured for the SOAP channel, the secondary port\
            \ is required and this must be set to true."
          type: boolean
        virtualHostName:
          description: The virtual host name to be used as the base url.
          type: string
      required:
      - connectionId
      - connectionType
      type: object
    AccessTokenManagerMapping:
      description: A mapping in a connection that defines how access tokens are created.
      properties:
        accessTokenManagerRef:
          $ref: '#/components/schemas/ResourceLink'
        attributeSources:
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: '#/components/schemas/AttributeSourceAggregation'
          type: array
        attributeContractFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of mappings from attribute names to their fulfillment
            values.
          type: object
        issuanceCriteria:
          $ref: '#/components/schemas/IssuanceCriteria'
      required:
      - attributeContractFulfillment
      type: object
    AccountManagementSettings:
      description: Account management settings.
      properties:
        accountStatusAttributeName:
          description: The account status attribute name.
          type: string
        accountStatusAlgorithm:
          description: "The account status algorithm name. \nACCOUNT_STATUS_ALGORITHM_AD\
            \ -  Algorithm name for Active Directory, which uses a bitmap for each\
            \ user entry. \nACCOUNT_STATUS_ALGORITHM_FLAG - Algorithm name for Oracle\
            \ Directory Server and other LDAP directories that use a separate attribute\
            \ to store the user's status. When this option is selected, the Flag Comparison\
            \ Value and Flag Comparison Status fields should be used."
          enum:
          - ACCOUNT_STATUS_ALGORITHM_AD
          - ACCOUNT_STATUS_ALGORITHM_FLAG
          type: string
        flagComparisonValue:
          description: The flag that represents comparison value.
          type: string
        flagComparisonStatus:
          description: The flag that represents comparison status.
          type: boolean
        defaultStatus:
          description: The default status of the account.
          type: boolean
      required:
      - accountStatusAlgorithm
      - accountStatusAttributeName
      type: object
    AdditionalAllowedEntitiesConfiguration:
      description: Additional allowed entities or issuers configuration. Currently
        only used in OIDC IdP (RP) connection.
      example:
        additionalAllowedEntities:
        - entityDescription: entityDescription
          entityId: entityId
        - entityDescription: entityDescription
          entityId: entityId
        allowAdditionalEntities: true
        allowAllEntities: true
      properties:
        allowAdditionalEntities:
          description: Set to true to configure additional entities or issuers to
            be accepted during entity or issuer validation.
          type: boolean
        allowAllEntities:
          description: Set to true to accept any entity or issuer during entity or
            issuer validation. (Not Recommended)
          type: boolean
        additionalAllowedEntities:
          description: An array of additional allowed entities or issuers to be accepted
            during entity or issuer validation.
          items:
            $ref: '#/components/schemas/Entity'
          type: array
      type: object
    ArtifactResolverLocation:
      description: The remote party URLs to resolve the artifact.
      properties:
        index:
          description: The priority of the endpoint.
          format: int32
          type: integer
        url:
          description: Remote party URLs that you will use to resolve/translate the
            artifact and get the actual protocol message
          type: string
      required:
      - index
      - url
      type: object
    ArtifactSettings:
      description: The settings for an Artifact binding.
      properties:
        lifetime:
          description: The lifetime of the artifact in seconds.
          format: int32
          type: integer
        resolverLocations:
          description: Remote party URLs that you will use to resolve/translate the
            artifact and get the actual protocol message
          items:
            $ref: '#/components/schemas/ArtifactResolverLocation'
          type: array
        sourceId:
          description: Source ID for SAML1.x connections
          type: string
      required:
      - lifetime
      - resolverLocations
      type: object
    AssertionLifetime:
      description: The timeframe of validity before and after the issuance of the
        assertion.
      properties:
        minutesBefore:
          description: Assertion validity in minutes before the assertion issuance.
          format: int32
          type: integer
        minutesAfter:
          description: Assertion validity in minutes after the assertion issuance.
          format: int32
          type: integer
      required:
      - minutesAfter
      - minutesBefore
      type: object
    Attribute:
      description: The definition of an attribute in an attribute contract.
      example:
        name: name
      properties:
        name:
          description: The name of this attribute.
          type: string
      required:
      - name
      type: object
    AttributeQueryNameMapping:
      description: The attribute query name mappings between the SP and the IdP.
      properties:
        localName:
          description: The local attribute name.
          type: string
        remoteName:
          description: The remote attribute name as defined by the attribute authority.
          type: string
      required:
      - localName
      - remoteName
      type: object
    AuthenticationPolicyContractAssertionMapping:
      description: The Authentication Policy Contract Assertion Mapping.
      properties:
        authenticationPolicyContractRef:
          $ref: '#/components/schemas/ResourceLink'
        restrictVirtualEntityIds:
          description: Restricts this mapping to specific virtual entity IDs.
          type: boolean
        restrictedVirtualEntityIds:
          description: The list of virtual server IDs that this mapping is restricted
            to.
          items:
            type: string
          type: array
        abortSsoTransactionAsFailSafe:
          description: "If set to true, SSO transaction will be aborted as a fail-safe\
            \ when the data-store's attribute mappings fail to complete the attribute\
            \ contract. Otherwise, the attribute contract with default values is used.\
            \ By default, this value is false."
          type: boolean
        attributeSources:
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: '#/components/schemas/AttributeSourceAggregation'
          type: array
        attributeContractFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of mappings from attribute names to their fulfillment
            values.
          type: object
        issuanceCriteria:
          $ref: '#/components/schemas/IssuanceCriteria'
      required:
      - attributeContractFulfillment
      - authenticationPolicyContractRef
      type: object
    AuthenticationPolicyContractMapping:
      description: An Authentication Policy Contract mapping into IdP Connection.
      properties:
        authenticationPolicyContractRef:
          $ref: '#/components/schemas/ResourceLink'
        restrictVirtualServerIds:
          description: Restricts this mapping to specific virtual entity IDs.
          type: boolean
        restrictedVirtualServerIds:
          description: The list of virtual server IDs that this mapping is restricted
            to.
          items:
            type: string
          type: array
        attributeSources:
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: '#/components/schemas/AttributeSourceAggregation'
          type: array
        attributeContractFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of mappings from attribute names to their fulfillment
            values.
          type: object
        issuanceCriteria:
          $ref: '#/components/schemas/IssuanceCriteria'
      required:
      - attributeContractFulfillment
      - authenticationPolicyContractRef
      type: object
    AuthnContextMapping:
      description: The authentication context mapping between local and remote values.
      properties:
        local:
          description: The local authentication context value.
          type: string
        remote:
          description: The remote authentication context value.
          type: string
      type: object
    BackChannelAuth:
      description: The SOAP authentication methods when sending or receiving a message
        using SOAP back channel.
      discriminator:
        propertyName: type
      properties:
        type:
          description: The back channel authentication type.
          enum:
          - INBOUND
          - OUTBOUND
          type: string
        httpBasicCredentials:
          $ref: '#/components/schemas/UsernamePasswordCredentials'
        digitalSignature:
          description: If incoming or outgoing messages must be signed.
          type: boolean
      required:
      - type
      type: object
    ChangeDetectionSettings:
      description: Setting to detect changes to a user or a group.
      properties:
        userObjectClass:
          description: The user object class.
          type: string
        groupObjectClass:
          description: The group object class.
          type: string
        changedUsersAlgorithm:
          description: "The changed user algorithm. \nACTIVE_DIRECTORY_USN - For Active\
            \ Directory only, this algorithm queries for update sequence numbers on\
            \ user records that are larger than the last time records were checked.\
            \ \nTIMESTAMP - Queries for timestamps on user records that are not older\
            \ than the last time records were checked. This check is more efficient\
            \ from the point of view of the PingFederate provisioner but can be more\
            \ time consuming on the LDAP side, particularly with the Oracle Directory\
            \ Server. \nTIMESTAMP_NO_NEGATION - Queries for timestamps on user records\
            \ that are newer than the last time records were checked. This algorithm\
            \ is recommended for the Oracle Directory Server."
          enum:
          - ACTIVE_DIRECTORY_USN
          - TIMESTAMP
          - TIMESTAMP_NO_NEGATION
          type: string
        usnAttributeName:
          description: The USN attribute name.
          type: string
        timeStampAttributeName:
          description: The timestamp attribute name.
          type: string
      required:
      - changedUsersAlgorithm
      - groupObjectClass
      - timeStampAttributeName
      - userObjectClass
      type: object
    Channel:
      description: "A channel is a combination of a source data store and a provisioning\
        \ target. It include settings of a source data store, managing provisioning\
        \ threads and mapping of attributes."
      properties:
        active:
          description: Indicates whether the channel is the active channel for this
            connection.
          type: boolean
        channelSource:
          $ref: '#/components/schemas/ChannelSource'
        attributeMapping:
          description: The mapping of attributes from the local data store into Fields
            specified by the service provider.
          items:
            $ref: '#/components/schemas/SaasAttributeMapping'
          type: array
        name:
          description: The name of the channel.
          type: string
        maxThreads:
          description: The number of processing threads. The default value is 1.
          format: int32
          type: integer
        timeout:
          description: "Timeout, in seconds, for individual user and group provisioning\
            \ operations on the target service provider. The default value is 60."
          format: int32
          type: integer
      required:
      - active
      - attributeMapping
      - channelSource
      - maxThreads
      - name
      - timeout
      type: object
    ChannelSource:
      description: The source data source and LDAP settings.
      properties:
        dataSource:
          $ref: '#/components/schemas/ResourceLink'
        guidAttributeName:
          description: the GUID attribute name.
          type: string
        guidBinary:
          description: Indicates whether the GUID is stored in binary format.
          type: boolean
        changeDetectionSettings:
          $ref: '#/components/schemas/ChangeDetectionSettings'
        groupMembershipDetection:
          $ref: '#/components/schemas/GroupMembershipDetection'
        accountManagementSettings:
          $ref: '#/components/schemas/AccountManagementSettings'
        baseDn:
          description: The base DN where the user records are located.
          type: string
        userSourceLocation:
          $ref: '#/components/schemas/ChannelSourceLocation'
        groupSourceLocation:
          $ref: '#/components/schemas/ChannelSourceLocation'
      required:
      - accountManagementSettings
      - baseDn
      - changeDetectionSettings
      - dataSource
      - groupMembershipDetection
      - guidAttributeName
      - guidBinary
      - userSourceLocation
      type: object
    ChannelSourceLocation:
      description: The location settings that includes a DN and a LDAP filter.
      properties:
        groupDN:
          description: The group DN for users or groups.
          type: string
        filter:
          description: An LDAP filter.
          type: string
        nestedSearch:
          description: Indicates whether the search is nested.
          type: boolean
      type: object
    Connection:
      description: Settings shared by SP-side and IdP-side connections.
      discriminator:
        propertyName: type
      example:
        additionalAllowedEntitiesConfiguration:
          additionalAllowedEntities:
          - entityDescription: entityDescription
            entityId: entityId
          - entityDescription: entityDescription
            entityId: entityId
          allowAdditionalEntities: true
          allowAllEntities: true
        contactInfo:
          firstName: firstName
          lastName: lastName
          phone: phone
          company: company
          email: email
        credentials:
          inboundBackChannelAuth: null
          outboundBackChannelAuth: null
          verificationIssuerDN: verificationIssuerDN
          keyTransportAlgorithm: keyTransportAlgorithm
          decryptionKeyPairRef:
            location: location
            id: id
          certs:
          - primaryVerificationCert: true
            certView:
              expires: 2000-01-23T04:56:07.000+00:00
              serialNumber: serialNumber
              keyAlgorithm: keyAlgorithm
              keySize: 0
              subjectAlternativeNames:
              - subjectAlternativeNames
              - subjectAlternativeNames
              issuerDN: issuerDN
              cryptoProvider: LOCAL
              sha1Fingerprint: sha1Fingerprint
              validFrom: 2000-01-23T04:56:07.000+00:00
              version: 6
              signatureAlgorithm: signatureAlgorithm
              sha256Fingerprint: sha256Fingerprint
              id: id
              subjectDN: subjectDN
              status: VALID
            secondaryVerificationCert: true
            x509File:
              fileData: fileData
              cryptoProvider: LOCAL
              id: id
            encryptionCert: true
            activeVerificationCert: true
          - primaryVerificationCert: true
            certView:
              expires: 2000-01-23T04:56:07.000+00:00
              serialNumber: serialNumber
              keyAlgorithm: keyAlgorithm
              keySize: 0
              subjectAlternativeNames:
              - subjectAlternativeNames
              - subjectAlternativeNames
              issuerDN: issuerDN
              cryptoProvider: LOCAL
              sha1Fingerprint: sha1Fingerprint
              validFrom: 2000-01-23T04:56:07.000+00:00
              version: 6
              signatureAlgorithm: signatureAlgorithm
              sha256Fingerprint: sha256Fingerprint
              id: id
              subjectDN: subjectDN
              status: VALID
            secondaryVerificationCert: true
            x509File:
              fileData: fileData
              cryptoProvider: LOCAL
              id: id
            encryptionCert: true
            activeVerificationCert: true
          blockEncryptionAlgorithm: blockEncryptionAlgorithm
          verificationSubjectDN: verificationSubjectDN
          signingSettings:
            alternativeSigningKeyPairRefs:
            - location: location
              id: id
            - location: location
              id: id
            signingKeyPairRef:
              location: location
              id: id
            includeRawKeyInSignature: true
            algorithm: algorithm
            includeCertInSignature: true
          secondaryDecryptionKeyPairRef:
            location: location
            id: id
        active: true
        entityId: entityId
        loggingMode: NONE
        replicationStatus: REPLICATED
        type: IDP
        creationDate: 2000-01-23T04:56:07.000+00:00
        metadataReloadSettings:
          metadataUrlRef:
            location: location
            id: id
          enableAutoMetadataUpdate: true
        modificationDate: 2000-01-23T04:56:07.000+00:00
        baseUrl: baseUrl
        extendedProperties:
          key:
            values:
            - values
            - values
        defaultVirtualEntityId: defaultVirtualEntityId
        virtualEntityIds:
        - virtualEntityIds
        - virtualEntityIds
        name: name
        id: id
        licenseConnectionGroup: licenseConnectionGroup
      properties:
        type:
          description: The type of this connection. Default is 'IDP'.
          enum:
          - IDP
          - SP
          type: string
        id:
          description: "The persistent, unique ID for the connection. It can be any\
            \ combination of [a-zA-Z0-9._-]. This property is system-assigned if not\
            \ specified."
          type: string
        entityId:
          description: The partner's entity ID (connection ID) or issuer value (for
            OIDC Connections).
          type: string
        name:
          description: The connection name.
          type: string
        modificationDate:
          description: The time at which the connection was last changed. This property
            is read only and is ignored on PUT and POST requests.
          format: date-time
          type: string
        creationDate:
          description: The time at which the connection was created. This property
            is read only and is ignored on PUT and POST requests.
          format: date-time
          type: string
        active:
          description: Specifies whether the connection is active and ready to process
            incoming requests. The default value is false.
          type: boolean
        baseUrl:
          description: The fully-qualified hostname and port on which your partner's
            federation deployment runs.
          type: string
        defaultVirtualEntityId:
          description: The default alternate entity ID that identifies the local server
            to this partner. It is required when virtualEntityIds is not empty and
            must be included in that list.
          type: string
        virtualEntityIds:
          description: List of alternate entity IDs that identifies the local server
            to this partner.
          items:
            type: string
          type: array
        metadataReloadSettings:
          $ref: '#/components/schemas/ConnectionMetadataUrl'
        credentials:
          $ref: '#/components/schemas/ConnectionCredentials'
        contactInfo:
          $ref: '#/components/schemas/ContactInfo'
        licenseConnectionGroup:
          description: "The license connection group. If your PingFederate license\
            \ is based on connection groups, each connection must be assigned to a\
            \ group before it can be used."
          type: string
        loggingMode:
          description: The level of transaction logging applicable for this connection.
            Default is STANDARD.
          enum:
          - NONE
          - STANDARD
          - ENHANCED
          - FULL
          type: string
        additionalAllowedEntitiesConfiguration:
          $ref: '#/components/schemas/AdditionalAllowedEntitiesConfiguration'
        extendedProperties:
          additionalProperties:
            $ref: '#/components/schemas/ParameterValues'
          description: Extended Properties allows to store additional information
            for IdP/SP Connections. The names of these extended properties should
            be defined in /extendedProperties.
          type: object
        replicationStatus:
          description: This status indicates whether the connection has been replicated
            to the cluster. This property only applies when automatic replication
            of connections is enabled. It is read only and is ignored on PUT and POST
            requests.
          enum:
          - REPLICATED
          - NOT_REPLICATED
          type: string
      required:
      - entityId
      - name
      type: object
    ConnectionCert:
      description: A certificate used for signature verification or XML encryption.
      example:
        primaryVerificationCert: true
        certView:
          expires: 2000-01-23T04:56:07.000+00:00
          serialNumber: serialNumber
          keyAlgorithm: keyAlgorithm
          keySize: 0
          subjectAlternativeNames:
          - subjectAlternativeNames
          - subjectAlternativeNames
          issuerDN: issuerDN
          cryptoProvider: LOCAL
          sha1Fingerprint: sha1Fingerprint
          validFrom: 2000-01-23T04:56:07.000+00:00
          version: 6
          signatureAlgorithm: signatureAlgorithm
          sha256Fingerprint: sha256Fingerprint
          id: id
          subjectDN: subjectDN
          status: VALID
        secondaryVerificationCert: true
        x509File:
          fileData: fileData
          cryptoProvider: LOCAL
          id: id
        encryptionCert: true
        activeVerificationCert: true
      properties:
        certView:
          $ref: '#/components/schemas/CertView'
        x509File:
          $ref: '#/components/schemas/X509File'
        activeVerificationCert:
          description: Indicates whether this is an active signature verification
            certificate.
          type: boolean
        primaryVerificationCert:
          description: Indicates whether this is the primary signature verification
            certificate. Only one certificate in the collection can have this flag
            set.
          type: boolean
        secondaryVerificationCert:
          description: Indicates whether this is the secondary signature verification
            certificate. Only one certificate in the collection can have this flag
            set.
          type: boolean
        encryptionCert:
          description: Indicates whether to use this cert to encrypt outgoing assertions.
            Only one certificate in the collection can have this flag set.
          type: boolean
      required:
      - x509File
      type: object
    ConnectionCredentials:
      description: "The certificates and settings for encryption, signing, and signature\
        \ verification."
      example:
        inboundBackChannelAuth: null
        outboundBackChannelAuth: null
        verificationIssuerDN: verificationIssuerDN
        keyTransportAlgorithm: keyTransportAlgorithm
        decryptionKeyPairRef:
          location: location
          id: id
        certs:
        - primaryVerificationCert: true
          certView:
            expires: 2000-01-23T04:56:07.000+00:00
            serialNumber: serialNumber
            keyAlgorithm: keyAlgorithm
            keySize: 0
            subjectAlternativeNames:
            - subjectAlternativeNames
            - subjectAlternativeNames
            issuerDN: issuerDN
            cryptoProvider: LOCAL
            sha1Fingerprint: sha1Fingerprint
            validFrom: 2000-01-23T04:56:07.000+00:00
            version: 6
            signatureAlgorithm: signatureAlgorithm
            sha256Fingerprint: sha256Fingerprint
            id: id
            subjectDN: subjectDN
            status: VALID
          secondaryVerificationCert: true
          x509File:
            fileData: fileData
            cryptoProvider: LOCAL
            id: id
          encryptionCert: true
          activeVerificationCert: true
        - primaryVerificationCert: true
          certView:
            expires: 2000-01-23T04:56:07.000+00:00
            serialNumber: serialNumber
            keyAlgorithm: keyAlgorithm
            keySize: 0
            subjectAlternativeNames:
            - subjectAlternativeNames
            - subjectAlternativeNames
            issuerDN: issuerDN
            cryptoProvider: LOCAL
            sha1Fingerprint: sha1Fingerprint
            validFrom: 2000-01-23T04:56:07.000+00:00
            version: 6
            signatureAlgorithm: signatureAlgorithm
            sha256Fingerprint: sha256Fingerprint
            id: id
            subjectDN: subjectDN
            status: VALID
          secondaryVerificationCert: true
          x509File:
            fileData: fileData
            cryptoProvider: LOCAL
            id: id
          encryptionCert: true
          activeVerificationCert: true
        blockEncryptionAlgorithm: blockEncryptionAlgorithm
        verificationSubjectDN: verificationSubjectDN
        signingSettings:
          alternativeSigningKeyPairRefs:
          - location: location
            id: id
          - location: location
            id: id
          signingKeyPairRef:
            location: location
            id: id
          includeRawKeyInSignature: true
          algorithm: algorithm
          includeCertInSignature: true
        secondaryDecryptionKeyPairRef:
          location: location
          id: id
      properties:
        verificationSubjectDN:
          description: "If this property is set, the verification trust model is Anchored.\
            \ The verification certificate must be signed by a trusted CA and included\
            \ in the incoming message, and the subject DN of the expected certificate\
            \ is specified in this property. If this property is not set, then a primary\
            \ verification certificate must be specified in the certs array."
          type: string
        verificationIssuerDN:
          description: "If a verification Subject DN is provided, you can optionally\
            \ restrict the issuer to a specific trusted CA by specifying its DN in\
            \ this field."
          type: string
        certs:
          description: The certificates used for signature verification and XML encryption.
          items:
            $ref: '#/components/schemas/ConnectionCert'
          type: array
        blockEncryptionAlgorithm:
          description: "The algorithm used to encrypt assertions sent to this partner.\
            \ AES_128, AES_256, AES_128_GCM, AES_192_GCM, AES_256_GCM and Triple_DES\
            \ are supported."
          type: string
        keyTransportAlgorithm:
          description: "The algorithm used to transport keys to this partner. RSA_OAEP,\
            \ RSA_OAEP_256 and RSA_v15 are supported."
          type: string
        signingSettings:
          $ref: '#/components/schemas/SigningSettings'
        decryptionKeyPairRef:
          $ref: '#/components/schemas/ResourceLink'
        secondaryDecryptionKeyPairRef:
          $ref: '#/components/schemas/ResourceLink'
        outboundBackChannelAuth:
          $ref: '#/components/schemas/OutboundBackChannelAuth'
        inboundBackChannelAuth:
          $ref: '#/components/schemas/InboundBackChannelAuth'
      type: object
    ConnectionMetadataUrl:
      description: Configuration settings to enable automatic reload of partner's
        metadata.
      example:
        metadataUrlRef:
          location: location
          id: id
        enableAutoMetadataUpdate: true
      properties:
        metadataUrlRef:
          $ref: '#/components/schemas/ResourceLink'
        enableAutoMetadataUpdate:
          description: Specifies whether the metadata of the connection will be automatically
            reloaded. The default value is true.
          type: boolean
      required:
      - metadataUrlRef
      type: object
    ContactInfo:
      description: Contact information.
      example:
        firstName: firstName
        lastName: lastName
        phone: phone
        company: company
        email: email
      properties:
        company:
          description: Company name.
          type: string
        email:
          description: Contact email address.
          type: string
        firstName:
          description: Contact first name.
          type: string
        lastName:
          description: Contact last name.
          type: string
        phone:
          description: Contact phone number.
          type: string
      type: object
    ConvertMetadataResponse:
      description: A response from converting SAML connection metadata into a JSON
        connection. It includes the converted connection and the authenticity information
        of the metadata.
      example:
        signatureStatus: SIGNED
        certTrustStatus: TRUSTED
        certSerialNumber: certSerialNumber
        certExpiration: 2000-01-23T04:56:07.000+00:00
        connection:
          additionalAllowedEntitiesConfiguration:
            additionalAllowedEntities:
            - entityDescription: entityDescription
              entityId: entityId
            - entityDescription: entityDescription
              entityId: entityId
            allowAdditionalEntities: true
            allowAllEntities: true
          contactInfo:
            firstName: firstName
            lastName: lastName
            phone: phone
            company: company
            email: email
          credentials:
            inboundBackChannelAuth: null
            outboundBackChannelAuth: null
            verificationIssuerDN: verificationIssuerDN
            keyTransportAlgorithm: keyTransportAlgorithm
            decryptionKeyPairRef:
              location: location
              id: id
            certs:
            - primaryVerificationCert: true
              certView:
                expires: 2000-01-23T04:56:07.000+00:00
                serialNumber: serialNumber
                keyAlgorithm: keyAlgorithm
                keySize: 0
                subjectAlternativeNames:
                - subjectAlternativeNames
                - subjectAlternativeNames
                issuerDN: issuerDN
                cryptoProvider: LOCAL
                sha1Fingerprint: sha1Fingerprint
                validFrom: 2000-01-23T04:56:07.000+00:00
                version: 6
                signatureAlgorithm: signatureAlgorithm
                sha256Fingerprint: sha256Fingerprint
                id: id
                subjectDN: subjectDN
                status: VALID
              secondaryVerificationCert: true
              x509File:
                fileData: fileData
                cryptoProvider: LOCAL
                id: id
              encryptionCert: true
              activeVerificationCert: true
            - primaryVerificationCert: true
              certView:
                expires: 2000-01-23T04:56:07.000+00:00
                serialNumber: serialNumber
                keyAlgorithm: keyAlgorithm
                keySize: 0
                subjectAlternativeNames:
                - subjectAlternativeNames
                - subjectAlternativeNames
                issuerDN: issuerDN
                cryptoProvider: LOCAL
                sha1Fingerprint: sha1Fingerprint
                validFrom: 2000-01-23T04:56:07.000+00:00
                version: 6
                signatureAlgorithm: signatureAlgorithm
                sha256Fingerprint: sha256Fingerprint
                id: id
                subjectDN: subjectDN
                status: VALID
              secondaryVerificationCert: true
              x509File:
                fileData: fileData
                cryptoProvider: LOCAL
                id: id
              encryptionCert: true
              activeVerificationCert: true
            blockEncryptionAlgorithm: blockEncryptionAlgorithm
            verificationSubjectDN: verificationSubjectDN
            signingSettings:
              alternativeSigningKeyPairRefs:
              - location: location
                id: id
              - location: location
                id: id
              signingKeyPairRef:
                location: location
                id: id
              includeRawKeyInSignature: true
              algorithm: algorithm
              includeCertInSignature: true
            secondaryDecryptionKeyPairRef:
              location: location
              id: id
          active: true
          entityId: entityId
          loggingMode: NONE
          replicationStatus: REPLICATED
          type: IDP
          creationDate: 2000-01-23T04:56:07.000+00:00
          metadataReloadSettings:
            metadataUrlRef:
              location: location
              id: id
            enableAutoMetadataUpdate: true
          modificationDate: 2000-01-23T04:56:07.000+00:00
          baseUrl: baseUrl
          extendedProperties:
            key:
              values:
              - values
              - values
          defaultVirtualEntityId: defaultVirtualEntityId
          virtualEntityIds:
          - virtualEntityIds
          - virtualEntityIds
          name: name
          id: id
          licenseConnectionGroup: licenseConnectionGroup
        certSubjectDn: certSubjectDn
      properties:
        signatureStatus:
          description: The metadata's digital signature status.
          enum:
          - SIGNED
          - UNSIGNED
          type: string
        certTrustStatus:
          description: "The metadata certificate's trust status, i.e. If the partner's\
            \ certificate can be trusted or not."
          enum:
          - TRUSTED
          - NOT_TRUSTED
          type: string
        certSubjectDn:
          description: The metadata certificate's subject DN.
          type: string
        certSerialNumber:
          description: The metadata certificate's serial number.
          type: string
        certExpiration:
          description: The metadata certificate's expiry date.
          format: date-time
          type: string
        connection:
          $ref: '#/components/schemas/Connection'
      type: object
    DataStoreRepository:
      description: Jit Provisioning user repository data store.
      discriminator:
        propertyName: type
      properties:
        type:
          description: The data store repository type.
          enum:
          - LDAP
          - JDBC
          type: string
        dataStoreRef:
          $ref: '#/components/schemas/ResourceLink'
        jitRepositoryAttributeMapping:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: The user repository attribute mapping.
          type: object
      required:
      - dataStoreRef
      - jitRepositoryAttributeMapping
      - type
      type: object
    DecryptionPolicy:
      description: Defines what to decrypt in the browser-based SSO profile.
      properties:
        assertionEncrypted:
          description: Specify whether the incoming SAML assertion is encrypted for
            an IdP connection.
          type: boolean
        attributesEncrypted:
          description: Specify whether one or more incoming SAML attributes are encrypted
            for an IdP connection.
          type: boolean
        subjectNameIdEncrypted:
          description: Specify whether the incoming Subject Name ID is encrypted for
            an IdP connection.
          type: boolean
        sloEncryptSubjectNameID:
          description: Encrypt the Subject Name ID in SLO messages to the IdP.
          type: boolean
        sloSubjectNameIDEncrypted:
          description: Allow encrypted Subject Name ID in SLO messages from the IdP.
          type: boolean
      type: object
    EncryptionPolicy:
      description: Defines what to encrypt in the browser-based SSO profile.
      properties:
        encryptAssertion:
          description: Whether the outgoing SAML assertion will be encrypted.
          type: boolean
        encryptedAttributes:
          description: The list of outgoing SAML assertion attributes that will be
            encrypted. The 'encryptAssertion' property takes precedence over this.
          items:
            type: string
          type: array
        encryptSloSubjectNameId:
          description: Encrypt the name-identifier attribute in outbound SLO messages.  This
            can be set if the name id is encrypted.
          type: boolean
        sloSubjectNameIDEncrypted:
          description: Allow the encryption of the name-identifier attribute for inbound
            SLO messages. This can be set if SP initiated SLO is enabled.
          type: boolean
      type: object
    Entity:
      example:
        entityDescription: entityDescription
        entityId: entityId
      properties:
        entityId:
          description: Unique entity identifier.
          type: string
        entityDescription:
          description: Entity description.
          type: string
      type: object
    GroupMembershipDetection:
      description: Settings to detect group memberships.
      properties:
        memberOfGroupAttributeName:
          description: "The name of the attribute that indicates the entity is a member\
            \ of a group, also known as member of attribute."
          type: string
        groupMemberAttributeName:
          description: "The name of the attribute that represents group members in\
            \ a group, also known as group member attribute."
          type: string
      required:
      - groupMemberAttributeName
      type: object
    Groups:
      description: Group creation and read configuration.
      properties:
        writeGroups:
          $ref: '#/components/schemas/WriteGroups'
        readGroups:
          $ref: '#/components/schemas/ReadGroups'
      required:
      - readGroups
      - writeGroups
      type: object
    IdentityStoreInboundProvisioningUserRepository:
      allOf:
      - $ref: '#/components/schemas/InboundProvisioningUserRepository'
      - description: Identity Store Provisioner data store user repository.
        properties:
          identityStoreProvisionerRef:
            $ref: '#/components/schemas/ResourceLink'
        required:
        - identityStoreProvisionerRef
        type: object
    IdpAdapterAssertionMapping:
      description: The IdP Adapter Assertion Mapping.
      properties:
        idpAdapterRef:
          $ref: '#/components/schemas/ResourceLink'
        restrictVirtualEntityIds:
          description: Restricts this mapping to specific virtual entity IDs.
          type: boolean
        restrictedVirtualEntityIds:
          description: The list of virtual server IDs that this mapping is restricted
            to.
          items:
            type: string
          type: array
        adapterOverrideSettings:
          $ref: '#/components/schemas/IdpAdapter'
        abortSsoTransactionAsFailSafe:
          description: "If set to true, SSO transaction will be aborted as a fail-safe\
            \ when the data-store's attribute mappings fail to complete the attribute\
            \ contract. Otherwise, the attribute contract with default values is used.\
            \ By default, this value is false."
          type: boolean
        attributeSources:
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: '#/components/schemas/AttributeSourceAggregation'
          type: array
        attributeContractFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of mappings from attribute names to their fulfillment
            values.
          type: object
        issuanceCriteria:
          $ref: '#/components/schemas/IssuanceCriteria'
      required:
      - attributeContractFulfillment
      type: object
    IdpAttributeQuery:
      description: The attribute query profile supports local applications in requesting
        user attributes from an attribute authority.
      properties:
        url:
          description: The URL at your IdP partner's site where attribute queries
            are to be sent.
          type: string
        nameMappings:
          description: The attribute name mappings between the SP and the IdP.
          items:
            $ref: '#/components/schemas/AttributeQueryNameMapping'
          type: array
        policy:
          $ref: '#/components/schemas/IdpAttributeQueryPolicy'
      required:
      - url
      type: object
    IdpAttributeQueryPolicy:
      description: The attribute query profile's security policy.
      properties:
        requireSignedResponse:
          description: Require signed response.
          type: boolean
        requireSignedAssertion:
          description: Require signed assertion.
          type: boolean
        requireEncryptedAssertion:
          description: Require encrypted assertion.
          type: boolean
        signAttributeQuery:
          description: Sign the attribute query.
          type: boolean
        encryptNameId:
          description: Encrypt the name identifier.
          type: boolean
        maskAttributeValues:
          description: Mask attributes in log files.
          type: boolean
      type: object
    IdpBrowserSso:
      description: The settings used to enable secure browser-based SSO to resources
        at your site.
      properties:
        protocol:
          description: The browser-based SSO protocol to use.
          enum:
          - SAML20
          - WSFED
          - SAML11
          - SAML10
          - OIDC
          type: string
        oidcProviderSettings:
          $ref: '#/components/schemas/OIDCProviderSettings'
        enabledProfiles:
          description: 'The profiles that are enabled for browser-based SSO. SAML
            2.0 supports all profiles whereas SAML 1.x IdP connections support both
            IdP and SP (non-standard) initiated SSO. This is required for SAMLx.x
            Connections. '
          items:
            enum:
            - IDP_INITIATED_SSO
            - SP_INITIATED_SSO
            - IDP_INITIATED_SLO
            - SP_INITIATED_SLO
            type: string
          type: array
          uniqueItems: true
        incomingBindings:
          description: "The SAML bindings that are enabled for browser-based SSO.\
            \ This is required for SAML 2.0 connections when the enabled profiles\
            \ contain the SP-initiated SSO profile or either SLO profile. For SAML\
            \ 1.x based connections, it is not used for SP Connections and it is optional\
            \ for IdP Connections."
          items:
            enum:
            - ARTIFACT
            - POST
            - REDIRECT
            - SOAP
            type: string
          type: array
          uniqueItems: true
        messageCustomizations:
          description: "The message customizations for browser-based SSO. Depending\
            \ on server settings, connection type, and protocol this may or may not\
            \ be supported."
          items:
            $ref: '#/components/schemas/ProtocolMessageCustomization'
          type: array
        urlWhitelistEntries:
          description: "For WS-Federation connections, a whitelist of additional allowed\
            \ domains and paths used to validate wreply for SLO, if enabled."
          items:
            $ref: '#/components/schemas/UrlWhitelistEntry'
          type: array
        artifact:
          $ref: '#/components/schemas/ArtifactSettings'
        sloServiceEndpoints:
          description: A list of possible endpoints to send SLO requests and responses.
          items:
            $ref: '#/components/schemas/SloServiceEndpoint'
          type: array
        alwaysSignArtifactResponse:
          description: Specify to always sign the SAML ArtifactResponse.
          type: boolean
        ssoApplicationEndpoint:
          description: Application endpoint that can be used to invoke single sign-on
            (SSO) for the connection. This is a read-only parameter.
          type: string
        ssoServiceEndpoints:
          description: The IdP SSO endpoints that define where to send your authentication
            requests. Only required for SP initiated SSO. This is required for SAML
            x.x and WS-FED Connections.
          items:
            $ref: '#/components/schemas/IdpSsoServiceEndpoint'
          type: array
        defaultTargetUrl:
          description: "The default target URL for this connection. If defined, this\
            \ overrides the default URL."
          type: string
        authnContextMappings:
          description: A list of authentication context mappings between local and
            remote values. Applicable for SAML 2.0 and OIDC protocol connections.
          items:
            $ref: '#/components/schemas/AuthnContextMapping'
          type: array
        assertionsSigned:
          description: Specify whether the incoming SAML assertions are signed rather
            than the entire SAML response being signed.
          type: boolean
        signAuthnRequests:
          description: Determines whether SAML authentication requests should be signed.
          type: boolean
        decryptionPolicy:
          $ref: '#/components/schemas/DecryptionPolicy'
        idpIdentityMapping:
          description: Defines the process in which users authenticated by the IdP
            are associated with user accounts local to the SP.
          enum:
          - ACCOUNT_MAPPING
          - ACCOUNT_LINKING
          - NONE
          type: string
        attributeContract:
          $ref: '#/components/schemas/IdpBrowserSsoAttributeContract'
        adapterMappings:
          description: A list of adapters that map to incoming assertions.
          items:
            $ref: '#/components/schemas/SpAdapterMapping'
          type: array
        authenticationPolicyContractMappings:
          description: A list of Authentication Policy Contracts that map to incoming
            assertions.
          items:
            $ref: '#/components/schemas/AuthenticationPolicyContractMapping'
          type: array
        ssoOAuthMapping:
          $ref: '#/components/schemas/SsoOAuthMapping'
        oauthAuthenticationPolicyContractRef:
          $ref: '#/components/schemas/ResourceLink'
        jitProvisioning:
          $ref: '#/components/schemas/JitProvisioning'
      required:
      - idpIdentityMapping
      - protocol
      type: object
    IdpBrowserSsoAttribute:
      description: An attribute for the IdP Browser SSO attribute contract.
      properties:
        name:
          description: The name of this attribute.
          type: string
        masked:
          description: Specifies whether this attribute is masked in PingFederate
            logs. Defaults to false.
          type: boolean
      required:
      - name
      type: object
    IdpBrowserSsoAttributeContract:
      description: A set of user attributes that the IdP sends in the SAML assertion.
      properties:
        coreAttributes:
          description: A list of read-only assertion attributes that are automatically
            populated by PingFederate.
          items:
            $ref: '#/components/schemas/IdpBrowserSsoAttribute'
          type: array
        extendedAttributes:
          description: A list of additional attributes that are present in the incoming
            assertion.
          items:
            $ref: '#/components/schemas/IdpBrowserSsoAttribute'
          type: array
      type: object
    IdpConnection:
      allOf:
      - $ref: '#/components/schemas/Connection'
      - description: The set of attributes used to configure an IdP connection.
        properties:
          oidcClientCredentials:
            $ref: '#/components/schemas/OIDCClientCredentials'
          idpBrowserSso:
            $ref: '#/components/schemas/IdpBrowserSso'
          attributeQuery:
            $ref: '#/components/schemas/IdpAttributeQuery'
          idpOAuthGrantAttributeMapping:
            $ref: '#/components/schemas/IdpOAuthGrantAttributeMapping'
          wsTrust:
            $ref: '#/components/schemas/IdpWsTrust'
          inboundProvisioning:
            $ref: '#/components/schemas/IdpInboundProvisioning'
          errorPageMsgId:
            description: Identifier that specifies the message displayed on a user-facing
              error page.
            type: string
        type: object
    IdpInboundProvisioning:
      description: SCIM Inbound Provisioning specifies how and when to provision user
        accounts and groups.
      properties:
        groupSupport:
          description: Specify support for provisioning of groups.
          type: boolean
        userRepository:
          $ref: '#/components/schemas/InboundProvisioningUserRepository'
        customSchema:
          $ref: '#/components/schemas/Schema'
        users:
          $ref: '#/components/schemas/Users'
        groups:
          $ref: '#/components/schemas/Groups'
        actionOnDelete:
          description: Specify behavior of how SCIM DELETE requests are handled.
          enum:
          - DISABLE_USER
          - PERMANENTLY_DELETE_USER
          type: string
      required:
      - customSchema
      - groupSupport
      - groups
      - userRepository
      - users
      type: object
    IdpInboundProvisioningAttribute:
      description: An attribute for the IdP Inbound Provisioning attribute contract.
      properties:
        name:
          description: The name of this attribute.
          type: string
        masked:
          description: Specifies whether this attribute is masked in PingFederate
            logs. Defaults to false.
          type: boolean
      required:
      - name
      type: object
    IdpInboundProvisioningAttributeContract:
      description: A set of user attributes that the IdP sends in the SCIM response.
      properties:
        coreAttributes:
          description: A list of read-only assertion attributes that are automatically
            populated by PingFederate.
          items:
            $ref: '#/components/schemas/IdpInboundProvisioningAttribute'
          type: array
        extendedAttributes:
          description: A list of additional attributes that are added to the SCIM
            response.
          items:
            $ref: '#/components/schemas/IdpInboundProvisioningAttribute'
          type: array
      type: object
    IdpOAuthAttributeContract:
      description: A set of user attributes that the IdP sends in the OAuth Assertion
        Grant.
      properties:
        coreAttributes:
          description: A list of read-only assertion attributes that are automatically
            populated by PingFederate.
          items:
            $ref: '#/components/schemas/IdpBrowserSsoAttribute'
          type: array
        extendedAttributes:
          description: A list of additional attributes that are present in the incoming
            assertion.
          items:
            $ref: '#/components/schemas/IdpBrowserSsoAttribute'
          type: array
      type: object
    IdpOAuthGrantAttributeMapping:
      description: The OAuth Assertion Grant settings used to map from your IdP.
      properties:
        accessTokenManagerMappings:
          description: A mapping in a connection that defines how access tokens are
            created.
          items:
            $ref: '#/components/schemas/AccessTokenManagerMapping'
          type: array
        idpOAuthAttributeContract:
          $ref: '#/components/schemas/IdpOAuthAttributeContract'
      type: object
    IdpSsoServiceEndpoint:
      description: The settings that define an endpoint to an IdP SSO service.
      properties:
        binding:
          description: "The binding of this endpoint, if applicable - usually only\
            \ required for SAML 2.0 endpoints."
          enum:
          - ARTIFACT
          - POST
          - REDIRECT
          - SOAP
          type: string
        url:
          description: The absolute or relative URL of the endpoint. A relative URL
            can be specified if a base URL for the connection has been defined.
          type: string
      required:
      - binding
      - url
      type: object
    IdpTokenProcessorMapping:
      description: The IdP Token Processor Mapping.
      properties:
        idpTokenProcessorRef:
          $ref: '#/components/schemas/ResourceLink'
        restrictedVirtualEntityIds:
          description: The list of virtual server IDs that this mapping is restricted
            to.
          items:
            type: string
          type: array
        attributeSources:
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: '#/components/schemas/AttributeSourceAggregation'
          type: array
        attributeContractFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of mappings from attribute names to their fulfillment
            values.
          type: object
        issuanceCriteria:
          $ref: '#/components/schemas/IssuanceCriteria'
      required:
      - attributeContractFulfillment
      - idpTokenProcessorRef
      type: object
    IdpWsTrust:
      description: Ws-Trust STS provides validation of incoming tokens which enable
        SSO access to Web Services. It also allows generation of local tokens for
        Web Services.
      properties:
        attributeContract:
          $ref: '#/components/schemas/IdpWsTrustAttributeContract'
        generateLocalToken:
          description: Indicates whether a local token needs to be generated. The
            default value is false.
          type: boolean
        tokenGeneratorMappings:
          description: A list of token generators to generate local tokens. Required
            if a local token needs to be generated.
          items:
            $ref: '#/components/schemas/SpTokenGeneratorMapping'
          type: array
      required:
      - attributeContract
      - generateLocalToken
      type: object
    IdpWsTrustAttribute:
      description: An attribute for the Ws-Trust attribute contract.
      properties:
        name:
          description: The name of this attribute.
          type: string
        masked:
          description: Specifies whether this attribute is masked in PingFederate
            logs. Defaults to false.
          type: boolean
      required:
      - name
      type: object
    IdpWsTrustAttributeContract:
      description: A set of user attributes that this server will receive in the token.
      properties:
        coreAttributes:
          description: A list of read-only assertion attributes that are automatically
            populated by PingFederate.
          items:
            $ref: '#/components/schemas/IdpWsTrustAttribute'
          type: array
        extendedAttributes:
          description: A list of additional attributes that are receive in the incoming
            assertion.
          items:
            $ref: '#/components/schemas/IdpWsTrustAttribute'
          type: array
      type: object
    InboundBackChannelAuth:
      allOf:
      - $ref: '#/components/schemas/BackChannelAuth'
      - properties:
          verificationSubjectDN:
            description: "If this property is set, the verification trust model is\
              \ Anchored. The verification certificate must be signed by a trusted\
              \ CA and included in the incoming message, and the subject DN of the\
              \ expected certificate is specified in this property. If this property\
              \ is not set, then a primary verification certificate must be specified\
              \ in the certs array."
            type: string
          verificationIssuerDN:
            description: "If a verification Subject DN is provided, you can optionally\
              \ restrict the issuer to a specific trusted CA by specifying its DN\
              \ in this field."
            type: string
          certs:
            description: The certificate used for signature verification and XML encryption.
            items:
              $ref: '#/components/schemas/ConnectionCert'
            type: array
          requireSsl:
            description: Incoming HTTP transmissions must use a secure channel.
            type: boolean
        type: object
    InboundProvisioningUserRepository:
      description: SCIM Inbound Provisioning user repository.
      discriminator:
        propertyName: type
      properties:
        type:
          description: The user repository type.
          enum:
          - LDAP
          - IDENTITY_STORE
          type: string
      required:
      - type
      type: object
    JdbcDataStoreRepository:
      allOf:
      - $ref: '#/components/schemas/DataStoreRepository'
      - description: JDBC data store user repository.
        properties:
          sqlMethod:
            $ref: '#/components/schemas/SqlMethod'
          jitRepositoryAttributeMapping:
            additionalProperties:
              $ref: '#/components/schemas/AttributeFulfillmentValue'
            description: A list of user repository mappings from attribute names to
              their fulfillment values.
            type: object
        required:
        - jitRepositoryAttributeMapping
        - sqlMethod
        type: object
    JitProvisioning:
      description: The settings used to specify how and when to provision user accounts.
      properties:
        userAttributes:
          $ref: '#/components/schemas/JitProvisioningUserAttributes'
        userRepository:
          $ref: '#/components/schemas/DataStoreRepository'
        eventTrigger:
          description: Specify when provisioning occurs during assertion processing.
            The default is 'NEW_USER_ONLY'.
          enum:
          - NEW_USER_ONLY
          - ALL_SAML_ASSERTIONS
          type: string
        errorHandling:
          description: Specify behavior when provisioning request fails. The default
            is 'CONTINUE_SSO'.
          enum:
          - CONTINUE_SSO
          - ABORT_SSO
          type: string
      required:
      - userAttributes
      - userRepository
      type: object
    JitProvisioningUserAttributes:
      properties:
        attributeContract:
          description: A list of user attributes that the IdP sends in the SAML assertion.
          items:
            $ref: '#/components/schemas/IdpBrowserSsoAttribute'
          type: array
        doAttributeQuery:
          description: Specify whether to use only attributes from the SAML Assertion
            or retrieve additional attributes from the IdP. The default is false.
          type: boolean
      type: object
    LdapDataStoreRepository:
      allOf:
      - $ref: '#/components/schemas/DataStoreRepository'
      - description: LDAP data store user repository.
        properties:
          baseDn:
            description: "The base DN to search from. If not specified, the search\
              \ will start at the LDAP's root."
            type: string
          uniqueUserIdFilter:
            description: "The expression that results in a unique user identifier,\
              \ when combined with the Base DN."
            type: string
          jitRepositoryAttributeMapping:
            additionalProperties:
              $ref: '#/components/schemas/AttributeFulfillmentValue'
            description: A list of user repository mappings from attribute names to
              their fulfillment values.
            type: object
        required:
        - jitRepositoryAttributeMapping
        - uniqueUserIdFilter
        type: object
    LdapInboundProvisioningUserRepository:
      allOf:
      - $ref: '#/components/schemas/InboundProvisioningUserRepository'
      - description: LDAP Active Directory data store user repository
        properties:
          dataStoreRef:
            $ref: '#/components/schemas/ResourceLink'
          baseDn:
            description: "The base DN to search from. If not specified, the search\
              \ will start at the LDAP's root."
            type: string
          uniqueUserIdFilter:
            description: "The expression that results in a unique user identifier,\
              \ when combined with the Base DN."
            type: string
          uniqueGroupIdFilter:
            description: "The expression that results in a unique group identifier,\
              \ when combined with the Base DN."
            type: string
        required:
        - dataStoreRef
        - uniqueGroupIdFilter
        - uniqueUserIdFilter
        type: object
    OIDCClientCredentials:
      description: The OpenID Connect Client Credentials settings. This is required
        for an OIDC Connection.
      properties:
        clientId:
          description: The OpenID Connect client identitification.
          type: string
        clientSecret:
          description: "The OpenID Connect client secret. To update the client secret,\
            \ specify the plaintext value in this field.  This field will not be populated\
            \ for GET requests."
          type: string
        encryptedSecret:
          description: "For GET requests, this field contains the encrypted client\
            \ secret, if one exists.  For POST and PUT requests, if you wish to reuse\
            \ the existing secret, this field should be passed back unchanged."
          type: string
      required:
      - clientId
      type: object
    OIDCProviderSettings:
      description: The OpenID Provider settings.
      properties:
        scopes:
          description: Space separated scope values that the OpenID Provider supports.
          type: string
        authorizationEndpoint:
          description: URL of the OpenID Provider's OAuth 2.0 Authorization Endpoint.
          type: string
        pushedAuthorizationRequestEndpoint:
          description: URL of the OpenID Provider's OAuth 2.0 Pushed Authorization
            Request Endpoint.
          type: string
        loginType:
          description: "The OpenID Connect login type. These values maps to: <br>\
            \  CODE: Authentication using Code Flow <br> POST: Authentication using\
            \ Form Post <br> POST_AT: Authentication using Form Post with Access Token"
          enum:
          - CODE
          - POST
          - POST_AT
          type: string
        authenticationScheme:
          description: 'The OpenID Connect Authentication Scheme. This is required
            for Authentication using Code Flow. '
          enum:
          - BASIC
          - POST
          - PRIVATE_KEY_JWT
          - CLIENT_SECRET_JWT
          type: string
        authenticationSigningAlgorithm:
          description: "The authentication signing algorithm for token endpoint PRIVATE_KEY_JWT\
            \ or CLIENT_SECRET_JWT authentication. Asymmetric algorithms are allowed\
            \ for PRIVATE_KEY_JWT and symmetric algorithms are allowed for CLIENT_SECRET_JWT.\
            \ For RSASSA-PSS signing algorithm, PingFederate must be integrated with\
            \ a hardware security module (HSM) or Java 11."
          enum:
          - NONE
          - HS256
          - HS384
          - HS512
          - RS256
          - RS384
          - RS512
          - ES256
          - ES384
          - ES512
          - PS256
          - PS384
          - PS512
          type: string
        requestSigningAlgorithm:
          description: "The request signing algorithm. Required only if you wish to\
            \ use signed requests. Only asymmetric algorithms are allowed. For RSASSA-PSS\
            \ signing algorithm, PingFederate must be integrated with a hardware security\
            \ module (HSM) or Java 11."
          enum:
          - NONE
          - HS256
          - HS384
          - HS512
          - RS256
          - RS384
          - RS512
          - ES256
          - ES384
          - ES512
          - PS256
          - PS384
          - PS512
          type: string
        enablePKCE:
          description: "Enable Proof Key for Code Exchange (PKCE). When enabled, the\
            \ client sends an SHA-256 code challenge and corresponding code verifier\
            \ to the OpenID Provider during the authorization code flow."
          type: boolean
        tokenEndpoint:
          description: URL of the OpenID Provider's OAuth 2.0 Token Endpoint.
          type: string
        userInfoEndpoint:
          description: URL of the OpenID Provider's UserInfo Endpoint.
          type: string
        logoutEndpoint:
          description: URL of the OpenID Provider's RP-Initiated Logout Endpoint.
          type: string
        jwksURL:
          description: "URL of the OpenID Provider's JSON Web Key Set [JWK] document."
          type: string
        trackUserSessionsForLogout:
          description: "Determines whether PingFederate tracks a logout entry when\
            \ a user signs in, so that the user session can later be terminated via\
            \ a logout request from the OP. This setting must also be enabled in order\
            \ for PingFederate to send an RP-initiated logout request to the OP during\
            \ SLO."
          type: boolean
        requestParameters:
          description: A list of request parameters. Request parameters with same
            name but different attribute values are treated as a multi-valued request
            parameter.
          items:
            $ref: '#/components/schemas/OIDCRequestParameter'
          type: array
        redirectUri:
          description: The redirect URI. This is a read-only parameter.
          type: string
        backChannelLogoutUri:
          description: The Back-Channel Logout URI. This read-only parameter is available
            when user sessions are tracked for logout.
          type: string
        frontChannelLogoutUri:
          description: The Front-Channel Logout URI. This is a read-only parameter.
          type: string
        postLogoutRedirectUri:
          description: "The Post-Logout Redirect URI, where the OpenID Provider may\
            \ redirect the user when RP-Initiated Logout has completed. This is a\
            \ read-only parameter."
          type: string
      required:
      - authorizationEndpoint
      - jwksURL
      - loginType
      - scopes
      type: object
    OIDCRequestParameter:
      description: An OIDC custom request parameter.
      properties:
        name:
          description: Request parameter name.
          type: string
        attributeValue:
          $ref: '#/components/schemas/AttributeFulfillmentValue'
        value:
          description: A request parameter value. A parameter can have either a value
            or a attribute value but not both. Value set here will be converted to
            an attribute value of source type TEXT. An empty value will be converted
            to attribute value of source type NO_MAPPING.
          type: string
        applicationEndpointOverride:
          description: Indicates whether the parameter value can be overridden by
            an Application Endpoint parameter
          type: boolean
      required:
      - applicationEndpointOverride
      - attributeValue
      - name
      type: object
    OutboundBackChannelAuth:
      allOf:
      - $ref: '#/components/schemas/BackChannelAuth'
      - properties:
          sslAuthKeyPairRef:
            $ref: '#/components/schemas/ResourceLink'
          validatePartnerCert:
            description: Validate the partner server certificate. Default is true.
            type: boolean
        type: object
    OutboundProvision:
      description: Outbound Provisioning allows an IdP to create and maintain user
        accounts at standards-based partner sites using SCIM as well as select-proprietary
        provisioning partner sites that are protocol-enabled.
      properties:
        type:
          description: The SaaS plugin type.
          type: string
        targetSettings:
          description: Configuration fields that includes credentials to target SaaS
            application.
          items:
            $ref: '#/components/schemas/ConfigField'
          type: array
        customSchema:
          $ref: '#/components/schemas/Schema'
        channels:
          description: "Includes settings of a source data store, managing provisioning\
            \ threads and mapping of attributes."
          items:
            $ref: '#/components/schemas/Channel'
          type: array
      required:
      - channels
      - targetSettings
      - type
      type: object
    ParameterValues:
      description: Parameter Values.
      example:
        values:
        - values
        - values
      properties:
        values:
          description: A List of values
          items:
            type: string
          type: array
      type: object
    ProtocolMessageCustomization:
      description: The message customization that will be executed on outgoing PingFederate
        messages.
      properties:
        contextName:
          description: "The context in which the customization will be applied. Depending\
            \ on the connection type and protocol, this can either be 'assertion',\
            \ 'authn-response' or 'authn-request'."
          type: string
        messageExpression:
          description: The OGNL expression that will be executed. Refer to the Admin
            Manual for a list of variables provided by PingFederate.
          type: string
      type: object
    ReadGroups:
      description: Group info lookup and respond to incoming SCIM requests configuration.
      properties:
        attributeContract:
          $ref: '#/components/schemas/IdpInboundProvisioningAttributeContract'
        attributes:
          description: A list of LDAP data store attributes to populate a response
            to a user-provisioning request.
          items:
            $ref: '#/components/schemas/Attribute'
          type: array
        attributeFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of user repository mappings from attribute names to
            their fulfillment values.
          type: object
      required:
      - attributeContract
      - attributeFulfillment
      - attributes
      type: object
    ReadUsers:
      description: User info lookup and respond to incoming SCIM requests configuration.
      properties:
        attributeContract:
          $ref: '#/components/schemas/IdpInboundProvisioningAttributeContract'
        attributes:
          description: A list of LDAP data store attributes to populate a response
            to a user-provisioning request.
          items:
            $ref: '#/components/schemas/Attribute'
          type: array
        attributeFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of user repository mappings from attribute names to
            their fulfillment values.
          type: object
      required:
      - attributeContract
      - attributeFulfillment
      - attributes
      type: object
    SaasAttributeMapping:
      description: Settings to map the source record attributes to target attributes.
      properties:
        fieldName:
          description: The name of target field.
          type: string
        saasFieldInfo:
          $ref: '#/components/schemas/SaasFieldConfiguration'
      required:
      - fieldName
      - saasFieldInfo
      type: object
    SaasFieldConfiguration:
      description: The settings that represent how attribute values from source data
        store will be mapped into Fields specified by the service provider.
      properties:
        attributeNames:
          description: The list of source attribute names used to generate or map
            to a target field
          items:
            type: string
          type: array
          uniqueItems: true
        defaultValue:
          description: The default value for the target field
          type: string
        expression:
          description: An OGNL expression to obtain a value.
          type: string
        createOnly:
          description: Indicates whether this field is a create only field and cannot
            be updated.
          type: boolean
        trim:
          description: Indicates whether field should be trimmed before provisioning.
          type: boolean
        characterCase:
          description: The character case of the field value.
          enum:
          - LOWER
          - UPPER
          - NONE
          type: string
        parser:
          description: Indicates how the field shall be parsed.
          enum:
          - EXTRACT_CN_FROM_DN
          - EXTRACT_USERNAME_FROM_EMAIL
          - NONE
          type: string
        masked:
          description: Indicates whether the attribute should be masked in server
            logs.
          type: boolean
      type: object
    Schema:
      description: Custom SCIM Attributes configuration.
      properties:
        namespace:
          type: string
        attributes:
          items:
            $ref: '#/components/schemas/SchemaAttribute'
          type: array
      type: object
    SchemaAttribute:
      description: A custom SCIM attribute.
      properties:
        name:
          description: Name of the attribute.
          type: string
        multiValued:
          description: Indicates whether the attribute is multi-valued.
          type: boolean
        types:
          description: Represents the name of each attribute type in case of multi-valued
            attribute.
          items:
            type: string
          type: array
        subAttributes:
          description: List of sub-attributes for an attribute.
          items:
            type: string
          type: array
      type: object
    SigningSettings:
      description: Settings related to signing messages sent to this partner.
      example:
        alternativeSigningKeyPairRefs:
        - location: location
          id: id
        - location: location
          id: id
        signingKeyPairRef:
          location: location
          id: id
        includeRawKeyInSignature: true
        algorithm: algorithm
        includeCertInSignature: true
      properties:
        signingKeyPairRef:
          $ref: '#/components/schemas/ResourceLink'
        alternativeSigningKeyPairRefs:
          description: The list of IDs of alternative key pairs used to sign messages
            sent to this partner. The ID of the key pair is also known as the alias
            and can be found by viewing the corresponding certificate under 'Signing
            & Decryption Keys & Certificates' in the PingFederate admin console.
          items:
            $ref: '#/components/schemas/ResourceLink'
          type: array
        algorithm:
          description: "The algorithm used to sign messages sent to this partner.\
            \ The default is SHA1withDSA for DSA certs, SHA256withRSA for RSA certs,\
            \ and SHA256withECDSA for EC certs. For RSA certs, SHA1withRSA, SHA384withRSA,\
            \ SHA512withRSA, SHA256withRSAandMGF1, SHA384withRSAandMGF1 and SHA512withRSAandMGF1\
            \ are also supported. For EC certs, SHA384withECDSA and SHA512withECDSA\
            \ are also supported. If the connection is WS-Federation with JWT token\
            \ type, then the possible values are RSA SHA256, RSA SHA384, RSA SHA512,\
            \ RSASSA-PSS SHA256, RSASSA-PSS SHA384, RSASSA-PSS SHA512, ECDSA SHA256,\
            \ ECDSA SHA384, ECDSA SHA512"
          type: string
        includeCertInSignature:
          description: Determines whether the signing certificate is included in the
            signature <KeyInfo> element.
          type: boolean
        includeRawKeyInSignature:
          description: Determines whether the <KeyValue> element with the raw public
            key is included in the signature <KeyInfo> element.
          type: boolean
      required:
      - signingKeyPairRef
      type: object
    SloServiceEndpoint:
      description: Where SLO logout messages are sent. Only applicable for SAML 2.0.
      properties:
        binding:
          description: "The binding of this endpoint, if applicable - usually only\
            \ required for SAML 2.0 endpoints."
          enum:
          - ARTIFACT
          - POST
          - REDIRECT
          - SOAP
          type: string
        url:
          description: The absolute or relative URL of the endpoint. A relative URL
            can be specified if a base URL for the connection has been defined.
          type: string
        responseUrl:
          description: The absolute or relative URL to which logout responses are
            sent. A relative URL can be specified if a base URL for the connection
            has been defined.
          type: string
      required:
      - url
      type: object
    SpAdapterMapping:
      description: A mapping to a SP adapter.
      properties:
        spAdapterRef:
          $ref: '#/components/schemas/ResourceLink'
        restrictVirtualEntityIds:
          description: Restricts this mapping to specific virtual entity IDs.
          type: boolean
        restrictedVirtualEntityIds:
          description: The list of virtual server IDs that this mapping is restricted
            to.
          items:
            type: string
          type: array
        adapterOverrideSettings:
          $ref: '#/components/schemas/SpAdapter'
        attributeSources:
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: '#/components/schemas/AttributeSourceAggregation'
          type: array
        attributeContractFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of mappings from attribute names to their fulfillment
            values.
          type: object
        issuanceCriteria:
          $ref: '#/components/schemas/IssuanceCriteria'
      required:
      - attributeContractFulfillment
      - spAdapterRef
      type: object
    SpAttributeQuery:
      description: The attribute query profile supports SPs in requesting user attributes.
      properties:
        attributes:
          description: The list of attributes that may be returned to the SP in the
            response to an attribute request.
          items:
            type: string
          type: array
          uniqueItems: true
        attributeContractFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of mappings from attribute names to their fulfillment
            values.
          type: object
        issuanceCriteria:
          $ref: '#/components/schemas/IssuanceCriteria'
        policy:
          $ref: '#/components/schemas/SpAttributeQueryPolicy'
        attributeSources:
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: '#/components/schemas/AttributeSourceAggregation'
          type: array
      required:
      - attributeContractFulfillment
      - attributeSources
      - attributes
      type: object
    SpAttributeQueryPolicy:
      description: The attribute query profile's security policy.
      properties:
        signResponse:
          description: Sign the response.
          type: boolean
        signAssertion:
          description: Sign the assertion.
          type: boolean
        encryptAssertion:
          description: Encrypt the assertion.
          type: boolean
        requireSignedAttributeQuery:
          description: Require signed attribute query.
          type: boolean
        requireEncryptedNameId:
          description: Require an encrypted name identifier.
          type: boolean
      type: object
    SpBrowserSso:
      description: The SAML settings used to enable secure browser-based SSO to resources
        at your partner's site.
      properties:
        protocol:
          description: The browser-based SSO protocol to use.
          enum:
          - SAML20
          - WSFED
          - SAML11
          - SAML10
          - OIDC
          type: string
        wsFedTokenType:
          description: The WS-Federation Token Type to use.
          enum:
          - SAML11
          - SAML20
          - JWT
          type: string
        wsTrustVersion:
          description: The WS-Trust version for a WS-Federation connection. The default
            version is WSTRUST12.
          enum:
          - WSTRUST12
          - WSTRUST13
          type: string
        enabledProfiles:
          description: 'The profiles that are enabled for browser-based SSO. SAML
            2.0 supports all profiles whereas SAML 1.x IdP connections support both
            IdP and SP (non-standard) initiated SSO. This is required for SAMLx.x
            Connections. '
          items:
            enum:
            - IDP_INITIATED_SSO
            - SP_INITIATED_SSO
            - IDP_INITIATED_SLO
            - SP_INITIATED_SLO
            type: string
          type: array
          uniqueItems: true
        incomingBindings:
          description: "The SAML bindings that are enabled for browser-based SSO.\
            \ This is required for SAML 2.0 connections when the enabled profiles\
            \ contain the SP-initiated SSO profile or either SLO profile. For SAML\
            \ 1.x based connections, it is not used for SP Connections and it is optional\
            \ for IdP Connections."
          items:
            enum:
            - ARTIFACT
            - POST
            - REDIRECT
            - SOAP
            type: string
          type: array
          uniqueItems: true
        messageCustomizations:
          description: "The message customizations for browser-based SSO. Depending\
            \ on server settings, connection type, and protocol this may or may not\
            \ be supported."
          items:
            $ref: '#/components/schemas/ProtocolMessageCustomization'
          type: array
        urlWhitelistEntries:
          description: "For WS-Federation connections, a whitelist of additional allowed\
            \ domains and paths used to validate wreply for SLO, if enabled."
          items:
            $ref: '#/components/schemas/UrlWhitelistEntry'
          type: array
        artifact:
          $ref: '#/components/schemas/ArtifactSettings'
        sloServiceEndpoints:
          description: A list of possible endpoints to send SLO requests and responses.
          items:
            $ref: '#/components/schemas/SloServiceEndpoint'
          type: array
        defaultTargetUrl:
          description: "Default Target URL for SAML1.x connections. For SP connections,\
            \ this default URL represents the destination on the SP where the user\
            \ will be directed. For IdP connections, entering a URL in the Default\
            \ Target URL field overrides the SP Default URL SSO setting."
          type: string
        alwaysSignArtifactResponse:
          description: Specify to always sign the SAML ArtifactResponse.
          type: boolean
        ssoApplicationEndpoint:
          description: Application endpoint that can be used to invoke single sign-on
            (SSO) for the connection. This is a read-only parameter.
          type: string
        ssoServiceEndpoints:
          description: A list of possible endpoints to send assertions to.
          items:
            $ref: '#/components/schemas/SpSsoServiceEndpoint'
          type: array
        spSamlIdentityMapping:
          description: Process in which users authenticated by the IdP are associated
            with user accounts local to the SP.
          enum:
          - PSEUDONYM
          - STANDARD
          - TRANSIENT
          type: string
        spWsFedIdentityMapping:
          description: Process in which users authenticated by the IdP are associated
            with user accounts local to the SP for WS-Federation connection types.
          enum:
          - EMAIL_ADDRESS
          - USER_PRINCIPLE_NAME
          - COMMON_NAME
          type: string
        signResponseAsRequired:
          description: Sign SAML Response as required by the associated binding and
            encryption policy. Applicable to SAML2.0 only and is defaulted to true.
            It can be set to false only on SAML2.0 connections when signAssertions
            is set to true.
          type: boolean
        signAssertions:
          description: Always sign the SAML Assertion.
          type: boolean
        requireSignedAuthnRequests:
          description: Require AuthN requests to be signed when received via the POST
            or Redirect bindings.
          type: boolean
        encryptionPolicy:
          $ref: '#/components/schemas/EncryptionPolicy'
        attributeContract:
          $ref: '#/components/schemas/SpBrowserSsoAttributeContract'
        adapterMappings:
          description: A list of adapters that map to outgoing assertions.
          items:
            $ref: '#/components/schemas/IdpAdapterAssertionMapping'
          type: array
        authenticationPolicyContractAssertionMappings:
          description: A list of authentication policy contracts that map to outgoing
            assertions.
          items:
            $ref: '#/components/schemas/AuthenticationPolicyContractAssertionMapping'
          type: array
        assertionLifetime:
          $ref: '#/components/schemas/AssertionLifetime'
      required:
      - adapterMappings
      - assertionLifetime
      - attributeContract
      - protocol
      - ssoServiceEndpoints
      type: object
    SpBrowserSsoAttribute:
      description: An attribute for the SP Browser SSO attribute contract.
      properties:
        name:
          description: The name of this attribute.
          type: string
        nameFormat:
          description: The SAML Name Format for the attribute.
          type: string
      required:
      - name
      type: object
    SpBrowserSsoAttributeContract:
      description: A set of user attributes that the IdP sends in the SAML assertion.
      properties:
        coreAttributes:
          description: "A list of read-only assertion attributes (for example, SAML_SUBJECT)\
            \ that are automatically populated by PingFederate."
          items:
            $ref: '#/components/schemas/SpBrowserSsoAttribute'
          type: array
        extendedAttributes:
          description: A list of additional attributes that are added to the outgoing
            assertion.
          items:
            $ref: '#/components/schemas/SpBrowserSsoAttribute'
          type: array
      type: object
    SpConnection:
      allOf:
      - $ref: '#/components/schemas/Connection'
      - description: The set of attributes used to configure an SP connection.
        properties:
          spBrowserSso:
            $ref: '#/components/schemas/SpBrowserSso'
          attributeQuery:
            $ref: '#/components/schemas/SpAttributeQuery'
          wsTrust:
            $ref: '#/components/schemas/SpWsTrust'
          applicationName:
            description: The application name.
            type: string
          applicationIconUrl:
            description: The application icon url.
            type: string
          outboundProvision:
            $ref: '#/components/schemas/OutboundProvision'
          connectionTargetType:
            description: The connection target type. This field is intended for bulk
              import/export usage. Changing its value may result in unexpected behavior.
            enum:
            - STANDARD
            - SALESFORCE
            - SALESFORCE_CP
            - SALESFORCE_PP
            - PINGONE_SCIM11
            type: string
        type: object
    SpSsoServiceEndpoint:
      description: The settings that define a service endpoint to a SP SSO service.
      properties:
        binding:
          description: "The binding of this endpoint, if applicable - usually only\
            \ required for SAML 2.0 endpoints.  Supported bindings are Artifact and\
            \ POST."
          enum:
          - ARTIFACT
          - POST
          - REDIRECT
          - SOAP
          type: string
        url:
          description: The absolute or relative URL of the endpoint. A relative URL
            can be specified if a base URL for the connection has been defined.
          type: string
        isDefault:
          description: Whether or not this endpoint is the default endpoint. Defaults
            to false.
          type: boolean
        index:
          description: The priority of the endpoint.
          format: int32
          type: integer
      required:
      - url
      type: object
    SpTokenGeneratorMapping:
      description: The SP Token Generator Mapping.
      properties:
        spTokenGeneratorRef:
          $ref: '#/components/schemas/ResourceLink'
        restrictedVirtualEntityIds:
          description: The list of virtual server IDs that this mapping is restricted
            to.
          items:
            type: string
          type: array
        defaultMapping:
          description: Indicates whether the token generator mapping is the default
            mapping. The default value is false.
          type: boolean
        attributeSources:
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: '#/components/schemas/AttributeSourceAggregation'
          type: array
        attributeContractFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of mappings from attribute names to their fulfillment
            values.
          type: object
        issuanceCriteria:
          $ref: '#/components/schemas/IssuanceCriteria'
      required:
      - attributeContractFulfillment
      - spTokenGeneratorRef
      type: object
    SpWsTrust:
      description: Ws-Trust STS provides security-token validation and creation to
        extend SSO access to identity-enabled Web Services
      properties:
        partnerServiceIds:
          description: The partner service identifiers.
          items:
            type: string
          type: array
        oAuthAssertionProfiles:
          description: "When selected, four additional token-type requests become\
            \ available."
          type: boolean
        defaultTokenType:
          description: The default token type when a web service client (WSC) does
            not specify in the token request which token type the STS should issue.
            Defaults to SAML 2.0.
          enum:
          - SAML20
          - SAML11
          - SAML11_O365
          type: string
        generateKey:
          description: "When selected, the STS generates a symmetric key to be used\
            \ in conjunction with the \"Holder of Key\" (HoK) designation for the\
            \ assertion's Subject Confirmation Method.  This option does not apply\
            \ to OAuth assertion profiles."
          type: boolean
        encryptSaml2Assertion:
          description: "When selected, the STS encrypts the SAML 2.0 assertion. Applicable\
            \ only to SAML 2.0 security token.  This option does not apply to OAuth\
            \ assertion profiles."
          type: boolean
        minutesBefore:
          description: The amount of time before the SAML token was issued during
            which it is to be considered valid. The default value is 5.
          format: int32
          type: integer
        minutesAfter:
          description: The amount of time after the SAML token was issued during which
            it is to be considered valid. The default value is 30.
          format: int32
          type: integer
        attributeContract:
          $ref: '#/components/schemas/SpWsTrustAttributeContract'
        tokenProcessorMappings:
          description: A list of token processors to validate incoming tokens.
          items:
            $ref: '#/components/schemas/IdpTokenProcessorMapping'
          type: array
        abortIfNotFulfilledFromRequest:
          description: "If the attribute contract cannot be fulfilled using data from\
            \ the Request, abort the transaction."
          type: boolean
        requestContractRef:
          $ref: '#/components/schemas/ResourceLink'
        messageCustomizations:
          description: "The message customizations for WS-Trust. Depending on server\
            \ settings, connection type, and protocol this may or may not be supported."
          items:
            $ref: '#/components/schemas/ProtocolMessageCustomization'
          type: array
      required:
      - attributeContract
      - partnerServiceIds
      - tokenProcessorMappings
      type: object
    SpWsTrustAttribute:
      description: An attribute for the Ws-Trust attribute contract.
      properties:
        name:
          description: The name of this attribute.
          type: string
        namespace:
          description: The attribute namespace.  This is required when the Default
            Token Type is SAML2.0 or SAML1.1 or SAML1.1 for Office 365.
          type: string
      required:
      - name
      - namespace
      type: object
    SpWsTrustAttributeContract:
      description: A set of user attributes that this server will send in the token.
      properties:
        coreAttributes:
          description: A list of read-only assertion attributes that are automatically
            populated by PingFederate.
          items:
            $ref: '#/components/schemas/SpWsTrustAttribute'
          type: array
        extendedAttributes:
          description: A list of additional attributes that are added to the outgoing
            assertion.
          items:
            $ref: '#/components/schemas/SpWsTrustAttribute'
          type: array
      type: object
    SqlMethod:
      description: SQL Method.
      properties:
        table:
          $ref: '#/components/schemas/Table'
        storedProcedure:
          $ref: '#/components/schemas/StoredProcedure'
      type: object
    SsoOAuthMapping:
      description: IdP Browser SSO OAuth Attribute Mapping
      properties:
        attributeSources:
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: '#/components/schemas/AttributeSourceAggregation'
          type: array
        attributeContractFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of mappings from attribute names to their fulfillment
            values.
          type: object
        issuanceCriteria:
          $ref: '#/components/schemas/IssuanceCriteria'
      required:
      - attributeContractFulfillment
      type: object
    StoredProcedure:
      description: SQL Method Stored Procedure.
      properties:
        schema:
          description: Lists the table structure that stores information within a
            database.
          type: string
        storedProcedure:
          description: The name of the database stored procedure.
          type: string
      required:
      - schema
      - storedProcedure
      type: object
    Table:
      description: SQL Method Table.
      properties:
        schema:
          description: Lists the table structure that stores information within a
            database.
          type: string
        tableName:
          description: The name of the database table.
          type: string
        uniqueIdColumn:
          description: The database column that uniquely identifies the provisioned
            user on the SP side.
          type: string
      required:
      - schema
      - tableName
      - uniqueIdColumn
      type: object
    UrlWhitelistEntry:
      description: Url domain and path to be used as whitelist in WS-Federation connection
      properties:
        validDomain:
          description: Valid Domain Name (leading wildcard '*.' allowed)
          type: string
        validPath:
          description: Valid Path (leave blank to allow any path)
          type: string
        allowQueryAndFragment:
          description: Allow Any Query/Fragment
          type: boolean
        requireHttps:
          description: Require HTTPS
          type: boolean
      type: object
    UsernamePasswordCredentials:
      description: Username and password credentials.
      example:
        password: password
        username: username
        encryptedPassword: encryptedPassword
      properties:
        username:
          description: The username.
          type: string
        password:
          description: "User password.  To update the password, specify the plaintext\
            \ value in this field.  This field will not be populated for GET requests."
          type: string
        encryptedPassword:
          description: "For GET requests, this field contains the encrypted password,\
            \ if one exists.  For POST and PUT requests, if you wish to reuse the\
            \ existing password, this field should be passed back unchanged."
          type: string
      type: object
    Users:
      description: User creation and read configuration.
      properties:
        writeUsers:
          $ref: '#/components/schemas/WriteUsers'
        readUsers:
          $ref: '#/components/schemas/ReadUsers'
      required:
      - readUsers
      - writeUsers
      type: object
    WriteGroups:
      description: Group creation configuration.
      properties:
        attributeFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of user repository mappings from attribute names to
            their fulfillment values.
          type: object
      required:
      - attributeFulfillment
      type: object
    WriteUsers:
      description: User creation configuration.
      properties:
        attributeFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of user repository mappings from attribute names to
            their fulfillment values.
          type: object
      required:
      - attributeFulfillment
      type: object
    ConvertMetadataRequest:
      description: A request for converting SAML connection metadata into a JSON connection.
      example:
        expectedEntityId: expectedEntityId
        verificationCertificate: verificationCertificate
        templateConnection:
          additionalAllowedEntitiesConfiguration:
            additionalAllowedEntities:
            - entityDescription: entityDescription
              entityId: entityId
            - entityDescription: entityDescription
              entityId: entityId
            allowAdditionalEntities: true
            allowAllEntities: true
          contactInfo:
            firstName: firstName
            lastName: lastName
            phone: phone
            company: company
            email: email
          credentials:
            inboundBackChannelAuth: null
            outboundBackChannelAuth: null
            verificationIssuerDN: verificationIssuerDN
            keyTransportAlgorithm: keyTransportAlgorithm
            decryptionKeyPairRef:
              location: location
              id: id
            certs:
            - primaryVerificationCert: true
              certView:
                expires: 2000-01-23T04:56:07.000+00:00
                serialNumber: serialNumber
                keyAlgorithm: keyAlgorithm
                keySize: 0
                subjectAlternativeNames:
                - subjectAlternativeNames
                - subjectAlternativeNames
                issuerDN: issuerDN
                cryptoProvider: LOCAL
                sha1Fingerprint: sha1Fingerprint
                validFrom: 2000-01-23T04:56:07.000+00:00
                version: 6
                signatureAlgorithm: signatureAlgorithm
                sha256Fingerprint: sha256Fingerprint
                id: id
                subjectDN: subjectDN
                status: VALID
              secondaryVerificationCert: true
              x509File:
                fileData: fileData
                cryptoProvider: LOCAL
                id: id
              encryptionCert: true
              activeVerificationCert: true
            - primaryVerificationCert: true
              certView:
                expires: 2000-01-23T04:56:07.000+00:00
                serialNumber: serialNumber
                keyAlgorithm: keyAlgorithm
                keySize: 0
                subjectAlternativeNames:
                - subjectAlternativeNames
                - subjectAlternativeNames
                issuerDN: issuerDN
                cryptoProvider: LOCAL
                sha1Fingerprint: sha1Fingerprint
                validFrom: 2000-01-23T04:56:07.000+00:00
                version: 6
                signatureAlgorithm: signatureAlgorithm
                sha256Fingerprint: sha256Fingerprint
                id: id
                subjectDN: subjectDN
                status: VALID
              secondaryVerificationCert: true
              x509File:
                fileData: fileData
                cryptoProvider: LOCAL
                id: id
              encryptionCert: true
              activeVerificationCert: true
            blockEncryptionAlgorithm: blockEncryptionAlgorithm
            verificationSubjectDN: verificationSubjectDN
            signingSettings:
              alternativeSigningKeyPairRefs:
              - location: location
                id: id
              - location: location
                id: id
              signingKeyPairRef:
                location: location
                id: id
              includeRawKeyInSignature: true
              algorithm: algorithm
              includeCertInSignature: true
            secondaryDecryptionKeyPairRef:
              location: location
              id: id
          active: true
          entityId: entityId
          loggingMode: NONE
          replicationStatus: REPLICATED
          type: IDP
          creationDate: 2000-01-23T04:56:07.000+00:00
          metadataReloadSettings:
            metadataUrlRef:
              location: location
              id: id
            enableAutoMetadataUpdate: true
          modificationDate: 2000-01-23T04:56:07.000+00:00
          baseUrl: baseUrl
          extendedProperties:
            key:
              values:
              - values
              - values
          defaultVirtualEntityId: defaultVirtualEntityId
          virtualEntityIds:
          - virtualEntityIds
          - virtualEntityIds
          name: name
          id: id
          licenseConnectionGroup: licenseConnectionGroup
        samlMetadata: samlMetadata
        connectionType: IDP
        expectedProtocol: SAML20
      properties:
        connectionType:
          description: The expected connection type to convert.
          enum:
          - IDP
          - SP
          type: string
        expectedProtocol:
          description: The expected browser-based SSO protocol to convert. In this
            case the protocol is restricted to SAML.
          enum:
          - SAML20
          - SAML11
          - SAML10
          type: string
        expectedEntityId:
          description: The entity ID of the connection to be obtained from the input
            SAML Metadata. Required if the SAML Metadata has more than one connection
            defined.
          type: string
        samlMetadata:
          description: The base-64 encoded XML SAML metadata.
          type: string
        verificationCertificate:
          description: The certificate to validate the metadata signature against.
            The certificate can be in PEM format or base-64 encoded DER format.
          type: string
        templateConnection:
          $ref: '#/components/schemas/Connection'
      required:
      - connectionType
      - expectedProtocol
      - samlMetadata
      type: object
    SaasPluginDescriptor:
      description: A SaaS Plugin.
      example:
        saasPluginFieldInfoDescriptors:
        - code: code
          notes:
          - notes
          - notes
          defaultValue: defaultValue
          minLength: 0
          attributeGroup: true
          pattern: pattern
          label: label
          multiValue: true
          dsLdapMap: true
          required: true
          unique: true
          options:
          - code: code
            label: label
          - code: code
            label: label
          persistForMembership: true
          maxLength: 6
        - code: code
          notes:
          - notes
          - notes
          defaultValue: defaultValue
          minLength: 0
          attributeGroup: true
          pattern: pattern
          label: label
          multiValue: true
          dsLdapMap: true
          required: true
          unique: true
          options:
          - code: code
            label: label
          - code: code
            label: label
          persistForMembership: true
          maxLength: 6
        configDescriptor:
          tables:
          - columns:
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            name: name
            description: description
            label: label
            requireDefaultRow: true
          - columns:
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            name: name
            description: description
            label: label
            requireDefaultRow: true
          actionDescriptors:
          - download: true
            downloadFileName: downloadFileName
            name: name
            description: description
            downloadContentType: downloadContentType
            parameters:
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
          - download: true
            downloadFileName: downloadFileName
            name: name
            description: description
            downloadContentType: downloadContentType
            parameters:
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
          description: description
          fields:
          - advanced: true
            defaultValue: defaultValue
            name: name
            description: description
            label: label
            type: RADIO_GROUP
            defaultForLegacyConfig: defaultForLegacyConfig
            required: true
          - advanced: true
            defaultValue: defaultValue
            name: name
            description: description
            label: label
            type: RADIO_GROUP
            defaultForLegacyConfig: defaultForLegacyConfig
            required: true
        description: description
        id: id
      properties:
        id:
          description: The SaaS plugin type.
          type: string
        description:
          description: The SaaS plugin description.
          type: string
        configDescriptor:
          $ref: '#/components/schemas/PluginConfigDescriptor'
        saasPluginFieldInfoDescriptors:
          description: The SaaS plugin attribute list for mapping from the local data
            store into Fields specified by the service provide.
          items:
            $ref: '#/components/schemas/SaasPluginFieldInfoDescriptor'
          type: array
      type: object
    SaasPluginDescriptors:
      description: A collection of SaaS plugins.
      example:
        items:
        - saasPluginFieldInfoDescriptors:
          - code: code
            notes:
            - notes
            - notes
            defaultValue: defaultValue
            minLength: 0
            attributeGroup: true
            pattern: pattern
            label: label
            multiValue: true
            dsLdapMap: true
            required: true
            unique: true
            options:
            - code: code
              label: label
            - code: code
              label: label
            persistForMembership: true
            maxLength: 6
          - code: code
            notes:
            - notes
            - notes
            defaultValue: defaultValue
            minLength: 0
            attributeGroup: true
            pattern: pattern
            label: label
            multiValue: true
            dsLdapMap: true
            required: true
            unique: true
            options:
            - code: code
              label: label
            - code: code
              label: label
            persistForMembership: true
            maxLength: 6
          configDescriptor:
            tables:
            - columns:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              name: name
              description: description
              label: label
              requireDefaultRow: true
            - columns:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              name: name
              description: description
              label: label
              requireDefaultRow: true
            actionDescriptors:
            - download: true
              downloadFileName: downloadFileName
              name: name
              description: description
              downloadContentType: downloadContentType
              parameters:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
            - download: true
              downloadFileName: downloadFileName
              name: name
              description: description
              downloadContentType: downloadContentType
              parameters:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
            description: description
            fields:
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
          description: description
          id: id
        - saasPluginFieldInfoDescriptors:
          - code: code
            notes:
            - notes
            - notes
            defaultValue: defaultValue
            minLength: 0
            attributeGroup: true
            pattern: pattern
            label: label
            multiValue: true
            dsLdapMap: true
            required: true
            unique: true
            options:
            - code: code
              label: label
            - code: code
              label: label
            persistForMembership: true
            maxLength: 6
          - code: code
            notes:
            - notes
            - notes
            defaultValue: defaultValue
            minLength: 0
            attributeGroup: true
            pattern: pattern
            label: label
            multiValue: true
            dsLdapMap: true
            required: true
            unique: true
            options:
            - code: code
              label: label
            - code: code
              label: label
            persistForMembership: true
            maxLength: 6
          configDescriptor:
            tables:
            - columns:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              name: name
              description: description
              label: label
              requireDefaultRow: true
            - columns:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              name: name
              description: description
              label: label
              requireDefaultRow: true
            actionDescriptors:
            - download: true
              downloadFileName: downloadFileName
              name: name
              description: description
              downloadContentType: downloadContentType
              parameters:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
            - download: true
              downloadFileName: downloadFileName
              name: name
              description: description
              downloadContentType: downloadContentType
              parameters:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
            description: description
            fields:
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
          description: description
          id: id
      properties:
        items:
          description: The actual list of SaaS plugins.
          items:
            $ref: '#/components/schemas/SaasPluginDescriptor'
          type: array
      type: object
    SaasPluginFieldInfoDescriptor:
      description: A Saas Plugin Field configuration.
      example:
        code: code
        notes:
        - notes
        - notes
        defaultValue: defaultValue
        minLength: 0
        attributeGroup: true
        pattern: pattern
        label: label
        multiValue: true
        dsLdapMap: true
        required: true
        unique: true
        options:
        - code: code
          label: label
        - code: code
          label: label
        persistForMembership: true
        maxLength: 6
      properties:
        code:
          description: The name or code that represents a field.
          type: string
        label:
          description: The label for a field.
          type: string
        required:
          description: Indicates whether a value is required for this field.
          type: boolean
        unique:
          description: indicates whether the value of this field is unique.
          type: boolean
        multiValue:
          description: Whether the field can have multiple values.
          type: boolean
        options:
          description: List of Option values available for this field.
          items:
            $ref: '#/components/schemas/SaasPluginFieldOption'
          type: array
        minLength:
          description: Minimum character length for a value.
          format: int32
          type: integer
        maxLength:
          description: Maximum character length for a value.
          format: int32
          type: integer
        pattern:
          description: Pattern used to validate values of this field.
          type: string
        notes:
          description: Description or notes for the field.
          items:
            type: string
          type: array
        defaultValue:
          description: Default value for the field.
          type: string
        dsLdapMap:
          description: Indicates whether the field can be mapped raw to an LDAP attribute.
          type: boolean
        persistForMembership:
          description: The code that represents the field.
          type: boolean
        attributeGroup:
          description: Indicates whether this field belongs to group of attribute
            such as multivalued or sub-type custom attributes.
          type: boolean
      required:
      - code
      - label
      type: object
    SaasPluginFieldOption:
      description: A plugin configuration field value.
      example:
        code: code
        label: label
      properties:
        code:
          description: The code that represents the field.
          type: string
        label:
          description: The label for the field.
          type: string
      required:
      - code
      - label
      type: object
    ActionResult:
      description: The result for non-download plugin actions.
      example:
        message: message
      properties:
        message:
          description: The message from the completed action.
          type: string
      type: object
    ActionOptions:
      description: Action options to invoke action.
      example:
        parameters:
        - name: name
          value: value
        - name: name
          value: value
      properties:
        parameters:
          description: List of action parameters.
          items:
            $ref: '#/components/schemas/ActionParameter'
          type: array
      required:
      - parameters
      type: object
    ActionParameter:
      description: An action parameter value.
      example:
        name: name
        value: value
      properties:
        name:
          description: The name of the action parameter.
          type: string
        value:
          description: The value for the action parameter.
          type: string
      required:
      - name
      type: object
    CustomDataStoreDescriptors:
      description: A collection of custom data store descriptors.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The list of custom data store descriptors.
          items:
            $ref: '#/components/schemas/CustomDataStoreDescriptor'
          type: array
      type: object
    DataStoreAggregation:
      discriminator:
        mapping:
          CUSTOM: '#/components/schemas/CustomDataStore'
          JDBC: '#/components/schemas/JdbcDataStore'
          LDAP: '#/components/schemas/LdapDataStore'
          PING_ONE_LDAP_GATEWAY: '#/components/schemas/PingOneLdapGatewayDataStore'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/CustomDataStore'
      - $ref: '#/components/schemas/JdbcDataStore'
      - $ref: '#/components/schemas/LdapDataStore'
      - $ref: '#/components/schemas/PingOneLdapGatewayDataStore'
    CustomDataStore:
      allOf:
      - $ref: '#/components/schemas/DataStore'
      - description: A custom data store.
        properties:
          type:
            description: The data store type.
            enum:
            - LDAP
            - PING_ONE_LDAP_GATEWAY
            - JDBC
            - CUSTOM
            type: string
          id:
            description: "The persistent, unique ID for the data store. It can be\
              \ any combination of [a-zA-Z0-9._-]. This property is system-assigned\
              \ if not specified."
            type: string
          maskAttributeValues:
            description: Whether attribute values should be masked in the log.
            type: boolean
          name:
            description: The plugin instance name.
            type: string
          pluginDescriptorRef:
            $ref: '#/components/schemas/ResourceLink'
          parentRef:
            $ref: '#/components/schemas/ResourceLink'
          configuration:
            $ref: '#/components/schemas/PluginConfiguration'
        required:
        - configuration
        - name
        - pluginDescriptorRef
        - type
        type: object
    DataStore:
      description: The set of attributes used to configure a data store.
      discriminator:
        propertyName: type
      properties:
        type:
          description: The data store type.
          enum:
          - LDAP
          - PING_ONE_LDAP_GATEWAY
          - JDBC
          - CUSTOM
          type: string
        id:
          description: "The persistent, unique ID for the data store. It can be any\
            \ combination of [a-zA-Z0-9._-]. This property is system-assigned if not\
            \ specified."
          type: string
        maskAttributeValues:
          description: Whether attribute values should be masked in the log.
          type: boolean
        lastModified:
          description: The time at which the datastore instance was last changed.
            This property is read only and is ignored on PUT and POST requests.
          format: date-time
          type: string
      required:
      - type
      type: object
    DataStores:
      description: A collection of data stores.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The actual list of data stores.
          items:
            $ref: '#/components/schemas/DataStoreAggregation'
          type: array
      type: object
    JdbcDataStore:
      allOf:
      - $ref: '#/components/schemas/DataStore'
      - description: A JDBC data store.
        properties:
          connectionUrlTags:
            description: The set of connection URLs and associated tags for this JDBC
              data store. This is required if 'connectionUrl' is not provided.
            items:
              $ref: '#/components/schemas/JdbcTagConfig'
            type: array
          connectionUrl:
            description: The default location of the JDBC database. This field is
              required if no mapping for JDBC database location and tags is specified.
            type: string
          name:
            description: The data store name with a unique value across all data sources.
              Omitting this attribute will set the value to a combination of the connection
              url and the username.
            type: string
          driverClass:
            description: The name of the driver class used to communicate with the
              source database.
            type: string
          userName:
            description: The name that identifies the user when connecting to the
              database.
            type: string
          password:
            description: "The password needed to access the database. GETs will not\
              \ return this attribute. To update this field, specify the new value\
              \ in this attribute."
            type: string
          encryptedPassword:
            description: "The encrypted password needed to access the database. If\
              \ you do not want to update the stored value, this attribute should\
              \ be passed back unchanged. Secret Reference may be provided in this\
              \ field with format 'OBF:MGR:{secretManagerId}:{secretId}'."
            type: string
          validateConnectionSql:
            description: A simple SQL statement used by PingFederate at runtime to
              verify that the database connection is still active and to reconnect
              if needed.
            type: string
          allowMultiValueAttributes:
            description: Indicates that this data store can select more than one record
              from a column and return the results as a multi-value attribute.
            type: boolean
          minPoolSize:
            description: The smallest number of database connections in the connection
              pool for the given data store. Omitting this attribute will set the
              value to the connection pool default.
            format: int32
            type: integer
          maxPoolSize:
            description: The largest number of database connections in the connection
              pool for the given data store. Omitting this attribute will set the
              value to the connection pool default.
            format: int32
            type: integer
          blockingTimeout:
            description: The amount of time in milliseconds a request waits to get
              a connection from the connection pool before it fails. Omitting this
              attribute will set the value to the connection pool default.
            format: int32
            type: integer
          idleTimeout:
            description: The length of time in minutes the connection can be idle
              in the pool before it is closed. Omitting this attribute will set the
              value to the connection pool default.
            format: int32
            type: integer
          lastModified:
            description: The time at which the datastore instance was last changed.
              This property is read only and is ignored on PUT and POST requests.
            format: date-time
            type: string
        required:
        - driverClass
        type: object
    JdbcTagConfig:
      description: "A JDBC data store's connection URLs and tags configuration. For\
        \ regional deployments, provide a separate JdbcTagConfig for each region,\
        \ containing the region-specific connection URL and the corresponding tags."
      properties:
        connectionUrl:
          description: 'The location of the JDBC database. '
          type: string
        tags:
          description: "Tags associated with the connection URL. At runtime, nodes\
            \ will use the first JdbcTagConfig that has a tag that matches with node.tags\
            \ in run.properties."
          type: string
        defaultSource:
          description: Whether this is the default connection. Defaults to false if
            not specified.
          type: boolean
      required:
      - connectionUrl
      type: object
    LdapDataStore:
      allOf:
      - $ref: '#/components/schemas/DataStore'
      - description: A LDAP data store.
        properties:
          hostnamesTags:
            description: The set of host names and associated tags for this LDAP data
              store. This is required if 'hostnames' is not provided.
            items:
              $ref: '#/components/schemas/LdapTagConfig'
            type: array
          hostnames:
            description: The default LDAP host names. This field is required if no
              mapping for host names and tags is specified. Failover can be configured
              by providing multiple host names.
            items:
              type: string
            type: array
          name:
            description: The data store name with a unique value across all data sources.
              Omitting this attribute will set the value to a combination of the hostname(s)
              and the principal.
            type: string
          ldapType:
            description: "A type that allows PingFederate to configure many provisioning\
              \ settings automatically. The 'UNBOUNDID_DS' type has been deprecated,\
              \ please use the 'PING_DIRECTORY' type instead."
            enum:
            - ACTIVE_DIRECTORY
            - ORACLE_DIRECTORY_SERVER
            - ORACLE_UNIFIED_DIRECTORY
            - UNBOUNDID_DS
            - PING_DIRECTORY
            - GENERIC
            type: string
          bindAnonymously:
            description: "Whether username and password are required. If true, no\
              \ other authentication fields should be provided. The default value\
              \ is false."
            type: boolean
          userDN:
            description: "The username credential required to access the data store.\
              \ If specified, no other authentication fields should be provided."
            type: string
          password:
            description: "The password credential required to access the data store.\
              \ GETs will not return this attribute. To update this field, specify\
              \ the new value in this attribute."
            type: string
          encryptedPassword:
            description: "The encrypted password credential required to access the\
              \ data store.  If you do not want to update the stored value, this attribute\
              \ should be passed back unchanged. Secret Reference may be provided\
              \ in this field with format 'OBF:MGR:{secretManagerId}:{secretId}'."
            type: string
          clientTlsCertificateRef:
            $ref: '#/components/schemas/ResourceLink'
          useSsl:
            description: Connects to the LDAP data store using secure SSL/TLS encryption
              (LDAPS). The default value is false.
            type: boolean
          useDnsSrvRecords:
            description: Use DNS SRV Records to discover LDAP server information.
              The default value is false.
            type: boolean
          followLDAPReferrals:
            description: Follow LDAP Referrals in the domain tree. The default value
              is false. This property does not apply to PingDirectory as this functionality
              is configured in PingDirectory.
            type: boolean
          retryFailedOperations:
            description: Indicates whether failed operations should be retried. The
              default is false.
            type: boolean
          testOnBorrow:
            description: Indicates whether objects are validated before being borrowed
              from the pool.
            type: boolean
          testOnReturn:
            description: Indicates whether objects are validated before being returned
              to the pool.
            type: boolean
          createIfNecessary:
            description: Indicates whether temporary connections can be created when
              the Maximum Connections threshold is reached.
            type: boolean
          verifyHost:
            description: Verifies that the presented server certificate includes the
              address to which the client intended to establish a connection. Omitting
              this attribute will set the value to true.
            type: boolean
          minConnections:
            description: "The smallest number of connections that can remain in each\
              \ pool, without creating extra ones. Omitting this attribute will set\
              \ the value to the default value."
            format: int32
            type: integer
          maxConnections:
            description: The largest number of active connections that can remain
              in each pool without releasing extra ones. Omitting this attribute will
              set the value to the default value.
            format: int32
            type: integer
          maxWait:
            description: The maximum number of milliseconds the pool waits for a connection
              to become available when trying to obtain a connection from the pool.
              Omitting this attribute or setting a value of -1 causes the pool not
              to wait at all and to either create a new connection or produce an error
              (when no connections are available).
            format: int32
            type: integer
          timeBetweenEvictions:
            description: "The frequency, in milliseconds, that the evictor cleans\
              \ up the connections in the pool. A value of -1 disables the evictor.\
              \ Omitting this attribute will set the value to the default value."
            format: int32
            type: integer
          readTimeout:
            description: The maximum number of milliseconds a connection waits for
              a response to be returned before producing an error. A value of -1 causes
              the connection to wait indefinitely. Omitting this attribute will set
              the value to the default value.
            format: int32
            type: integer
          connectionTimeout:
            description: The maximum number of milliseconds that a connection attempt
              should be allowed to continue before returning an error. A value of
              -1 causes the pool to wait indefinitely. Omitting this attribute will
              set the value to the default value.
            format: int32
            type: integer
          dnsTtl:
            description: The maximum time in milliseconds that DNS information are
              cached. Omitting this attribute will set the value to the default value.
            format: int32
            type: integer
          ldapDnsSrvPrefix:
            description: The prefix value used to discover LDAP DNS SRV record. Omitting
              this attribute will set the value to the default value.
            type: string
          ldapsDnsSrvPrefix:
            description: The prefix value used to discover LDAPs DNS SRV record. Omitting
              this attribute will set the value to the default value.
            type: string
          binaryAttributes:
            description: The list of LDAP attributes to be handled as binary data.
            items:
              type: string
            type: array
          lastModified:
            description: The time at which the datastore instance was last changed.
              This property is read only and is ignored on PUT and POST requests.
            format: date-time
            type: string
        required:
        - ldapType
        type: object
    LdapTagConfig:
      description: "An LDAP data store's hostnames and tags configuration. For regional\
        \ deployments, provide a separate LdapTagConfig for each region, containing\
        \ region-specific hostnames and the corresponding tags."
      properties:
        hostnames:
          description: The LDAP host names. Failover can be configured by providing
            multiple host names.
          items:
            type: string
          type: array
        tags:
          description: "Tags associated with the host names. At runtime, nodes will\
            \ use the first LdapTagConfig that has a tag that matches with node.tags\
            \ in run.properties."
          type: string
        defaultSource:
          description: Whether this is the default connection. Defaults to false if
            not specified.
          type: boolean
      required:
      - hostnames
      type: object
    PingOneLdapGatewayDataStore:
      allOf:
      - $ref: '#/components/schemas/DataStore'
      - description: A LDAP gateway data store.
        properties:
          name:
            description: The data store name with a unique value across all data sources.
              Omitting this attribute will set the value to a combination of the hostname(s)
              and the principal.
            type: string
          ldapType:
            description: A type that allows PingFederate to configure many provisioning
              settings automatically. The value is validated against the LDAP gateway
              configuration in PingOne unless the header 'X-BypassExternalValidation'
              is set to true.
            enum:
            - ACTIVE_DIRECTORY
            - ORACLE_DIRECTORY_SERVER
            - ORACLE_UNIFIED_DIRECTORY
            - UNBOUNDID_DS
            - PING_DIRECTORY
            - GENERIC
            type: string
          pingOneConnectionRef:
            $ref: '#/components/schemas/ResourceLink'
          pingOneEnvironmentId:
            description: The environment ID that the gateway belongs to.
            type: string
          pingOneLdapGatewayId:
            description: The ID of the PingOne LDAP Gateway this data store uses.
            type: string
          useSsl:
            description: Connects to the LDAP data store using secure SSL/TLS encryption
              (LDAPS). The default value is false. The value is validated against
              the LDAP gateway configuration in PingOne unless the header 'X-BypassExternalValidation'
              is set to true.
            type: boolean
          binaryAttributes:
            description: The list of LDAP attributes to be handled as binary data.
            items:
              type: string
            type: array
          lastModified:
            description: The time at which the datastore instance was last changed.
              This property is read only and is ignored on PUT and POST requests.
            format: date-time
            type: string
        required:
        - ldapType
        - pingOneConnectionRef
        - pingOneEnvironmentId
        - pingOneLdapGatewayId
        type: object
    Action:
      description: A read-only plugin action that either represents a file download
        or an arbitrary invocation performed by the plugin.
      example:
        download: true
        name: name
        description: description
        id: id
        parameters:
        - advanced: true
          defaultValue: defaultValue
          name: name
          description: description
          label: label
          type: RADIO_GROUP
          defaultForLegacyConfig: defaultForLegacyConfig
          required: true
        - advanced: true
          defaultValue: defaultValue
          name: name
          description: description
          label: label
          type: RADIO_GROUP
          defaultForLegacyConfig: defaultForLegacyConfig
          required: true
        invocationRef:
          location: location
          id: id
      properties:
        id:
          description: The ID of this action.
          type: string
        name:
          description: The name of this action.
          type: string
        description:
          description: The description of this action.
          type: string
        download:
          description: Whether this action will trigger a download or invoke an internal
            action that will return a string result.
          type: boolean
        invocationRef:
          $ref: '#/components/schemas/ResourceLink'
        parameters:
          description: List of parameters for this action.
          items:
            $ref: '#/components/schemas/FieldDescriptor'
          type: array
      type: object
    Actions:
      description: A read-only list of available actions for this plugin instance.
      example:
        items:
        - download: true
          name: name
          description: description
          id: id
          parameters:
          - advanced: true
            defaultValue: defaultValue
            name: name
            description: description
            label: label
            type: RADIO_GROUP
            defaultForLegacyConfig: defaultForLegacyConfig
            required: true
          - advanced: true
            defaultValue: defaultValue
            name: name
            description: description
            label: label
            type: RADIO_GROUP
            defaultForLegacyConfig: defaultForLegacyConfig
            required: true
          invocationRef:
            location: location
            id: id
        - download: true
          name: name
          description: description
          id: id
          parameters:
          - advanced: true
            defaultValue: defaultValue
            name: name
            description: description
            label: label
            type: RADIO_GROUP
            defaultForLegacyConfig: defaultForLegacyConfig
            required: true
          - advanced: true
            defaultValue: defaultValue
            name: name
            description: description
            label: label
            type: RADIO_GROUP
            defaultForLegacyConfig: defaultForLegacyConfig
            required: true
          invocationRef:
            location: location
            id: id
      properties:
        items:
          description: The list of available actions.
          items:
            $ref: '#/components/schemas/Action'
          type: array
      type: object
    ExtendedProperties:
      description: A collection of Extended Properties definitions.
      example:
        items:
        - name: name
          description: description
          multiValued: true
        - name: name
          description: description
          multiValued: true
      properties:
        items:
          description: The actual list of Extended Property definitions.
          items:
            $ref: '#/components/schemas/ExtendedProperty'
          type: array
      type: object
    ExtendedProperty:
      description: Extended Property definition that allows to store additional information
        about IdP/SP Connections and OAuth Clients.
      example:
        name: name
        description: description
        multiValued: true
      properties:
        name:
          description: The property name.
          type: string
        description:
          description: The property description.
          type: string
        multiValued:
          description: Indicates whether the property should allow multiple values.
          type: boolean
      type: object
    IdentityStoreProvisionerDescriptor:
      description: An identity store provisioner descriptor
      example:
        groupAttributeContract:
        - groupAttributeContract
        - groupAttributeContract
        supportsExtendedContract: true
        configDescriptor:
          tables:
          - columns:
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            name: name
            description: description
            label: label
            requireDefaultRow: true
          - columns:
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            name: name
            description: description
            label: label
            requireDefaultRow: true
          actionDescriptors:
          - download: true
            downloadFileName: downloadFileName
            name: name
            description: description
            downloadContentType: downloadContentType
            parameters:
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
          - download: true
            downloadFileName: downloadFileName
            name: name
            description: description
            downloadContentType: downloadContentType
            parameters:
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
          description: description
          fields:
          - advanced: true
            defaultValue: defaultValue
            name: name
            description: description
            label: label
            type: RADIO_GROUP
            defaultForLegacyConfig: defaultForLegacyConfig
            required: true
          - advanced: true
            defaultValue: defaultValue
            name: name
            description: description
            label: label
            type: RADIO_GROUP
            defaultForLegacyConfig: defaultForLegacyConfig
            required: true
        name: name
        className: className
        id: id
        supportsGroupExtendedContract: true
        attributeContract:
        - attributeContract
        - attributeContract
      properties:
        id:
          description: Unique ID of the plugin.
          type: string
        name:
          description: Friendly name for the plugin.
          type: string
        className:
          description: Full class name of the class that implements this plugin.
          type: string
        attributeContract:
          description: The attribute contract for this plugin.
          items:
            type: string
          type: array
        groupAttributeContract:
          description: The group attribute contract for this identity store provisioner
          items:
            type: string
          type: array
        supportsExtendedContract:
          description: Determines whether this plugin supports extending the attribute
            contract.
          type: boolean
        supportsGroupExtendedContract:
          description: Determines whether this plugin supports extending the group
            attribute contract
          type: boolean
        configDescriptor:
          $ref: '#/components/schemas/PluginConfigDescriptor'
      type: object
    IdentityStoreProvisionerDescriptors:
      description: A collection of identity store provisioner descriptors.
      example:
        items:
        - groupAttributeContract:
          - groupAttributeContract
          - groupAttributeContract
          supportsExtendedContract: true
          configDescriptor:
            tables:
            - columns:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              name: name
              description: description
              label: label
              requireDefaultRow: true
            - columns:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              name: name
              description: description
              label: label
              requireDefaultRow: true
            actionDescriptors:
            - download: true
              downloadFileName: downloadFileName
              name: name
              description: description
              downloadContentType: downloadContentType
              parameters:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
            - download: true
              downloadFileName: downloadFileName
              name: name
              description: description
              downloadContentType: downloadContentType
              parameters:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
            description: description
            fields:
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
          name: name
          className: className
          id: id
          supportsGroupExtendedContract: true
          attributeContract:
          - attributeContract
          - attributeContract
        - groupAttributeContract:
          - groupAttributeContract
          - groupAttributeContract
          supportsExtendedContract: true
          configDescriptor:
            tables:
            - columns:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              name: name
              description: description
              label: label
              requireDefaultRow: true
            - columns:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              name: name
              description: description
              label: label
              requireDefaultRow: true
            actionDescriptors:
            - download: true
              downloadFileName: downloadFileName
              name: name
              description: description
              downloadContentType: downloadContentType
              parameters:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
            - download: true
              downloadFileName: downloadFileName
              name: name
              description: description
              downloadContentType: downloadContentType
              parameters:
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
              - advanced: true
                defaultValue: defaultValue
                name: name
                description: description
                label: label
                type: RADIO_GROUP
                defaultForLegacyConfig: defaultForLegacyConfig
                required: true
            description: description
            fields:
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
            - advanced: true
              defaultValue: defaultValue
              name: name
              description: description
              label: label
              type: RADIO_GROUP
              defaultForLegacyConfig: defaultForLegacyConfig
              required: true
          name: name
          className: className
          id: id
          supportsGroupExtendedContract: true
          attributeContract:
          - attributeContract
          - attributeContract
      properties:
        items:
          description: The list of identity store provisioner descriptors.
          items:
            $ref: '#/components/schemas/IdentityStoreProvisionerDescriptor'
          type: array
      type: object
    GroupAttribute:
      description: The definition of a group attribute in a group attribute contract.
      example:
        name: name
      properties:
        name:
          description: The name of this attribute.
          type: string
      required:
      - name
      type: object
    IdentityStoreProvisioner:
      description: An identity store provisioner instance.
      example:
        groupAttributeContract:
          inherited: true
          coreAttributes:
          - name: name
          - name: name
          extendedAttributes:
          - name: name
          - name: name
        configuration:
          tables:
          - inherited: true
            name: name
            rows:
            - defaultRow: true
              fields:
              - inherited: true
                encryptedValue: encryptedValue
                name: name
                value: value
              - inherited: true
                encryptedValue: encryptedValue
                name: name
                value: value
            - defaultRow: true
              fields:
              - inherited: true
                encryptedValue: encryptedValue
                name: name
                value: value
              - inherited: true
                encryptedValue: encryptedValue
                name: name
                value: value
          - inherited: true
            name: name
            rows:
            - defaultRow: true
              fields:
              - inherited: true
                encryptedValue: encryptedValue
                name: name
                value: value
              - inherited: true
                encryptedValue: encryptedValue
                name: name
                value: value
            - defaultRow: true
              fields:
              - inherited: true
                encryptedValue: encryptedValue
                name: name
                value: value
              - inherited: true
                encryptedValue: encryptedValue
                name: name
                value: value
          fields:
          - inherited: true
            encryptedValue: encryptedValue
            name: name
            value: value
          - inherited: true
            encryptedValue: encryptedValue
            name: name
            value: value
        name: name
        id: id
        lastModified: 2000-01-23T04:56:07.000+00:00
        pluginDescriptorRef:
          location: location
          id: id
        attributeContract:
          inherited: true
          coreAttributes:
          - name: name
          - name: name
          extendedAttributes:
          - name: name
          - name: name
        parentRef:
          location: location
          id: id
      properties:
        id:
          description: "The ID of the plugin instance. The ID cannot be modified once\
            \ the instance is created.<br>Note: Ignored when specifying a connection's\
            \ adapter override."
          type: string
        name:
          description: "The plugin instance name. The name can be modified once the\
            \ instance is created.<br>Note: Ignored when specifying a connection's\
            \ adapter override."
          type: string
        pluginDescriptorRef:
          $ref: '#/components/schemas/ResourceLink'
        parentRef:
          $ref: '#/components/schemas/ResourceLink'
        configuration:
          $ref: '#/components/schemas/PluginConfiguration'
        lastModified:
          description: The time at which the plugin instance was last changed. This
            property is read only and is ignored on PUT and POST requests.
          format: date-time
          type: string
        attributeContract:
          $ref: '#/components/schemas/IdentityStoreProvisionerAttributeContract'
        groupAttributeContract:
          $ref: '#/components/schemas/IdentityStoreProvisionerGroupAttributeContract'
      required:
      - configuration
      - id
      - name
      - pluginDescriptorRef
      type: object
    IdentityStoreProvisionerAttributeContract:
      description: A set of attributes exposed by an identity store provisioner.
      example:
        inherited: true
        coreAttributes:
        - name: name
        - name: name
        extendedAttributes:
        - name: name
        - name: name
      properties:
        coreAttributes:
          description: A list of identity store provisioner attributes that correspond
            to the attributes exposed by the identity store provisioner type.
          items:
            $ref: '#/components/schemas/Attribute'
          type: array
        extendedAttributes:
          description: A list of additional attributes that can be returned by the
            identity store provisioner. The extended attributes are only used if the
            provisioner supports them.
          items:
            $ref: '#/components/schemas/Attribute'
          type: array
        inherited:
          description: "Whether this attribute contract is inherited from its parent\
            \ instance. If true, the rest of the properties in this model become read-only.\
            \ The default value is false."
          type: boolean
      required:
      - coreAttributes
      type: object
    IdentityStoreProvisionerGroupAttributeContract:
      description: A set of group attributes exposed by an identity store provisioner.
      example:
        inherited: true
        coreAttributes:
        - name: name
        - name: name
        extendedAttributes:
        - name: name
        - name: name
      properties:
        coreAttributes:
          description: A list of identity store provisioner group attributes that
            correspond to the group attributes exposed by the identity store provisioner
            type.
          items:
            $ref: '#/components/schemas/GroupAttribute'
          type: array
        extendedAttributes:
          description: A list of additional group attributes that can be returned
            by the identity store provisioner. The extended group attributes are only
            used if the provisioner supports them.
          items:
            $ref: '#/components/schemas/GroupAttribute'
          type: array
        inherited:
          description: "Whether this group attribute contract is inherited from its\
            \ parent instance. If true, the rest of the properties in this model become\
            \ read-only. The default value is false."
          type: boolean
      required:
      - coreAttributes
      type: object
    IdentityStoreProvisioners:
      description: A collection of identity store provisioners.
      example:
        items:
        - groupAttributeContract:
            inherited: true
            coreAttributes:
            - name: name
            - name: name
            extendedAttributes:
            - name: name
            - name: name
          configuration:
            tables:
            - inherited: true
              name: name
              rows:
              - defaultRow: true
                fields:
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
              - defaultRow: true
                fields:
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
            - inherited: true
              name: name
              rows:
              - defaultRow: true
                fields:
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
              - defaultRow: true
                fields:
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
            fields:
            - inherited: true
              encryptedValue: encryptedValue
              name: name
              value: value
            - inherited: true
              encryptedValue: encryptedValue
              name: name
              value: value
          name: name
          id: id
          lastModified: 2000-01-23T04:56:07.000+00:00
          pluginDescriptorRef:
            location: location
            id: id
          attributeContract:
            inherited: true
            coreAttributes:
            - name: name
            - name: name
            extendedAttributes:
            - name: name
            - name: name
          parentRef:
            location: location
            id: id
        - groupAttributeContract:
            inherited: true
            coreAttributes:
            - name: name
            - name: name
            extendedAttributes:
            - name: name
            - name: name
          configuration:
            tables:
            - inherited: true
              name: name
              rows:
              - defaultRow: true
                fields:
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
              - defaultRow: true
                fields:
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
            - inherited: true
              name: name
              rows:
              - defaultRow: true
                fields:
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
              - defaultRow: true
                fields:
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
                - inherited: true
                  encryptedValue: encryptedValue
                  name: name
                  value: value
            fields:
            - inherited: true
              encryptedValue: encryptedValue
              name: name
              value: value
            - inherited: true
              encryptedValue: encryptedValue
              name: name
              value: value
          name: name
          id: id
          lastModified: 2000-01-23T04:56:07.000+00:00
          pluginDescriptorRef:
            location: location
            id: id
          attributeContract:
            inherited: true
            coreAttributes:
            - name: name
            - name: name
            extendedAttributes:
            - name: name
            - name: name
          parentRef:
            location: location
            id: id
      properties:
        items:
          description: The actual list of identity store provisioners.
          items:
            $ref: '#/components/schemas/IdentityStoreProvisioner'
          type: array
      type: object
    IdpAdapterDescriptors:
      description: A collection of IdP adapter descriptors.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The list of IdP adapter descriptors.
          items:
            $ref: '#/components/schemas/IdpAdapterDescriptor'
          type: array
      type: object
    IdpAdapters:
      description: A collection of IdP adapters.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The actual list of IdP adapters.
          items:
            $ref: '#/components/schemas/IdpAdapter'
          type: array
      type: object
    ConnectionCerts:
      description: The certificates used for signature verification and XML encryption.
      example:
        items:
        - primaryVerificationCert: true
          certView:
            expires: 2000-01-23T04:56:07.000+00:00
            serialNumber: serialNumber
            keyAlgorithm: keyAlgorithm
            keySize: 0
            subjectAlternativeNames:
            - subjectAlternativeNames
            - subjectAlternativeNames
            issuerDN: issuerDN
            cryptoProvider: LOCAL
            sha1Fingerprint: sha1Fingerprint
            validFrom: 2000-01-23T04:56:07.000+00:00
            version: 6
            signatureAlgorithm: signatureAlgorithm
            sha256Fingerprint: sha256Fingerprint
            id: id
            subjectDN: subjectDN
            status: VALID
          secondaryVerificationCert: true
          x509File:
            fileData: fileData
            cryptoProvider: LOCAL
            id: id
          encryptionCert: true
          activeVerificationCert: true
        - primaryVerificationCert: true
          certView:
            expires: 2000-01-23T04:56:07.000+00:00
            serialNumber: serialNumber
            keyAlgorithm: keyAlgorithm
            keySize: 0
            subjectAlternativeNames:
            - subjectAlternativeNames
            - subjectAlternativeNames
            issuerDN: issuerDN
            cryptoProvider: LOCAL
            sha1Fingerprint: sha1Fingerprint
            validFrom: 2000-01-23T04:56:07.000+00:00
            version: 6
            signatureAlgorithm: signatureAlgorithm
            sha256Fingerprint: sha256Fingerprint
            id: id
            subjectDN: subjectDN
            status: VALID
          secondaryVerificationCert: true
          x509File:
            fileData: fileData
            cryptoProvider: LOCAL
            id: id
          encryptionCert: true
          activeVerificationCert: true
      properties:
        items:
          description: The actual list of certificates.
          items:
            $ref: '#/components/schemas/ConnectionCert'
          type: array
      type: object
    DecryptionKeys:
      description: Decryption keys used to decrypt message content received from the
        partner.
      example:
        primaryKeyRef:
          location: location
          id: id
        secondaryKeyPairRef:
          location: location
          id: id
      properties:
        primaryKeyRef:
          $ref: '#/components/schemas/ResourceLink'
        secondaryKeyPairRef:
          $ref: '#/components/schemas/ResourceLink'
      type: object
    IdpConnections:
      description: A collection of IdP connections.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The actual list of connections.
          items:
            $ref: '#/components/schemas/IdpConnection'
          type: array
      type: object
    IdpDefaultUrl:
      description: IDP Default URL settings.
      example:
        idpErrorMsg: idpErrorMsg
        idpSloSuccessUrl: idpSloSuccessUrl
        confirmIdpSlo: true
      properties:
        confirmIdpSlo:
          description: Prompt user to confirm Single Logout (SLO).
          type: boolean
        idpSloSuccessUrl:
          description: Provide the default URL you would like to send the user to
            when Single Logout has succeeded.
          type: string
        idpErrorMsg:
          description: Provide the error text displayed in a user's browser when an
            SSO operation fails.
          type: string
      required:
      - idpErrorMsg
      type: object
    IdpToSpAdapterMapping:
      description: The IdP-to-SP Adapter Mapping.
      example:
        sourceId: sourceId
        targetId: targetId
        licenseConnectionGroupAssignment: licenseConnectionGroupAssignment
        applicationIconUrl: applicationIconUrl
        defaultTargetResource: defaultTargetResource
        attributeContractFulfillment:
          key:
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
        id: id
        attributeSources:
        - null
        - null
        issuanceCriteria:
          expressionCriteria:
          - expression: expression
            errorResult: errorResult
          - expression: expression
            errorResult: errorResult
          conditionalCriteria:
          - condition: EQUALS
            errorResult: errorResult
            attributeName: attributeName
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
          - condition: EQUALS
            errorResult: errorResult
            attributeName: attributeName
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
        applicationName: applicationName
      properties:
        attributeSources:
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: '#/components/schemas/AttributeSourceAggregation'
          type: array
        attributeContractFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of mappings from attribute names to their fulfillment
            values.
          type: object
        issuanceCriteria:
          $ref: '#/components/schemas/IssuanceCriteria'
        sourceId:
          description: The id of the IdP Adapter.
          type: string
        targetId:
          description: The id of the SP Adapter.
          type: string
        id:
          description: The id of the IdP-to-SP Adapter mapping. This field is read-only
            and is ignored when passed in with the payload.
          type: string
        defaultTargetResource:
          description: Default target URL for this adapter-to-adapter mapping configuration.
          type: string
        licenseConnectionGroupAssignment:
          description: The license connection group.
          type: string
        applicationName:
          description: The application name.
          type: string
        applicationIconUrl:
          description: The application icon URL.
          type: string
      required:
      - attributeContractFulfillment
      - sourceId
      - targetId
      type: object
    IdpToSpAdapterMappings:
      description: A collection of IdP-to-SP Adapter Mappings.
      example:
        items:
        - sourceId: sourceId
          targetId: targetId
          licenseConnectionGroupAssignment: licenseConnectionGroupAssignment
          applicationIconUrl: applicationIconUrl
          defaultTargetResource: defaultTargetResource
          attributeContractFulfillment:
            key:
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          id: id
          attributeSources:
          - null
          - null
          issuanceCriteria:
            expressionCriteria:
            - expression: expression
              errorResult: errorResult
            - expression: expression
              errorResult: errorResult
            conditionalCriteria:
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          applicationName: applicationName
        - sourceId: sourceId
          targetId: targetId
          licenseConnectionGroupAssignment: licenseConnectionGroupAssignment
          applicationIconUrl: applicationIconUrl
          defaultTargetResource: defaultTargetResource
          attributeContractFulfillment:
            key:
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          id: id
          attributeSources:
          - null
          - null
          issuanceCriteria:
            expressionCriteria:
            - expression: expression
              errorResult: errorResult
            - expression: expression
              errorResult: errorResult
            conditionalCriteria:
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          applicationName: applicationName
      properties:
        items:
          description: The actual list of connections.
          items:
            $ref: '#/components/schemas/IdpToSpAdapterMapping'
          type: array
      type: object
    IncomingProxySettings:
      description: Incoming Proxy Settings.
      example:
        forwardedIpAddressHeaderIndex: FIRST
        forwardedHostHeaderName: forwardedHostHeaderName
        clientCertChainSSLHeaderName: clientCertChainSSLHeaderName
        clientCertSSLHeaderName: clientCertSSLHeaderName
        forwardedIpAddressHeaderName: forwardedIpAddressHeaderName
        forwardedHostHeaderIndex: FIRST
        proxyTerminatesHttpsConns: true
      properties:
        forwardedIpAddressHeaderName:
          description: "Globally specify the header name (for example, X-Forwarded-For)\
            \ where PingFederate should attempt to retrieve the client IP address\
            \ in all HTTP requests."
          type: string
        forwardedIpAddressHeaderIndex:
          description: PingFederate combines multiple comma-separated header values
            into the same order that they are received. Define which IP address you
            want to use. Default is to use the last address.
          enum:
          - FIRST
          - LAST
          type: string
        forwardedHostHeaderName:
          description: "Globally specify the header name (for example, X-Forwarded-Host)\
            \ where PingFederate should attempt to retrieve the hostname and port\
            \ in all HTTP requests."
          type: string
        forwardedHostHeaderIndex:
          description: PingFederate combines multiple comma-separated header values
            into the same order that they are received. Define which hostname you
            want to use. Default is to use the last hostname.
          enum:
          - FIRST
          - LAST
          type: string
        clientCertSSLHeaderName:
          description: "While the proxy server is configured to pass client certificates\
            \ as HTTP request headers, specify the header name here."
          type: string
        clientCertChainSSLHeaderName:
          description: "While the proxy server is configured to pass client certificates\
            \ as HTTP request headers, specify the chain header name here."
          type: string
        proxyTerminatesHttpsConns:
          description: Allows you to globally specify that connections to the reverse
            proxy are made over HTTPS even when HTTP is used between the reverse proxy
            and PingFederate.
          type: boolean
      type: object
    KerberosRealmsSettings:
      description: Settings for all of the Kerberos Realms.
      example:
        forceTcp: true
        debugLogOutput: true
        keySetRetentionPeriodMins: 0
        kdcRetries: kdcRetries
        kdcTimeout: kdcTimeout
      properties:
        forceTcp:
          description: Reference to the default security.
          type: boolean
        kdcRetries:
          description: Reference to the default Key Distribution Center Retries.
          type: string
        debugLogOutput:
          description: Reference to the default logging.
          type: boolean
        kdcTimeout:
          description: Reference to the default Key Distribution Center Timeout (in
            seconds).
          type: string
        keySetRetentionPeriodMins:
          description: "The key set retention period in minutes. When 'retainPreviousKeysOnPasswordChange'\
            \ is set to true for a realm, this setting determines how long keys will\
            \ be retained after a password change occurs. If this field is omitted\
            \ in a PUT request, the default of 610 minutes is applied."
          format: int32
          type: integer
      required:
      - kdcRetries
      - kdcTimeout
      type: object
    KerberosKeySet:
      description: Represents a set of Kerberos encryption keys.
      example:
        deactivatedAt: 2000-01-23T04:56:07.000+00:00
        encryptedKeySet: encryptedKeySet
      properties:
        encryptedKeySet:
          description: The encrypted key set.
          type: string
        deactivatedAt:
          description: Time at which the key set was deactivated due to password change.
            This field is not populated if the key set is active.
          format: date-time
          type: string
      required:
      - encryptedKeySet
      type: object
    KerberosRealm:
      example:
        kerberosRealmName: kerberosRealmName
        keySets:
        - deactivatedAt: 2000-01-23T04:56:07.000+00:00
          encryptedKeySet: encryptedKeySet
        - deactivatedAt: 2000-01-23T04:56:07.000+00:00
          encryptedKeySet: encryptedKeySet
        keyDistributionCenters:
        - keyDistributionCenters
        - keyDistributionCenters
        retainPreviousKeysOnPasswordChange: true
        kerberosEncryptedPassword: kerberosEncryptedPassword
        ldapGatewayDataStoreRef:
          location: location
          id: id
        kerberosPassword: kerberosPassword
        id: id
        connectionType: DIRECT
        kerberosUsername: kerberosUsername
        suppressDomainNameConcatenation: true
      properties:
        id:
          description: "The persistent, unique ID for the Kerberos Realm. It can be\
            \ any combination of [a-z0-9._-]. This property is system-assigned if\
            \ not specified."
          type: string
        kerberosRealmName:
          description: The Domain/Realm name used for display in UI screens.
          type: string
        connectionType:
          description: "Controls how PingFederate connects to the Active Directory/Kerberos\
            \ Realm. The default is: \"DIRECT\"."
          enum:
          - DIRECT
          - LDAP_GATEWAY
          type: string
        keyDistributionCenters:
          description: The Domain Controller/Key Distribution Center Host Action Names.
            Only applicable when 'connectionType' is "DIRECT".
          items:
            type: string
          type: array
        kerberosUsername:
          description: The Domain/Realm username. Only required when 'connectionType'
            is "DIRECT".
          type: string
        kerberosPassword:
          description: "The Domain/Realm password. GETs will not return this attribute.\
            \ To update this field, specify the new value in this attribute. Only\
            \ applicable when 'connectionType' is \"DIRECT\"."
          type: string
        kerberosEncryptedPassword:
          description: "For GET requests, this field contains the encrypted Domain/Realm\
            \ password, if one exists. For POST and PUT requests, if you wish to reuse\
            \ the existing password, this field should be passed back unchanged. Only\
            \ applicable when 'connectionType' is \"DIRECT\"."
          type: string
        keySets:
          description: "A list of key sets for validating Kerberos tickets. On POST\
            \ or PUT, if 'retainPreviousKeysOnPasswordChange' is true, PingFederate\
            \ automatically adds the key set for the current password to this list\
            \ and removes expired key sets. If 'retainPreviousKeysOnPasswordChange'\
            \ is false, this list is cleared. Only applicable when 'connectionType'\
            \ is \"DIRECT\"."
          items:
            $ref: '#/components/schemas/KerberosKeySet'
          type: array
        retainPreviousKeysOnPasswordChange:
          description: Determines whether the previous encryption keys are retained
            when the password is updated. Retaining the previous keys allows existing
            Kerberos tickets to continue to be validated. The default is false. Only
            applicable when 'connectionType' is "DIRECT".
          type: boolean
        suppressDomainNameConcatenation:
          description: Controls whether the KDC hostnames and the realm name are concatenated
            in the auto-generated krb5.conf file. Default is false. Only applicable
            when 'connectionType' is "DIRECT".
          type: boolean
        ldapGatewayDataStoreRef:
          $ref: '#/components/schemas/ResourceLink'
      required:
      - kerberosRealmName
      type: object
    KerberosRealms:
      description: A collection of Kerberos Realms.
      example:
        items:
        - kerberosRealmName: kerberosRealmName
          keySets:
          - deactivatedAt: 2000-01-23T04:56:07.000+00:00
            encryptedKeySet: encryptedKeySet
          - deactivatedAt: 2000-01-23T04:56:07.000+00:00
            encryptedKeySet: encryptedKeySet
          keyDistributionCenters:
          - keyDistributionCenters
          - keyDistributionCenters
          retainPreviousKeysOnPasswordChange: true
          kerberosEncryptedPassword: kerberosEncryptedPassword
          ldapGatewayDataStoreRef:
            location: location
            id: id
          kerberosPassword: kerberosPassword
          id: id
          connectionType: DIRECT
          kerberosUsername: kerberosUsername
          suppressDomainNameConcatenation: true
        - kerberosRealmName: kerberosRealmName
          keySets:
          - deactivatedAt: 2000-01-23T04:56:07.000+00:00
            encryptedKeySet: encryptedKeySet
          - deactivatedAt: 2000-01-23T04:56:07.000+00:00
            encryptedKeySet: encryptedKeySet
          keyDistributionCenters:
          - keyDistributionCenters
          - keyDistributionCenters
          retainPreviousKeysOnPasswordChange: true
          kerberosEncryptedPassword: kerberosEncryptedPassword
          ldapGatewayDataStoreRef:
            location: location
            id: id
          kerberosPassword: kerberosPassword
          id: id
          connectionType: DIRECT
          kerberosUsername: kerberosUsername
          suppressDomainNameConcatenation: true
      properties:
        items:
          description: The actual list of kerberos realms.
          items:
            $ref: '#/components/schemas/KerberosRealm'
          type: array
      type: object
    ConnectionGroupLicenseView:
      description: Connection group license information.
      example:
        connectionCount: 5
        endDate: 2000-01-23T04:56:07.000+00:00
        name: name
        startDate: 2000-01-23T04:56:07.000+00:00
      properties:
        name:
          description: Group name from the license file.
          type: string
        connectionCount:
          description: Maximum number of connections permitted under the group.
          format: int32
          type: integer
        startDate:
          description: Start date for the group.
          format: date-time
          type: string
        endDate:
          description: End date for the group.
          format: date-time
          type: string
      type: object
    LicenseFeatureView:
      description: PingFederate license feature details.
      example:
        name: name
        value: value
      properties:
        name:
          description: The name of the license feature.
          type: string
        value:
          description: The value of the license feature.
          type: string
      type: object
    LicenseView:
      description: PingFederate License details.
      example:
        licenseGroups:
        - connectionCount: 5
          endDate: 2000-01-23T04:56:07.000+00:00
          name: name
          startDate: 2000-01-23T04:56:07.000+00:00
        - connectionCount: 5
          endDate: 2000-01-23T04:56:07.000+00:00
          name: name
          startDate: 2000-01-23T04:56:07.000+00:00
        gracePeriod: 1
        product: product
        provisioningEnabled: true
        oauthEnabled: true
        nodeLimit: 5
        usedConnections: 6
        version: version
        wsTrustEnabled: true
        features:
        - name: name
          value: value
        - name: name
          value: value
        tier: tier
        bridgeMode: true
        enforcementType: enforcementType
        organization: organization
        name: name
        id: id
        issueDate: 2000-01-23T04:56:07.000+00:00
        maxConnections: 0
        expirationDate: 2000-01-23T04:56:07.000+00:00
      properties:
        name:
          description: Name of the person the license was issued to.
          type: string
        id:
          description: Unique identifier of a license.
          type: string
        maxConnections:
          description: Maximum number of connections that can be created under this
            license (if applicable).
          format: int32
          type: integer
        usedConnections:
          description: Number of used connections under this license.
          format: int32
          type: integer
        tier:
          description: "The tier value from the license file. The possible values\
            \ are FREE, PERPETUAL or SUBSCRIPTION."
          type: string
        issueDate:
          description: The issue date value from the license file.
          format: date-time
          type: string
        expirationDate:
          description: The expiration date value from the license file (if applicable).
          format: date-time
          type: string
        enforcementType:
          description: "The enforcement type is a 3-bit binary value, expressed as\
            \ a decimal digit. The bits from left to right are: <br>1: Shutdown on\
            \ expire <br>2: Notify on expire <br>4: Enforce minor version <br>if all\
            \ three enforcements are active, the enforcement type will be 7 (1 + 2\
            \ + 4); if only the first two are active, you have an enforcement type\
            \ of 3 (1 + 2). "
          type: string
        version:
          description: The Ping Identity product version from the license file.
          type: string
        product:
          description: The Ping Identity product value from the license file.
          type: string
        organization:
          description: The organization value from the license file.
          type: string
        gracePeriod:
          description: "Number of days provided as grace period, past the expiration\
            \ date (if applicable)."
          format: int64
          type: integer
        nodeLimit:
          description: Maximum number of clustered nodes allowed under this license
            (if applicable).
          format: int32
          type: integer
        licenseGroups:
          description: "License connection groups, if applicable."
          items:
            $ref: '#/components/schemas/ConnectionGroupLicenseView'
          type: array
        oauthEnabled:
          description: Indicates whether OAuth role is enabled for this license.
          type: boolean
        wsTrustEnabled:
          description: Indicates whether WS-Trust role is enabled for this license.
          type: boolean
        provisioningEnabled:
          description: Indicates whether Provisioning role is enabled for this license.
          type: boolean
        bridgeMode:
          description: Indicates whether this license is a bridge license or not.
          type: boolean
        features:
          description: "Other licence features, if applicable."
          items:
            $ref: '#/components/schemas/LicenseFeatureView'
          type: array
      type: object
    LicenseFile:
      description: License to import.
      example:
        fileData: fileData
      properties:
        fileData:
          description: The base64-encoded license file.
          type: string
      required:
      - fileData
      type: object
    LicenseAgreementInfo:
      description: PingFederate License Agreement information.
      example:
        accepted: true
        licenseAgreementUrl: licenseAgreementUrl
      properties:
        licenseAgreementUrl:
          description: URL to license agreement.
          type: string
        accepted:
          description: Indicates whether license agreement has been accepted. The
            default value is false.
          type: boolean
      type: object
    BaseDefaultValueLocalIdentityField:
      allOf:
      - $ref: '#/components/schemas/LocalIdentityField'
      - description: Holds fields that are shared by all default value type fields.
        properties:
          defaultValue:
            description: The default value for this field.
            type: string
        type: object
    BaseSelectionLocalIdentityField:
      allOf:
      - $ref: '#/components/schemas/LocalIdentityField'
      - description: Holds fields that are shared by all selection-type fields.
        properties:
          options:
            description: The list of options for this selection field.
            items:
              type: string
            type: array
        type: object
    CheckboxGroupLocalIdentityField:
      allOf:
      - $ref: '#/components/schemas/BaseSelectionLocalIdentityField'
      - description: A checkbox group selection type field.
        properties:
          options:
            description: The list of options for this selection field.
            items:
              type: string
            type: array
        required:
        - options
        type: object
    CheckboxLocalIdentityField:
      allOf:
      - $ref: '#/components/schemas/BaseDefaultValueLocalIdentityField'
      - description: A checkbox selection type field.
        type: object
    DataStoreAttribute:
      description: The data store attribute.
      discriminator:
        propertyName: type
      example:
        metadata:
          key: metadata
        name: name
        type: LDAP
      properties:
        type:
          description: The data store attribute type.
          enum:
          - LDAP
          - PING_ONE_LDAP_GATEWAY
          - JDBC
          - CUSTOM
          type: string
        name:
          description: The data store attribute name.
          type: string
        metadata:
          additionalProperties:
            type: string
          description: The data store attribute metadata.
          type: object
      required:
      - name
      - type
      type: object
    DataStoreConfig:
      description: Local identity profile data store.
      discriminator:
        propertyName: type
      properties:
        type:
          description: The data store config type.
          enum:
          - LDAP
          - PING_ONE_LDAP_GATEWAY
          - JDBC
          - CUSTOM
          type: string
        dataStoreRef:
          $ref: '#/components/schemas/ResourceLink'
        dataStoreMapping:
          additionalProperties:
            $ref: '#/components/schemas/DataStoreAttribute'
          description: The data store mapping.
          type: object
      required:
      - dataStoreRef
      - type
      type: object
    DateLocalIdentityField:
      allOf:
      - $ref: '#/components/schemas/BaseDefaultValueLocalIdentityField'
      - description: A date type field.
        type: object
    DropDownLocalIdentityField:
      allOf:
      - $ref: '#/components/schemas/BaseSelectionLocalIdentityField'
      - description: A dropdown selection type field.
        properties:
          defaultValue:
            description: The default value for this field.
            type: string
          options:
            description: The list of options for this selection field.
            items:
              type: string
            type: array
        required:
        - options
        type: object
    EmailLocalIdentityField:
      allOf:
      - $ref: '#/components/schemas/LocalIdentityField'
      - description: An email type field.
        type: object
    EmailVerificationConfig:
      description: A local identity email verification configuration.
      example:
        otpRetryAttempts: 1
        emailVerificationSuccessTemplateName: emailVerificationSuccessTemplateName
        emailVerificationErrorTemplateName: emailVerificationErrorTemplateName
        emailVerificationOtpTemplateName: emailVerificationOtpTemplateName
        requireVerifiedEmailTemplateName: requireVerifiedEmailTemplateName
        emailVerificationEnabled: true
        requireVerifiedEmail: true
        allowedOtpCharacterSet: allowedOtpCharacterSet
        otpTimeToLive: 5
        otpLength: 6
        fieldForEmailToVerify: fieldForEmailToVerify
        emailVerificationType: OTP
        otlTimeToLive: 5
        fieldStoringVerificationStatus: fieldStoringVerificationStatus
        notificationPublisherRef:
          location: location
          id: id
        verifyEmailTemplateName: verifyEmailTemplateName
        emailVerificationSentTemplateName: emailVerificationSentTemplateName
      properties:
        emailVerificationEnabled:
          description: Whether the email ownership verification is enabled.
          type: boolean
        verifyEmailTemplateName:
          description: The template name for verify email. The default is message-template-email-ownership-verification.html.
          type: string
        emailVerificationSentTemplateName:
          description: The template name for email verification sent. The default
            is local.identity.email.verification.sent.html.<br>Note:Only applicable
            if EmailVerificationType is OTL.
          type: string
        emailVerificationSuccessTemplateName:
          description: The template name for email verification success. The default
            is local.identity.email.verification.success.html.
          type: string
        emailVerificationErrorTemplateName:
          description: The template name for email verification error.  The default
            is local.identity.email.verification.error.html.
          type: string
        emailVerificationType:
          description: Email Verification Type.
          enum:
          - OTP
          - OTL
          type: string
        otpLength:
          description: "The OTP length generated for email verification. The default\
            \ is 8.<br>Note: Only applicable if EmailVerificationType is OTP."
          format: int32
          type: integer
        otpRetryAttempts:
          description: "The number of OTP retry attempts for email verification. The\
            \ default is 3.<br>Note: Only applicable if EmailVerificationType is OTP."
          format: int32
          type: integer
        allowedOtpCharacterSet:
          description: "The allowed character set used to generate the OTP. The default\
            \ is 23456789BCDFGHJKMNPQRSTVWXZbcdfghjkmnpqrstvwxz.<br>Note: Only applicable\
            \ if EmailVerificationType is OTP."
          type: string
        otpTimeToLive:
          description: "Field used OTP time to live. The default is 15.<br>Note: Only\
            \ applicable if EmailVerificationType is OTP."
          format: int32
          type: integer
        emailVerificationOtpTemplateName:
          description: "The template name for email verification OTP verification.\
            \  The default is local.identity.email.verification.otp.html.<br>Note:\
            \ Only applicable if EmailVerificationType is OTP."
          type: string
        otlTimeToLive:
          description: "Field used OTL time to live. The default is 1440.<br>Note:\
            \ Only applicable if EmailVerificationType is OTL."
          format: int32
          type: integer
        fieldForEmailToVerify:
          description: "Field used for email ownership verification.<br>Note: Not\
            \ required when emailVerificationEnabled is set to false."
          type: string
        fieldStoringVerificationStatus:
          description: "Field used for storing email verification status.<br>Note:\
            \ Not required when emailVerificationEnabled is set to false."
          type: string
        notificationPublisherRef:
          $ref: '#/components/schemas/ResourceLink'
        requireVerifiedEmail:
          description: Whether the user must verify their email address before they
            can complete a single sign-on transaction. The default is false.
          type: boolean
        requireVerifiedEmailTemplateName:
          description: The template to render when the user must verify their email
            address before they can complete a single sign-on transaction. The default
            is local.identity.email.verification.required.html.<br>Note:Only applicable
            if EmailVerificationType is OTL and requireVerifiedEmail is true.
          type: string
      required:
      - fieldForEmailToVerify
      - fieldStoringVerificationStatus
      type: object
    FieldConfig:
      description: A local identity profile field configuration.
      example:
        stripSpaceFromUniqueField: true
        fields:
        - profilePageField: true
          attributes:
            key: true
          id: id
          label: label
          type: CHECKBOX
          registrationPageField: true
        - profilePageField: true
          attributes:
            key: true
          id: id
          label: label
          type: CHECKBOX
          registrationPageField: true
      properties:
        fields:
          description: The field configuration for the local identity profile.
          items:
            $ref: '#/components/schemas/LocalIdentityField'
          type: array
        stripSpaceFromUniqueField:
          description: Strip leading/trailing spaces from unique ID field. Default
            is true.
          type: boolean
      type: object
    HiddenLocalIdentityField:
      allOf:
      - $ref: '#/components/schemas/LocalIdentityField'
      - description: A hidden selection type field.
        type: object
    LdapDataStoreAttribute:
      allOf:
      - $ref: '#/components/schemas/DataStoreAttribute'
      - description: LDAP data store attribute.
        type: object
    LdapDataStoreConfig:
      description: LDAP data store configuration.
      example:
        createPattern: createPattern
        objectClass: objectClass
        dataStoreRef:
          location: location
          id: id
        baseDn: baseDn
        auxiliaryObjectClasses:
        - auxiliaryObjectClasses
        - auxiliaryObjectClasses
        type: LDAP
        dataStoreMapping:
          key:
            metadata:
              key: metadata
            name: name
            type: LDAP
      properties:
        baseDn:
          description: "The base DN to search from. If not specified, the search will\
            \ start at the LDAP's root."
          type: string
        createPattern:
          description: The Relative DN Pattern that will be used to create objects
            in the directory.
          type: string
        objectClass:
          description: The Object Class used by the new objects stored in the LDAP
            data store.
          type: string
        auxiliaryObjectClasses:
          description: The Auxiliary Object Classes used by the new objects stored
            in the LDAP data store.
          items:
            type: string
          type: array
        dataStoreMapping:
          additionalProperties:
            $ref: '#/components/schemas/DataStoreAttribute'
          description: The data store mapping.
          type: object
        type:
          description: The data store config type.
          enum:
          - LDAP
          - PING_ONE_LDAP_GATEWAY
          - JDBC
          - CUSTOM
          type: string
        dataStoreRef:
          $ref: '#/components/schemas/ResourceLink'
      required:
      - baseDn
      - createPattern
      - dataStoreMapping
      - dataStoreRef
      - objectClass
      - type
      type: object
    LocalIdentityAuthSource:
      description: An authentication source name.
      example:
        id: id
        source: source
      properties:
        id:
          description: "The persistent, unique ID for the local identity authentication\
            \ source. It can be any combination of [a-zA-Z0-9._-]. This property is\
            \ system-assigned if not specified."
          type: string
        source:
          description: The local identity authentication source. Source is unique.
          type: string
      type: object
    LocalIdentityAuthSourceUpdatePolicy:
      description: Settings to determine whether to store attributes that came from
        third-party authentication sources.
      example:
        updateInterval: 0.8008281904610115
        retainAttributes: true
        updateAttributes: true
        storeAttributes: true
      properties:
        storeAttributes:
          description: Whether or not to store attributes that came from authentication
            sources.
          type: boolean
        retainAttributes:
          description: Whether or not to keep attributes after user disconnects.
          type: boolean
        updateAttributes:
          description: Whether or not to update attributes when users authenticate.
          type: boolean
        updateInterval:
          description: The minimum number of days between updates.
          format: double
          type: number
      type: object
    LocalIdentityField:
      description: Local identity profile fields.
      discriminator:
        propertyName: type
      example:
        profilePageField: true
        attributes:
          key: true
        id: id
        label: label
        type: CHECKBOX
        registrationPageField: true
      properties:
        type:
          description: The type of the local identity field.
          enum:
          - CHECKBOX
          - CHECKBOX_GROUP
          - DATE
          - DROP_DOWN
          - EMAIL
          - PHONE
          - TEXT
          - HIDDEN
          type: string
        id:
          description: Id of the local identity field.
          type: string
        label:
          description: Label of the local identity field.
          type: string
        registrationPageField:
          description: Whether this is a registration page field or not.
          type: boolean
        profilePageField:
          description: Whether this is a profile page field or not.
          type: boolean
        attributes:
          additionalProperties:
            type: boolean
          description: Attributes of the local identity field.
          type: object
      required:
      - id
      - label
      - type
      type: object
    LocalIdentityProfile:
      description: A local identity profile.
      example:
        registrationEnabled: true
        registrationConfig:
          usernameField: usernameField
          thisIsMyDeviceEnabled: true
          templateName: templateName
          captchaEnabled: true
          captchaProviderRef:
            location: location
            id: id
          createAuthnSessionAfterRegistration: true
          executeWorkflow: BEFORE_ACCOUNT_CREATION
          registrationWorkflow:
            location: location
            id: id
        apcId:
          location: location
          id: id
        name: name
        authSources:
        - id: id
          source: source
        - id: id
          source: source
        id: id
        fieldConfig:
          stripSpaceFromUniqueField: true
          fields:
          - profilePageField: true
            attributes:
              key: true
            id: id
            label: label
            type: CHECKBOX
            registrationPageField: true
          - profilePageField: true
            attributes:
              key: true
            id: id
            label: label
            type: CHECKBOX
            registrationPageField: true
        profileEnabled: true
        authSourceUpdatePolicy:
          updateInterval: 0.8008281904610115
          retainAttributes: true
          updateAttributes: true
          storeAttributes: true
        profileConfig:
          templateName: templateName
          deleteIdentityEnabled: true
        emailVerificationConfig:
          otpRetryAttempts: 1
          emailVerificationSuccessTemplateName: emailVerificationSuccessTemplateName
          emailVerificationErrorTemplateName: emailVerificationErrorTemplateName
          emailVerificationOtpTemplateName: emailVerificationOtpTemplateName
          requireVerifiedEmailTemplateName: requireVerifiedEmailTemplateName
          emailVerificationEnabled: true
          requireVerifiedEmail: true
          allowedOtpCharacterSet: allowedOtpCharacterSet
          otpTimeToLive: 5
          otpLength: 6
          fieldForEmailToVerify: fieldForEmailToVerify
          emailVerificationType: OTP
          otlTimeToLive: 5
          fieldStoringVerificationStatus: fieldStoringVerificationStatus
          notificationPublisherRef:
            location: location
            id: id
          verifyEmailTemplateName: verifyEmailTemplateName
          emailVerificationSentTemplateName: emailVerificationSentTemplateName
        dataStoreConfig:
          createPattern: createPattern
          objectClass: objectClass
          dataStoreRef:
            location: location
            id: id
          baseDn: baseDn
          auxiliaryObjectClasses:
          - auxiliaryObjectClasses
          - auxiliaryObjectClasses
          type: LDAP
          dataStoreMapping:
            key:
              metadata:
                key: metadata
              name: name
              type: LDAP
      properties:
        id:
          description: "The persistent, unique ID for the local identity profile.\
            \ It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned\
            \ if not specified."
          type: string
        name:
          description: The local identity profile name. Name is unique.
          type: string
        apcId:
          $ref: '#/components/schemas/ResourceLink'
        authSources:
          description: The local identity authentication sources. Sources are unique.
          items:
            $ref: '#/components/schemas/LocalIdentityAuthSource'
          type: array
        authSourceUpdatePolicy:
          $ref: '#/components/schemas/LocalIdentityAuthSourceUpdatePolicy'
        registrationEnabled:
          description: Whether the registration configuration is enabled or not.
          type: boolean
        registrationConfig:
          $ref: '#/components/schemas/RegistrationConfig'
        profileConfig:
          $ref: '#/components/schemas/ProfileConfig'
        fieldConfig:
          $ref: '#/components/schemas/FieldConfig'
        emailVerificationConfig:
          $ref: '#/components/schemas/EmailVerificationConfig'
        dataStoreConfig:
          $ref: '#/components/schemas/LdapDataStoreConfig'
        profileEnabled:
          description: Whether the profile configuration is enabled or not.
          type: boolean
      required:
      - apcId
      - name
      type: object
    PhoneLocalIdentityField:
      allOf:
      - $ref: '#/components/schemas/LocalIdentityField'
      - description: A phone type field.
        type: object
    ProfileConfig:
      description: A local identity profile management configuration.
      example:
        templateName: templateName
        deleteIdentityEnabled: true
      properties:
        deleteIdentityEnabled:
          description: Whether the end user is allowed to use delete functionality.
          type: boolean
        templateName:
          description: The template name for end-user profile management.
          type: string
      required:
      - templateName
      type: object
    RegistrationConfig:
      description: A local identity profile registration configuration.
      example:
        usernameField: usernameField
        thisIsMyDeviceEnabled: true
        templateName: templateName
        captchaEnabled: true
        captchaProviderRef:
          location: location
          id: id
        createAuthnSessionAfterRegistration: true
        executeWorkflow: BEFORE_ACCOUNT_CREATION
        registrationWorkflow:
          location: location
          id: id
      properties:
        captchaEnabled:
          description: Whether CAPTCHA is enabled or not in the registration configuration.
          type: boolean
        captchaProviderRef:
          $ref: '#/components/schemas/ResourceLink'
        templateName:
          description: The template name for the registration configuration.
          type: string
        createAuthnSessionAfterRegistration:
          description: Whether to create an Authentication Session when registering
            a local account. Default is true.
          type: boolean
        usernameField:
          description: "When creating an Authentication Session after registering\
            \ a local account, PingFederate will pass the Unique ID field's value\
            \ as the username. If the Unique ID value is not the username, then override\
            \ which field's value will be used as the username."
          type: string
        thisIsMyDeviceEnabled:
          description: "Allows users to indicate whether their device is shared or\
            \ private. In this mode, PingFederate Authentication Sessions will not\
            \ be stored unless the user indicates the device is private."
          type: boolean
        registrationWorkflow:
          $ref: '#/components/schemas/ResourceLink'
        executeWorkflow:
          description: This setting indicates whether PingFederate should execute
            the workflow before or after account creation. The default is to run the
            registration workflow after account creation.
          enum:
          - BEFORE_ACCOUNT_CREATION
          - AFTER_ACCOUNT_CREATION
          type: string
      required:
      - templateName
      type: object
    TextLocalIdentityField:
      allOf:
      - $ref: '#/components/schemas/BaseDefaultValueLocalIdentityField'
      - description: A text type field.
        type: object
    LocalIdentityProfiles:
      description: A collection of local identity profiles.
      example:
        items:
        - registrationEnabled: true
          registrationConfig:
            usernameField: usernameField
            thisIsMyDeviceEnabled: true
            templateName: templateName
            captchaEnabled: true
            captchaProviderRef:
              location: location
              id: id
            createAuthnSessionAfterRegistration: true
            executeWorkflow: BEFORE_ACCOUNT_CREATION
            registrationWorkflow:
              location: location
              id: id
          apcId:
            location: location
            id: id
          name: name
          authSources:
          - id: id
            source: source
          - id: id
            source: source
          id: id
          fieldConfig:
            stripSpaceFromUniqueField: true
            fields:
            - profilePageField: true
              attributes:
                key: true
              id: id
              label: label
              type: CHECKBOX
              registrationPageField: true
            - profilePageField: true
              attributes:
                key: true
              id: id
              label: label
              type: CHECKBOX
              registrationPageField: true
          profileEnabled: true
          authSourceUpdatePolicy:
            updateInterval: 0.8008281904610115
            retainAttributes: true
            updateAttributes: true
            storeAttributes: true
          profileConfig:
            templateName: templateName
            deleteIdentityEnabled: true
          emailVerificationConfig:
            otpRetryAttempts: 1
            emailVerificationSuccessTemplateName: emailVerificationSuccessTemplateName
            emailVerificationErrorTemplateName: emailVerificationErrorTemplateName
            emailVerificationOtpTemplateName: emailVerificationOtpTemplateName
            requireVerifiedEmailTemplateName: requireVerifiedEmailTemplateName
            emailVerificationEnabled: true
            requireVerifiedEmail: true
            allowedOtpCharacterSet: allowedOtpCharacterSet
            otpTimeToLive: 5
            otpLength: 6
            fieldForEmailToVerify: fieldForEmailToVerify
            emailVerificationType: OTP
            otlTimeToLive: 5
            fieldStoringVerificationStatus: fieldStoringVerificationStatus
            notificationPublisherRef:
              location: location
              id: id
            verifyEmailTemplateName: verifyEmailTemplateName
            emailVerificationSentTemplateName: emailVerificationSentTemplateName
          dataStoreConfig:
            createPattern: createPattern
            objectClass: objectClass
            dataStoreRef:
              location: location
              id: id
            baseDn: baseDn
            auxiliaryObjectClasses:
            - auxiliaryObjectClasses
            - auxiliaryObjectClasses
            type: LDAP
            dataStoreMapping:
              key:
                metadata:
                  key: metadata
                name: name
                type: LDAP
        - registrationEnabled: true
          registrationConfig:
            usernameField: usernameField
            thisIsMyDeviceEnabled: true
            templateName: templateName
            captchaEnabled: true
            captchaProviderRef:
              location: location
              id: id
            createAuthnSessionAfterRegistration: true
            executeWorkflow: BEFORE_ACCOUNT_CREATION
            registrationWorkflow:
              location: location
              id: id
          apcId:
            location: location
            id: id
          name: name
          authSources:
          - id: id
            source: source
          - id: id
            source: source
          id: id
          fieldConfig:
            stripSpaceFromUniqueField: true
            fields:
            - profilePageField: true
              attributes:
                key: true
              id: id
              label: label
              type: CHECKBOX
              registrationPageField: true
            - profilePageField: true
              attributes:
                key: true
              id: id
              label: label
              type: CHECKBOX
              registrationPageField: true
          profileEnabled: true
          authSourceUpdatePolicy:
            updateInterval: 0.8008281904610115
            retainAttributes: true
            updateAttributes: true
            storeAttributes: true
          profileConfig:
            templateName: templateName
            deleteIdentityEnabled: true
          emailVerificationConfig:
            otpRetryAttempts: 1
            emailVerificationSuccessTemplateName: emailVerificationSuccessTemplateName
            emailVerificationErrorTemplateName: emailVerificationErrorTemplateName
            emailVerificationOtpTemplateName: emailVerificationOtpTemplateName
            requireVerifiedEmailTemplateName: requireVerifiedEmailTemplateName
            emailVerificationEnabled: true
            requireVerifiedEmail: true
            allowedOtpCharacterSet: allowedOtpCharacterSet
            otpTimeToLive: 5
            otpLength: 6
            fieldForEmailToVerify: fieldForEmailToVerify
            emailVerificationType: OTP
            otlTimeToLive: 5
            fieldStoringVerificationStatus: fieldStoringVerificationStatus
            notificationPublisherRef:
              location: location
              id: id
            verifyEmailTemplateName: verifyEmailTemplateName
            emailVerificationSentTemplateName: emailVerificationSentTemplateName
          dataStoreConfig:
            createPattern: createPattern
            objectClass: objectClass
            dataStoreRef:
              location: location
              id: id
            baseDn: baseDn
            auxiliaryObjectClasses:
            - auxiliaryObjectClasses
            - auxiliaryObjectClasses
            type: LDAP
            dataStoreMapping:
              key:
                metadata:
                  key: metadata
                name: name
                type: LDAP
      properties:
        items:
          description: The actual list of local identity profiles.
          items:
            $ref: '#/components/schemas/LocalIdentityProfile'
          type: array
      type: object
    MetadataUrl:
      description: Metadata URL and corresponding Signature Verification Certificate.
      example:
        validateSignature: true
        certView:
          expires: 2000-01-23T04:56:07.000+00:00
          serialNumber: serialNumber
          keyAlgorithm: keyAlgorithm
          keySize: 0
          subjectAlternativeNames:
          - subjectAlternativeNames
          - subjectAlternativeNames
          issuerDN: issuerDN
          cryptoProvider: LOCAL
          sha1Fingerprint: sha1Fingerprint
          validFrom: 2000-01-23T04:56:07.000+00:00
          version: 6
          signatureAlgorithm: signatureAlgorithm
          sha256Fingerprint: sha256Fingerprint
          id: id
          subjectDN: subjectDN
          status: VALID
        x509File:
          fileData: fileData
          cryptoProvider: LOCAL
          id: id
        name: name
        id: id
        url: url
      properties:
        id:
          description: "The persistent, unique ID for the Metadata Url. It can be\
            \ any combination of [a-z0-9._-]. This property is system-assigned if\
            \ not specified."
          type: string
        name:
          description: The name for the Metadata URL.
          type: string
        url:
          description: The Metadata URL.
          type: string
        certView:
          $ref: '#/components/schemas/CertView'
        x509File:
          $ref: '#/components/schemas/X509File'
        validateSignature:
          description: Perform Metadata Signature Validation. The default value is
            TRUE.
          type: boolean
      required:
      - name
      - url
      type: object
    MetadataUrls:
      example:
        items:
        - validateSignature: true
          certView:
            expires: 2000-01-23T04:56:07.000+00:00
            serialNumber: serialNumber
            keyAlgorithm: keyAlgorithm
            keySize: 0
            subjectAlternativeNames:
            - subjectAlternativeNames
            - subjectAlternativeNames
            issuerDN: issuerDN
            cryptoProvider: LOCAL
            sha1Fingerprint: sha1Fingerprint
            validFrom: 2000-01-23T04:56:07.000+00:00
            version: 6
            signatureAlgorithm: signatureAlgorithm
            sha256Fingerprint: sha256Fingerprint
            id: id
            subjectDN: subjectDN
            status: VALID
          x509File:
            fileData: fileData
            cryptoProvider: LOCAL
            id: id
          name: name
          id: id
          url: url
        - validateSignature: true
          certView:
            expires: 2000-01-23T04:56:07.000+00:00
            serialNumber: serialNumber
            keyAlgorithm: keyAlgorithm
            keySize: 0
            subjectAlternativeNames:
            - subjectAlternativeNames
            - subjectAlternativeNames
            issuerDN: issuerDN
            cryptoProvider: LOCAL
            sha1Fingerprint: sha1Fingerprint
            validFrom: 2000-01-23T04:56:07.000+00:00
            version: 6
            signatureAlgorithm: signatureAlgorithm
            sha256Fingerprint: sha256Fingerprint
            id: id
            subjectDN: subjectDN
            status: VALID
          x509File:
            fileData: fileData
            cryptoProvider: LOCAL
            id: id
          name: name
          id: id
          url: url
      properties:
        items:
          description: The list of Metadata URL items.
          items:
            $ref: '#/components/schemas/MetadataUrl'
          type: array
      type: object
    NotificationPublisherDescriptors:
      description: A collection of notification publisher plugin descriptors.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The list of notification publisher plugin descriptors.
          items:
            $ref: '#/components/schemas/NotificationPublisherDescriptor'
          type: array
      type: object
    NotificationPublishersSettings:
      description: General notification publisher settings.
      example:
        defaultNotificationPublisherRef:
          location: location
          id: id
      properties:
        defaultNotificationPublisherRef:
          $ref: '#/components/schemas/ResourceLink'
      type: object
    NotificationPublishers:
      description: A collection of notification publisher plugin instances.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The list of notification publisher plugin instances.
          items:
            $ref: '#/components/schemas/NotificationPublisher'
          type: array
      type: object
    ApcToPersistentGrantMapping:
      description: An authentication policy contract mapping into an OAuth persistent
        grant.
      example:
        authenticationPolicyContractRef:
          location: location
          id: id
        attributeContractFulfillment:
          key:
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
        id: id
        attributeSources:
        - null
        - null
        issuanceCriteria:
          expressionCriteria:
          - expression: expression
            errorResult: errorResult
          - expression: expression
            errorResult: errorResult
          conditionalCriteria:
          - condition: EQUALS
            errorResult: errorResult
            attributeName: attributeName
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
          - condition: EQUALS
            errorResult: errorResult
            attributeName: attributeName
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
      properties:
        id:
          description: The ID of the authentication policy contract to persistent
            grant mapping.
          type: string
        authenticationPolicyContractRef:
          $ref: '#/components/schemas/ResourceLink'
        attributeSources:
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: '#/components/schemas/AttributeSourceAggregation'
          type: array
        attributeContractFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of mappings from attribute names to their fulfillment
            values.
          type: object
        issuanceCriteria:
          $ref: '#/components/schemas/IssuanceCriteria'
      required:
      - attributeContractFulfillment
      - authenticationPolicyContractRef
      - id
      type: object
    ApcToPersistentGrantMappings:
      description: A collection of OAuth authentication policy contract to persistent
        grant mapping items.
      example:
        items:
        - authenticationPolicyContractRef:
            location: location
            id: id
          attributeContractFulfillment:
            key:
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          id: id
          attributeSources:
          - null
          - null
          issuanceCriteria:
            expressionCriteria:
            - expression: expression
              errorResult: errorResult
            - expression: expression
              errorResult: errorResult
            conditionalCriteria:
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
        - authenticationPolicyContractRef:
            location: location
            id: id
          attributeContractFulfillment:
            key:
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          id: id
          attributeSources:
          - null
          - null
          issuanceCriteria:
            expressionCriteria:
            - expression: expression
              errorResult: errorResult
            - expression: expression
              errorResult: errorResult
            conditionalCriteria:
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
      properties:
        items:
          description: The actual list of OAuth authentication policy contract to
            persistent grant mappings.
          items:
            $ref: '#/components/schemas/ApcToPersistentGrantMapping'
          type: array
      type: object
    CibaServerPolicySettings:
      description: Settings for the CIBA request policy configuration.
      example:
        defaultRequestPolicyRef:
          location: location
          id: id
      properties:
        defaultRequestPolicyRef:
          $ref: '#/components/schemas/ResourceLink'
      type: object
    AlternativeLoginHintTokenIssuer:
      description: JSON Web Key Set Settings.
      example:
        jwksURL: jwksURL
        jwks: jwks
        issuer: issuer
      properties:
        issuer:
          description: The issuer. Issuer is unique.
          type: string
        jwksURL:
          description: The JWKS URL.
          type: string
        jwks:
          description: The JWKS.
          type: string
      required:
      - issuer
      type: object
    IdentityHintAttribute:
      description: An attribute for the ciba request policy's identity hint attribute
        contract.
      example:
        name: name
      properties:
        name:
          description: The name of this attribute.
          type: string
      required:
      - name
      type: object
    IdentityHintContract:
      description: A set of attributes exposed by request policy contract.
      example:
        coreAttributes:
        - name: name
        - name: name
        extendedAttributes:
        - name: name
        - name: name
      properties:
        coreAttributes:
          description: A list of required identity hint contract attributes.
          items:
            $ref: '#/components/schemas/IdentityHintAttribute'
          type: array
        extendedAttributes:
          description: A list of additional identity hint contract attributes.
          items:
            $ref: '#/components/schemas/IdentityHintAttribute'
          type: array
      required:
      - coreAttributes
      type: object
    RequestPolicies:
      description: A collection of CIBA request policies.
      example:
        items:
        - alternativeLoginHintTokenIssuers:
          - jwksURL: jwksURL
            jwks: jwks
            issuer: issuer
          - jwksURL: jwksURL
            jwks: jwks
            issuer: issuer
          allowUnsignedLoginHintToken: true
          requireTokenForIdentityHint: true
          identityHintContract:
            coreAttributes:
            - name: name
            - name: name
            extendedAttributes:
            - name: name
            - name: name
          identityHintContractFulfillment:
            attributeContractFulfillment:
              key:
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
            attributeSources:
            - null
            - null
            issuanceCriteria:
              expressionCriteria:
              - expression: expression
                errorResult: errorResult
              - expression: expression
                errorResult: errorResult
              conditionalCriteria:
              - condition: EQUALS
                errorResult: errorResult
                attributeName: attributeName
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
              - condition: EQUALS
                errorResult: errorResult
                attributeName: attributeName
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
          transactionLifetime: 0
          name: name
          identityHintMapping:
            attributeContractFulfillment:
              key:
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
            attributeSources:
            - null
            - null
            issuanceCriteria:
              expressionCriteria:
              - expression: expression
                errorResult: errorResult
              - expression: expression
                errorResult: errorResult
              conditionalCriteria:
              - condition: EQUALS
                errorResult: errorResult
                attributeName: attributeName
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
              - condition: EQUALS
                errorResult: errorResult
                attributeName: attributeName
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
          id: id
          lastModified: 2000-01-23T04:56:07.000+00:00
          userCodePcvRef:
            location: location
            id: id
          authenticatorRef:
            location: location
            id: id
        - alternativeLoginHintTokenIssuers:
          - jwksURL: jwksURL
            jwks: jwks
            issuer: issuer
          - jwksURL: jwksURL
            jwks: jwks
            issuer: issuer
          allowUnsignedLoginHintToken: true
          requireTokenForIdentityHint: true
          identityHintContract:
            coreAttributes:
            - name: name
            - name: name
            extendedAttributes:
            - name: name
            - name: name
          identityHintContractFulfillment:
            attributeContractFulfillment:
              key:
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
            attributeSources:
            - null
            - null
            issuanceCriteria:
              expressionCriteria:
              - expression: expression
                errorResult: errorResult
              - expression: expression
                errorResult: errorResult
              conditionalCriteria:
              - condition: EQUALS
                errorResult: errorResult
                attributeName: attributeName
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
              - condition: EQUALS
                errorResult: errorResult
                attributeName: attributeName
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
          transactionLifetime: 0
          name: name
          identityHintMapping:
            attributeContractFulfillment:
              key:
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
            attributeSources:
            - null
            - null
            issuanceCriteria:
              expressionCriteria:
              - expression: expression
                errorResult: errorResult
              - expression: expression
                errorResult: errorResult
              conditionalCriteria:
              - condition: EQUALS
                errorResult: errorResult
                attributeName: attributeName
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
              - condition: EQUALS
                errorResult: errorResult
                attributeName: attributeName
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
          id: id
          lastModified: 2000-01-23T04:56:07.000+00:00
          userCodePcvRef:
            location: location
            id: id
          authenticatorRef:
            location: location
            id: id
      properties:
        items:
          description: The list of request policies.
          items:
            $ref: '#/components/schemas/RequestPolicy'
          type: array
      type: object
    RequestPolicy:
      description: The set of attributes used to configure a CIBA request policy.
      example:
        alternativeLoginHintTokenIssuers:
        - jwksURL: jwksURL
          jwks: jwks
          issuer: issuer
        - jwksURL: jwksURL
          jwks: jwks
          issuer: issuer
        allowUnsignedLoginHintToken: true
        requireTokenForIdentityHint: true
        identityHintContract:
          coreAttributes:
          - name: name
          - name: name
          extendedAttributes:
          - name: name
          - name: name
        identityHintContractFulfillment:
          attributeContractFulfillment:
            key:
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          attributeSources:
          - null
          - null
          issuanceCriteria:
            expressionCriteria:
            - expression: expression
              errorResult: errorResult
            - expression: expression
              errorResult: errorResult
            conditionalCriteria:
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
        transactionLifetime: 0
        name: name
        identityHintMapping:
          attributeContractFulfillment:
            key:
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          attributeSources:
          - null
          - null
          issuanceCriteria:
            expressionCriteria:
            - expression: expression
              errorResult: errorResult
            - expression: expression
              errorResult: errorResult
            conditionalCriteria:
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
        id: id
        lastModified: 2000-01-23T04:56:07.000+00:00
        userCodePcvRef:
          location: location
          id: id
        authenticatorRef:
          location: location
          id: id
      properties:
        id:
          description: The request policy ID. ID is unique.
          type: string
        name:
          description: The request policy name. Name is unique.
          type: string
        authenticatorRef:
          $ref: '#/components/schemas/ResourceLink'
        userCodePcvRef:
          $ref: '#/components/schemas/ResourceLink'
        transactionLifetime:
          description: The transaction lifetime in seconds.
          format: int32
          type: integer
        allowUnsignedLoginHintToken:
          description: Allow unsigned login hint token.
          type: boolean
        requireTokenForIdentityHint:
          description: Require token for identity hint.
          type: boolean
        alternativeLoginHintTokenIssuers:
          description: Alternative login hint token issuers.
          items:
            $ref: '#/components/schemas/AlternativeLoginHintTokenIssuer'
          type: array
        identityHintContract:
          $ref: '#/components/schemas/IdentityHintContract'
        identityHintContractFulfillment:
          $ref: '#/components/schemas/AttributeMapping'
        identityHintMapping:
          $ref: '#/components/schemas/AttributeMapping'
        lastModified:
          description: The time at which the request policy was last changed. This
            property is read only and is ignored on PUT and POST requests.
          format: date-time
          type: string
      required:
      - authenticatorRef
      - id
      - identityHintContract
      - name
      type: object
    ClientSecret:
      description: Client Secret.
      example:
        encryptedSecret: encryptedSecret
        secondarySecrets:
        - encryptedSecret: encryptedSecret
          expiryTime: 2000-01-23T04:56:07.000+00:00
          secret: secret
        - encryptedSecret: encryptedSecret
          expiryTime: 2000-01-23T04:56:07.000+00:00
          secret: secret
        secret: secret
      properties:
        secret:
          description: "Client secret for Basic Authentication.  To update the client\
            \ secret, specify the plaintext value in this field.  This field will\
            \ not be populated for GET requests."
          type: string
        encryptedSecret:
          description: "For GET requests, this field contains the encrypted client\
            \ secret, if one exists.  For POST and PUT requests, if you wish to reuse\
            \ the existing secret, this field should be passed back unchanged."
          type: string
        secondarySecrets:
          description: The list of secondary client secrets that are temporarily retained.
          items:
            $ref: '#/components/schemas/SecondarySecret'
          type: array
      type: object
    SecondarySecret:
      example:
        encryptedSecret: encryptedSecret
        expiryTime: 2000-01-23T04:56:07.000+00:00
        secret: secret
      properties:
        secret:
          description: "Secondary client secret for Basic Authentication.  To update\
            \ the secondary client secret, specify the plaintext value in this field.\
            \  This field will not be populated for GET requests."
          type: string
        encryptedSecret:
          description: "For GET requests, this field contains the encrypted secondary\
            \ client secret, if one exists.  For POST and PUT requests, if you wish\
            \ to reuse the existing secret, this field should be passed back unchanged."
          type: string
        expiryTime:
          description: The expiry time of the secondary secret.
          format: date-time
          type: string
      type: object
    Client:
      description: OAuth client.
      example:
        persistentGrantIdleTimeoutType: INDEFINITE_EXPIRY
        refreshTokenRollingGracePeriod: 7
        persistentGrantIdleTimeout: 1
        requestObjectSigningAlgorithm: RS256
        jwksSettings:
          jwksUrl: jwksUrl
          jwks: jwks
        restrictedResponseTypes:
        - restrictedResponseTypes
        - restrictedResponseTypes
        requireProofKeyForCodeExchange: true
        tokenIntrospectionSigningAlgorithm: RS256
        persistentGrantIdleTimeoutTimeUnit: MINUTES
        userAuthorizationUrlOverride: userAuthorizationUrlOverride
        restrictToDefaultAccessTokenManager: true
        cibaDeliveryMode: POLL
        restrictScopes: true
        cibaNotificationEndpoint: cibaNotificationEndpoint
        bypassActivationCodeConfirmationOverride: true
        refreshTokenRollingGracePeriodType: SERVER_DEFAULT
        replicationStatus: REPLICATED
        creationDate: 2000-01-23T04:56:07.000+00:00
        deviceFlowSettingType: SERVER_DEFAULT
        redirectUris:
        - redirectUris
        - redirectUris
        jwtSecuredAuthorizationResponseModeEncryptionAlgorithm: DIR
        logoUrl: logoUrl
        authorizationDetailTypes:
        - authorizationDetailTypes
        - authorizationDetailTypes
        grantTypes:
        - IMPLICIT
        - IMPLICIT
        clientSecretRetentionPeriodType: SERVER_DEFAULT
        requirePushedAuthorizationRequests: true
        clientSecretChangedTime: 2000-01-23T04:56:07.000+00:00
        name: name
        refreshTokenRollingIntervalType: SERVER_DEFAULT
        devicePollingIntervalOverride: 5
        tokenIntrospectionEncryptionAlgorithm: DIR
        persistentGrantExpirationType: INDEFINITE_EXPIRY
        restrictedScopes:
        - restrictedScopes
        - restrictedScopes
        clientAuth:
          encryptedSecret: encryptedSecret
          secondarySecrets:
          - encryptedSecret: encryptedSecret
            expiryTime: 2000-01-23T04:56:07.000+00:00
            secret: secret
          - encryptedSecret: encryptedSecret
            expiryTime: 2000-01-23T04:56:07.000+00:00
            secret: secret
          clientCertIssuerDn: clientCertIssuerDn
          secret: secret
          type: NONE
          enforceReplayPrevention: true
          clientCertSubjectDn: clientCertSubjectDn
          tokenEndpointAuthSigningAlgorithm: RS256
        cibaUserCodeSupported: true
        bypassApprovalPage: true
        persistentGrantReuseType: SERVER_DEFAULT
        requireSignedRequests: true
        cibaRequireSignedRequests: true
        description: description
        enabled: true
        tokenIntrospectionContentEncryptionAlgorithm: AES_128_CBC_HMAC_SHA_256
        oidcPolicy:
          sectorIdentifierUri: sectorIdentifierUri
          grantAccessSessionRevocationApi: true
          backChannelLogoutUri: backChannelLogoutUri
          idTokenEncryptionAlgorithm: DIR
          policyGroup:
            location: location
            id: id
          logoutMode: NONE
          idTokenContentEncryptionAlgorithm: AES_128_CBC_HMAC_SHA_256
          logoutUris:
          - logoutUris
          - logoutUris
          postLogoutRedirectUris:
          - postLogoutRedirectUris
          - postLogoutRedirectUris
          grantAccessSessionSessionManagementApi: true
          pingAccessLogoutCapable: true
          idTokenSigningAlgorithm: NONE
          pairwiseIdentifierUserType: true
        persistentGrantExpirationTime: 6
        requestPolicyRef:
          location: location
          id: id
        clientSecretRetentionPeriod: 9
        validateUsingAllEligibleAtms: true
        clientId: clientId
        requireJwtSecuredAuthorizationResponseMode: true
        pendingAuthorizationTimeoutOverride: 5
        persistentGrantExpirationTimeUnit: MINUTES
        requireDpop: true
        allowAuthenticationApiInit: true
        persistentGrantReuseGrantTypes:
        - IMPLICIT
        - IMPLICIT
        cibaRequestObjectSigningAlgorithm: RS256
        extendedParameters:
          key:
            values:
            - values
            - values
        jwtSecuredAuthorizationResponseModeSigningAlgorithm: RS256
        modificationDate: 2000-01-23T04:56:07.000+00:00
        defaultAccessTokenManagerRef:
          location: location
          id: id
        jwtSecuredAuthorizationResponseModeContentEncryptionAlgorithm: AES_128_CBC_HMAC_SHA_256
        refreshTokenRollingInterval: 0
        tokenExchangeProcessorPolicyRef:
          location: location
          id: id
        cibaPollingInterval: 2
        refreshRolling: SERVER_DEFAULT
        exclusiveScopes:
        - exclusiveScopes
        - exclusiveScopes
      properties:
        clientId:
          description: "A unique identifier the client provides to the Resource Server\
            \ to identify itself. This identifier is included with every request the\
            \ client makes. For PUT requests, this field is optional and it will be\
            \ overridden by the 'id' parameter of the PUT request."
          type: string
        enabled:
          description: Specifies whether the client is enabled. The default value
            is true.
          type: boolean
        redirectUris:
          description: "URIs to which the OAuth AS may redirect the resource owner's\
            \ user agent after authorization is obtained. A redirection URI is used\
            \ with the Authorization Code and Implicit grant types. Wildcards are\
            \ allowed. However, for security reasons, make the URL as restrictive\
            \ as possible.For example: https://*.company.com/* Important: If more\
            \ than one URI is added or if a single URI uses wildcards, then Authorization\
            \ Code grant and token requests must contain a specific matching redirect\
            \ uri parameter."
          items:
            type: string
          type: array
        grantTypes:
          description: The grant types allowed for this client. The EXTENSION grant
            type applies to SAML/JWT assertion grants.
          items:
            enum:
            - IMPLICIT
            - AUTHORIZATION_CODE
            - RESOURCE_OWNER_CREDENTIALS
            - CLIENT_CREDENTIALS
            - REFRESH_TOKEN
            - EXTENSION
            - DEVICE_CODE
            - ACCESS_TOKEN_VALIDATION
            - CIBA
            - TOKEN_EXCHANGE
            type: string
          type: array
          uniqueItems: true
        name:
          description: A descriptive name for the client instance. This name appears
            when the user is prompted for authorization.
          type: string
        description:
          description: A description of what the client application does. This description
            appears when the user is prompted for authorization.
          type: string
        modificationDate:
          description: The time at which the client was last changed. This property
            is read only and is ignored on PUT and POST requests.
          format: date-time
          type: string
        creationDate:
          description: The time at which the client was created. This property is
            read only and is ignored on PUT and POST requests.
          format: date-time
          type: string
        replicationStatus:
          description: This status indicates whether the client has been replicated
            to the cluster. This property only applies when using XML client storage
            and automatic replication of clients is enabled. It is read only and is
            ignored on PUT and POST requests.
          enum:
          - REPLICATED
          - NOT_REPLICATED
          type: string
        logoUrl:
          description: The location of the logo used on user-facing OAuth grant authorization
            and revocation pages.
          type: string
        defaultAccessTokenManagerRef:
          $ref: '#/components/schemas/ResourceLink'
        restrictToDefaultAccessTokenManager:
          description: Determines whether the client is restricted to using only its
            default access token manager. The default is false.
          type: boolean
        validateUsingAllEligibleAtms:
          description: Validates token using all eligible access token managers for
            the client. This setting is ignored if 'restrictToDefaultAccessTokenManager'
            is set to true.
          type: boolean
        refreshRolling:
          description: Use ROLL or DONT_ROLL to override the Roll Refresh Token Values
            setting on the Authorization Server Settings. SERVER_DEFAULT will default
            to the Roll Refresh Token Values setting on the Authorization Server Setting
            screen. Defaults to SERVER_DEFAULT.
          enum:
          - SERVER_DEFAULT
          - DONT_ROLL
          - ROLL
          type: string
        refreshTokenRollingIntervalType:
          description: Use OVERRIDE_SERVER_DEFAULT to override the Refresh Token Rolling
            Interval value on the Authorization Server Settings. SERVER_DEFAULT will
            default to the Refresh Token Rolling Interval value on the Authorization
            Server Setting. Defaults to SERVER_DEFAULT.
          enum:
          - SERVER_DEFAULT
          - OVERRIDE_SERVER_DEFAULT
          type: string
        refreshTokenRollingInterval:
          description: "The minimum interval to roll refresh tokens, in hours. This\
            \ value will override the Refresh Token Rolling Interval Value on the\
            \ Authorization Server Settings."
          format: int64
          type: integer
        persistentGrantExpirationType:
          description: Allows an administrator to override the Persistent Grant Lifetime
            set globally for the OAuth AS. Defaults to SERVER_DEFAULT.
          enum:
          - INDEFINITE_EXPIRY
          - SERVER_DEFAULT
          - OVERRIDE_SERVER_DEFAULT
          type: string
        persistentGrantExpirationTime:
          description: The persistent grant expiration time. -1 indicates an indefinite
            amount of time.
          format: int64
          type: integer
        persistentGrantExpirationTimeUnit:
          description: The persistent grant expiration time unit.
          enum:
          - MINUTES
          - DAYS
          - HOURS
          type: string
        persistentGrantIdleTimeoutType:
          description: Allows an administrator to override the Persistent Grant Idle
            Timeout set globally for the OAuth AS. Defaults to SERVER_DEFAULT.
          enum:
          - INDEFINITE_EXPIRY
          - SERVER_DEFAULT
          - OVERRIDE_SERVER_DEFAULT
          type: string
        persistentGrantIdleTimeout:
          description: The persistent grant idle timeout.
          format: int64
          type: integer
        persistentGrantIdleTimeoutTimeUnit:
          description: The persistent grant idle timeout time unit.
          enum:
          - MINUTES
          - DAYS
          - HOURS
          type: string
        persistentGrantReuseType:
          description: Allows and administrator to override the Reuse Existing Persistent
            Access Grants for Grant Types set globally for OAuth AS. Defaults to SERVER_DEFAULT.
          enum:
          - SERVER_DEFAULT
          - OVERRIDE_SERVER_DEFAULT
          type: string
        persistentGrantReuseGrantTypes:
          description: The grant types that the OAuth AS can reuse rather than creating
            a new grant for each request. This value will override the Reuse Existing
            Persistent Access Grants for Grant Types on the Authorization Server Settings.
            Only 'IMPLICIT' or 'AUTHORIZATION_CODE' or 'RESOURCE_OWNER_CREDENTIALS'
            are valid grant types.
          items:
            enum:
            - IMPLICIT
            - AUTHORIZATION_CODE
            - RESOURCE_OWNER_CREDENTIALS
            - CLIENT_CREDENTIALS
            - REFRESH_TOKEN
            - EXTENSION
            - DEVICE_CODE
            - ACCESS_TOKEN_VALIDATION
            - CIBA
            - TOKEN_EXCHANGE
            type: string
          type: array
          uniqueItems: true
        allowAuthenticationApiInit:
          description: Set to true to allow this client to initiate the authentication
            API redirectless flow.
          type: boolean
        bypassApprovalPage:
          description: "Use this setting, for example, when you want to deploy a trusted\
            \ application and authenticate end users via an IdP adapter or IdP connection."
          type: boolean
        restrictScopes:
          description: Restricts this client's access to specific scopes.
          type: boolean
        restrictedScopes:
          description: The scopes available for this client.
          items:
            type: string
          type: array
          uniqueItems: true
        exclusiveScopes:
          description: The exclusive scopes available for this client.
          items:
            type: string
          type: array
          uniqueItems: true
        authorizationDetailTypes:
          description: The authorization detail types available for this client.
          items:
            type: string
          type: array
          uniqueItems: true
        restrictedResponseTypes:
          description: The response types allowed for this client. If omitted all
            response types are available to the client.
          items:
            type: string
          type: array
          uniqueItems: true
        requirePushedAuthorizationRequests:
          description: Determines whether pushed authorization requests are required
            when initiating an authorization request. The default is false.
          type: boolean
        requireJwtSecuredAuthorizationResponseMode:
          description: Determines whether JWT Secured authorization response mode
            is required when initiating an authorization request. The default is false.
          type: boolean
        requireSignedRequests:
          description: Determines whether signed requests are required for this client
          type: boolean
        requestObjectSigningAlgorithm:
          description: "The JSON Web Signature [JWS] algorithm that must be used to\
            \ sign the Request Object. All signing algorithms are allowed if value\
            \ is not present <br>RS256 - RSA using SHA-256<br>RS384 - RSA using SHA-384<br>RS512\
            \ - RSA using SHA-512<br>ES256 - ECDSA using P256 Curve and SHA-256<br>ES384\
            \ - ECDSA using P384 Curve and SHA-384<br>ES512 - ECDSA using P521 Curve\
            \ and SHA-512<br>PS256 - RSASSA-PSS using SHA-256 and MGF1 padding with\
            \ SHA-256<br>PS384 - RSASSA-PSS using SHA-384 and MGF1 padding with SHA-384<br>PS512\
            \ - RSASSA-PSS using SHA-512 and MGF1 padding with SHA-512<br>RSASSA-PSS\
            \ is only supported with SafeNet Luna, Thales nCipher or Java 11."
          enum:
          - RS256
          - RS384
          - RS512
          - ES256
          - ES384
          - ES512
          - PS256
          - PS384
          - PS512
          type: string
        oidcPolicy:
          $ref: '#/components/schemas/ClientOIDCPolicy'
        clientAuth:
          $ref: '#/components/schemas/ClientAuth'
        jwksSettings:
          $ref: '#/components/schemas/JwksSettings'
        extendedParameters:
          additionalProperties:
            $ref: '#/components/schemas/ParameterValues'
          description: OAuth Client Metadata can be extended to use custom Client
            Metadata Parameters. The names of these custom parameters should be defined
            in /extendedProperties.
          type: object
        deviceFlowSettingType:
          description: Allows an administrator to override the Device Authorization
            Settings set globally for the OAuth AS. Defaults to SERVER_DEFAULT.
          enum:
          - SERVER_DEFAULT
          - OVERRIDE_SERVER_DEFAULT
          type: string
        userAuthorizationUrlOverride:
          description: The URL used as 'verification_url' and 'verification_url_complete'
            values in a Device Authorization request. This property overrides the
            'userAuthorizationUrl' value present in Authorization Server Settings.
          type: string
        pendingAuthorizationTimeoutOverride:
          description: "The 'device_code' and 'user_code' timeout, in seconds. This\
            \ overrides the 'pendingAuthorizationTimeout' value present in Authorization\
            \ Server Settings."
          format: int32
          type: integer
        devicePollingIntervalOverride:
          description: "The amount of time client should wait between polling requests,\
            \ in seconds. This overrides the 'devicePollingInterval' value present\
            \ in Authorization Server Settings."
          format: int32
          type: integer
        bypassActivationCodeConfirmationOverride:
          description: Indicates if the Activation Code Confirmation page should be
            bypassed if 'verification_url_complete' is used by the end user to authorize
            a device. This overrides the 'bypassUseCodeConfirmation' value present
            in Authorization Server Settings.
          type: boolean
        requireProofKeyForCodeExchange:
          description: Determines whether Proof Key for Code Exchange (PKCE) is required
            for this client.
          type: boolean
        cibaDeliveryMode:
          description: The token delivery mode for the client.  The default value
            is 'POLL'.
          enum:
          - POLL
          - PING
          type: string
        cibaNotificationEndpoint:
          description: The endpoint the OP will call after a successful or failed
            end-user authentication.
          type: string
        cibaPollingInterval:
          description: The minimum amount of time in seconds that the Client must
            wait between polling requests to the token endpoint. The default is 3
            seconds.
          format: int32
          type: integer
        cibaRequireSignedRequests:
          description: Determines whether CIBA signed requests are required for this
            client.
          type: boolean
        cibaRequestObjectSigningAlgorithm:
          description: "The JSON Web Signature [JWS] algorithm that must be used to\
            \ sign the CIBA Request Object. All signing algorithms are allowed if\
            \ value is not present <br>RS256 - RSA using SHA-256<br>RS384 - RSA using\
            \ SHA-384<br>RS512 - RSA using SHA-512<br>ES256 - ECDSA using P256 Curve\
            \ and SHA-256<br>ES384 - ECDSA using P384 Curve and SHA-384<br>ES512 -\
            \ ECDSA using P521 Curve and SHA-512<br>PS256 - RSASSA-PSS using SHA-256\
            \ and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS using SHA-384 and\
            \ MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using SHA-512 and MGF1\
            \ padding with SHA-512<br>RSASSA-PSS is only supported with SafeNet Luna,\
            \ Thales nCipher or Java 11."
          enum:
          - RS256
          - RS384
          - RS512
          - ES256
          - ES384
          - ES512
          - PS256
          - PS384
          - PS512
          type: string
        cibaUserCodeSupported:
          description: Determines whether CIBA user code is supported for this client.
          type: boolean
        requestPolicyRef:
          $ref: '#/components/schemas/ResourceLink'
        tokenExchangeProcessorPolicyRef:
          $ref: '#/components/schemas/ResourceLink'
        refreshTokenRollingGracePeriodType:
          description: "When specified, it overrides the global Refresh Token Grace\
            \ Period defined in the Authorization Server Settings. The default value\
            \ is SERVER_DEFAULT"
          enum:
          - SERVER_DEFAULT
          - OVERRIDE_SERVER_DEFAULT
          type: string
        refreshTokenRollingGracePeriod:
          description: The grace period that a rolled refresh token remains valid
            in seconds.
          format: int32
          type: integer
        clientSecretRetentionPeriodType:
          description: Use OVERRIDE_SERVER_DEFAULT to override the Client Secret Retention
            Period value on the Authorization Server Settings. SERVER_DEFAULT will
            default to the Client Secret Retention Period value on the Authorization
            Server Setting. Defaults to SERVER_DEFAULT.
          enum:
          - SERVER_DEFAULT
          - OVERRIDE_SERVER_DEFAULT
          type: string
        clientSecretRetentionPeriod:
          description: "The length of time in minutes that client secrets will be\
            \ retained as secondary secrets after secret change. The default value\
            \ is 0, which will disable secondary client secret retention. This value\
            \ will override the Client Secret Retention Period value on the Authorization\
            \ Server Settings."
          format: int32
          type: integer
        clientSecretChangedTime:
          description: The time at which the client secret was last changed. This
            property is read only and is ignored on PUT and POST requests.
          format: date-time
          type: string
        tokenIntrospectionSigningAlgorithm:
          description: "The JSON Web Signature [JWS] algorithm required to sign the\
            \ Token Introspection Response.<br>HS256 - HMAC using SHA-256<br>HS384\
            \ - HMAC using SHA-384<br>HS512 - HMAC using SHA-512<br>RS256 - RSA using\
            \ SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256\
            \ - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve\
            \ and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 -\
            \ RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS\
            \ using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using\
            \ SHA-512 and MGF1 padding with SHA-512<br>A null value will represent\
            \ the default algorithm which is RS256.<br>RSASSA-PSS is only supported\
            \ with SafeNet Luna, Thales nCipher or Java 11"
          enum:
          - RS256
          - RS384
          - RS512
          - HS256
          - HS384
          - HS512
          - ES256
          - ES384
          - ES512
          - PS256
          - PS384
          - PS512
          type: string
        tokenIntrospectionEncryptionAlgorithm:
          description: "The JSON Web Encryption [JWE] encryption algorithm used to\
            \ encrypt the content-encryption key of the Token Introspection Response.<br>DIR\
            \ - Direct Encryption with symmetric key<br>A128KW - AES-128 Key Wrap<br>A192KW\
            \ - AES-192 Key Wrap<br>A256KW - AES-256 Key Wrap<br>A128GCMKW - AES-GCM-128\
            \ key encryption<br>A192GCMKW - AES-GCM-192 key encryption<br>A256GCMKW\
            \ - AES-GCM-256 key encryption<br>ECDH_ES - ECDH-ES<br>ECDH_ES_A128KW\
            \ - ECDH-ES with AES-128 Key Wrap<br>ECDH_ES_A192KW - ECDH-ES with AES-192\
            \ Key Wrap<br>ECDH_ES_A256KW - ECDH-ES with AES-256 Key Wrap<br>RSA_OAEP\
            \ - RSAES OAEP<br>RSA_OAEP_256 - RSAES OAEP using SHA-256 and MGF1 with\
            \ SHA-256"
          enum:
          - DIR
          - A128KW
          - A192KW
          - A256KW
          - A128GCMKW
          - A192GCMKW
          - A256GCMKW
          - ECDH_ES
          - ECDH_ES_A128KW
          - ECDH_ES_A192KW
          - ECDH_ES_A256KW
          - RSA_OAEP
          - RSA_OAEP_256
          type: string
        tokenIntrospectionContentEncryptionAlgorithm:
          description: "The JSON Web Encryption [JWE] content-encryption algorithm\
            \ for the Token Introspection Response.<br>AES_128_CBC_HMAC_SHA_256 -\
            \ Composite AES-CBC-128 HMAC-SHA-256<br>AES_192_CBC_HMAC_SHA_384 - Composite\
            \ AES-CBC-192 HMAC-SHA-384<br>AES_256_CBC_HMAC_SHA_512 - Composite AES-CBC-256\
            \ HMAC-SHA-512<br>AES_128_GCM - AES-GCM-128<br>AES_192_GCM - AES-GCM-192<br>AES_256_GCM\
            \ - AES-GCM-256"
          enum:
          - AES_128_CBC_HMAC_SHA_256
          - AES_192_CBC_HMAC_SHA_384
          - AES_256_CBC_HMAC_SHA_512
          - AES_128_GCM
          - AES_192_GCM
          - AES_256_GCM
          type: string
        jwtSecuredAuthorizationResponseModeSigningAlgorithm:
          description: "The JSON Web Signature [JWS] algorithm required to sign the\
            \ JWT Secured Authorization Response.<br>HS256 - HMAC using SHA-256<br>HS384\
            \ - HMAC using SHA-384<br>HS512 - HMAC using SHA-512<br>RS256 - RSA using\
            \ SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256\
            \ - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve\
            \ and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 -\
            \ RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS\
            \ using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using\
            \ SHA-512 and MGF1 padding with SHA-512<br>A null value will represent\
            \ the default algorithm which is RS256.<br>RSASSA-PSS is only supported\
            \ with SafeNet Luna, Thales nCipher or Java 11"
          enum:
          - RS256
          - RS384
          - RS512
          - HS256
          - HS384
          - HS512
          - ES256
          - ES384
          - ES512
          - PS256
          - PS384
          - PS512
          type: string
        jwtSecuredAuthorizationResponseModeEncryptionAlgorithm:
          description: "The JSON Web Encryption [JWE] encryption algorithm used to\
            \ encrypt the content-encryption key of the JWT Secured Authorization\
            \ Response.<br>DIR - Direct Encryption with symmetric key<br>A128KW -\
            \ AES-128 Key Wrap<br>A192KW - AES-192 Key Wrap<br>A256KW - AES-256 Key\
            \ Wrap<br>A128GCMKW - AES-GCM-128 key encryption<br>A192GCMKW - AES-GCM-192\
            \ key encryption<br>A256GCMKW - AES-GCM-256 key encryption<br>ECDH_ES\
            \ - ECDH-ES<br>ECDH_ES_A128KW - ECDH-ES with AES-128 Key Wrap<br>ECDH_ES_A192KW\
            \ - ECDH-ES with AES-192 Key Wrap<br>ECDH_ES_A256KW - ECDH-ES with AES-256\
            \ Key Wrap<br>RSA_OAEP - RSAES OAEP<br>RSA_OAEP_256 - RSAES OAEP using\
            \ SHA-256 and MGF1 with SHA-256"
          enum:
          - DIR
          - A128KW
          - A192KW
          - A256KW
          - A128GCMKW
          - A192GCMKW
          - A256GCMKW
          - ECDH_ES
          - ECDH_ES_A128KW
          - ECDH_ES_A192KW
          - ECDH_ES_A256KW
          - RSA_OAEP
          - RSA_OAEP_256
          type: string
        jwtSecuredAuthorizationResponseModeContentEncryptionAlgorithm:
          description: "The JSON Web Encryption [JWE] content-encryption algorithm\
            \ for the JWT Secured Authorization Response.<br>AES_128_CBC_HMAC_SHA_256\
            \ - Composite AES-CBC-128 HMAC-SHA-256<br>AES_192_CBC_HMAC_SHA_384 - Composite\
            \ AES-CBC-192 HMAC-SHA-384<br>AES_256_CBC_HMAC_SHA_512 - Composite AES-CBC-256\
            \ HMAC-SHA-512<br>AES_128_GCM - AES-GCM-128<br>AES_192_GCM - AES-GCM-192<br>AES_256_GCM\
            \ - AES-GCM-256"
          enum:
          - AES_128_CBC_HMAC_SHA_256
          - AES_192_CBC_HMAC_SHA_384
          - AES_256_CBC_HMAC_SHA_512
          - AES_128_GCM
          - AES_192_GCM
          - AES_256_GCM
          type: string
        requireDpop:
          description: Determines whether Demonstrating Proof-of-Possession (DPoP)
            is required for this client.
          type: boolean
      required:
      - clientId
      - grantTypes
      - name
      type: object
    ClientAuth:
      description: Client Authentication.
      example:
        encryptedSecret: encryptedSecret
        secondarySecrets:
        - encryptedSecret: encryptedSecret
          expiryTime: 2000-01-23T04:56:07.000+00:00
          secret: secret
        - encryptedSecret: encryptedSecret
          expiryTime: 2000-01-23T04:56:07.000+00:00
          secret: secret
        clientCertIssuerDn: clientCertIssuerDn
        secret: secret
        type: NONE
        enforceReplayPrevention: true
        clientCertSubjectDn: clientCertSubjectDn
        tokenEndpointAuthSigningAlgorithm: RS256
      properties:
        type:
          description: "Client authentication type.<br>The required field for type\
            \ SECRET is secret.<br>The required fields for type CERTIFICATE are clientCertIssuerDn\
            \ and clientCertSubjectDn.<br>The required field for type PRIVATE_KEY_JWT\
            \ is: either jwks or jwksUrl."
          enum:
          - NONE
          - SECRET
          - CERTIFICATE
          - PRIVATE_KEY_JWT
          - CLIENT_SECRET_JWT
          type: string
        secret:
          description: "Client secret for Basic Authentication.  To update the client\
            \ secret, specify the plaintext value in this field.  This field will\
            \ not be populated for GET requests."
          type: string
        encryptedSecret:
          description: "For GET requests, this field contains the encrypted client\
            \ secret, if one exists.  For POST and PUT requests, if you wish to reuse\
            \ the existing secret, this field should be passed back unchanged."
          type: string
        secondarySecrets:
          description: The list of secondary client secrets that are temporarily retained.
          items:
            $ref: '#/components/schemas/SecondarySecret'
          type: array
        clientCertIssuerDn:
          description: Client TLS Certificate Issuer DN.
          type: string
        clientCertSubjectDn:
          description: Client TLS Certificate Subject DN.
          type: string
        enforceReplayPrevention:
          description: Enforce replay prevention on JSON Web Tokens. This field is
            applicable only for Private Key JWT Client and Client Secret JWT Authentication.
          type: boolean
        tokenEndpointAuthSigningAlgorithm:
          description: "The JSON Web Signature [JWS] algorithm that must be used to\
            \ sign the JSON Web Tokens. This field is applicable only for Private\
            \ Key JWT and Client Secret JWT Client Authentication. All asymmetric\
            \ signing algorithms are allowed for Private Key JWT if value is not present.All\
            \ symmetric signing algorithms are allowed for Client Secret JWT if value\
            \ is not present <br>RS256 - RSA using SHA-256<br>RS384 - RSA using SHA-384<br>RS512\
            \ - RSA using SHA-512<br>ES256 - ECDSA using P256 Curve and SHA-256<br>ES384\
            \ - ECDSA using P384 Curve and SHA-384<br>ES512 - ECDSA using P521 Curve\
            \ and SHA-512<br>PS256 - RSASSA-PSS using SHA-256 and MGF1 padding with\
            \ SHA-256<br>PS384 - RSASSA-PSS using SHA-384 and MGF1 padding with SHA-384<br>PS512\
            \ - RSASSA-PSS using SHA-512 and MGF1 padding with SHA-512<br>RSASSA-PSS\
            \ is only supported with SafeNet Luna, Thales nCipher or Java 11.<br>HS256\
            \ - HMAC using SHA-256<br>HS384 - HMAC using SHA-384<br>HS512 - HMAC using\
            \ SHA-512."
          enum:
          - RS256
          - RS384
          - RS512
          - ES256
          - ES384
          - ES512
          - PS256
          - PS384
          - PS512
          - HS256
          - HS384
          - HS512
          type: string
      type: object
    ClientOIDCPolicy:
      description: OAuth Client Open ID Connect Policy.
      example:
        sectorIdentifierUri: sectorIdentifierUri
        grantAccessSessionRevocationApi: true
        backChannelLogoutUri: backChannelLogoutUri
        idTokenEncryptionAlgorithm: DIR
        policyGroup:
          location: location
          id: id
        logoutMode: NONE
        idTokenContentEncryptionAlgorithm: AES_128_CBC_HMAC_SHA_256
        logoutUris:
        - logoutUris
        - logoutUris
        postLogoutRedirectUris:
        - postLogoutRedirectUris
        - postLogoutRedirectUris
        grantAccessSessionSessionManagementApi: true
        pingAccessLogoutCapable: true
        idTokenSigningAlgorithm: NONE
        pairwiseIdentifierUserType: true
      properties:
        idTokenSigningAlgorithm:
          description: "The JSON Web Signature [JWS] algorithm required for the ID\
            \ Token.<br>NONE - No signing algorithm<br>HS256 - HMAC using SHA-256<br>HS384\
            \ - HMAC using SHA-384<br>HS512 - HMAC using SHA-512<br>RS256 - RSA using\
            \ SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256\
            \ - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve\
            \ and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 -\
            \ RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS\
            \ using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using\
            \ SHA-512 and MGF1 padding with SHA-512<br>A null value will represent\
            \ the default algorithm which is RS256.<br>RSASSA-PSS is only supported\
            \ with SafeNet Luna, Thales nCipher or Java 11"
          enum:
          - NONE
          - HS256
          - HS384
          - HS512
          - RS256
          - RS384
          - RS512
          - ES256
          - ES384
          - ES512
          - PS256
          - PS384
          - PS512
          type: string
        idTokenEncryptionAlgorithm:
          description: "The JSON Web Encryption [JWE] encryption algorithm used to\
            \ encrypt the content encryption key for the ID Token.<br>DIR - Direct\
            \ Encryption with symmetric key<br>A128KW - AES-128 Key Wrap<br>A192KW\
            \ - AES-192 Key Wrap<br>A256KW - AES-256 Key Wrap<br>A128GCMKW - AES-GCM-128\
            \ key encryption<br>A192GCMKW - AES-GCM-192 key encryption<br>A256GCMKW\
            \ - AES-GCM-256 key encryption<br>ECDH_ES - ECDH-ES<br>ECDH_ES_A128KW\
            \ - ECDH-ES with AES-128 Key Wrap<br>ECDH_ES_A192KW - ECDH-ES with AES-192\
            \ Key Wrap<br>ECDH_ES_A256KW - ECDH-ES with AES-256 Key Wrap<br>RSA_OAEP\
            \ - RSAES OAEP<br>RSA_OAEP_256 - RSAES OAEP using SHA-256 and MGF1 with\
            \ SHA-256"
          enum:
          - DIR
          - A128KW
          - A192KW
          - A256KW
          - A128GCMKW
          - A192GCMKW
          - A256GCMKW
          - ECDH_ES
          - ECDH_ES_A128KW
          - ECDH_ES_A192KW
          - ECDH_ES_A256KW
          - RSA_OAEP
          - RSA_OAEP_256
          type: string
        idTokenContentEncryptionAlgorithm:
          description: "The JSON Web Encryption [JWE] content encryption algorithm\
            \ for the ID Token.<br>AES_128_CBC_HMAC_SHA_256 - Composite AES-CBC-128\
            \ HMAC-SHA-256<br>AES_192_CBC_HMAC_SHA_384 - Composite AES-CBC-192 HMAC-SHA-384<br>AES_256_CBC_HMAC_SHA_512\
            \ - Composite AES-CBC-256 HMAC-SHA-512<br>AES_128_GCM - AES-GCM-128<br>AES_192_GCM\
            \ - AES-GCM-192<br>AES_256_GCM - AES-GCM-256"
          enum:
          - AES_128_CBC_HMAC_SHA_256
          - AES_192_CBC_HMAC_SHA_384
          - AES_256_CBC_HMAC_SHA_512
          - AES_128_GCM
          - AES_192_GCM
          - AES_256_GCM
          type: string
        policyGroup:
          $ref: '#/components/schemas/ResourceLink'
        grantAccessSessionRevocationApi:
          description: Determines whether this client is allowed to access the Session
            Revocation API.
          type: boolean
        grantAccessSessionSessionManagementApi:
          description: Determines whether this client is allowed to access the Session
            Management API.
          type: boolean
        logoutMode:
          description: The logout mode for this client. The default is 'NONE'.
          enum:
          - NONE
          - OIDC_FRONT_CHANNEL
          - OIDC_BACK_CHANNEL
          - PING_FRONT_CHANNEL
          type: string
        pingAccessLogoutCapable:
          description: "Set this value to true if you wish to enable client application\
            \ logout, and the client is PingAccess, or its logout endpoints follow\
            \ the PingAccess path convention."
          type: boolean
        logoutUris:
          description: A list of front-channel logout URIs for this client.
          items:
            type: string
          type: array
        backChannelLogoutUri:
          description: The back-channel logout URI for this client.
          type: string
        postLogoutRedirectUris:
          description: "URIs to which the OIDC OP may redirect the resource owner's\
            \ user agent after RP-initiated logout has completed. Wildcards are allowed.\
            \ However, for security reasons, make the URL as restrictive as possible."
          items:
            type: string
          type: array
        pairwiseIdentifierUserType:
          description: Determines whether the subject identifier type is pairwise.
          type: boolean
        sectorIdentifierUri:
          description: The URI references a file with a single JSON array of Redirect
            URI and JWKS URL values.
          type: string
      type: object
    JwksSettings:
      description: JSON Web Key Set Settings.
      example:
        jwksUrl: jwksUrl
        jwks: jwks
      properties:
        jwksUrl:
          description: "JSON Web Key Set (JWKS) URL of the OAuth client. Either 'jwks'\
            \ or 'jwksUrl' must be provided if private key JWT client authentication\
            \ or signed requests is enabled.  If the client signs its JWTs using an\
            \ RSASSA-PSS signing algorithm, PingFederate must either use Java 11 or\
            \ be integrated with a hardware security module (HSM) to process the digital\
            \ signatures."
          type: string
        jwks:
          description: "JSON Web Key Set (JWKS) document of the OAuth client. Either\
            \ 'jwks' or 'jwksUrl' must be provided if private key JWT client authentication\
            \ or signed requests is enabled.  If the client signs its JWTs using an\
            \ RSASSA-PSS signing algorithm, PingFederate must either use Java 11 or\
            \ be integrated with a hardware security module (HSM) to process the digital\
            \ signatures."
          type: string
      type: object
    Clients:
      description: A collection of OAuth client items.
      example:
        items:
        - persistentGrantIdleTimeoutType: INDEFINITE_EXPIRY
          refreshTokenRollingGracePeriod: 7
          persistentGrantIdleTimeout: 1
          requestObjectSigningAlgorithm: RS256
          jwksSettings:
            jwksUrl: jwksUrl
            jwks: jwks
          restrictedResponseTypes:
          - restrictedResponseTypes
          - restrictedResponseTypes
          requireProofKeyForCodeExchange: true
          tokenIntrospectionSigningAlgorithm: RS256
          persistentGrantIdleTimeoutTimeUnit: MINUTES
          userAuthorizationUrlOverride: userAuthorizationUrlOverride
          restrictToDefaultAccessTokenManager: true
          cibaDeliveryMode: POLL
          restrictScopes: true
          cibaNotificationEndpoint: cibaNotificationEndpoint
          bypassActivationCodeConfirmationOverride: true
          refreshTokenRollingGracePeriodType: SERVER_DEFAULT
          replicationStatus: REPLICATED
          creationDate: 2000-01-23T04:56:07.000+00:00
          deviceFlowSettingType: SERVER_DEFAULT
          redirectUris:
          - redirectUris
          - redirectUris
          jwtSecuredAuthorizationResponseModeEncryptionAlgorithm: DIR
          logoUrl: logoUrl
          authorizationDetailTypes:
          - authorizationDetailTypes
          - authorizationDetailTypes
          grantTypes:
          - IMPLICIT
          - IMPLICIT
          clientSecretRetentionPeriodType: SERVER_DEFAULT
          requirePushedAuthorizationRequests: true
          clientSecretChangedTime: 2000-01-23T04:56:07.000+00:00
          name: name
          refreshTokenRollingIntervalType: SERVER_DEFAULT
          devicePollingIntervalOverride: 5
          tokenIntrospectionEncryptionAlgorithm: DIR
          persistentGrantExpirationType: INDEFINITE_EXPIRY
          restrictedScopes:
          - restrictedScopes
          - restrictedScopes
          clientAuth:
            encryptedSecret: encryptedSecret
            secondarySecrets:
            - encryptedSecret: encryptedSecret
              expiryTime: 2000-01-23T04:56:07.000+00:00
              secret: secret
            - encryptedSecret: encryptedSecret
              expiryTime: 2000-01-23T04:56:07.000+00:00
              secret: secret
            clientCertIssuerDn: clientCertIssuerDn
            secret: secret
            type: NONE
            enforceReplayPrevention: true
            clientCertSubjectDn: clientCertSubjectDn
            tokenEndpointAuthSigningAlgorithm: RS256
          cibaUserCodeSupported: true
          bypassApprovalPage: true
          persistentGrantReuseType: SERVER_DEFAULT
          requireSignedRequests: true
          cibaRequireSignedRequests: true
          description: description
          enabled: true
          tokenIntrospectionContentEncryptionAlgorithm: AES_128_CBC_HMAC_SHA_256
          oidcPolicy:
            sectorIdentifierUri: sectorIdentifierUri
            grantAccessSessionRevocationApi: true
            backChannelLogoutUri: backChannelLogoutUri
            idTokenEncryptionAlgorithm: DIR
            policyGroup:
              location: location
              id: id
            logoutMode: NONE
            idTokenContentEncryptionAlgorithm: AES_128_CBC_HMAC_SHA_256
            logoutUris:
            - logoutUris
            - logoutUris
            postLogoutRedirectUris:
            - postLogoutRedirectUris
            - postLogoutRedirectUris
            grantAccessSessionSessionManagementApi: true
            pingAccessLogoutCapable: true
            idTokenSigningAlgorithm: NONE
            pairwiseIdentifierUserType: true
          persistentGrantExpirationTime: 6
          requestPolicyRef:
            location: location
            id: id
          clientSecretRetentionPeriod: 9
          validateUsingAllEligibleAtms: true
          clientId: clientId
          requireJwtSecuredAuthorizationResponseMode: true
          pendingAuthorizationTimeoutOverride: 5
          persistentGrantExpirationTimeUnit: MINUTES
          requireDpop: true
          allowAuthenticationApiInit: true
          persistentGrantReuseGrantTypes:
          - IMPLICIT
          - IMPLICIT
          cibaRequestObjectSigningAlgorithm: RS256
          extendedParameters:
            key:
              values:
              - values
              - values
          jwtSecuredAuthorizationResponseModeSigningAlgorithm: RS256
          modificationDate: 2000-01-23T04:56:07.000+00:00
          defaultAccessTokenManagerRef:
            location: location
            id: id
          jwtSecuredAuthorizationResponseModeContentEncryptionAlgorithm: AES_128_CBC_HMAC_SHA_256
          refreshTokenRollingInterval: 0
          tokenExchangeProcessorPolicyRef:
            location: location
            id: id
          cibaPollingInterval: 2
          refreshRolling: SERVER_DEFAULT
          exclusiveScopes:
          - exclusiveScopes
          - exclusiveScopes
        - persistentGrantIdleTimeoutType: INDEFINITE_EXPIRY
          refreshTokenRollingGracePeriod: 7
          persistentGrantIdleTimeout: 1
          requestObjectSigningAlgorithm: RS256
          jwksSettings:
            jwksUrl: jwksUrl
            jwks: jwks
          restrictedResponseTypes:
          - restrictedResponseTypes
          - restrictedResponseTypes
          requireProofKeyForCodeExchange: true
          tokenIntrospectionSigningAlgorithm: RS256
          persistentGrantIdleTimeoutTimeUnit: MINUTES
          userAuthorizationUrlOverride: userAuthorizationUrlOverride
          restrictToDefaultAccessTokenManager: true
          cibaDeliveryMode: POLL
          restrictScopes: true
          cibaNotificationEndpoint: cibaNotificationEndpoint
          bypassActivationCodeConfirmationOverride: true
          refreshTokenRollingGracePeriodType: SERVER_DEFAULT
          replicationStatus: REPLICATED
          creationDate: 2000-01-23T04:56:07.000+00:00
          deviceFlowSettingType: SERVER_DEFAULT
          redirectUris:
          - redirectUris
          - redirectUris
          jwtSecuredAuthorizationResponseModeEncryptionAlgorithm: DIR
          logoUrl: logoUrl
          authorizationDetailTypes:
          - authorizationDetailTypes
          - authorizationDetailTypes
          grantTypes:
          - IMPLICIT
          - IMPLICIT
          clientSecretRetentionPeriodType: SERVER_DEFAULT
          requirePushedAuthorizationRequests: true
          clientSecretChangedTime: 2000-01-23T04:56:07.000+00:00
          name: name
          refreshTokenRollingIntervalType: SERVER_DEFAULT
          devicePollingIntervalOverride: 5
          tokenIntrospectionEncryptionAlgorithm: DIR
          persistentGrantExpirationType: INDEFINITE_EXPIRY
          restrictedScopes:
          - restrictedScopes
          - restrictedScopes
          clientAuth:
            encryptedSecret: encryptedSecret
            secondarySecrets:
            - encryptedSecret: encryptedSecret
              expiryTime: 2000-01-23T04:56:07.000+00:00
              secret: secret
            - encryptedSecret: encryptedSecret
              expiryTime: 2000-01-23T04:56:07.000+00:00
              secret: secret
            clientCertIssuerDn: clientCertIssuerDn
            secret: secret
            type: NONE
            enforceReplayPrevention: true
            clientCertSubjectDn: clientCertSubjectDn
            tokenEndpointAuthSigningAlgorithm: RS256
          cibaUserCodeSupported: true
          bypassApprovalPage: true
          persistentGrantReuseType: SERVER_DEFAULT
          requireSignedRequests: true
          cibaRequireSignedRequests: true
          description: description
          enabled: true
          tokenIntrospectionContentEncryptionAlgorithm: AES_128_CBC_HMAC_SHA_256
          oidcPolicy:
            sectorIdentifierUri: sectorIdentifierUri
            grantAccessSessionRevocationApi: true
            backChannelLogoutUri: backChannelLogoutUri
            idTokenEncryptionAlgorithm: DIR
            policyGroup:
              location: location
              id: id
            logoutMode: NONE
            idTokenContentEncryptionAlgorithm: AES_128_CBC_HMAC_SHA_256
            logoutUris:
            - logoutUris
            - logoutUris
            postLogoutRedirectUris:
            - postLogoutRedirectUris
            - postLogoutRedirectUris
            grantAccessSessionSessionManagementApi: true
            pingAccessLogoutCapable: true
            idTokenSigningAlgorithm: NONE
            pairwiseIdentifierUserType: true
          persistentGrantExpirationTime: 6
          requestPolicyRef:
            location: location
            id: id
          clientSecretRetentionPeriod: 9
          validateUsingAllEligibleAtms: true
          clientId: clientId
          requireJwtSecuredAuthorizationResponseMode: true
          pendingAuthorizationTimeoutOverride: 5
          persistentGrantExpirationTimeUnit: MINUTES
          requireDpop: true
          allowAuthenticationApiInit: true
          persistentGrantReuseGrantTypes:
          - IMPLICIT
          - IMPLICIT
          cibaRequestObjectSigningAlgorithm: RS256
          extendedParameters:
            key:
              values:
              - values
              - values
          jwtSecuredAuthorizationResponseModeSigningAlgorithm: RS256
          modificationDate: 2000-01-23T04:56:07.000+00:00
          defaultAccessTokenManagerRef:
            location: location
            id: id
          jwtSecuredAuthorizationResponseModeContentEncryptionAlgorithm: AES_128_CBC_HMAC_SHA_256
          refreshTokenRollingInterval: 0
          tokenExchangeProcessorPolicyRef:
            location: location
            id: id
          cibaPollingInterval: 2
          refreshRolling: SERVER_DEFAULT
          exclusiveScopes:
          - exclusiveScopes
          - exclusiveScopes
      properties:
        items:
          description: The actual list of OAuth clients.
          items:
            $ref: '#/components/schemas/Client'
          type: array
      type: object
    ClientMetadata:
      description: The client metadata.
      example:
        parameter: parameter
        description: description
        multiValued: true
      properties:
        parameter:
          description: The metadata name.
          type: string
        description:
          description: The metadata description.
          type: string
        multiValued:
          description: If the field should allow multiple values.
          type: boolean
      type: object
    ClientRegistrationOIDCPolicy:
      description: Client Registration Open ID Connect Policy settings.
      example:
        idTokenContentEncryptionAlgorithm: AES_128_CBC_HMAC_SHA_256
        idTokenEncryptionAlgorithm: DIR
        policyGroup:
          location: location
          id: id
        idTokenSigningAlgorithm: NONE
      properties:
        idTokenSigningAlgorithm:
          description: "The JSON Web Signature [JWS] algorithm required for the ID\
            \ Token.<br>NONE - No signing algorithm<br>HS256 - HMAC using SHA-256<br>HS384\
            \ - HMAC using SHA-384<br>HS512 - HMAC using SHA-512<br>RS256 - RSA using\
            \ SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256\
            \ - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve\
            \ and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 -\
            \ RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS\
            \ using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using\
            \ SHA-512 and MGF1 padding with SHA-512<br>A null value will represent\
            \ the default algorithm which is RS256.<br>RSASSA-PSS is only supported\
            \ with SafeNet Luna, Thales nCipher or Java 11"
          enum:
          - NONE
          - HS256
          - HS384
          - HS512
          - RS256
          - RS384
          - RS512
          - ES256
          - ES384
          - ES512
          - PS256
          - PS384
          - PS512
          type: string
        idTokenEncryptionAlgorithm:
          description: "The JSON Web Encryption [JWE] encryption algorithm used to\
            \ encrypt the content encryption key for the ID Token.<br>DIR - Direct\
            \ Encryption with symmetric key<br>A128KW - AES-128 Key Wrap<br>A192KW\
            \ - AES-192 Key Wrap<br>A256KW - AES-256 Key Wrap<br>A128GCMKW - AES-GCM-128\
            \ key encryption<br>A192GCMKW - AES-GCM-192 key encryption<br>A256GCMKW\
            \ - AES-GCM-256 key encryption<br>ECDH_ES - ECDH-ES<br>ECDH_ES_A128KW\
            \ - ECDH-ES with AES-128 Key Wrap<br>ECDH_ES_A192KW - ECDH-ES with AES-192\
            \ Key Wrap<br>ECDH_ES_A256KW - ECDH-ES with AES-256 Key Wrap<br>RSA_OAEP\
            \ - RSAES OAEP<br>RSA_OAEP_256 - RSAES OAEP using SHA-256 and MGF1 with\
            \ SHA-256"
          enum:
          - DIR
          - A128KW
          - A192KW
          - A256KW
          - A128GCMKW
          - A192GCMKW
          - A256GCMKW
          - ECDH_ES
          - ECDH_ES_A128KW
          - ECDH_ES_A192KW
          - ECDH_ES_A256KW
          - RSA_OAEP
          - RSA_OAEP_256
          type: string
        idTokenContentEncryptionAlgorithm:
          description: "The JSON Web Encryption [JWE] content encryption algorithm\
            \ for the ID Token.<br>AES_128_CBC_HMAC_SHA_256 - Composite AES-CBC-128\
            \ HMAC-SHA-256<br>AES_192_CBC_HMAC_SHA_384 - Composite AES-CBC-192 HMAC-SHA-384<br>AES_256_CBC_HMAC_SHA_512\
            \ - Composite AES-CBC-256 HMAC-SHA-512<br>AES_128_GCM - AES-GCM-128<br>AES_192_GCM\
            \ - AES-GCM-192<br>AES_256_GCM - AES-GCM-256"
          enum:
          - AES_128_CBC_HMAC_SHA_256
          - AES_192_CBC_HMAC_SHA_384
          - AES_256_CBC_HMAC_SHA_512
          - AES_128_GCM
          - AES_192_GCM
          - AES_256_GCM
          type: string
        policyGroup:
          $ref: '#/components/schemas/ResourceLink'
      type: object
    ClientSettings:
      description: The client settings.
      example:
        dynamicClientRegistration:
          initialAccessTokenScope: initialAccessTokenScope
          rotateClientSecret: true
          requireSignedRequests: true
          persistentGrantIdleTimeoutType: INDEFINITE_EXPIRY
          cibaRequireSignedRequests: true
          retainClientSecret: true
          refreshTokenRollingGracePeriod: 7
          restrictCommonScopes: true
          allowedExclusiveScopes:
          - allowedExclusiveScopes
          - allowedExclusiveScopes
          allowedAuthorizationDetailTypes:
          - allowedAuthorizationDetailTypes
          - allowedAuthorizationDetailTypes
          enforceReplayPrevention: true
          persistentGrantIdleTimeout: 6
          disableRegistrationAccessTokens: true
          oidcPolicy:
            idTokenContentEncryptionAlgorithm: AES_128_CBC_HMAC_SHA_256
            idTokenEncryptionAlgorithm: DIR
            policyGroup:
              location: location
              id: id
            idTokenSigningAlgorithm: NONE
          persistentGrantExpirationTime: 0
          requireProofKeyForCodeExchange: true
          clientSecretRetentionPeriodOverride: 9
          requestPolicyRef:
            location: location
            id: id
          rotateRegistrationAccessToken: true
          persistentGrantIdleTimeoutTimeUnit: MINUTES
          userAuthorizationUrlOverride: userAuthorizationUrlOverride
          restrictToDefaultAccessTokenManager: true
          pendingAuthorizationTimeoutOverride: 5
          requireJwtSecuredAuthorizationResponseMode: true
          persistentGrantExpirationTimeUnit: MINUTES
          policyRefs:
          - location: location
            id: id
          - location: location
            id: id
          bypassActivationCodeConfirmationOverride: true
          refreshTokenRollingGracePeriodType: SERVER_DEFAULT
          deviceFlowSettingType: SERVER_DEFAULT
          defaultAccessTokenManagerRef:
            location: location
            id: id
          refreshTokenRollingInterval: 1
          tokenExchangeProcessorPolicyRef:
            location: location
            id: id
          clientSecretRetentionPeriodType: clientSecretRetentionPeriodType
          restrictedCommonScopes:
          - restrictedCommonScopes
          - restrictedCommonScopes
          refreshTokenRollingIntervalType: SERVER_DEFAULT
          devicePollingIntervalOverride: 5
          clientCertIssuerRef:
            location: location
            id: id
          cibaPollingInterval: 2
          persistentGrantExpirationType: INDEFINITE_EXPIRY
          allowClientDelete: true
          clientCertIssuerType: NONE
          refreshRolling: SERVER_DEFAULT
        clientMetadata:
        - parameter: parameter
          description: description
          multiValued: true
        - parameter: parameter
          description: description
          multiValued: true
      properties:
        clientMetadata:
          description: The client metadata.
          items:
            $ref: '#/components/schemas/ClientMetadata'
          type: array
        dynamicClientRegistration:
          $ref: '#/components/schemas/DynamicClientRegistration'
      type: object
    DynamicClientRegistration:
      description: Dynamic client registration settings.
      example:
        initialAccessTokenScope: initialAccessTokenScope
        rotateClientSecret: true
        requireSignedRequests: true
        persistentGrantIdleTimeoutType: INDEFINITE_EXPIRY
        cibaRequireSignedRequests: true
        retainClientSecret: true
        refreshTokenRollingGracePeriod: 7
        restrictCommonScopes: true
        allowedExclusiveScopes:
        - allowedExclusiveScopes
        - allowedExclusiveScopes
        allowedAuthorizationDetailTypes:
        - allowedAuthorizationDetailTypes
        - allowedAuthorizationDetailTypes
        enforceReplayPrevention: true
        persistentGrantIdleTimeout: 6
        disableRegistrationAccessTokens: true
        oidcPolicy:
          idTokenContentEncryptionAlgorithm: AES_128_CBC_HMAC_SHA_256
          idTokenEncryptionAlgorithm: DIR
          policyGroup:
            location: location
            id: id
          idTokenSigningAlgorithm: NONE
        persistentGrantExpirationTime: 0
        requireProofKeyForCodeExchange: true
        clientSecretRetentionPeriodOverride: 9
        requestPolicyRef:
          location: location
          id: id
        rotateRegistrationAccessToken: true
        persistentGrantIdleTimeoutTimeUnit: MINUTES
        userAuthorizationUrlOverride: userAuthorizationUrlOverride
        restrictToDefaultAccessTokenManager: true
        pendingAuthorizationTimeoutOverride: 5
        requireJwtSecuredAuthorizationResponseMode: true
        persistentGrantExpirationTimeUnit: MINUTES
        policyRefs:
        - location: location
          id: id
        - location: location
          id: id
        bypassActivationCodeConfirmationOverride: true
        refreshTokenRollingGracePeriodType: SERVER_DEFAULT
        deviceFlowSettingType: SERVER_DEFAULT
        defaultAccessTokenManagerRef:
          location: location
          id: id
        refreshTokenRollingInterval: 1
        tokenExchangeProcessorPolicyRef:
          location: location
          id: id
        clientSecretRetentionPeriodType: clientSecretRetentionPeriodType
        restrictedCommonScopes:
        - restrictedCommonScopes
        - restrictedCommonScopes
        refreshTokenRollingIntervalType: SERVER_DEFAULT
        devicePollingIntervalOverride: 5
        clientCertIssuerRef:
          location: location
          id: id
        cibaPollingInterval: 2
        persistentGrantExpirationType: INDEFINITE_EXPIRY
        allowClientDelete: true
        clientCertIssuerType: NONE
        refreshRolling: SERVER_DEFAULT
      properties:
        initialAccessTokenScope:
          description: The initial access token to prevent unwanted client registrations.
          type: string
        restrictCommonScopes:
          description: Restrict common scopes.
          type: boolean
        restrictedCommonScopes:
          description: The common scopes to restrict.
          items:
            type: string
          type: array
        allowedExclusiveScopes:
          description: The exclusive scopes to allow.
          items:
            type: string
          type: array
        allowedAuthorizationDetailTypes:
          description: The authorization detail types to allow.
          items:
            type: string
          type: array
        enforceReplayPrevention:
          description: Enforce replay prevention.
          type: boolean
        requireSignedRequests:
          description: Require signed requests.
          type: boolean
        defaultAccessTokenManagerRef:
          $ref: '#/components/schemas/ResourceLink'
        restrictToDefaultAccessTokenManager:
          description: Determines whether the client is restricted to using only its
            default access token manager. The default is false.
          type: boolean
        persistentGrantExpirationType:
          description: Allows an administrator to override the Persistent Grant Lifetime
            set globally for the OAuth AS. Defaults to SERVER_DEFAULT.
          enum:
          - INDEFINITE_EXPIRY
          - SERVER_DEFAULT
          - OVERRIDE_SERVER_DEFAULT
          type: string
        persistentGrantExpirationTime:
          description: The persistent grant expiration time.
          format: int64
          type: integer
        persistentGrantExpirationTimeUnit:
          description: The persistent grant expiration time unit.
          enum:
          - MINUTES
          - DAYS
          - HOURS
          type: string
        persistentGrantIdleTimeoutType:
          description: Allows an administrator to override the Persistent Grant Idle
            Timeout set globally for the OAuth AS. Defaults to SERVER_DEFAULT.
          enum:
          - INDEFINITE_EXPIRY
          - SERVER_DEFAULT
          - OVERRIDE_SERVER_DEFAULT
          type: string
        persistentGrantIdleTimeout:
          description: The persistent grant idle timeout.
          format: int64
          type: integer
        persistentGrantIdleTimeoutTimeUnit:
          description: The persistent grant idle timeout time unit.
          enum:
          - MINUTES
          - DAYS
          - HOURS
          type: string
        clientCertIssuerType:
          description: Client TLS Certificate Issuer Type.
          enum:
          - NONE
          - TRUST_ANY
          - CERTIFICATE
          type: string
        clientCertIssuerRef:
          $ref: '#/components/schemas/ResourceLink'
        refreshRolling:
          description: Use ROLL or DONT_ROLL to override the Roll Refresh Token Values
            setting on the Authorization Server Settings. SERVER_DEFAULT will default
            to the Roll Refresh Token Values setting on the Authorization Server Setting
            screen. Defaults to SERVER_DEFAULT.
          enum:
          - SERVER_DEFAULT
          - DONT_ROLL
          - ROLL
          type: string
        refreshTokenRollingIntervalType:
          description: Use OVERRIDE_SERVER_DEFAULT to override the Refresh Token Rolling
            Interval value on the Authorization Server Settings. SERVER_DEFAULT will
            default to the Refresh Token Rolling Interval value on the Authorization
            Server Setting. Defaults to SERVER_DEFAULT.
          enum:
          - SERVER_DEFAULT
          - OVERRIDE_SERVER_DEFAULT
          type: string
        refreshTokenRollingInterval:
          description: "The minimum interval to roll refresh tokens, in hours. This\
            \ value will override the Refresh Token Rolling Interval Value on the\
            \ Authorization Server Settings."
          format: int64
          type: integer
        oidcPolicy:
          $ref: '#/components/schemas/ClientRegistrationOIDCPolicy'
        policyRefs:
          description: The client registration policies.
          items:
            $ref: '#/components/schemas/ResourceLink'
          type: array
        deviceFlowSettingType:
          description: Allows an administrator to override the Device Authorization
            Settings set globally for the OAuth AS. Defaults to SERVER_DEFAULT.
          enum:
          - SERVER_DEFAULT
          - OVERRIDE_SERVER_DEFAULT
          type: string
        userAuthorizationUrlOverride:
          description: The URL is used as 'verification_url' and 'verification_url_complete'
            values in a Device Authorization request.
          type: string
        pendingAuthorizationTimeoutOverride:
          description: "The 'device_code' and 'user_code' timeout, in seconds."
          format: int32
          type: integer
        devicePollingIntervalOverride:
          description: "The amount of time client should wait between polling requests,\
            \ in seconds."
          format: int32
          type: integer
        bypassActivationCodeConfirmationOverride:
          description: Indicates if the Activation Code Confirmation page should be
            bypassed if 'verification_url_complete' is used by the end user to authorize
            a device.
          type: boolean
        requireProofKeyForCodeExchange:
          description: Determines whether Proof Key for Code Exchange (PKCE) is required
            for the dynamically created client.
          type: boolean
        cibaPollingInterval:
          description: The minimum amount of time in seconds that the Client must
            wait between polling requests to the token endpoint. The default is 3
            seconds.
          format: int32
          type: integer
        cibaRequireSignedRequests:
          description: Determines whether CIBA signed requests are required for this
            client.
          type: boolean
        requestPolicyRef:
          $ref: '#/components/schemas/ResourceLink'
        tokenExchangeProcessorPolicyRef:
          $ref: '#/components/schemas/ResourceLink'
        rotateClientSecret:
          description: Rotate registration access token on dynamic client management
            requests.
          type: boolean
        rotateRegistrationAccessToken:
          description: Rotate client secret on dynamic client management requests.
          type: boolean
        allowClientDelete:
          description: Allow client deletion from dynamic client management.
          type: boolean
        disableRegistrationAccessTokens:
          description: "Disable registration access tokens. Local standards may mandate\
            \ different registration access token requirements. If applicable, implement\
            \ custom validation and enforcement rules using the DynamicClientRegistrationPlugin\
            \ interface from the PingFederate SDK, configure the client registration\
            \ policies (policyRefs), and set this property (disableRegistrationAccessTokens)\
            \ to true. CAUTION: When the disableRegistrationAccessTokens property\
            \ is set to true, all clients, not just the ones created using the Dynamic\
            \ Client Registration protocol, are vulnerable to unrestricted retrievals,\
            \ updates (including modifications to the client authentication scheme\
            \ and redirect URIs), and deletes at the /as/clients.oauth2 endpoint unless\
            \ one or more client registration policies are in place to protect against\
            \ unauthorized attempts."
          type: boolean
        refreshTokenRollingGracePeriodType:
          description: "When specified, it overrides the global Refresh Token Grace\
            \ Period defined in the Authorization Server Settings. The default value\
            \ is SERVER_DEFAULT"
          enum:
          - SERVER_DEFAULT
          - OVERRIDE_SERVER_DEFAULT
          type: string
        refreshTokenRollingGracePeriod:
          description: The grace period that a rolled refresh token remains valid
            in seconds.
          format: int32
          type: integer
        retainClientSecret:
          description: Temporarily retain the old client secret on client secret change.
          type: boolean
        clientSecretRetentionPeriodType:
          description: Use OVERRIDE_SERVER_DEFAULT to override the Client Secret Retention
            Period value on the Authorization Server Settings. SERVER_DEFAULT will
            default to the Client Secret Retention Period value on the Authorization
            Server Setting. Defaults to SERVER_DEFAULT.
          type: string
        clientSecretRetentionPeriodOverride:
          description: "The length of time in minutes that client secrets will be\
            \ retained as secondary secrets after secret change. The default value\
            \ is 0, which will disable secondary client secret retention. This value\
            \ will override the Client Secret Retention Period value on the Authorization\
            \ Server Settings."
          format: int32
          type: integer
        requireJwtSecuredAuthorizationResponseMode:
          description: Determines whether JWT Secured authorization response mode
            is required when initiating an authorization request. The default is false.
          type: boolean
      type: object
    ClientRegistrationPolicyDescriptors:
      description: A collection of client registration policy plugin descriptors.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The list of client registration policy plugin descriptors.
          items:
            $ref: '#/components/schemas/ClientRegistrationPolicyDescriptor'
          type: array
      type: object
    ClientRegistrationPolicies:
      description: A collection of client registration policy plugin instances.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The list of client registration policy plugin instances.
          items:
            $ref: '#/components/schemas/ClientRegistrationPolicy'
          type: array
      type: object
    IdpAdapterMapping:
      description: The OAuth IdP Adapter Mapping.
      example:
        attributeContractFulfillment:
          key:
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
        idpAdapterRef:
          location: location
          id: id
        id: id
        attributeSources:
        - null
        - null
        issuanceCriteria:
          expressionCriteria:
          - expression: expression
            errorResult: errorResult
          - expression: expression
            errorResult: errorResult
          conditionalCriteria:
          - condition: EQUALS
            errorResult: errorResult
            attributeName: attributeName
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
          - condition: EQUALS
            errorResult: errorResult
            attributeName: attributeName
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
      properties:
        id:
          description: The ID of the adapter mapping.
          type: string
        idpAdapterRef:
          $ref: '#/components/schemas/ResourceLink'
        attributeSources:
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: '#/components/schemas/AttributeSourceAggregation'
          type: array
        attributeContractFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of mappings from attribute names to their fulfillment
            values.
          type: object
        issuanceCriteria:
          $ref: '#/components/schemas/IssuanceCriteria'
      required:
      - attributeContractFulfillment
      - id
      type: object
    IdpAdapterMappings:
      description: A collection of OAuth IdP adapter mapping items.
      example:
        items:
        - attributeContractFulfillment:
            key:
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          idpAdapterRef:
            location: location
            id: id
          id: id
          attributeSources:
          - null
          - null
          issuanceCriteria:
            expressionCriteria:
            - expression: expression
              errorResult: errorResult
            - expression: expression
              errorResult: errorResult
            conditionalCriteria:
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
        - attributeContractFulfillment:
            key:
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          idpAdapterRef:
            location: location
            id: id
          id: id
          attributeSources:
          - null
          - null
          issuanceCriteria:
            expressionCriteria:
            - expression: expression
              errorResult: errorResult
            - expression: expression
              errorResult: errorResult
            conditionalCriteria:
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
      properties:
        items:
          description: The actual list of OAuth IdP adapter mappings.
          items:
            $ref: '#/components/schemas/IdpAdapterMapping'
          type: array
      type: object
    OutOfBandAuthPluginDescriptors:
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The list of out of band authenticator plugin descriptors.
          items:
            $ref: '#/components/schemas/OutOfBandAuthPluginDescriptor'
          type: array
      type: object
    OutOfBandAuthenticators:
      description: A collection of out of band authenticator plugin instances.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The list of out of band authenticator plugin instances.
          items:
            $ref: '#/components/schemas/OutOfBandAuthenticator'
          type: array
      type: object
    OAuthOidcKeysSettings:
      description: Setting for OAuth/OpenID Connect signing and decryption key settings.
      example:
        p384DecryptionPublishX5cParameter: true
        p256DecryptionActiveCertRef:
          location: location
          id: id
        p521ActiveCertRef:
          location: location
          id: id
        rsaActiveCertRef:
          location: location
          id: id
        p521DecryptionActiveCertRef:
          location: location
          id: id
        p384DecryptionPreviousCertRef:
          location: location
          id: id
        rsaDecryptionPreviousCertRef:
          location: location
          id: id
        p521DecryptionPublishX5cParameter: true
        p521PublishX5cParameter: true
        p384DecryptionActiveCertRef:
          location: location
          id: id
        p521PreviousCertRef:
          location: location
          id: id
        rsaDecryptionPublishX5cParameter: true
        rsaPreviousCertRef:
          location: location
          id: id
        p384PreviousCertRef:
          location: location
          id: id
        rsaDecryptionActiveCertRef:
          location: location
          id: id
        p256ActiveCertRef:
          location: location
          id: id
        p256DecryptionPublishX5cParameter: true
        p384ActiveCertRef:
          location: location
          id: id
        p384PublishX5cParameter: true
        p256PublishX5cParameter: true
        p521DecryptionPreviousCertRef:
          location: location
          id: id
        p256PreviousCertRef:
          location: location
          id: id
        p256DecryptionPreviousCertRef:
          location: location
          id: id
        staticJwksEnabled: true
        rsaPublishX5cParameter: true
      properties:
        staticJwksEnabled:
          description: Enable static keys.
          type: boolean
        p256ActiveCertRef:
          $ref: '#/components/schemas/ResourceLink'
        p256PreviousCertRef:
          $ref: '#/components/schemas/ResourceLink'
        p256PublishX5cParameter:
          description: Enable publishing of the P-256 certificate chain associated
            with the active key.
          type: boolean
        p384ActiveCertRef:
          $ref: '#/components/schemas/ResourceLink'
        p384PreviousCertRef:
          $ref: '#/components/schemas/ResourceLink'
        p384PublishX5cParameter:
          description: Enable publishing of the P-384 certificate chain associated
            with the active key.
          type: boolean
        p521ActiveCertRef:
          $ref: '#/components/schemas/ResourceLink'
        p521PreviousCertRef:
          $ref: '#/components/schemas/ResourceLink'
        p521PublishX5cParameter:
          description: Enable publishing of the P-521 certificate chain associated
            with the active key.
          type: boolean
        rsaActiveCertRef:
          $ref: '#/components/schemas/ResourceLink'
        rsaPreviousCertRef:
          $ref: '#/components/schemas/ResourceLink'
        rsaPublishX5cParameter:
          description: Enable publishing of the RSA certificate chain associated with
            the active key.
          type: boolean
        p256DecryptionActiveCertRef:
          $ref: '#/components/schemas/ResourceLink'
        p256DecryptionPreviousCertRef:
          $ref: '#/components/schemas/ResourceLink'
        p256DecryptionPublishX5cParameter:
          description: Enable publishing of the P-256 certificate chain associated
            with the active key.
          type: boolean
        p384DecryptionActiveCertRef:
          $ref: '#/components/schemas/ResourceLink'
        p384DecryptionPreviousCertRef:
          $ref: '#/components/schemas/ResourceLink'
        p384DecryptionPublishX5cParameter:
          description: Enable publishing of the P-384 certificate chain associated
            with the active key.
          type: boolean
        p521DecryptionActiveCertRef:
          $ref: '#/components/schemas/ResourceLink'
        p521DecryptionPreviousCertRef:
          $ref: '#/components/schemas/ResourceLink'
        p521DecryptionPublishX5cParameter:
          description: Enable publishing of the P-521 certificate chain associated
            with the active key.
          type: boolean
        rsaDecryptionActiveCertRef:
          $ref: '#/components/schemas/ResourceLink'
        rsaDecryptionPreviousCertRef:
          $ref: '#/components/schemas/ResourceLink'
        rsaDecryptionPublishX5cParameter:
          description: Enable publishing of the RSA certificate chain associated with
            the active key.
          type: boolean
      required:
      - staticJwksEnabled
      type: object
    AdditionalKeySet:
      description: The attributes used to configure an OAuth/OpenID Connect additional
        signing key set with virtual issuers.
      example:
        signingKeys:
          p256ActiveCertRef:
            location: location
            id: id
          rsaPreviousCertRef:
            location: location
            id: id
          p521ActiveCertRef:
            location: location
            id: id
          p384ActiveCertRef:
            location: location
            id: id
          p384PublishX5cParameter: true
          p256PublishX5cParameter: true
          p256PreviousCertRef:
            location: location
            id: id
          rsaActiveCertRef:
            location: location
            id: id
          p521PublishX5cParameter: true
          p384PreviousCertRef:
            location: location
            id: id
          p521PreviousCertRef:
            location: location
            id: id
          rsaPublishX5cParameter: true
        name: name
        description: description
        id: id
        issuers:
        - location: location
          id: id
        - location: location
          id: id
      properties:
        id:
          description: "The unique ID for the key set. It can be any combination of\
            \ [a-zA-Z0-9._-]. This property is system-assigned if not specified."
          type: string
        name:
          description: The key set name.
          type: string
        description:
          description: A description of the key set.
          type: string
        signingKeys:
          $ref: '#/components/schemas/SigningKeys'
        issuers:
          description: "A list of virtual issuers that will use the current key set.\
            \ Once assigned to a key set, the same virtual issuer cannot be assigned\
            \ to another key set instance."
          items:
            $ref: '#/components/schemas/ResourceLink'
          type: array
      required:
      - issuers
      - name
      - signingKeys
      type: object
    SigningKeys:
      description: Setting for a OAuth/OpenID Connect signing key set while using
        multiple virtual issuers.
      example:
        p256ActiveCertRef:
          location: location
          id: id
        rsaPreviousCertRef:
          location: location
          id: id
        p521ActiveCertRef:
          location: location
          id: id
        p384ActiveCertRef:
          location: location
          id: id
        p384PublishX5cParameter: true
        p256PublishX5cParameter: true
        p256PreviousCertRef:
          location: location
          id: id
        rsaActiveCertRef:
          location: location
          id: id
        p521PublishX5cParameter: true
        p384PreviousCertRef:
          location: location
          id: id
        p521PreviousCertRef:
          location: location
          id: id
        rsaPublishX5cParameter: true
      properties:
        p256ActiveCertRef:
          $ref: '#/components/schemas/ResourceLink'
        p256PreviousCertRef:
          $ref: '#/components/schemas/ResourceLink'
        p256PublishX5cParameter:
          description: Enable publishing of the P-256 certificate chain associated
            with the active key.
          type: boolean
        p384ActiveCertRef:
          $ref: '#/components/schemas/ResourceLink'
        p384PreviousCertRef:
          $ref: '#/components/schemas/ResourceLink'
        p384PublishX5cParameter:
          description: Enable publishing of the P-384 certificate chain associated
            with the active key.
          type: boolean
        p521ActiveCertRef:
          $ref: '#/components/schemas/ResourceLink'
        p521PreviousCertRef:
          $ref: '#/components/schemas/ResourceLink'
        p521PublishX5cParameter:
          description: Enable publishing of the P-521 certificate chain associated
            with the active key.
          type: boolean
        rsaActiveCertRef:
          $ref: '#/components/schemas/ResourceLink'
        rsaPreviousCertRef:
          $ref: '#/components/schemas/ResourceLink'
        rsaPublishX5cParameter:
          description: Enable publishing of the RSA certificate chain associated with
            the active key.
          type: boolean
      type: object
    AdditionalKeySets:
      description: A collection of OAuth/OpenID Connect additional signing key sets.
      example:
        items:
        - signingKeys:
            p256ActiveCertRef:
              location: location
              id: id
            rsaPreviousCertRef:
              location: location
              id: id
            p521ActiveCertRef:
              location: location
              id: id
            p384ActiveCertRef:
              location: location
              id: id
            p384PublishX5cParameter: true
            p256PublishX5cParameter: true
            p256PreviousCertRef:
              location: location
              id: id
            rsaActiveCertRef:
              location: location
              id: id
            p521PublishX5cParameter: true
            p384PreviousCertRef:
              location: location
              id: id
            p521PreviousCertRef:
              location: location
              id: id
            rsaPublishX5cParameter: true
          name: name
          description: description
          id: id
          issuers:
          - location: location
            id: id
          - location: location
            id: id
        - signingKeys:
            p256ActiveCertRef:
              location: location
              id: id
            rsaPreviousCertRef:
              location: location
              id: id
            p521ActiveCertRef:
              location: location
              id: id
            p384ActiveCertRef:
              location: location
              id: id
            p384PublishX5cParameter: true
            p256PublishX5cParameter: true
            p256PreviousCertRef:
              location: location
              id: id
            rsaActiveCertRef:
              location: location
              id: id
            p521PublishX5cParameter: true
            p384PreviousCertRef:
              location: location
              id: id
            p521PreviousCertRef:
              location: location
              id: id
            rsaPublishX5cParameter: true
          name: name
          description: description
          id: id
          issuers:
          - location: location
            id: id
          - location: location
            id: id
      properties:
        items:
          description: The actual list of signing key sets.
          items:
            $ref: '#/components/schemas/AdditionalKeySet'
          type: array
      type: object
    ResourceOwnerCredentialsMapping:
      description: The OAuth Resource Owner Credentials Mapping.
      example:
        passwordValidatorRef:
          location: location
          id: id
        attributeContractFulfillment:
          key:
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
        id: id
        attributeSources:
        - null
        - null
        issuanceCriteria:
          expressionCriteria:
          - expression: expression
            errorResult: errorResult
          - expression: expression
            errorResult: errorResult
          conditionalCriteria:
          - condition: EQUALS
            errorResult: errorResult
            attributeName: attributeName
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
          - condition: EQUALS
            errorResult: errorResult
            attributeName: attributeName
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
      properties:
        id:
          description: The ID of the Resource Owner Credentials Mapping.
          type: string
        passwordValidatorRef:
          $ref: '#/components/schemas/ResourceLink'
        attributeSources:
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: '#/components/schemas/AttributeSourceAggregation'
          type: array
        attributeContractFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of mappings from attribute names to their fulfillment
            values.
          type: object
        issuanceCriteria:
          $ref: '#/components/schemas/IssuanceCriteria'
      required:
      - attributeContractFulfillment
      - id
      type: object
    ResourceOwnerCredentialsMappings:
      description: A collection of OAuth Resource Owner Credentials mapping items.
      example:
        items:
        - passwordValidatorRef:
            location: location
            id: id
          attributeContractFulfillment:
            key:
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          id: id
          attributeSources:
          - null
          - null
          issuanceCriteria:
            expressionCriteria:
            - expression: expression
              errorResult: errorResult
            - expression: expression
              errorResult: errorResult
            conditionalCriteria:
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
        - passwordValidatorRef:
            location: location
            id: id
          attributeContractFulfillment:
            key:
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          id: id
          attributeSources:
          - null
          - null
          issuanceCriteria:
            expressionCriteria:
            - expression: expression
              errorResult: errorResult
            - expression: expression
              errorResult: errorResult
            conditionalCriteria:
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
      properties:
        items:
          description: The actual list of OAuth Resource Owner Credentials Grant Mapping.
          items:
            $ref: '#/components/schemas/ResourceOwnerCredentialsMapping'
          type: array
      type: object
    OIDCSessionSettings:
      description: Settings relating to OpenID Connect session management.
      example:
        sessionRevocationLifetime: 0
        trackUserSessionsForLogout: true
        revokeUserSessionOnLogout: true
      properties:
        trackUserSessionsForLogout:
          description: Determines whether user sessions are tracked for logout. This
            property is now available under /oauth/authServerSettings and should be
            accessed through that resource.
          type: boolean
        revokeUserSessionOnLogout:
          description: Determines whether the user's session is revoked on logout.
            This property is now available under /session/settings and should be accessed
            through that resource.
          type: boolean
        sessionRevocationLifetime:
          description: "How long a session revocation is tracked and stored, in minutes.\
            \ This property is now available under /session/settings and should be\
            \ accessed through that resource."
          format: int32
          type: integer
      type: object
    OpenIdConnectSettings:
      description: Settings for the OpenID Connect configuration.
      example:
        defaultPolicyRef:
          location: location
          id: id
        sessionSettings:
          sessionRevocationLifetime: 0
          trackUserSessionsForLogout: true
          revokeUserSessionOnLogout: true
      properties:
        defaultPolicyRef:
          $ref: '#/components/schemas/ResourceLink'
        sessionSettings:
          $ref: '#/components/schemas/OIDCSessionSettings'
      type: object
    OpenIdConnectAttribute:
      description: An attribute for the OpenID Connect returned to OAuth clients.
      example:
        includeInUserInfo: true
        name: name
        includeInIdToken: true
        multiValued: true
      properties:
        name:
          description: The name of this attribute.
          type: string
        includeInIdToken:
          description: Attribute is included in the ID Token.
          type: boolean
        includeInUserInfo:
          description: Attribute is included in the User Info.
          type: boolean
        multiValued:
          description: Indicates whether attribute value is always returned as an
            array.
          type: boolean
      required:
      - name
      type: object
    OpenIdConnectAttributeContract:
      description: A set of attributes that will be returned to OAuth clients in response
        to requests received at the PingFederate UserInfo endpoint.
      example:
        coreAttributes:
        - includeInUserInfo: true
          name: name
          includeInIdToken: true
          multiValued: true
        - includeInUserInfo: true
          name: name
          includeInIdToken: true
          multiValued: true
        extendedAttributes:
        - includeInUserInfo: true
          name: name
          includeInIdToken: true
          multiValued: true
        - includeInUserInfo: true
          name: name
          includeInIdToken: true
          multiValued: true
      properties:
        coreAttributes:
          description: "A list of read-only attributes (for example, sub) that are\
            \ automatically populated by PingFederate."
          items:
            $ref: '#/components/schemas/OpenIdConnectAttribute'
          type: array
        extendedAttributes:
          description: A list of additional attributes.
          items:
            $ref: '#/components/schemas/OpenIdConnectAttribute'
          type: array
      type: object
    OpenIdConnectPolicies:
      description: A collection of OpenID Connect policies.
      example:
        items:
        - idTokenTypHeaderValue: idTokenTypHeaderValue
          scopeAttributeMappings:
            key:
              values:
              - values
              - values
          returnIdTokenOnRefreshGrant: true
          includeSriInIdToken: true
          includeSHashInIdToken: true
          includeUserInfoInIdToken: true
          attributeContract:
            coreAttributes:
            - includeInUserInfo: true
              name: name
              includeInIdToken: true
              multiValued: true
            - includeInUserInfo: true
              name: name
              includeInIdToken: true
              multiValued: true
            extendedAttributes:
            - includeInUserInfo: true
              name: name
              includeInIdToken: true
              multiValued: true
            - includeInUserInfo: true
              name: name
              includeInIdToken: true
              multiValued: true
          attributeMapping:
            attributeContractFulfillment:
              key:
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
            attributeSources:
            - null
            - null
            issuanceCriteria:
              expressionCriteria:
              - expression: expression
                errorResult: errorResult
              - expression: expression
                errorResult: errorResult
              conditionalCriteria:
              - condition: EQUALS
                errorResult: errorResult
                attributeName: attributeName
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
              - condition: EQUALS
                errorResult: errorResult
                attributeName: attributeName
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
          includeX5tInIdToken: true
          name: name
          id: id
          reissueIdTokenInHybridFlow: true
          lastModified: 2000-01-23T04:56:07.000+00:00
          idTokenLifetime: 0
          accessTokenManagerRef:
            location: location
            id: id
        - idTokenTypHeaderValue: idTokenTypHeaderValue
          scopeAttributeMappings:
            key:
              values:
              - values
              - values
          returnIdTokenOnRefreshGrant: true
          includeSriInIdToken: true
          includeSHashInIdToken: true
          includeUserInfoInIdToken: true
          attributeContract:
            coreAttributes:
            - includeInUserInfo: true
              name: name
              includeInIdToken: true
              multiValued: true
            - includeInUserInfo: true
              name: name
              includeInIdToken: true
              multiValued: true
            extendedAttributes:
            - includeInUserInfo: true
              name: name
              includeInIdToken: true
              multiValued: true
            - includeInUserInfo: true
              name: name
              includeInIdToken: true
              multiValued: true
          attributeMapping:
            attributeContractFulfillment:
              key:
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
            attributeSources:
            - null
            - null
            issuanceCriteria:
              expressionCriteria:
              - expression: expression
                errorResult: errorResult
              - expression: expression
                errorResult: errorResult
              conditionalCriteria:
              - condition: EQUALS
                errorResult: errorResult
                attributeName: attributeName
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
              - condition: EQUALS
                errorResult: errorResult
                attributeName: attributeName
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
          includeX5tInIdToken: true
          name: name
          id: id
          reissueIdTokenInHybridFlow: true
          lastModified: 2000-01-23T04:56:07.000+00:00
          idTokenLifetime: 0
          accessTokenManagerRef:
            location: location
            id: id
      properties:
        items:
          description: The actual list of policies.
          items:
            $ref: '#/components/schemas/OpenIdConnectPolicy'
          type: array
      type: object
    OpenIdConnectPolicy:
      description: The set of attributes used to configure an OpenID Connect policy.
      example:
        idTokenTypHeaderValue: idTokenTypHeaderValue
        scopeAttributeMappings:
          key:
            values:
            - values
            - values
        returnIdTokenOnRefreshGrant: true
        includeSriInIdToken: true
        includeSHashInIdToken: true
        includeUserInfoInIdToken: true
        attributeContract:
          coreAttributes:
          - includeInUserInfo: true
            name: name
            includeInIdToken: true
            multiValued: true
          - includeInUserInfo: true
            name: name
            includeInIdToken: true
            multiValued: true
          extendedAttributes:
          - includeInUserInfo: true
            name: name
            includeInIdToken: true
            multiValued: true
          - includeInUserInfo: true
            name: name
            includeInIdToken: true
            multiValued: true
        attributeMapping:
          attributeContractFulfillment:
            key:
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          attributeSources:
          - null
          - null
          issuanceCriteria:
            expressionCriteria:
            - expression: expression
              errorResult: errorResult
            - expression: expression
              errorResult: errorResult
            conditionalCriteria:
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
        includeX5tInIdToken: true
        name: name
        id: id
        reissueIdTokenInHybridFlow: true
        lastModified: 2000-01-23T04:56:07.000+00:00
        idTokenLifetime: 0
        accessTokenManagerRef:
          location: location
          id: id
      properties:
        id:
          description: The policy ID used internally.
          type: string
        name:
          description: The name used for display in UI screens.
          type: string
        accessTokenManagerRef:
          $ref: '#/components/schemas/ResourceLink'
        idTokenLifetime:
          description: "The ID Token Lifetime, in minutes. The default value is 5."
          format: int32
          type: integer
        includeSriInIdToken:
          description: Determines whether a Session Reference Identifier is included
            in the ID token.
          type: boolean
        includeUserInfoInIdToken:
          description: Determines whether the User Info is always included in the
            ID token.
          type: boolean
        includeSHashInIdToken:
          description: Determines whether the State Hash should be included in the
            ID token.
          type: boolean
        includeX5tInIdToken:
          description: Determines whether the X.509 thumbprint header should be included
            in the ID Token.
          type: boolean
        idTokenTypHeaderValue:
          description: ID Token Type (typ) Header Value.
          type: string
        returnIdTokenOnRefreshGrant:
          description: Determines whether an ID Token should be returned when refresh
            grant is requested or not.
          type: boolean
        reissueIdTokenInHybridFlow:
          description: Determines whether a new ID Token should be returned during
            token request of the hybrid flow.
          type: boolean
        attributeContract:
          $ref: '#/components/schemas/OpenIdConnectAttributeContract'
        attributeMapping:
          $ref: '#/components/schemas/AttributeMapping'
        scopeAttributeMappings:
          additionalProperties:
            $ref: '#/components/schemas/ParameterValues'
          description: The attribute scope mappings from scopes to attribute names.
          type: object
        lastModified:
          description: The time at which the policy was last changed. This property
            is read only and is ignored on PUT and POST requests.
          format: date-time
          type: string
      required:
      - accessTokenManagerRef
      - attributeContract
      - attributeMapping
      - id
      - name
      type: object
    PasswordCredentialValidatorDescriptors:
      description: A collection of password credential validator descriptors.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The list of password credential validator descriptors.
          items:
            $ref: '#/components/schemas/PasswordCredentialValidatorDescriptor'
          type: array
      type: object
    PasswordCredentialValidators:
      description: A collection of password credential validators.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The actual list of password credential validators.
          items:
            $ref: '#/components/schemas/PasswordCredentialValidator'
          type: array
      type: object
    PingOneConnection:
      description: PingOne connection.
      example:
        pingOneConnectionId: pingOneConnectionId
        organizationName: organizationName
        description: description
        active: true
        creationDate: 2000-01-23T04:56:07.000+00:00
        encryptedCredential: encryptedCredential
        environmentId: environmentId
        credential: credential
        name: name
        credentialId: credentialId
        pingOneAuthenticationApiEndpoint: pingOneAuthenticationApiEndpoint
        id: id
        region: region
        pingOneManagementApiEndpoint: pingOneManagementApiEndpoint
      properties:
        id:
          description: "The persistent, unique ID of the connection. This property\
            \ is system-assigned if not specified."
          type: string
        name:
          description: The name of the PingOne connection.
          type: string
        description:
          description: A description for the PingOne connection.
          type: string
        active:
          description: Whether or not this connection is active. Defaults to true.
          type: boolean
        credential:
          description: "The credential for the PingOne connection. To update the credential,\
            \ specify the plaintext value of the credential in this field. This field\
            \ will not be populated for GET requests."
          type: string
        encryptedCredential:
          description: "The encrypted credential for the PingOne connection. For POST\
            \ and PUT requests, if you wish to keep the existing credential, this\
            \ field should be passed back unchanged."
          type: string
        credentialId:
          description: The ID of the PingOne credential. This field is read only.
          type: string
        pingOneConnectionId:
          description: The ID of the PingOne connection. This field is read only.
          type: string
        environmentId:
          description: The ID of the environment of the PingOne credential. This field
            is read only.
          type: string
        creationDate:
          description: The creation date of the PingOne connection. This field is
            read only.
          format: date-time
          type: string
        organizationName:
          description: The name of the organization associated with this PingOne connection.
            This field is read only.
          type: string
        region:
          description: The region of the PingOne connection. This field is read only.
          type: string
        pingOneManagementApiEndpoint:
          description: The PingOne management API endpoint. This field is read only.
          type: string
        pingOneAuthenticationApiEndpoint:
          description: The PingOne authentication API endpoint. This field is read
            only.
          type: string
      required:
      - name
      type: object
    PingOneConnections:
      description: A collection of PingOne connections.
      example:
        items:
        - pingOneConnectionId: pingOneConnectionId
          organizationName: organizationName
          description: description
          active: true
          creationDate: 2000-01-23T04:56:07.000+00:00
          encryptedCredential: encryptedCredential
          environmentId: environmentId
          credential: credential
          name: name
          credentialId: credentialId
          pingOneAuthenticationApiEndpoint: pingOneAuthenticationApiEndpoint
          id: id
          region: region
          pingOneManagementApiEndpoint: pingOneManagementApiEndpoint
        - pingOneConnectionId: pingOneConnectionId
          organizationName: organizationName
          description: description
          active: true
          creationDate: 2000-01-23T04:56:07.000+00:00
          encryptedCredential: encryptedCredential
          environmentId: environmentId
          credential: credential
          name: name
          credentialId: credentialId
          pingOneAuthenticationApiEndpoint: pingOneAuthenticationApiEndpoint
          id: id
          region: region
          pingOneManagementApiEndpoint: pingOneManagementApiEndpoint
      properties:
        items:
          description: The list of PingOne connections.
          items:
            $ref: '#/components/schemas/PingOneConnection'
          type: array
      type: object
    PingOneCredentialStatus:
      description: PingOne credential Status
      example:
        pingOneCredentialStatus: VALID
      properties:
        pingOneCredentialStatus:
          description: The status of the PingOne connection credential.
          enum:
          - VALID
          - INVALID
          - UNKNOWN
          type: string
      type: object
    PingOneEnvironment:
      example:
        name: name
        id: id
        type: type
      properties:
        name:
          description: The name of the environment
          type: string
        id:
          description: The ID of the environment
          type: string
        type:
          description: The type of the environment
          type: string
      type: object
    PingOneEnvironments:
      description: A collection of PingOne Environments.
      example:
        items:
        - name: name
          id: id
          type: type
        - name: name
          id: id
          type: type
      properties:
        items:
          description: The list of PingOne environments.
          items:
            $ref: '#/components/schemas/PingOneEnvironment'
          type: array
      type: object
    ResourceCategoryInfo:
      description: A model containing information on a category of resource in the
        administrative API.
      example:
        name: name
        id: IDP_CONNECTION
      properties:
        id:
          description: The ID of the resource category.
          enum:
          - IDP_CONNECTION
          - SP_CONNECTION
          - PASSWORD_CREDENTIAL_VALIDATOR
          - AUTHENTICATION_SELECTOR
          - IDP_ADAPTER
          - SP_ADAPTER
          - ACCESS_TOKEN_MGMT_PLUGIN
          - TOKEN_PROCESSOR
          - TOKEN_GENERATOR
          - NOTIFICATION_PUBLISHER
          - OOB_AUTH_PLUGIN
          - DATA_STORE
          - DYNAMIC_CLIENT_REGISTRATION_PLUGIN
          - RISK_PROVIDER
          - IDENTITY_STORE_PROVISIONER
          type: string
        name:
          description: The name of the resource category.
          type: string
      type: object
    ResourceUsage:
      description: An API model representing a reference to an API resource.
      example:
        ref:
          location: location
          id: id
        name: name
        id: id
        type: type
        categoryId: IDP_CONNECTION
      properties:
        id:
          description: The ID of the referencing resource.
          type: string
        name:
          description: The name of the referencing resource.
          type: string
        categoryId:
          description: The category of the referencing resource.
          enum:
          - IDP_CONNECTION
          - SP_CONNECTION
          - PASSWORD_CREDENTIAL_VALIDATOR
          - AUTHENTICATION_SELECTOR
          - IDP_ADAPTER
          - SP_ADAPTER
          - ACCESS_TOKEN_MGMT_PLUGIN
          - TOKEN_PROCESSOR
          - TOKEN_GENERATOR
          - NOTIFICATION_PUBLISHER
          - OOB_AUTH_PLUGIN
          - DATA_STORE
          - DYNAMIC_CLIENT_REGISTRATION_PLUGIN
          - RISK_PROVIDER
          - IDENTITY_STORE_PROVISIONER
          type: string
        type:
          description: "The type of the referencing resource. In the case of plugins,\
            \ this is the plugin type. Otherwise, it is usually the same as the name\
            \ of the category."
          type: string
        ref:
          $ref: '#/components/schemas/ResourceLink'
      type: object
    ResourceUsages:
      description: A collection of resource usages.
      example:
        categories:
        - name: name
          id: IDP_CONNECTION
        - name: name
          id: IDP_CONNECTION
        items:
        - ref:
            location: location
            id: id
          name: name
          id: id
          type: type
          categoryId: IDP_CONNECTION
        - ref:
            location: location
            id: id
          name: name
          id: id
          type: type
          categoryId: IDP_CONNECTION
      properties:
        categories:
          description: The static list of available resource categories.
          items:
            $ref: '#/components/schemas/ResourceCategoryInfo'
          type: array
        items:
          description: The actual list of resource usages.
          items:
            $ref: '#/components/schemas/ResourceUsage'
          type: array
      type: object
    ServiceAssociation:
      description: A model representing an association between a PingFederate component
        (typically a plugin) and a list of PingOne services.
      example:
        configured: true
        componentName: componentName
        serviceNames:
        - serviceNames
        - serviceNames
      properties:
        componentName:
          description: The display name for the component.
          type: string
        serviceNames:
          description: The list of PingOne services consumed by the plugin. The first
            service represents the primary service consumed by the plugin.
          items:
            type: string
          type: array
        configured:
          description: Indicates whether one or more instances of the plugin are configured
            for a given PingOne connection.
          type: boolean
      type: object
    ServiceAssociations:
      description: A list of installed components that consume PingOne services.
      example:
        items:
        - configured: true
          componentName: componentName
          serviceNames:
          - serviceNames
          - serviceNames
        - configured: true
          componentName: componentName
          serviceNames:
          - serviceNames
          - serviceNames
      properties:
        items:
          description: The actual list of component-to-service associations.
          items:
            $ref: '#/components/schemas/ServiceAssociation'
          type: array
      type: object
    PingOneForEnterpriseSettings:
      description: PingOne for Enterprise Settings
      example:
        pingOneSsoConnection:
          location: location
          id: id
        enableMonitoring: true
        enableAdminConsoleSso: true
        companyName: companyName
        currentAuthnKeyCreationTime: 2000-01-23T04:56:07.000+00:00
        connectedToPingOneForEnterprise: true
        identityRepositoryUpdateRequired: true
        previousAuthnKeyCreationTime: 2000-01-23T04:56:07.000+00:00
      properties:
        connectedToPingOneForEnterprise:
          description: A read only field indicating whether PingFederate is connected
            to PingOne for Enterprise.
          type: boolean
        pingOneSsoConnection:
          $ref: '#/components/schemas/ResourceLink'
        companyName:
          description: A read only field indicating the company name.
          type: string
        enableAdminConsoleSso:
          description: Indicates whether single sign on from PingOne for Enterprise
            to the PingFederate admin console is enabled. The default is false.
          type: boolean
        enableMonitoring:
          description: Indicates whether monitoring of PingFederate from PingOne for
            Enterprise is enabled. The default is true.
          type: boolean
        currentAuthnKeyCreationTime:
          description: A read only field indicating the creation time of the current
            authentication key.
          format: date-time
          type: string
        previousAuthnKeyCreationTime:
          description: A read only field indicating the creation time of the previous
            authentication key.
          format: date-time
          type: string
        identityRepositoryUpdateRequired:
          description: "A read-only field indicating whether changes were made in\
            \ the current PingFederate configuration that might affect your connection\
            \ with PingOne for Enterprise. For example, if you modified the attribute\
            \ contract of your SSO configuration. Update the identity repository to\
            \ keep your PingFederate and PingOne for Enterprise settings synchronized. "
          type: boolean
      type: object
    P14EKeyPairView:
      description: PingOne for Enterprise connection key pair details.
      example:
        keyPairView:
          expires: 2000-01-23T04:56:07.000+00:00
          serialNumber: serialNumber
          keyAlgorithm: keyAlgorithm
          keySize: 0
          subjectAlternativeNames:
          - subjectAlternativeNames
          - subjectAlternativeNames
          issuerDN: issuerDN
          cryptoProvider: LOCAL
          sha1Fingerprint: sha1Fingerprint
          validFrom: 2000-01-23T04:56:07.000+00:00
          version: 6
          signatureAlgorithm: signatureAlgorithm
          sha256Fingerprint: sha256Fingerprint
          id: id
          subjectDN: subjectDN
          status: VALID
        currentAuthenticationKey: true
        creationTime: 2000-01-23T04:56:07.000+00:00
        previousAuthenticationKey: true
      properties:
        currentAuthenticationKey:
          description: Indicates whether this is the current key used to authenticate
            with PingOne.
          type: boolean
        previousAuthenticationKey:
          description: Indicates whether this is the previous key used to authenticate
            with PingOne.
          type: boolean
        keyPairView:
          $ref: '#/components/schemas/CertView'
        creationTime:
          description: The creation time of the key.
          format: date-time
          type: string
      type: object
    P14EKeysView:
      description: The collection of PingOne for Enterprise connection key pair details.
      example:
        keyPairs:
        - keyPairView:
            expires: 2000-01-23T04:56:07.000+00:00
            serialNumber: serialNumber
            keyAlgorithm: keyAlgorithm
            keySize: 0
            subjectAlternativeNames:
            - subjectAlternativeNames
            - subjectAlternativeNames
            issuerDN: issuerDN
            cryptoProvider: LOCAL
            sha1Fingerprint: sha1Fingerprint
            validFrom: 2000-01-23T04:56:07.000+00:00
            version: 6
            signatureAlgorithm: signatureAlgorithm
            sha256Fingerprint: sha256Fingerprint
            id: id
            subjectDN: subjectDN
            status: VALID
          currentAuthenticationKey: true
          creationTime: 2000-01-23T04:56:07.000+00:00
          previousAuthenticationKey: true
        - keyPairView:
            expires: 2000-01-23T04:56:07.000+00:00
            serialNumber: serialNumber
            keyAlgorithm: keyAlgorithm
            keySize: 0
            subjectAlternativeNames:
            - subjectAlternativeNames
            - subjectAlternativeNames
            issuerDN: issuerDN
            cryptoProvider: LOCAL
            sha1Fingerprint: sha1Fingerprint
            validFrom: 2000-01-23T04:56:07.000+00:00
            version: 6
            signatureAlgorithm: signatureAlgorithm
            sha256Fingerprint: sha256Fingerprint
            id: id
            subjectDN: subjectDN
            status: VALID
          currentAuthenticationKey: true
          creationTime: 2000-01-23T04:56:07.000+00:00
          previousAuthenticationKey: true
      properties:
        keyPairs:
          description: The key pairs used to authenticate to PingOne for Enterprise
          items:
            $ref: '#/components/schemas/P14EKeyPairView'
          type: array
      type: object
    MetadataLifetimeSettings:
      description: Metadata lifetime settings.
      example:
        cacheDuration: 0
        reloadDelay: 6
      properties:
        cacheDuration:
          description: This field adjusts the validity of your metadata in minutes.
            The default value is 1440 (1 day).
          format: int32
          type: integer
        reloadDelay:
          description: This field adjusts the frequency of automatic reloading of
            SAML metadata in minutes. The default value is 1440 (1 day).
          format: int64
          type: integer
      type: object
    MetadataSigningSettings:
      description: "Metadata signing settings. If metadata is not signed, this model\
        \ will be empty."
      example:
        signingKeyRef:
          location: location
          id: id
        signatureAlgorithm: signatureAlgorithm
      properties:
        signingKeyRef:
          $ref: '#/components/schemas/ResourceLink'
        signatureAlgorithm:
          description: "Signature algorithm. If this property is unset, the default\
            \ signature algorithm for the key algorithm will be used. Supported signature\
            \ algorithms are available through the /keyPairs/keyAlgorithms endpoint."
          type: string
      type: object
    RedirectValidationLocalSettings:
      description: Settings for local redirect validation.
      example:
        enableTargetResourceValidationForSLO: true
        enableInErrorResourceValidation: true
        whiteList:
        - validDomain: validDomain
          validPath: validPath
          allowQueryAndFragment: true
          requireHttps: true
          inErrorResource: true
          idpDiscovery: true
          targetResourceSLO: true
          targetResourceSSO: true
        - validDomain: validDomain
          validPath: validPath
          allowQueryAndFragment: true
          requireHttps: true
          inErrorResource: true
          idpDiscovery: true
          targetResourceSLO: true
          targetResourceSSO: true
        enableTargetResourceValidationForSSO: true
        enableTargetResourceValidationForIdpDiscovery: true
      properties:
        enableTargetResourceValidationForSSO:
          description: Enable target resource validation for SSO.
          type: boolean
        enableTargetResourceValidationForSLO:
          description: Enable target resource validation for SLO.
          type: boolean
        enableTargetResourceValidationForIdpDiscovery:
          description: Enable target resource validation for IdP discovery.
          type: boolean
        enableInErrorResourceValidation:
          description: Enable validation for error resource.
          type: boolean
        whiteList:
          description: List of URLs that are designated as valid target resources.
          items:
            $ref: '#/components/schemas/RedirectValidationSettingsWhitelistEntry'
          type: array
      type: object
    RedirectValidationPartnerSettings:
      description: Settings for redirection at a partner site.
      example:
        enableWreplyValidationSLO: true
      properties:
        enableWreplyValidationSLO:
          description: Enable wreply validation for SLO.
          type: boolean
      type: object
    RedirectValidationSettings:
      description: "Settings for redirect validation for SSO, SLO and IdP discovery."
      example:
        redirectValidationLocalSettings:
          enableTargetResourceValidationForSLO: true
          enableInErrorResourceValidation: true
          whiteList:
          - validDomain: validDomain
            validPath: validPath
            allowQueryAndFragment: true
            requireHttps: true
            inErrorResource: true
            idpDiscovery: true
            targetResourceSLO: true
            targetResourceSSO: true
          - validDomain: validDomain
            validPath: validPath
            allowQueryAndFragment: true
            requireHttps: true
            inErrorResource: true
            idpDiscovery: true
            targetResourceSLO: true
            targetResourceSSO: true
          enableTargetResourceValidationForSSO: true
          enableTargetResourceValidationForIdpDiscovery: true
        redirectValidationPartnerSettings:
          enableWreplyValidationSLO: true
      properties:
        redirectValidationLocalSettings:
          $ref: '#/components/schemas/RedirectValidationLocalSettings'
        redirectValidationPartnerSettings:
          $ref: '#/components/schemas/RedirectValidationPartnerSettings'
      type: object
    RedirectValidationSettingsWhitelistEntry:
      description: Whitelist entry for valid target resource.
      example:
        validDomain: validDomain
        validPath: validPath
        allowQueryAndFragment: true
        requireHttps: true
        inErrorResource: true
        idpDiscovery: true
        targetResourceSLO: true
        targetResourceSSO: true
      properties:
        targetResourceSSO:
          description: Enable this target resource for SSO redirect validation.
          type: boolean
        targetResourceSLO:
          description: Enable this target resource for SLO redirect validation.
          type: boolean
        inErrorResource:
          description: Enable this target resource for in error resource validation.
          type: boolean
        idpDiscovery:
          description: Enable this target resource for IdP discovery validation.
          type: boolean
        validDomain:
          description: Domain of a valid resource.
          type: string
        validPath:
          description: Path of a valid resource.
          type: string
        allowQueryAndFragment:
          description: Allow any query parameters and fragment in the resource.
          type: boolean
        requireHttps:
          description: Require HTTPS for accessing this resource.
          type: boolean
      required:
      - validDomain
      type: object
    KeyAlgorithm:
      description: Details for a key algorithm.
      example:
        defaultSignatureAlgorithm: defaultSignatureAlgorithm
        keySizes:
        - 0
        - 0
        defaultKeySize: 6
        name: name
        signatureAlgorithms:
        - signatureAlgorithms
        - signatureAlgorithms
      properties:
        name:
          description: Name of the key algorithm.
          type: string
        keySizes:
          description: "Possible key sizes for this algorithm, in bits."
          items:
            format: int32
            type: integer
          type: array
        defaultKeySize:
          description: Default key size for this algorithm.
          format: int32
          type: integer
        signatureAlgorithms:
          description: Possible signature algorithms for this key algorithm.
          items:
            type: string
          type: array
        defaultSignatureAlgorithm:
          description: Default signature algorithm for this key algorithm.
          type: string
      type: object
    KeyAlgorithms:
      description: A collection of key algorithms.
      example:
        items:
        - defaultSignatureAlgorithm: defaultSignatureAlgorithm
          keySizes:
          - 0
          - 0
          defaultKeySize: 6
          name: name
          signatureAlgorithms:
          - signatureAlgorithms
          - signatureAlgorithms
        - defaultSignatureAlgorithm: defaultSignatureAlgorithm
          keySizes:
          - 0
          - 0
          defaultKeySize: 6
          name: name
          signatureAlgorithms:
          - signatureAlgorithms
          - signatureAlgorithms
      properties:
        items:
          description: The actual list of key algorithms.
          items:
            $ref: '#/components/schemas/KeyAlgorithm'
          type: array
      type: object
    SecretManagers:
      description: A collection of secret manager plugin instances.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The list of secret manager plugin instances.
          items:
            $ref: '#/components/schemas/SecretManager'
          type: array
      type: object
    SecretManagerDescriptors:
      description: A collection of secret manager plugin descriptors.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The list of secret manager plugin descriptors.
          items:
            $ref: '#/components/schemas/SecretManagerDescriptor'
          type: array
      type: object
    BaseProviderRole:
      description: Base Provider Role.
      properties:
        enable:
          type: boolean
        enableSaml11:
          description: Enable SAML 1.1.
          type: boolean
        enableSaml10:
          description: Enable SAML 1.0.
          type: boolean
        enableWsFed:
          description: Enable WS Federation.
          type: boolean
        enableWsTrust:
          description: Enable WS Trust.
          type: boolean
      type: object
    CaptchaSettings:
      description: Settings for CAPTCHA.
      example:
        siteKey: siteKey
        secretKey: secretKey
        encryptedSecretKey: encryptedSecretKey
      properties:
        siteKey:
          description: Site key for reCAPTCHA.
          type: string
        secretKey:
          description: "Secret key for reCAPTCHA. GETs will not return this attribute.\
            \ To update this field, specify the new value in this attribute."
          type: string
        encryptedSecretKey:
          description: "The encrypted secret key for reCAPTCHA. If you do not want\
            \ to update the stored value, this attribute should be passed back unchanged."
          type: string
      type: object
    CertificateExpirationNotificationSettings:
      description: Notification settings for certificate expiration events.
      example:
        finalWarningPeriod: 6
        emailAddress: emailAddress
        notificationMode: NOTIFICATION_PUBLISHER
        notificationPublisherRef:
          location: location
          id: id
        initialWarningPeriod: 0
      properties:
        emailAddress:
          description: Email address where notifications are sent.
          type: string
        initialWarningPeriod:
          description: Time before certificate expiration when initial warning is
            sent (in days).
          format: int32
          type: integer
        finalWarningPeriod:
          description: Time before certificate expiration when final warning is sent
            (in days).
          format: int32
          type: integer
        notificationPublisherRef:
          $ref: '#/components/schemas/ResourceLink'
        notificationMode:
          description: The mode of notification. Set to NOTIFICATION_PUBLISHER to
            enable email notifications and server log messages. Set to LOGGING_ONLY
            to enable server log messages. Defaults to NOTIFICATION_PUBLISHER.
          enum:
          - NOTIFICATION_PUBLISHER
          - LOGGING_ONLY
          type: string
      required:
      - emailAddress
      - finalWarningPeriod
      type: object
    EmailServerSettings:
      description: Email server configuration settings.
      example:
        verifyHostname: true
        enableUtf8MessageHeaders: true
        sslPort: 2
        emailServer: emailServer
        timeout: 7
        useSSL: true
        encryptedPassword: encryptedPassword
        retryDelay: 3
        password: password
        port: 5
        useDebugging: true
        sourceAddr: sourceAddr
        retryAttempts: 9
        useTLS: true
        username: username
      properties:
        sourceAddr:
          description: The email address that appears in the 'From' header line in
            email messages generated by PingFederate.  The address must be in valid
            format but need not be set up on your system.
          type: string
        emailServer:
          description: The IP address or hostname of your email server.
          type: string
        port:
          description: "The SMTP port on your email server. Allowable values: 1 -\
            \ 65535. The default value is 25."
          format: int32
          type: integer
        sslPort:
          description: "The secure SMTP port on your email server. This field is not\
            \ active unless Use SSL is enabled. Allowable values: 1 - 65535. The default\
            \ value is  465."
          format: int32
          type: integer
        timeout:
          description: "The amount of time in seconds that PingFederate will wait\
            \ before it times out connecting to the SMTP server. Allowable values:\
            \ 0 - 3600. The default value is 30."
          format: int32
          type: integer
        retryAttempts:
          description: The number of times PingFederate tries to resend an email upon
            unsuccessful delivery. The default value is 2.
          format: int32
          type: integer
        retryDelay:
          description: The number of minutes PingFederate waits before the next retry
            attempt. The default value is 2.
          format: int32
          type: integer
        useSSL:
          description: "Requires the use of SSL/TLS on the port specified by 'sslPort'.\
            \ If this option is enabled, it overrides the 'useTLS' option."
          type: boolean
        useTLS:
          description: Requires the use of the STARTTLS protocol on the port specified
            by 'port'.
          type: boolean
        verifyHostname:
          description: "If useSSL or useTLS is enabled, this flag determines whether\
            \ the email server hostname is verified against the server's SMTPS certificate."
          type: boolean
        enableUtf8MessageHeaders:
          description: "Only set this flag to true if the email server supports UTF-8\
            \ characters in message headers. Otherwise, this is defaulted to false."
          type: boolean
        useDebugging:
          description: Turns on detailed error messages for the PingFederate server
            log to help troubleshoot any problems.
          type: boolean
        username:
          description: Authorized email username. Required if the password is provided.
          type: string
        password:
          description: "User password.  To update the password, specify the plaintext\
            \ value in this field.  This field will not be populated for GET requests."
          type: string
        encryptedPassword:
          description: "For GET requests, this field contains the encrypted password,\
            \ if one exists.  For POST and PUT requests, if you wish to reuse the\
            \ existing password, this field should be passed back unchanged."
          type: string
      required:
      - emailServer
      - port
      - sourceAddr
      type: object
    FederationInfo:
      description: Federation Info.
      example:
        saml2EntityId: saml2EntityId
        saml1xIssuerId: saml1xIssuerId
        wsfedRealm: wsfedRealm
        baseUrl: baseUrl
        saml1xSourceId: saml1xSourceId
        autoConnectEntityId: autoConnectEntityId
      properties:
        baseUrl:
          description: "The fully qualified host name, port, and path (if applicable)\
            \ on which the PingFederate server runs."
          type: string
        saml2EntityId:
          description: "This ID defines your organization as the entity operating\
            \ the server for SAML 2.0 transactions. It is usually defined as an organization's\
            \ URL or a DNS address; for example: pingidentity.com. The SAML SourceID\
            \ used for artifact resolution is derived from this ID using SHA1."
          type: string
        autoConnectEntityId:
          description: This property has been deprecated and no longer used
          type: string
        saml1xIssuerId:
          description: "This ID identifies your federation server for SAML 1.x transactions.\
            \ As with SAML 2.0, it is usually defined as an organization's URL or\
            \ a DNS address. The SourceID used for artifact resolution is derived\
            \ from this ID using SHA1."
          type: string
        saml1xSourceId:
          description: "If supplied, the Source ID value entered here is used for\
            \ SAML 1.x, instead of being derived from the SAML 1.x Issuer/Audience."
          type: string
        wsfedRealm:
          description: The URI of the realm associated with the PingFederate server.
            A realm represents a single unit of security administration or trust.
          type: string
      type: object
    IdpRole:
      allOf:
      - $ref: '#/components/schemas/BaseProviderRole'
      - description: This property has been deprecated and is no longer used. All
          Roles and protocols are always enabled.
        properties:
          enable:
            description: Enable Identity Provider Role.
            type: boolean
          saml20Profile:
            $ref: '#/components/schemas/SAML20Profile'
          enableOutboundProvisioning:
            description: Enable Outbound Provisioning.
            type: boolean
        type: object
    LicenseEventNotificationSettings:
      description: Notification settings for licensing events.
      example:
        emailAddress: emailAddress
        notificationPublisherRef:
          location: location
          id: id
      properties:
        emailAddress:
          description: The email address where notifications are sent.
          type: string
        notificationPublisherRef:
          $ref: '#/components/schemas/ResourceLink'
      required:
      - emailAddress
      type: object
    MetadataEventNotificationSettings:
      description: Notification settings for metadata update events.
      example:
        emailAddress: emailAddress
        notificationPublisherRef:
          location: location
          id: id
      properties:
        emailAddress:
          description: The email address where metadata update notifications are sent.
          type: string
        notificationPublisherRef:
          $ref: '#/components/schemas/ResourceLink'
      required:
      - emailAddress
      type: object
    NotificationSettings:
      description: Settings for notifications relating to licensing and certificate
        expiration.
      example:
        notifyAdminUserPasswordChanges: true
        metadataNotificationSettings:
          emailAddress: emailAddress
          notificationPublisherRef:
            location: location
            id: id
        accountChangesNotificationPublisherRef:
          location: location
          id: id
        expiringCertificateAdministrativeConsoleWarningDays: 1
        licenseEvents:
          emailAddress: emailAddress
          notificationPublisherRef:
            location: location
            id: id
        certificateExpirations:
          finalWarningPeriod: 6
          emailAddress: emailAddress
          notificationMode: NOTIFICATION_PUBLISHER
          notificationPublisherRef:
            location: location
            id: id
          initialWarningPeriod: 0
        threadPoolExhaustionNotificationSettings:
          emailAddress: emailAddress
          notificationMode: NOTIFICATION_PUBLISHER
          threadDumpEnabled: true
          notificationPublisherRef:
            location: location
            id: id
        expiredCertificateAdministrativeConsoleWarningDays: 5
      properties:
        licenseEvents:
          $ref: '#/components/schemas/LicenseEventNotificationSettings'
        certificateExpirations:
          $ref: '#/components/schemas/CertificateExpirationNotificationSettings'
        notifyAdminUserPasswordChanges:
          description: Determines whether admin users are notified through email when
            their account is changed.
          type: boolean
        accountChangesNotificationPublisherRef:
          $ref: '#/components/schemas/ResourceLink'
        metadataNotificationSettings:
          $ref: '#/components/schemas/MetadataEventNotificationSettings'
        expiringCertificateAdministrativeConsoleWarningDays:
          description: "Indicates the number of days prior to certificate expiry date,\
            \ the administrative console warning starts. The default value is 14 days."
          format: int32
          type: integer
        expiredCertificateAdministrativeConsoleWarningDays:
          description: "Indicates the number of days past the certificate expiry date,\
            \ the administrative console warning ends. The default value is 14 days."
          format: int32
          type: integer
        threadPoolExhaustionNotificationSettings:
          $ref: '#/components/schemas/ThreadPoolExhaustionNotificationSettings'
      type: object
    OAuthRole:
      description: This property has been deprecated and is no longer used. OAuth
        and OpenID Connect are always enabled.
      example:
        enableOpenIdConnect: true
        enableOauth: true
      properties:
        enableOauth:
          description: Enable OAuth 2.0 Authorization Server (AS) Role.
          type: boolean
        enableOpenIdConnect:
          description: Enable Open ID Connect.
          type: boolean
      type: object
    RolesAndProtocols:
      description: This property has been deprecated and is no longer used. All Roles
        and protocols are always enabled.
      example:
        oauthRole:
          enableOpenIdConnect: true
          enableOauth: true
        enableIdpDiscovery: true
        spRole: null
        idpRole: null
      properties:
        oauthRole:
          $ref: '#/components/schemas/OAuthRole'
        idpRole:
          $ref: '#/components/schemas/IdpRole'
        spRole:
          $ref: '#/components/schemas/SpRole'
        enableIdpDiscovery:
          description: Enable IdP Discovery.
          type: boolean
      type: object
    SAML20Profile:
      description: SAML 2.0 Profile.
      properties:
        enable:
          description: Enable SAML2.0 profile.
          type: boolean
        enableAutoConnect:
          description: This property has been deprecated and no longer used
          type: boolean
      type: object
    ServerSettings:
      description: Server configuration settings.
      example:
        federationInfo:
          saml2EntityId: saml2EntityId
          saml1xIssuerId: saml1xIssuerId
          wsfedRealm: wsfedRealm
          baseUrl: baseUrl
          saml1xSourceId: saml1xSourceId
          autoConnectEntityId: autoConnectEntityId
        contactInfo:
          firstName: firstName
          lastName: lastName
          phone: phone
          company: company
          email: email
        captchaSettings:
          siteKey: siteKey
          secretKey: secretKey
          encryptedSecretKey: encryptedSecretKey
        rolesAndProtocols:
          oauthRole:
            enableOpenIdConnect: true
            enableOauth: true
          enableIdpDiscovery: true
          spRole: null
          idpRole: null
        notifications:
          notifyAdminUserPasswordChanges: true
          metadataNotificationSettings:
            emailAddress: emailAddress
            notificationPublisherRef:
              location: location
              id: id
          accountChangesNotificationPublisherRef:
            location: location
            id: id
          expiringCertificateAdministrativeConsoleWarningDays: 1
          licenseEvents:
            emailAddress: emailAddress
            notificationPublisherRef:
              location: location
              id: id
          certificateExpirations:
            finalWarningPeriod: 6
            emailAddress: emailAddress
            notificationMode: NOTIFICATION_PUBLISHER
            notificationPublisherRef:
              location: location
              id: id
            initialWarningPeriod: 0
          threadPoolExhaustionNotificationSettings:
            emailAddress: emailAddress
            notificationMode: NOTIFICATION_PUBLISHER
            threadDumpEnabled: true
            notificationPublisherRef:
              location: location
              id: id
          expiredCertificateAdministrativeConsoleWarningDays: 5
        emailServer:
          verifyHostname: true
          enableUtf8MessageHeaders: true
          sslPort: 2
          emailServer: emailServer
          timeout: 7
          useSSL: true
          encryptedPassword: encryptedPassword
          retryDelay: 3
          password: password
          port: 5
          useDebugging: true
          sourceAddr: sourceAddr
          retryAttempts: 9
          useTLS: true
          username: username
      properties:
        contactInfo:
          $ref: '#/components/schemas/ContactInfo'
        notifications:
          $ref: '#/components/schemas/NotificationSettings'
        rolesAndProtocols:
          $ref: '#/components/schemas/RolesAndProtocols'
        federationInfo:
          $ref: '#/components/schemas/FederationInfo'
        emailServer:
          $ref: '#/components/schemas/EmailServerSettings'
        captchaSettings:
          $ref: '#/components/schemas/CaptchaSettings'
      type: object
    SpRole:
      allOf:
      - $ref: '#/components/schemas/BaseProviderRole'
      - description: This property has been deprecated and is no longer used. All
          Roles and protocols are always enabled.
        properties:
          enable:
            description: Enable Service Provider Role.
            type: boolean
          saml20Profile:
            $ref: '#/components/schemas/SpSAML20Profile'
          enableOpenIDConnect:
            description: Enable OpenID Connect.
            type: boolean
          enableInboundProvisioning:
            description: Enable Inbound Provisioning.
            type: boolean
        type: object
    SpSAML20Profile:
      allOf:
      - $ref: '#/components/schemas/SAML20Profile'
      - description: SP SAML 2.0 Profile.
        properties:
          enableXASP:
            description: Enable Attribute Requester Mapping for X.509 Attribute Sharing
              Profile (XASP)
            type: boolean
        type: object
    ThreadPoolExhaustionNotificationSettings:
      description: Notification settings for thread pool exhaustion events.
      example:
        emailAddress: emailAddress
        notificationMode: NOTIFICATION_PUBLISHER
        threadDumpEnabled: true
        notificationPublisherRef:
          location: location
          id: id
      properties:
        emailAddress:
          description: Email address where notifications are sent.
          type: string
        threadDumpEnabled:
          description: Generate a thread dump when approaching thread pool exhaustion.
          type: boolean
        notificationPublisherRef:
          $ref: '#/components/schemas/ResourceLink'
        notificationMode:
          description: The mode of notification. Set to NOTIFICATION_PUBLISHER to
            enable email notifications and server log messages. Set to LOGGING_ONLY
            to enable server log messages. Defaults to LOGGING_ONLY.
          enum:
          - NOTIFICATION_PUBLISHER
          - LOGGING_ONLY
          type: string
      required:
      - emailAddress
      type: object
    OutboundProvisionDatabase:
      description: The settings for database used internally to facilitate outbound
        provisioning. The database stores state of synchronization between the source
        data store and the target data store.
      example:
        dataStoreRef:
          location: location
          id: id
        synchronizationFrequency: 0
      properties:
        dataStoreRef:
          $ref: '#/components/schemas/ResourceLink'
        synchronizationFrequency:
          description: The synchronization frequency in seconds. The default value
            is 60.
          format: int32
          type: integer
      required:
      - dataStoreRef
      type: object
    SystemKey:
      description: A system key.
      example:
        keyData: keyData
        creationDate: 2000-01-23T04:56:07.000+00:00
        encryptedKeyData: encryptedKeyData
      properties:
        creationDate:
          description: Creation time of the key.
          format: date-time
          type: string
        encryptedKeyData:
          description: The system key encrypted.
          type: string
        keyData:
          description: The clear text system key base 64 encoded. The system key must
            be 32 bytes before base 64 encoding.
          type: string
      type: object
    SystemKeys:
      description: Secrets that are used in cryptographic operations to generate and
        consume internal tokens
      example:
        current:
          keyData: keyData
          creationDate: 2000-01-23T04:56:07.000+00:00
          encryptedKeyData: encryptedKeyData
        previous:
          keyData: keyData
          creationDate: 2000-01-23T04:56:07.000+00:00
          encryptedKeyData: encryptedKeyData
        pending:
          keyData: keyData
          creationDate: 2000-01-23T04:56:07.000+00:00
          encryptedKeyData: encryptedKeyData
      properties:
        current:
          $ref: '#/components/schemas/SystemKey'
        previous:
          $ref: '#/components/schemas/SystemKey'
        pending:
          $ref: '#/components/schemas/SystemKey'
      required:
      - current
      - pending
      type: object
    IssuerCert:
      description: A certificate used to validate certificates for access to the WS-Trust
        STS endpoints.
      example:
        certView:
          expires: 2000-01-23T04:56:07.000+00:00
          serialNumber: serialNumber
          keyAlgorithm: keyAlgorithm
          keySize: 0
          subjectAlternativeNames:
          - subjectAlternativeNames
          - subjectAlternativeNames
          issuerDN: issuerDN
          cryptoProvider: LOCAL
          sha1Fingerprint: sha1Fingerprint
          validFrom: 2000-01-23T04:56:07.000+00:00
          version: 6
          signatureAlgorithm: signatureAlgorithm
          sha256Fingerprint: sha256Fingerprint
          id: id
          subjectDN: subjectDN
          status: VALID
        x509File:
          fileData: fileData
          cryptoProvider: LOCAL
          id: id
        active: true
      properties:
        certView:
          $ref: '#/components/schemas/CertView'
        x509File:
          $ref: '#/components/schemas/X509File'
        active:
          description: Indicates whether this an active certificate or not.
          type: boolean
      required:
      - x509File
      type: object
    ApiResponse:
      type: object
    GeneralSettings:
      description: General settings.
      example:
        datastoreValidationIntervalSecs: 0
        spConnectionTransactionLoggingOverride: DONT_OVERRIDE
        disableAutomaticConnectionValidation: true
        idpConnectionTransactionLoggingOverride: DONT_OVERRIDE
        requestHeaderForCorrelationId: requestHeaderForCorrelationId
      properties:
        disableAutomaticConnectionValidation:
          description: Boolean that disables automatic connection validation when
            set to true. The default is false.
          type: boolean
        idpConnectionTransactionLoggingOverride:
          description: "Determines the level of transaction logging for all identity\
            \ provider connections. The default is DONT_OVERRIDE, in which case the\
            \ logging level will be determined by each individual IdP connection"
          enum:
          - DONT_OVERRIDE
          - NONE
          - FULL
          - STANDARD
          - ENHANCED
          type: string
        spConnectionTransactionLoggingOverride:
          description: "Determines the level of transaction logging for all service\
            \ provider connections. The default is DONT_OVERRIDE, in which case the\
            \ logging level will be determined by each individual SP connection"
          enum:
          - DONT_OVERRIDE
          - NONE
          - FULL
          - STANDARD
          - ENHANCED
          type: string
        datastoreValidationIntervalSecs:
          description: Determines how long (in seconds) the result of testing a datastore
            connection is cached. The default is 300.
          format: int32
          type: integer
        requestHeaderForCorrelationId:
          description: HTTP request header for retrieving correlation ID.
          type: string
      type: object
    LogCategorySettings:
      description: "The settings for a log category. A log category represents a group\
        \ of related loggers and is associated with a system property (the ID field\
        \ of the category with 'pf.log.level.' prepended). The system property can\
        \ be referenced in log4j2.xml to set the level for the associated loggers.\
        \ Log category IDs, names, and descriptions are defined in log4j-categories.xml.\
        \ Only the enabled state of the category can be modified through the administrative\
        \ console or API."
      example:
        name: name
        description: description
        id: id
        enabled: true
      properties:
        id:
          description: The ID of the log category. This field must match one of the
            category IDs defined in log4j-categories.xml.
          type: string
        name:
          description: The name of the log category. This field is read-only and is
            ignored for PUT requests.
          type: string
        description:
          description: The description of the log category. This field is read-only
            and is ignored for PUT requests.
          type: string
        enabled:
          description: Determines whether or not the log category is enabled. The
            default is false.
          type: boolean
      required:
      - id
      type: object
    LogSettings:
      description: Settings related to server logging.
      example:
        logCategories:
        - name: name
          description: description
          id: id
          enabled: true
        - name: name
          description: description
          id: id
          enabled: true
      properties:
        logCategories:
          description: "The log categories defined for the system and whether they\
            \ are enabled. On a PUT request, if a category is not included in the\
            \ list, it will be disabled."
          items:
            $ref: '#/components/schemas/LogCategorySettings'
          type: array
      type: object
    WsTrustStsSettings:
      description: Configure PingFederate to require that client applications provide
        credentials to access the WS-Trust STS endpoints.
      example:
        subjectDns:
        - subjectDns
        - subjectDns
        clientCertAuthnEnabled: true
        restrictByIssuerCert: true
        issuerCerts:
        - location: location
          id: id
        - location: location
          id: id
        basicAuthnEnabled: true
        restrictBySubjectDn: true
        users:
        - password: password
          username: username
          encryptedPassword: encryptedPassword
        - password: password
          username: username
          encryptedPassword: encryptedPassword
      properties:
        basicAuthnEnabled:
          description: Require the use of HTTP Basic Authentication to access WS-Trust
            STS endpoints. Requires users be populated.
          type: boolean
        clientCertAuthnEnabled:
          description: Require the use of Client Cert Authentication to access WS-Trust
            STS endpoints. Requires either restrictBySubjectDn and/or restrictByIssuerCert
            be enabled.
          type: boolean
        restrictBySubjectDn:
          description: Restrict Access by Subject DN. Ignored if clientCertAuthnEnabled
            is disabled.
          type: boolean
        restrictByIssuerCert:
          description: Restrict Access by Issuer Certificate. Ignored if clientCertAuthnEnabled
            is disabled.
          type: boolean
        subjectDns:
          description: List of Subject DNs for certificates that are allowed to authenticate
            to WS-Trust STS endpoints. Required if restrictBySubjectDn is enabled.
          items:
            type: string
          type: array
        users:
          description: List of users authorized to access WS-Trust STS endpoints when
            basicAuthnEnabled is enabled. At least one users entry is required if
            basicAuthnEnabled is enabled.
          items:
            $ref: '#/components/schemas/UsernamePasswordCredentials'
          type: array
        issuerCerts:
          description: List of certificate Issuers that are used to validate certificates
            for access to the WS-Trust STS endpoints. Required if restrictByIssuerCert
            is enabled.
          items:
            $ref: '#/components/schemas/ResourceLink'
          type: array
      type: object
    IssuerCerts:
      description: The certificates used to validate certificates for access to the
        WS-Trust STS endpoints.
      example:
        items:
        - certView:
            expires: 2000-01-23T04:56:07.000+00:00
            serialNumber: serialNumber
            keyAlgorithm: keyAlgorithm
            keySize: 0
            subjectAlternativeNames:
            - subjectAlternativeNames
            - subjectAlternativeNames
            issuerDN: issuerDN
            cryptoProvider: LOCAL
            sha1Fingerprint: sha1Fingerprint
            validFrom: 2000-01-23T04:56:07.000+00:00
            version: 6
            signatureAlgorithm: signatureAlgorithm
            sha256Fingerprint: sha256Fingerprint
            id: id
            subjectDN: subjectDN
            status: VALID
          x509File:
            fileData: fileData
            cryptoProvider: LOCAL
            id: id
          active: true
        - certView:
            expires: 2000-01-23T04:56:07.000+00:00
            serialNumber: serialNumber
            keyAlgorithm: keyAlgorithm
            keySize: 0
            subjectAlternativeNames:
            - subjectAlternativeNames
            - subjectAlternativeNames
            issuerDN: issuerDN
            cryptoProvider: LOCAL
            sha1Fingerprint: sha1Fingerprint
            validFrom: 2000-01-23T04:56:07.000+00:00
            version: 6
            signatureAlgorithm: signatureAlgorithm
            sha256Fingerprint: sha256Fingerprint
            id: id
            subjectDN: subjectDN
            status: VALID
          x509File:
            fileData: fileData
            cryptoProvider: LOCAL
            id: id
          active: true
      properties:
        items:
          description: The actual list of certificates.
          items:
            $ref: '#/components/schemas/IssuerCert'
          type: array
      type: object
    ServiceAuthentication:
      description: Service Authentication Settings.
      example:
        jmx:
          encryptedSharedSecret: encryptedSharedSecret
          id: id
          sharedSecret: sharedSecret
        connectionManagement:
          encryptedSharedSecret: encryptedSharedSecret
          id: id
          sharedSecret: sharedSecret
        ssoDirectoryService:
          encryptedSharedSecret: encryptedSharedSecret
          id: id
          sharedSecret: sharedSecret
        attributeQuery:
          encryptedSharedSecret: encryptedSharedSecret
          id: id
          sharedSecret: sharedSecret
      properties:
        attributeQuery:
          $ref: '#/components/schemas/ServiceModel'
        jmx:
          $ref: '#/components/schemas/ServiceModel'
        connectionManagement:
          $ref: '#/components/schemas/ServiceModel'
        ssoDirectoryService:
          $ref: '#/components/schemas/ServiceModel'
      type: object
    ServiceModel:
      description: Service Model.
      example:
        encryptedSharedSecret: encryptedSharedSecret
        id: id
        sharedSecret: sharedSecret
      properties:
        id:
          description: Id of the service.
          type: string
        sharedSecret:
          description: Shared secret for the service.
          type: string
        encryptedSharedSecret:
          description: Encrypted shared secret for the service.
          type: string
      type: object
    KeyPairRotationSettings:
      description: Key Pair Rotation Details
      example:
        activationBufferDays: 6
        keyAlgorithm: keyAlgorithm
        keySize: 5
        creationBufferDays: 0
        id: id
        signatureAlgorithm: signatureAlgorithm
        validDays: 1
      properties:
        id:
          type: string
        creationBufferDays:
          description: Buffer days before key pair expiration for creation of a new
            key pair.
          format: int32
          type: integer
        activationBufferDays:
          description: Buffer days before key pair expiration for activation of the
            new key pair.
          format: int32
          type: integer
        validDays:
          description: "Valid days for the new key pair to be created. If this property\
            \ is unset, the validity days of the original key pair will be used."
          format: int32
          type: integer
        keyAlgorithm:
          description: "Key algorithm to be used while creating a new key pair. If\
            \ this property is unset, the key algorithm of the original key pair will\
            \ be used. Supported algorithms are available through the /keyPairs/keyAlgorithms\
            \ endpoint."
          type: string
        keySize:
          description: "Key size, in bits. If this property is unset, the key size\
            \ of the original key pair will be used. Supported key sizes are available\
            \ through the /keyPairs/keyAlgorithms endpoint."
          format: int32
          type: integer
        signatureAlgorithm:
          description: "Required if the original key pair used SHA1 algorithm. If\
            \ this property is unset, the default signature algorithm of the original\
            \ key pair will be used. Supported signature algorithms are available\
            \ through the /keyPairs/keyAlgorithms endpoint."
          type: string
      required:
      - activationBufferDays
      - creationBufferDays
      type: object
    KeyPairView:
      description: Key pair details.
      example:
        expires: 2000-01-23T04:56:07.000+00:00
        serialNumber: serialNumber
        keyAlgorithm: keyAlgorithm
        keySize: 0
        rotationSettings:
          activationBufferDays: 6
          keyAlgorithm: keyAlgorithm
          keySize: 5
          creationBufferDays: 0
          id: id
          signatureAlgorithm: signatureAlgorithm
          validDays: 1
        subjectAlternativeNames:
        - subjectAlternativeNames
        - subjectAlternativeNames
        issuerDN: issuerDN
        cryptoProvider: LOCAL
        sha1Fingerprint: sha1Fingerprint
        validFrom: 2000-01-23T04:56:07.000+00:00
        version: 6
        signatureAlgorithm: signatureAlgorithm
        sha256Fingerprint: sha256Fingerprint
        id: id
        subjectDN: subjectDN
        status: VALID
      properties:
        id:
          description: "The persistent, unique ID for the certificate."
          type: string
        serialNumber:
          description: The serial number assigned by the CA.
          type: string
        subjectDN:
          description: The subject's distinguished name.
          type: string
        subjectAlternativeNames:
          description: The subject alternative names (SAN).
          items:
            type: string
          type: array
        issuerDN:
          description: The issuer's distinguished name.
          type: string
        validFrom:
          description: "The start date from which the item is valid, in ISO 8601 format\
            \ (UTC)."
          format: date-time
          type: string
        expires:
          description: "The end date up until which the item is valid, in ISO 8601\
            \ format (UTC)."
          format: date-time
          type: string
        keyAlgorithm:
          description: The public key algorithm.
          type: string
        keySize:
          description: The public key size.
          format: int32
          type: integer
        signatureAlgorithm:
          description: The signature algorithm.
          type: string
        version:
          description: The X.509 version to which the item conforms.
          format: int32
          type: integer
        sha1Fingerprint:
          description: SHA-1 fingerprint in Hex encoding.
          type: string
        sha256Fingerprint:
          description: SHA-256 fingerprint in Hex encoding.
          type: string
        status:
          description: Status of the item.
          enum:
          - VALID
          - EXPIRED
          - NOT_YET_VALID
          - REVOKED
          type: string
        cryptoProvider:
          description: Cryptographic Provider. This is only applicable if Hybrid HSM
            mode is true.
          enum:
          - LOCAL
          - HSM
          type: string
        rotationSettings:
          $ref: '#/components/schemas/KeyPairRotationSettings'
      type: object
    KeyPairViews:
      description: A collection of KeyPairView items.
      example:
        items:
        - expires: 2000-01-23T04:56:07.000+00:00
          serialNumber: serialNumber
          keyAlgorithm: keyAlgorithm
          keySize: 0
          rotationSettings:
            activationBufferDays: 6
            keyAlgorithm: keyAlgorithm
            keySize: 5
            creationBufferDays: 0
            id: id
            signatureAlgorithm: signatureAlgorithm
            validDays: 1
          subjectAlternativeNames:
          - subjectAlternativeNames
          - subjectAlternativeNames
          issuerDN: issuerDN
          cryptoProvider: LOCAL
          sha1Fingerprint: sha1Fingerprint
          validFrom: 2000-01-23T04:56:07.000+00:00
          version: 6
          signatureAlgorithm: signatureAlgorithm
          sha256Fingerprint: sha256Fingerprint
          id: id
          subjectDN: subjectDN
          status: VALID
        - expires: 2000-01-23T04:56:07.000+00:00
          serialNumber: serialNumber
          keyAlgorithm: keyAlgorithm
          keySize: 0
          rotationSettings:
            activationBufferDays: 6
            keyAlgorithm: keyAlgorithm
            keySize: 5
            creationBufferDays: 0
            id: id
            signatureAlgorithm: signatureAlgorithm
            validDays: 1
          subjectAlternativeNames:
          - subjectAlternativeNames
          - subjectAlternativeNames
          issuerDN: issuerDN
          cryptoProvider: LOCAL
          sha1Fingerprint: sha1Fingerprint
          validFrom: 2000-01-23T04:56:07.000+00:00
          version: 6
          signatureAlgorithm: signatureAlgorithm
          sha256Fingerprint: sha256Fingerprint
          id: id
          subjectDN: subjectDN
          status: VALID
      properties:
        items:
          description: The actual list of KeyPairView instances.
          items:
            $ref: '#/components/schemas/KeyPairView'
          type: array
      type: object
    NewKeyPairSettings:
      description: Settings for creating a new key pair.
      example:
        commonName: commonName
        country: country
        keyAlgorithm: keyAlgorithm
        keySize: 6
        city: city
        subjectAlternativeNames:
        - subjectAlternativeNames
        - subjectAlternativeNames
        cryptoProvider: LOCAL
        organizationUnit: organizationUnit
        signatureAlgorithm: signatureAlgorithm
        organization: organization
        id: id
        state: state
        validDays: 0
      properties:
        id:
          description: "The persistent, unique ID for the certificate. It can be any\
            \ combination of [a-z0-9._-]. This property is system-assigned if not\
            \ specified."
          type: string
        commonName:
          description: Common name for key pair subject.
          type: string
        subjectAlternativeNames:
          description: The subject alternative names (SAN).
          items:
            type: string
          type: array
        organization:
          description: Organization.
          type: string
        organizationUnit:
          description: Organization unit.
          type: string
        city:
          description: City.
          type: string
        state:
          description: State.
          type: string
        country:
          description: Country.
          type: string
        validDays:
          description: Number of days the key pair will be valid for.
          format: int32
          type: integer
        keyAlgorithm:
          description: Key generation algorithm. Supported algorithms are available
            through the /keyPairs/keyAlgorithms endpoint.
          type: string
        keySize:
          description: "Key size, in bits. If this property is unset, the default\
            \ size for the key algorithm will be used. Supported key sizes are available\
            \ through the /keyPairs/keyAlgorithms endpoint."
          format: int32
          type: integer
        signatureAlgorithm:
          description: "Signature algorithm. If this property is unset, the default\
            \ signature algorithm for the key algorithm will be used. Supported signature\
            \ algorithms are available through the /keyPairs/keyAlgorithms endpoint."
          type: string
        cryptoProvider:
          description: Cryptographic Provider.  This is only applicable if Hybrid
            HSM mode is true.
          enum:
          - LOCAL
          - HSM
          type: string
      required:
      - commonName
      - country
      - keyAlgorithm
      - organization
      - validDays
      type: object
    CSRResponse:
      description: Represents a CSR response file.
      example:
        fileData: fileData
      properties:
        fileData:
          description: The CSR response file data in PKCS7 format or as an X.509 certificate.
            PEM encoding (with or without the header and footer lines) is required.
            New line characters should be omitted or encoded in this value.
          type: string
      required:
      - fileData
      type: object
    KeyPairExportSettings:
      description: Settings for exporting a key pair file from the system.
      example:
        password: password
      properties:
        password:
          description: The password for the key pair file that is created.
          type: string
      required:
      - password
      type: object
    KeyPairFile:
      description: Represents the contents of a PKCS12 or PEM file.
      example:
        password: password
        fileData: fileData
        cryptoProvider: LOCAL
        format: PKCS12
        id: id
        encryptedPassword: encryptedPassword
      properties:
        id:
          description: "The persistent, unique ID for the certificate. It can be any\
            \ combination of [a-z0-9._-]. This property is system-assigned if not\
            \ specified."
          type: string
        fileData:
          description: "Base-64 encoded PKCS12 or PEM file data. In the case of PEM,\
            \ the raw (non-base-64) data is also accepted. In BCFIPS mode, only PEM\
            \ with PBES2 and AES or Triple DES encryption is accepted and 128-bit\
            \ salt is required."
          type: string
        format:
          description: "Key pair file format. If specified, this field will control\
            \ what file format is expected, otherwise the format will be auto-detected.\
            \ In BCFIPS mode, only PEM is supported."
          enum:
          - PKCS12
          - PEM
          type: string
        password:
          description: "Password for the file. In BCFIPS mode, the password must be\
            \ at least 14 characters."
          type: string
        encryptedPassword:
          description: "Encrypted password for the file. Only applicable for bulk\
            \ export/import operations. For bulk import operation, either password\
            \ or encrypted password must be set."
          type: string
        cryptoProvider:
          description: Cryptographic Provider. This is only applicable if Hybrid HSM
            mode is true.
          enum:
          - LOCAL
          - HSM
          type: string
      required:
      - fileData
      - password
      type: object
    SpAdapterDescriptors:
      description: A collection of SP adapter descriptors.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The list of SP adapter descriptors.
          items:
            $ref: '#/components/schemas/SpAdapterDescriptor'
          type: array
      type: object
    SpAdapters:
      description: A collection of SP adapters.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The actual list of SP adapters.
          items:
            $ref: '#/components/schemas/SpAdapter'
          type: array
      type: object
    SpAdapterUrlMapping:
      description: SP Adapter URL Mapping
      example:
        adapterRef:
          location: location
          id: id
        url: url
      properties:
        url:
          description: The URL that will be compared against the target URL. Use a
            wildcard (*) to match multiple URLs to the same adapter instance.
          type: string
        adapterRef:
          $ref: '#/components/schemas/ResourceLink'
      type: object
    SpAdapterUrlMappings:
      example:
        items:
        - adapterRef:
            location: location
            id: id
          url: url
        - adapterRef:
            location: location
            id: id
          url: url
      properties:
        items:
          description: The actual list of SP adapter URL mappings.
          items:
            $ref: '#/components/schemas/SpAdapterUrlMapping'
          type: array
      type: object
    SpConnections:
      description: A collection of SP connections.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The actual list of connections.
          items:
            $ref: '#/components/schemas/SpConnection'
          type: array
      type: object
    SpDefaultUrls:
      description: SP Default URLs.
      example:
        ssoSuccessUrl: ssoSuccessUrl
        confirmSlo: true
        sloSuccessUrl: sloSuccessUrl
      properties:
        ssoSuccessUrl:
          description: Provide the default URL you would like to send the user to
            when Single Sign On (SSO) has succeeded.
          type: string
        confirmSlo:
          description: Determines whether the user is prompted to confirm Single Logout
            (SLO). The default is false.
          type: boolean
        sloSuccessUrl:
          description: Provide the default URL you would like to send the user to
            when Single Logout (SLO) has succeeded.
          type: string
      type: object
    SpUrlMapping:
      description: SP URL mapping
      example:
        ref:
          location: location
          id: id
        type: SP_ADAPTER
        url: url
      properties:
        url:
          description: The URL that will be compared against the target URL. Use a
            wildcard (*) to match multiple URLs to the same adapter or connection
            instance.
          type: string
        type:
          description: The URL mapping type
          enum:
          - SP_ADAPTER
          - SP_CONNECTION
          type: string
        ref:
          $ref: '#/components/schemas/ResourceLink'
      type: object
    SpUrlMappings:
      example:
        items:
        - ref:
            location: location
            id: id
          type: SP_ADAPTER
          url: url
        - ref:
            location: location
            id: id
          type: SP_ADAPTER
          url: url
      properties:
        items:
          description: The actual list of SP connection URL mappings.
          items:
            $ref: '#/components/schemas/SpUrlMapping'
          type: array
      type: object
    SslServerSettings:
      description: Settings for the SSL Server certificate configuration.
      example:
        activeRuntimeServerCerts:
        - location: location
          id: id
        - location: location
          id: id
        activeAdminConsoleCerts:
        - location: location
          id: id
        - location: location
          id: id
        adminConsoleCertRef:
          location: location
          id: id
        runtimeServerCertRef:
          location: location
          id: id
      properties:
        runtimeServerCertRef:
          $ref: '#/components/schemas/ResourceLink'
        adminConsoleCertRef:
          $ref: '#/components/schemas/ResourceLink'
        activeRuntimeServerCerts:
          description: The active SSL Server Certificate Key pairs for Runtime Server.
          items:
            $ref: '#/components/schemas/ResourceLink'
          type: array
        activeAdminConsoleCerts:
          description: The active SSL Server Certificate Key pairs for PF Administrator
            Console.
          items:
            $ref: '#/components/schemas/ResourceLink'
          type: array
      required:
      - adminConsoleCertRef
      - runtimeServerCertRef
      type: object
    StsRequestParametersContract:
      description: A Security Token Service request parameter contract.
      example:
        name: name
        id: id
        lastModified: 2000-01-23T04:56:07.000+00:00
        parameters:
        - parameters
        - parameters
      properties:
        id:
          description: "The ID of the Security Token Service request parameter contract.<br>Note:\
            \ Ignored for PUT requests."
          type: string
        name:
          description: "The name of the Security Token Service request parameter contract.<br>Note:\
            \ Ignored for PUT requests."
          type: string
        parameters:
          description: The list of parameters within the Security  Token Service request
            parameter contract.
          items:
            type: string
          type: array
        lastModified:
          description: The time at which the request parameter contract was last changed.
            This property is read only and is ignored on PUT and POST requests.
          format: date-time
          type: string
      required:
      - id
      - name
      - parameters
      type: object
    StsRequestParametersContracts:
      description: A Collection of STS Request Parameters Contracts
      example:
        items:
        - name: name
          id: id
          lastModified: 2000-01-23T04:56:07.000+00:00
          parameters:
          - parameters
          - parameters
        - name: name
          id: id
          lastModified: 2000-01-23T04:56:07.000+00:00
          parameters:
          - parameters
          - parameters
      properties:
        items:
          description: The actual list of STS Request Parameters Contracts.
          items:
            $ref: '#/components/schemas/StsRequestParametersContract'
          type: array
      type: object
    TokenGeneratorDescriptors:
      description: A collection of token generator descriptors.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The list of token generator descriptors.
          items:
            $ref: '#/components/schemas/TokenGeneratorDescriptor'
          type: array
      type: object
    TokenGenerators:
      description: A collection of token generators.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The actual list of token generator.
          items:
            $ref: '#/components/schemas/TokenGenerator'
          type: array
      type: object
    TokenProcessors:
      description: A collection of token processors.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The actual list of token processors.
          items:
            $ref: '#/components/schemas/TokenProcessor'
          type: array
      type: object
    TokenProcessorDescriptors:
      description: A collection of token processor descriptors.
      example:
        items:
        - null
        - null
      properties:
        items:
          description: The list of token processor descriptors.
          items:
            $ref: '#/components/schemas/TokenProcessorDescriptor'
          type: array
      type: object
    TokenToTokenMapping:
      description: A Token Processor to Token Generator Mapping.
      example:
        sourceId: sourceId
        targetId: targetId
        licenseConnectionGroupAssignment: licenseConnectionGroupAssignment
        defaultTargetResource: defaultTargetResource
        attributeContractFulfillment:
          key:
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
        id: id
        attributeSources:
        - null
        - null
        issuanceCriteria:
          expressionCriteria:
          - expression: expression
            errorResult: errorResult
          - expression: expression
            errorResult: errorResult
          conditionalCriteria:
          - condition: EQUALS
            errorResult: errorResult
            attributeName: attributeName
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
          - condition: EQUALS
            errorResult: errorResult
            attributeName: attributeName
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
      properties:
        attributeSources:
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: '#/components/schemas/AttributeSourceAggregation'
          type: array
        attributeContractFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of mappings from attribute names to their fulfillment
            values.
          type: object
        issuanceCriteria:
          $ref: '#/components/schemas/IssuanceCriteria'
        sourceId:
          description: The id of the Token Processor.
          type: string
        targetId:
          description: The id of the Token Generator.
          type: string
        id:
          description: The id of the Token Processor to Token Generator mapping. This
            field is read-only and is ignored when passed in with the payload.
          type: string
        defaultTargetResource:
          description: Default target URL for this Token Processor to Token Generator
            mapping configuration.
          type: string
        licenseConnectionGroupAssignment:
          description: The license connection group.
          type: string
      required:
      - attributeContractFulfillment
      - sourceId
      - targetId
      type: object
    TokenToTokenMappings:
      example:
        items:
        - sourceId: sourceId
          targetId: targetId
          licenseConnectionGroupAssignment: licenseConnectionGroupAssignment
          defaultTargetResource: defaultTargetResource
          attributeContractFulfillment:
            key:
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          id: id
          attributeSources:
          - null
          - null
          issuanceCriteria:
            expressionCriteria:
            - expression: expression
              errorResult: errorResult
            - expression: expression
              errorResult: errorResult
            conditionalCriteria:
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
        - sourceId: sourceId
          targetId: targetId
          licenseConnectionGroupAssignment: licenseConnectionGroupAssignment
          defaultTargetResource: defaultTargetResource
          attributeContractFulfillment:
            key:
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          id: id
          attributeSources:
          - null
          - null
          issuanceCriteria:
            expressionCriteria:
            - expression: expression
              errorResult: errorResult
            - expression: expression
              errorResult: errorResult
            conditionalCriteria:
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
      properties:
        items:
          description: The list of Token Processor to Token Generator mappings.
          items:
            $ref: '#/components/schemas/TokenToTokenMapping'
          type: array
      type: object
    Version:
      description: Server version.
      example:
        version: version
      properties:
        version:
          description: Server version.
          type: string
      type: object
    VirtualHostNameSettings:
      description: Settings for virtual host names.
      example:
        virtualHostNames:
        - virtualHostNames
        - virtualHostNames
      properties:
        virtualHostNames:
          description: List of virtual host names.
          items:
            type: string
          type: array
      type: object
    AuthorizationDetailType:
      description: The authorization detail type and the authorization detail processor
        to process the type.
      example:
        description: description
        active: true
        id: id
        type: type
        authorizationDetailProcessorRef:
          location: location
          id: id
      properties:
        id:
          description: The ID of the authorization detail type. The ID will be system-assigned
            if not specified.
          type: string
        description:
          description: The description of the authorization detail type.
          type: string
        type:
          description: The authorization detail type.
          type: string
        authorizationDetailProcessorRef:
          $ref: '#/components/schemas/ResourceLink'
        active:
          description: Whether or not this authorization detail type is active. Defaults
            to true.
          type: boolean
      required:
      - authorizationDetailProcessorRef
      - type
      type: object
    AuthorizationDetailTypes:
      description: A collection of authorization detail types.
      example:
        items:
        - description: description
          active: true
          id: id
          type: type
          authorizationDetailProcessorRef:
            location: location
            id: id
        - description: description
          active: true
          id: id
          type: type
          authorizationDetailProcessorRef:
            location: location
            id: id
      properties:
        items:
          description: The list of the authorization detail types.
          items:
            $ref: '#/components/schemas/AuthorizationDetailType'
          type: array
      type: object
    Issuer:
      description: The set of attributes used to configure a virtual issuer.
      example:
        path: path
        name: name
        host: host
        description: description
        id: id
      properties:
        id:
          description: "The persistent, unique ID for the virtual issuer. It can be\
            \ any combination of [a-zA-Z0-9._-]. This property is system-assigned\
            \ if not specified."
          type: string
        name:
          description: The name of this virtual issuer with a unique value.
          type: string
        description:
          description: The description of this virtual issuer.
          type: string
        host:
          description: The hostname of this virtual issuer.
          type: string
        path:
          description: The path of this virtual issuer.
          type: string
      required:
      - host
      - name
      type: object
    Issuers:
      description: A collection of virtual issuers.
      example:
        items:
        - path: path
          name: name
          host: host
          description: description
          id: id
        - path: path
          name: name
          host: host
          description: description
          id: id
      properties:
        items:
          description: The list of the virtual issuers.
          items:
            $ref: '#/components/schemas/Issuer'
          type: array
      type: object
    ProcessorPolicyToGeneratorMapping:
      description: A Token Exchange Processor policy to Token Generator Mapping.
      example:
        sourceId: sourceId
        targetId: targetId
        licenseConnectionGroupAssignment: licenseConnectionGroupAssignment
        attributeContractFulfillment:
          key:
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
        id: id
        attributeSources:
        - null
        - null
        issuanceCriteria:
          expressionCriteria:
          - expression: expression
            errorResult: errorResult
          - expression: expression
            errorResult: errorResult
          conditionalCriteria:
          - condition: EQUALS
            errorResult: errorResult
            attributeName: attributeName
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
          - condition: EQUALS
            errorResult: errorResult
            attributeName: attributeName
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
      properties:
        attributeSources:
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: '#/components/schemas/AttributeSourceAggregation'
          type: array
        attributeContractFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of mappings from attribute names to their fulfillment
            values.
          type: object
        issuanceCriteria:
          $ref: '#/components/schemas/IssuanceCriteria'
        id:
          description: The id of the Token Exchange Processor policy to Token Generator
            mapping. This field is read-only and is ignored when passed in with the
            payload.
          type: string
        sourceId:
          description: The id of the Token Exchange Processor policy.
          type: string
        targetId:
          description: The id of the Token Generator.
          type: string
        licenseConnectionGroupAssignment:
          description: The license connection group.
          type: string
      required:
      - attributeContractFulfillment
      - sourceId
      - targetId
      type: object
    ProcessorPolicyToGeneratorMappings:
      example:
        items:
        - sourceId: sourceId
          targetId: targetId
          licenseConnectionGroupAssignment: licenseConnectionGroupAssignment
          attributeContractFulfillment:
            key:
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          id: id
          attributeSources:
          - null
          - null
          issuanceCriteria:
            expressionCriteria:
            - expression: expression
              errorResult: errorResult
            - expression: expression
              errorResult: errorResult
            conditionalCriteria:
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
        - sourceId: sourceId
          targetId: targetId
          licenseConnectionGroupAssignment: licenseConnectionGroupAssignment
          attributeContractFulfillment:
            key:
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          id: id
          attributeSources:
          - null
          - null
          issuanceCriteria:
            expressionCriteria:
            - expression: expression
              errorResult: errorResult
            - expression: expression
              errorResult: errorResult
            conditionalCriteria:
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
      properties:
        items:
          description: The list of Token Exchange Processor policy to Token Generator
            mappings.
          items:
            $ref: '#/components/schemas/ProcessorPolicyToGeneratorMapping'
          type: array
      type: object
    TokenExchangeGeneratorSettings:
      description: Settings for the OAuth Token Exchange Generator Groups.
      example:
        defaultGeneratorGroupRef:
          location: location
          id: id
      properties:
        defaultGeneratorGroupRef:
          $ref: '#/components/schemas/ResourceLink'
      type: object
    TokenExchangeGeneratorGroup:
      description: The set of attributes used to configure a OAuth 2.0 Token Exchange
        Generator group.
      example:
        generatorMappings:
        - requestedTokenType: requestedTokenType
          defaultMapping: true
          tokenGenerator:
            location: location
            id: id
        - requestedTokenType: requestedTokenType
          defaultMapping: true
          tokenGenerator:
            location: location
            id: id
        resourceUris:
        - resourceUris
        - resourceUris
        name: name
        id: id
      properties:
        id:
          description: The Token Exchange Generator group ID. ID is unique.
          type: string
        name:
          description: The Token Exchange Generator group name. Name is unique.
          type: string
        resourceUris:
          description: The list of  resource URI's which map to this Token Exchange
            Generator group.
          items:
            type: string
          type: array
        generatorMappings:
          description: A list of Token Generator mapping into an OAuth 2.0 Token Exchange
            requested token type.
          items:
            $ref: '#/components/schemas/TokenExchangeGeneratorMapping'
          type: array
      required:
      - generatorMappings
      - id
      - name
      type: object
    TokenExchangeGeneratorMapping:
      description: A Token Generator mapping into an OAuth 2.0 Token Exchange requested
        token type.
      example:
        requestedTokenType: requestedTokenType
        defaultMapping: true
        tokenGenerator:
          location: location
          id: id
      properties:
        requestedTokenType:
          description: The Requested token type
          type: string
        tokenGenerator:
          $ref: '#/components/schemas/ResourceLink'
        defaultMapping:
          description: Whether this is the default Token Generator Mapping. Defaults
            to false if not specified.
          type: boolean
      required:
      - requestedTokenType
      - tokenGenerator
      type: object
    TokenExchangeGeneratorGroups:
      description: A collection of OAuth 2.0 Token Exchange Generator groups.
      example:
        items:
        - generatorMappings:
          - requestedTokenType: requestedTokenType
            defaultMapping: true
            tokenGenerator:
              location: location
              id: id
          - requestedTokenType: requestedTokenType
            defaultMapping: true
            tokenGenerator:
              location: location
              id: id
          resourceUris:
          - resourceUris
          - resourceUris
          name: name
          id: id
        - generatorMappings:
          - requestedTokenType: requestedTokenType
            defaultMapping: true
            tokenGenerator:
              location: location
              id: id
          - requestedTokenType: requestedTokenType
            defaultMapping: true
            tokenGenerator:
              location: location
              id: id
          resourceUris:
          - resourceUris
          - resourceUris
          name: name
          id: id
      properties:
        items:
          description: The list of OAuth 2.0 Token Exchange Generator groups.
          items:
            $ref: '#/components/schemas/TokenExchangeGeneratorGroup'
          type: array
      type: object
    TokenExchangeProcessorSettings:
      description: Settings for the OAuth Token Exchange Processor Policy configuration.
      example:
        defaultProcessorPolicyRef:
          location: location
          id: id
      properties:
        defaultProcessorPolicyRef:
          $ref: '#/components/schemas/ResourceLink'
      type: object
    TokenExchangeProcessorAttribute:
      description: An attribute for the OAuth 2.0 Token Exchange Processor policy
        attribute contract.
      example:
        name: name
      properties:
        name:
          description: The name of this attribute.
          type: string
      required:
      - name
      type: object
    TokenExchangeProcessorAttributeContract:
      description: A set of attributes exposed by an OAuth 2.0 Token Exchange Processor
        policy.
      example:
        coreAttributes:
        - name: name
        - name: name
        extendedAttributes:
        - name: name
        - name: name
      properties:
        coreAttributes:
          description: "A list of read-only attributes (for example, subject) that\
            \ are automatically populated by PingFederate."
          items:
            $ref: '#/components/schemas/TokenExchangeProcessorAttribute'
          type: array
        extendedAttributes:
          description: A list of additional attributes.
          items:
            $ref: '#/components/schemas/TokenExchangeProcessorAttribute'
          type: array
      type: object
    TokenExchangeProcessorMapping:
      description: A Token Processor(s) mapping into an OAuth 2.0 Token Exchange Processor
        policy.
      example:
        subjectTokenType: subjectTokenType
        attributeContractFulfillment:
          key:
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
        actorTokenProcessor:
          location: location
          id: id
        actorTokenType: actorTokenType
        attributeSources:
        - null
        - null
        issuanceCriteria:
          expressionCriteria:
          - expression: expression
            errorResult: errorResult
          - expression: expression
            errorResult: errorResult
          conditionalCriteria:
          - condition: EQUALS
            errorResult: errorResult
            attributeName: attributeName
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
          - condition: EQUALS
            errorResult: errorResult
            attributeName: attributeName
            source:
              id: id
              type: TOKEN_EXCHANGE_PROCESSOR_POLICY
            value: value
        subjectTokenProcessor:
          location: location
          id: id
      properties:
        attributeSources:
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: '#/components/schemas/AttributeSourceAggregation'
          type: array
        attributeContractFulfillment:
          additionalProperties:
            $ref: '#/components/schemas/AttributeFulfillmentValue'
          description: A list of mappings from attribute names to their fulfillment
            values.
          type: object
        issuanceCriteria:
          $ref: '#/components/schemas/IssuanceCriteria'
        subjectTokenType:
          description: The Subject token type
          type: string
        subjectTokenProcessor:
          $ref: '#/components/schemas/ResourceLink'
        actorTokenType:
          description: The Actor token type
          type: string
        actorTokenProcessor:
          $ref: '#/components/schemas/ResourceLink'
      required:
      - attributeContractFulfillment
      - subjectTokenProcessor
      - subjectTokenType
      type: object
    TokenExchangeProcessorPolicies:
      description: A collection of OAuth 2.0 Token Exchange Processor policies.
      example:
        items:
        - name: name
          id: id
          processorMappings:
          - subjectTokenType: subjectTokenType
            attributeContractFulfillment:
              key:
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
            actorTokenProcessor:
              location: location
              id: id
            actorTokenType: actorTokenType
            attributeSources:
            - null
            - null
            issuanceCriteria:
              expressionCriteria:
              - expression: expression
                errorResult: errorResult
              - expression: expression
                errorResult: errorResult
              conditionalCriteria:
              - condition: EQUALS
                errorResult: errorResult
                attributeName: attributeName
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
              - condition: EQUALS
                errorResult: errorResult
                attributeName: attributeName
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
            subjectTokenProcessor:
              location: location
              id: id
          - subjectTokenType: subjectTokenType
            attributeContractFulfillment:
              key:
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
            actorTokenProcessor:
              location: location
              id: id
            actorTokenType: actorTokenType
            attributeSources:
            - null
            - null
            issuanceCriteria:
              expressionCriteria:
              - expression: expression
                errorResult: errorResult
              - expression: expression
                errorResult: errorResult
              conditionalCriteria:
              - condition: EQUALS
                errorResult: errorResult
                attributeName: attributeName
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
              - condition: EQUALS
                errorResult: errorResult
                attributeName: attributeName
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
            subjectTokenProcessor:
              location: location
              id: id
          actorTokenRequired: true
          attributeContract:
            coreAttributes:
            - name: name
            - name: name
            extendedAttributes:
            - name: name
            - name: name
        - name: name
          id: id
          processorMappings:
          - subjectTokenType: subjectTokenType
            attributeContractFulfillment:
              key:
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
            actorTokenProcessor:
              location: location
              id: id
            actorTokenType: actorTokenType
            attributeSources:
            - null
            - null
            issuanceCriteria:
              expressionCriteria:
              - expression: expression
                errorResult: errorResult
              - expression: expression
                errorResult: errorResult
              conditionalCriteria:
              - condition: EQUALS
                errorResult: errorResult
                attributeName: attributeName
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
              - condition: EQUALS
                errorResult: errorResult
                attributeName: attributeName
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
            subjectTokenProcessor:
              location: location
              id: id
          - subjectTokenType: subjectTokenType
            attributeContractFulfillment:
              key:
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
            actorTokenProcessor:
              location: location
              id: id
            actorTokenType: actorTokenType
            attributeSources:
            - null
            - null
            issuanceCriteria:
              expressionCriteria:
              - expression: expression
                errorResult: errorResult
              - expression: expression
                errorResult: errorResult
              conditionalCriteria:
              - condition: EQUALS
                errorResult: errorResult
                attributeName: attributeName
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
              - condition: EQUALS
                errorResult: errorResult
                attributeName: attributeName
                source:
                  id: id
                  type: TOKEN_EXCHANGE_PROCESSOR_POLICY
                value: value
            subjectTokenProcessor:
              location: location
              id: id
          actorTokenRequired: true
          attributeContract:
            coreAttributes:
            - name: name
            - name: name
            extendedAttributes:
            - name: name
            - name: name
      properties:
        items:
          description: The list of OAuth 2.0 Token Exchange Processor policies.
          items:
            $ref: '#/components/schemas/TokenExchangeProcessorPolicy'
          type: array
      type: object
    TokenExchangeProcessorPolicy:
      description: The set of attributes used to configure a OAuth 2.0 Token Exchange
        processor policy.
      example:
        name: name
        id: id
        processorMappings:
        - subjectTokenType: subjectTokenType
          attributeContractFulfillment:
            key:
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          actorTokenProcessor:
            location: location
            id: id
          actorTokenType: actorTokenType
          attributeSources:
          - null
          - null
          issuanceCriteria:
            expressionCriteria:
            - expression: expression
              errorResult: errorResult
            - expression: expression
              errorResult: errorResult
            conditionalCriteria:
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          subjectTokenProcessor:
            location: location
            id: id
        - subjectTokenType: subjectTokenType
          attributeContractFulfillment:
            key:
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          actorTokenProcessor:
            location: location
            id: id
          actorTokenType: actorTokenType
          attributeSources:
          - null
          - null
          issuanceCriteria:
            expressionCriteria:
            - expression: expression
              errorResult: errorResult
            - expression: expression
              errorResult: errorResult
            conditionalCriteria:
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
            - condition: EQUALS
              errorResult: errorResult
              attributeName: attributeName
              source:
                id: id
                type: TOKEN_EXCHANGE_PROCESSOR_POLICY
              value: value
          subjectTokenProcessor:
            location: location
            id: id
        actorTokenRequired: true
        attributeContract:
          coreAttributes:
          - name: name
          - name: name
          extendedAttributes:
          - name: name
          - name: name
      properties:
        id:
          description: The Token Exchange processor policy ID. ID is unique.
          type: string
        name:
          description: The Token Exchange processor policy name. Name is unique.
          type: string
        actorTokenRequired:
          description: Require an Actor token on a OAuth 2.0 Token Exchange request.
          type: boolean
        attributeContract:
          $ref: '#/components/schemas/TokenExchangeProcessorAttributeContract'
        processorMappings:
          description: A list of Token Processor(s) mappings into an OAuth 2.0 Token
            Exchange Processor policy.
          items:
            $ref: '#/components/schemas/TokenExchangeProcessorMapping'
          type: array
      required:
      - attributeContract
      - id
      - name
      - processorMappings
      type: object
    importConfigArchive_request:
      properties:
        file:
          format: binary
          type: string
      type: object
  securitySchemes:
    BasicAuth:
      scheme: basic
      type: http
    bearer:
      bearerFormat: JWT
      description: OAuth bearer token (see documentation)
      scheme: bearer
      type: http
    oAuth2:
      flows:
        clientCredentials:
          authorizationUrl: https://localhost:9031/as/authorization.oauth2
          scopes: {}
          tokenUrl: https://localhost:9031/as/token.oauth2
      type: oauth2
x-original-swagger-version: "2.0"
