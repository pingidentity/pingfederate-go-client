/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the SpConnectionAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpConnectionAllOf{}

// SpConnectionAllOf The set of attributes used to configure an SP connection.
type SpConnectionAllOf struct {
	SpBrowserSso   *SpBrowserSso     `json:"spBrowserSso,omitempty" tfsdk:"sp_browser_sso"`
	AttributeQuery *SpAttributeQuery `json:"attributeQuery,omitempty" tfsdk:"attribute_query"`
	WsTrust        *SpWsTrust        `json:"wsTrust,omitempty" tfsdk:"ws_trust"`
	// The application name.
	ApplicationName *string `json:"applicationName,omitempty" tfsdk:"application_name"`
	// The application icon url.
	ApplicationIconUrl *string            `json:"applicationIconUrl,omitempty" tfsdk:"application_icon_url"`
	OutboundProvision  *OutboundProvision `json:"outboundProvision,omitempty" tfsdk:"outbound_provision"`
	// The connection target type. This field is intended for bulk import/export usage. Changing its value may result in unexpected behavior.
	ConnectionTargetType *string `json:"connectionTargetType,omitempty" tfsdk:"connection_target_type"`
}

// NewSpConnectionAllOf instantiates a new SpConnectionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpConnectionAllOf() *SpConnectionAllOf {
	this := SpConnectionAllOf{}
	return &this
}

// NewSpConnectionAllOfWithDefaults instantiates a new SpConnectionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpConnectionAllOfWithDefaults() *SpConnectionAllOf {
	this := SpConnectionAllOf{}
	return &this
}

// GetSpBrowserSso returns the SpBrowserSso field value if set, zero value otherwise.
func (o *SpConnectionAllOf) GetSpBrowserSso() SpBrowserSso {
	if o == nil || IsNil(o.SpBrowserSso) {
		var ret SpBrowserSso
		return ret
	}
	return *o.SpBrowserSso
}

// GetSpBrowserSsoOk returns a tuple with the SpBrowserSso field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpConnectionAllOf) GetSpBrowserSsoOk() (*SpBrowserSso, bool) {
	if o == nil || IsNil(o.SpBrowserSso) {
		return nil, false
	}
	return o.SpBrowserSso, true
}

// HasSpBrowserSso returns a boolean if a field has been set.
func (o *SpConnectionAllOf) HasSpBrowserSso() bool {
	if o != nil && !IsNil(o.SpBrowserSso) {
		return true
	}

	return false
}

// SetSpBrowserSso gets a reference to the given SpBrowserSso and assigns it to the SpBrowserSso field.
func (o *SpConnectionAllOf) SetSpBrowserSso(v SpBrowserSso) {
	o.SpBrowserSso = &v
}

// GetAttributeQuery returns the AttributeQuery field value if set, zero value otherwise.
func (o *SpConnectionAllOf) GetAttributeQuery() SpAttributeQuery {
	if o == nil || IsNil(o.AttributeQuery) {
		var ret SpAttributeQuery
		return ret
	}
	return *o.AttributeQuery
}

// GetAttributeQueryOk returns a tuple with the AttributeQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpConnectionAllOf) GetAttributeQueryOk() (*SpAttributeQuery, bool) {
	if o == nil || IsNil(o.AttributeQuery) {
		return nil, false
	}
	return o.AttributeQuery, true
}

// HasAttributeQuery returns a boolean if a field has been set.
func (o *SpConnectionAllOf) HasAttributeQuery() bool {
	if o != nil && !IsNil(o.AttributeQuery) {
		return true
	}

	return false
}

// SetAttributeQuery gets a reference to the given SpAttributeQuery and assigns it to the AttributeQuery field.
func (o *SpConnectionAllOf) SetAttributeQuery(v SpAttributeQuery) {
	o.AttributeQuery = &v
}

// GetWsTrust returns the WsTrust field value if set, zero value otherwise.
func (o *SpConnectionAllOf) GetWsTrust() SpWsTrust {
	if o == nil || IsNil(o.WsTrust) {
		var ret SpWsTrust
		return ret
	}
	return *o.WsTrust
}

// GetWsTrustOk returns a tuple with the WsTrust field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpConnectionAllOf) GetWsTrustOk() (*SpWsTrust, bool) {
	if o == nil || IsNil(o.WsTrust) {
		return nil, false
	}
	return o.WsTrust, true
}

// HasWsTrust returns a boolean if a field has been set.
func (o *SpConnectionAllOf) HasWsTrust() bool {
	if o != nil && !IsNil(o.WsTrust) {
		return true
	}

	return false
}

// SetWsTrust gets a reference to the given SpWsTrust and assigns it to the WsTrust field.
func (o *SpConnectionAllOf) SetWsTrust(v SpWsTrust) {
	o.WsTrust = &v
}

// GetApplicationName returns the ApplicationName field value if set, zero value otherwise.
func (o *SpConnectionAllOf) GetApplicationName() string {
	if o == nil || IsNil(o.ApplicationName) {
		var ret string
		return ret
	}
	return *o.ApplicationName
}

// GetApplicationNameOk returns a tuple with the ApplicationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpConnectionAllOf) GetApplicationNameOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicationName) {
		return nil, false
	}
	return o.ApplicationName, true
}

// HasApplicationName returns a boolean if a field has been set.
func (o *SpConnectionAllOf) HasApplicationName() bool {
	if o != nil && !IsNil(o.ApplicationName) {
		return true
	}

	return false
}

// SetApplicationName gets a reference to the given string and assigns it to the ApplicationName field.
func (o *SpConnectionAllOf) SetApplicationName(v string) {
	o.ApplicationName = &v
}

// GetApplicationIconUrl returns the ApplicationIconUrl field value if set, zero value otherwise.
func (o *SpConnectionAllOf) GetApplicationIconUrl() string {
	if o == nil || IsNil(o.ApplicationIconUrl) {
		var ret string
		return ret
	}
	return *o.ApplicationIconUrl
}

// GetApplicationIconUrlOk returns a tuple with the ApplicationIconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpConnectionAllOf) GetApplicationIconUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicationIconUrl) {
		return nil, false
	}
	return o.ApplicationIconUrl, true
}

// HasApplicationIconUrl returns a boolean if a field has been set.
func (o *SpConnectionAllOf) HasApplicationIconUrl() bool {
	if o != nil && !IsNil(o.ApplicationIconUrl) {
		return true
	}

	return false
}

// SetApplicationIconUrl gets a reference to the given string and assigns it to the ApplicationIconUrl field.
func (o *SpConnectionAllOf) SetApplicationIconUrl(v string) {
	o.ApplicationIconUrl = &v
}

// GetOutboundProvision returns the OutboundProvision field value if set, zero value otherwise.
func (o *SpConnectionAllOf) GetOutboundProvision() OutboundProvision {
	if o == nil || IsNil(o.OutboundProvision) {
		var ret OutboundProvision
		return ret
	}
	return *o.OutboundProvision
}

// GetOutboundProvisionOk returns a tuple with the OutboundProvision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpConnectionAllOf) GetOutboundProvisionOk() (*OutboundProvision, bool) {
	if o == nil || IsNil(o.OutboundProvision) {
		return nil, false
	}
	return o.OutboundProvision, true
}

// HasOutboundProvision returns a boolean if a field has been set.
func (o *SpConnectionAllOf) HasOutboundProvision() bool {
	if o != nil && !IsNil(o.OutboundProvision) {
		return true
	}

	return false
}

// SetOutboundProvision gets a reference to the given OutboundProvision and assigns it to the OutboundProvision field.
func (o *SpConnectionAllOf) SetOutboundProvision(v OutboundProvision) {
	o.OutboundProvision = &v
}

// GetConnectionTargetType returns the ConnectionTargetType field value if set, zero value otherwise.
func (o *SpConnectionAllOf) GetConnectionTargetType() string {
	if o == nil || IsNil(o.ConnectionTargetType) {
		var ret string
		return ret
	}
	return *o.ConnectionTargetType
}

// GetConnectionTargetTypeOk returns a tuple with the ConnectionTargetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpConnectionAllOf) GetConnectionTargetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionTargetType) {
		return nil, false
	}
	return o.ConnectionTargetType, true
}

// HasConnectionTargetType returns a boolean if a field has been set.
func (o *SpConnectionAllOf) HasConnectionTargetType() bool {
	if o != nil && !IsNil(o.ConnectionTargetType) {
		return true
	}

	return false
}

// SetConnectionTargetType gets a reference to the given string and assigns it to the ConnectionTargetType field.
func (o *SpConnectionAllOf) SetConnectionTargetType(v string) {
	o.ConnectionTargetType = &v
}

func (o SpConnectionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpConnectionAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SpBrowserSso) {
		toSerialize["spBrowserSso"] = o.SpBrowserSso
	}
	if !IsNil(o.AttributeQuery) {
		toSerialize["attributeQuery"] = o.AttributeQuery
	}
	if !IsNil(o.WsTrust) {
		toSerialize["wsTrust"] = o.WsTrust
	}
	if !IsNil(o.ApplicationName) {
		toSerialize["applicationName"] = o.ApplicationName
	}
	if !IsNil(o.ApplicationIconUrl) {
		toSerialize["applicationIconUrl"] = o.ApplicationIconUrl
	}
	if !IsNil(o.OutboundProvision) {
		toSerialize["outboundProvision"] = o.OutboundProvision
	}
	if !IsNil(o.ConnectionTargetType) {
		toSerialize["connectionTargetType"] = o.ConnectionTargetType
	}
	return toSerialize, nil
}

type NullableSpConnectionAllOf struct {
	value *SpConnectionAllOf
	isSet bool
}

func (v NullableSpConnectionAllOf) Get() *SpConnectionAllOf {
	return v.value
}

func (v *NullableSpConnectionAllOf) Set(val *SpConnectionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSpConnectionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSpConnectionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpConnectionAllOf(val *SpConnectionAllOf) *NullableSpConnectionAllOf {
	return &NullableSpConnectionAllOf{value: val, isSet: true}
}

func (v NullableSpConnectionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpConnectionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
