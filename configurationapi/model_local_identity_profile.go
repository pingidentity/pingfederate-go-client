/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// checks if the LocalIdentityProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocalIdentityProfile{}

// LocalIdentityProfile A local identity profile.
type LocalIdentityProfile struct {
	// The persistent, unique ID for the local identity profile. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified.
	Id *string `json:"id,omitempty" tfsdk:"id"`
	// The local identity profile name. Name is unique.
	Name  string       `json:"name" tfsdk:"name"`
	ApcId ResourceLink `json:"apcId" tfsdk:"apc_id"`
	// The local identity authentication sources. Sources are unique.
	AuthSources            []LocalIdentityAuthSource            `json:"authSources,omitempty" tfsdk:"auth_sources"`
	AuthSourceUpdatePolicy *LocalIdentityAuthSourceUpdatePolicy `json:"authSourceUpdatePolicy,omitempty" tfsdk:"auth_source_update_policy"`
	// Whether the registration configuration is enabled or not.
	RegistrationEnabled     *bool                    `json:"registrationEnabled,omitempty" tfsdk:"registration_enabled"`
	RegistrationConfig      *RegistrationConfig      `json:"registrationConfig,omitempty" tfsdk:"registration_config"`
	ProfileConfig           *ProfileConfig           `json:"profileConfig,omitempty" tfsdk:"profile_config"`
	FieldConfig             *FieldConfig             `json:"fieldConfig,omitempty" tfsdk:"field_config"`
	EmailVerificationConfig *EmailVerificationConfig `json:"emailVerificationConfig,omitempty" tfsdk:"email_verification_config"`
	DataStoreConfig         *LdapDataStoreConfig     `json:"dataStoreConfig,omitempty" tfsdk:"data_store_config"`
	// Whether the profile configuration is enabled or not.
	ProfileEnabled *bool `json:"profileEnabled,omitempty" tfsdk:"profile_enabled"`
}

type _LocalIdentityProfile LocalIdentityProfile

// NewLocalIdentityProfile instantiates a new LocalIdentityProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocalIdentityProfile(name string, apcId ResourceLink) *LocalIdentityProfile {
	this := LocalIdentityProfile{}
	this.Name = name
	this.ApcId = apcId
	return &this
}

// NewLocalIdentityProfileWithDefaults instantiates a new LocalIdentityProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocalIdentityProfileWithDefaults() *LocalIdentityProfile {
	this := LocalIdentityProfile{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LocalIdentityProfile) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalIdentityProfile) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LocalIdentityProfile) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LocalIdentityProfile) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *LocalIdentityProfile) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LocalIdentityProfile) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LocalIdentityProfile) SetName(v string) {
	o.Name = v
}

// GetApcId returns the ApcId field value
func (o *LocalIdentityProfile) GetApcId() ResourceLink {
	if o == nil {
		var ret ResourceLink
		return ret
	}

	return o.ApcId
}

// GetApcIdOk returns a tuple with the ApcId field value
// and a boolean to check if the value has been set.
func (o *LocalIdentityProfile) GetApcIdOk() (*ResourceLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApcId, true
}

// SetApcId sets field value
func (o *LocalIdentityProfile) SetApcId(v ResourceLink) {
	o.ApcId = v
}

// GetAuthSources returns the AuthSources field value if set, zero value otherwise.
func (o *LocalIdentityProfile) GetAuthSources() []LocalIdentityAuthSource {
	if o == nil || IsNil(o.AuthSources) {
		var ret []LocalIdentityAuthSource
		return ret
	}
	return o.AuthSources
}

// GetAuthSourcesOk returns a tuple with the AuthSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalIdentityProfile) GetAuthSourcesOk() ([]LocalIdentityAuthSource, bool) {
	if o == nil || IsNil(o.AuthSources) {
		return nil, false
	}
	return o.AuthSources, true
}

// HasAuthSources returns a boolean if a field has been set.
func (o *LocalIdentityProfile) HasAuthSources() bool {
	if o != nil && !IsNil(o.AuthSources) {
		return true
	}

	return false
}

// SetAuthSources gets a reference to the given []LocalIdentityAuthSource and assigns it to the AuthSources field.
func (o *LocalIdentityProfile) SetAuthSources(v []LocalIdentityAuthSource) {
	o.AuthSources = v
}

// GetAuthSourceUpdatePolicy returns the AuthSourceUpdatePolicy field value if set, zero value otherwise.
func (o *LocalIdentityProfile) GetAuthSourceUpdatePolicy() LocalIdentityAuthSourceUpdatePolicy {
	if o == nil || IsNil(o.AuthSourceUpdatePolicy) {
		var ret LocalIdentityAuthSourceUpdatePolicy
		return ret
	}
	return *o.AuthSourceUpdatePolicy
}

// GetAuthSourceUpdatePolicyOk returns a tuple with the AuthSourceUpdatePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalIdentityProfile) GetAuthSourceUpdatePolicyOk() (*LocalIdentityAuthSourceUpdatePolicy, bool) {
	if o == nil || IsNil(o.AuthSourceUpdatePolicy) {
		return nil, false
	}
	return o.AuthSourceUpdatePolicy, true
}

// HasAuthSourceUpdatePolicy returns a boolean if a field has been set.
func (o *LocalIdentityProfile) HasAuthSourceUpdatePolicy() bool {
	if o != nil && !IsNil(o.AuthSourceUpdatePolicy) {
		return true
	}

	return false
}

// SetAuthSourceUpdatePolicy gets a reference to the given LocalIdentityAuthSourceUpdatePolicy and assigns it to the AuthSourceUpdatePolicy field.
func (o *LocalIdentityProfile) SetAuthSourceUpdatePolicy(v LocalIdentityAuthSourceUpdatePolicy) {
	o.AuthSourceUpdatePolicy = &v
}

// GetRegistrationEnabled returns the RegistrationEnabled field value if set, zero value otherwise.
func (o *LocalIdentityProfile) GetRegistrationEnabled() bool {
	if o == nil || IsNil(o.RegistrationEnabled) {
		var ret bool
		return ret
	}
	return *o.RegistrationEnabled
}

// GetRegistrationEnabledOk returns a tuple with the RegistrationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalIdentityProfile) GetRegistrationEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RegistrationEnabled) {
		return nil, false
	}
	return o.RegistrationEnabled, true
}

// HasRegistrationEnabled returns a boolean if a field has been set.
func (o *LocalIdentityProfile) HasRegistrationEnabled() bool {
	if o != nil && !IsNil(o.RegistrationEnabled) {
		return true
	}

	return false
}

// SetRegistrationEnabled gets a reference to the given bool and assigns it to the RegistrationEnabled field.
func (o *LocalIdentityProfile) SetRegistrationEnabled(v bool) {
	o.RegistrationEnabled = &v
}

// GetRegistrationConfig returns the RegistrationConfig field value if set, zero value otherwise.
func (o *LocalIdentityProfile) GetRegistrationConfig() RegistrationConfig {
	if o == nil || IsNil(o.RegistrationConfig) {
		var ret RegistrationConfig
		return ret
	}
	return *o.RegistrationConfig
}

// GetRegistrationConfigOk returns a tuple with the RegistrationConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalIdentityProfile) GetRegistrationConfigOk() (*RegistrationConfig, bool) {
	if o == nil || IsNil(o.RegistrationConfig) {
		return nil, false
	}
	return o.RegistrationConfig, true
}

// HasRegistrationConfig returns a boolean if a field has been set.
func (o *LocalIdentityProfile) HasRegistrationConfig() bool {
	if o != nil && !IsNil(o.RegistrationConfig) {
		return true
	}

	return false
}

// SetRegistrationConfig gets a reference to the given RegistrationConfig and assigns it to the RegistrationConfig field.
func (o *LocalIdentityProfile) SetRegistrationConfig(v RegistrationConfig) {
	o.RegistrationConfig = &v
}

// GetProfileConfig returns the ProfileConfig field value if set, zero value otherwise.
func (o *LocalIdentityProfile) GetProfileConfig() ProfileConfig {
	if o == nil || IsNil(o.ProfileConfig) {
		var ret ProfileConfig
		return ret
	}
	return *o.ProfileConfig
}

// GetProfileConfigOk returns a tuple with the ProfileConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalIdentityProfile) GetProfileConfigOk() (*ProfileConfig, bool) {
	if o == nil || IsNil(o.ProfileConfig) {
		return nil, false
	}
	return o.ProfileConfig, true
}

// HasProfileConfig returns a boolean if a field has been set.
func (o *LocalIdentityProfile) HasProfileConfig() bool {
	if o != nil && !IsNil(o.ProfileConfig) {
		return true
	}

	return false
}

// SetProfileConfig gets a reference to the given ProfileConfig and assigns it to the ProfileConfig field.
func (o *LocalIdentityProfile) SetProfileConfig(v ProfileConfig) {
	o.ProfileConfig = &v
}

// GetFieldConfig returns the FieldConfig field value if set, zero value otherwise.
func (o *LocalIdentityProfile) GetFieldConfig() FieldConfig {
	if o == nil || IsNil(o.FieldConfig) {
		var ret FieldConfig
		return ret
	}
	return *o.FieldConfig
}

// GetFieldConfigOk returns a tuple with the FieldConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalIdentityProfile) GetFieldConfigOk() (*FieldConfig, bool) {
	if o == nil || IsNil(o.FieldConfig) {
		return nil, false
	}
	return o.FieldConfig, true
}

// HasFieldConfig returns a boolean if a field has been set.
func (o *LocalIdentityProfile) HasFieldConfig() bool {
	if o != nil && !IsNil(o.FieldConfig) {
		return true
	}

	return false
}

// SetFieldConfig gets a reference to the given FieldConfig and assigns it to the FieldConfig field.
func (o *LocalIdentityProfile) SetFieldConfig(v FieldConfig) {
	o.FieldConfig = &v
}

// GetEmailVerificationConfig returns the EmailVerificationConfig field value if set, zero value otherwise.
func (o *LocalIdentityProfile) GetEmailVerificationConfig() EmailVerificationConfig {
	if o == nil || IsNil(o.EmailVerificationConfig) {
		var ret EmailVerificationConfig
		return ret
	}
	return *o.EmailVerificationConfig
}

// GetEmailVerificationConfigOk returns a tuple with the EmailVerificationConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalIdentityProfile) GetEmailVerificationConfigOk() (*EmailVerificationConfig, bool) {
	if o == nil || IsNil(o.EmailVerificationConfig) {
		return nil, false
	}
	return o.EmailVerificationConfig, true
}

// HasEmailVerificationConfig returns a boolean if a field has been set.
func (o *LocalIdentityProfile) HasEmailVerificationConfig() bool {
	if o != nil && !IsNil(o.EmailVerificationConfig) {
		return true
	}

	return false
}

// SetEmailVerificationConfig gets a reference to the given EmailVerificationConfig and assigns it to the EmailVerificationConfig field.
func (o *LocalIdentityProfile) SetEmailVerificationConfig(v EmailVerificationConfig) {
	o.EmailVerificationConfig = &v
}

// GetDataStoreConfig returns the DataStoreConfig field value if set, zero value otherwise.
func (o *LocalIdentityProfile) GetDataStoreConfig() LdapDataStoreConfig {
	if o == nil || IsNil(o.DataStoreConfig) {
		var ret LdapDataStoreConfig
		return ret
	}
	return *o.DataStoreConfig
}

// GetDataStoreConfigOk returns a tuple with the DataStoreConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalIdentityProfile) GetDataStoreConfigOk() (*LdapDataStoreConfig, bool) {
	if o == nil || IsNil(o.DataStoreConfig) {
		return nil, false
	}
	return o.DataStoreConfig, true
}

// HasDataStoreConfig returns a boolean if a field has been set.
func (o *LocalIdentityProfile) HasDataStoreConfig() bool {
	if o != nil && !IsNil(o.DataStoreConfig) {
		return true
	}

	return false
}

// SetDataStoreConfig gets a reference to the given LdapDataStoreConfig and assigns it to the DataStoreConfig field.
func (o *LocalIdentityProfile) SetDataStoreConfig(v LdapDataStoreConfig) {
	o.DataStoreConfig = &v
}

// GetProfileEnabled returns the ProfileEnabled field value if set, zero value otherwise.
func (o *LocalIdentityProfile) GetProfileEnabled() bool {
	if o == nil || IsNil(o.ProfileEnabled) {
		var ret bool
		return ret
	}
	return *o.ProfileEnabled
}

// GetProfileEnabledOk returns a tuple with the ProfileEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalIdentityProfile) GetProfileEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ProfileEnabled) {
		return nil, false
	}
	return o.ProfileEnabled, true
}

// HasProfileEnabled returns a boolean if a field has been set.
func (o *LocalIdentityProfile) HasProfileEnabled() bool {
	if o != nil && !IsNil(o.ProfileEnabled) {
		return true
	}

	return false
}

// SetProfileEnabled gets a reference to the given bool and assigns it to the ProfileEnabled field.
func (o *LocalIdentityProfile) SetProfileEnabled(v bool) {
	o.ProfileEnabled = &v
}

func (o LocalIdentityProfile) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocalIdentityProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["apcId"] = o.ApcId
	if !IsNil(o.AuthSources) {
		toSerialize["authSources"] = o.AuthSources
	}
	if !IsNil(o.AuthSourceUpdatePolicy) {
		toSerialize["authSourceUpdatePolicy"] = o.AuthSourceUpdatePolicy
	}
	if !IsNil(o.RegistrationEnabled) {
		toSerialize["registrationEnabled"] = o.RegistrationEnabled
	}
	if !IsNil(o.RegistrationConfig) {
		toSerialize["registrationConfig"] = o.RegistrationConfig
	}
	if !IsNil(o.ProfileConfig) {
		toSerialize["profileConfig"] = o.ProfileConfig
	}
	if !IsNil(o.FieldConfig) {
		toSerialize["fieldConfig"] = o.FieldConfig
	}
	if !IsNil(o.EmailVerificationConfig) {
		toSerialize["emailVerificationConfig"] = o.EmailVerificationConfig
	}
	if !IsNil(o.DataStoreConfig) {
		toSerialize["dataStoreConfig"] = o.DataStoreConfig
	}
	if !IsNil(o.ProfileEnabled) {
		toSerialize["profileEnabled"] = o.ProfileEnabled
	}
	return toSerialize, nil
}

func (o *LocalIdentityProfile) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"apcId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLocalIdentityProfile := _LocalIdentityProfile{}

	err = json.Unmarshal(bytes, &varLocalIdentityProfile)

	if err != nil {
		return err
	}

	*o = LocalIdentityProfile(varLocalIdentityProfile)

	return err
}

type NullableLocalIdentityProfile struct {
	value *LocalIdentityProfile
	isSet bool
}

func (v NullableLocalIdentityProfile) Get() *LocalIdentityProfile {
	return v.value
}

func (v *NullableLocalIdentityProfile) Set(val *LocalIdentityProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableLocalIdentityProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableLocalIdentityProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocalIdentityProfile(val *LocalIdentityProfile) *NullableLocalIdentityProfile {
	return &NullableLocalIdentityProfile{value: val, isSet: true}
}

func (v NullableLocalIdentityProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocalIdentityProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
