/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the UrlWhitelistEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UrlWhitelistEntry{}

// UrlWhitelistEntry Url domain and path to be used as whitelist in WS-Federation connection
type UrlWhitelistEntry struct {
	// Valid Domain Name (leading wildcard '*.' allowed)
	ValidDomain *string `json:"validDomain,omitempty"`
	// Valid Path (leave blank to allow any path)
	ValidPath *string `json:"validPath,omitempty"`
	// Allow Any Query/Fragment
	AllowQueryAndFragment *bool `json:"allowQueryAndFragment,omitempty"`
	// Require HTTPS
	RequireHttps *bool `json:"requireHttps,omitempty"`
}

// NewUrlWhitelistEntry instantiates a new UrlWhitelistEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUrlWhitelistEntry() *UrlWhitelistEntry {
	this := UrlWhitelistEntry{}
	return &this
}

// NewUrlWhitelistEntryWithDefaults instantiates a new UrlWhitelistEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUrlWhitelistEntryWithDefaults() *UrlWhitelistEntry {
	this := UrlWhitelistEntry{}
	return &this
}

// GetValidDomain returns the ValidDomain field value if set, zero value otherwise.
func (o *UrlWhitelistEntry) GetValidDomain() string {
	if o == nil || IsNil(o.ValidDomain) {
		var ret string
		return ret
	}
	return *o.ValidDomain
}

// GetValidDomainOk returns a tuple with the ValidDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlWhitelistEntry) GetValidDomainOk() (*string, bool) {
	if o == nil || IsNil(o.ValidDomain) {
		return nil, false
	}
	return o.ValidDomain, true
}

// HasValidDomain returns a boolean if a field has been set.
func (o *UrlWhitelistEntry) HasValidDomain() bool {
	if o != nil && !IsNil(o.ValidDomain) {
		return true
	}

	return false
}

// SetValidDomain gets a reference to the given string and assigns it to the ValidDomain field.
func (o *UrlWhitelistEntry) SetValidDomain(v string) {
	o.ValidDomain = &v
}

// GetValidPath returns the ValidPath field value if set, zero value otherwise.
func (o *UrlWhitelistEntry) GetValidPath() string {
	if o == nil || IsNil(o.ValidPath) {
		var ret string
		return ret
	}
	return *o.ValidPath
}

// GetValidPathOk returns a tuple with the ValidPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlWhitelistEntry) GetValidPathOk() (*string, bool) {
	if o == nil || IsNil(o.ValidPath) {
		return nil, false
	}
	return o.ValidPath, true
}

// HasValidPath returns a boolean if a field has been set.
func (o *UrlWhitelistEntry) HasValidPath() bool {
	if o != nil && !IsNil(o.ValidPath) {
		return true
	}

	return false
}

// SetValidPath gets a reference to the given string and assigns it to the ValidPath field.
func (o *UrlWhitelistEntry) SetValidPath(v string) {
	o.ValidPath = &v
}

// GetAllowQueryAndFragment returns the AllowQueryAndFragment field value if set, zero value otherwise.
func (o *UrlWhitelistEntry) GetAllowQueryAndFragment() bool {
	if o == nil || IsNil(o.AllowQueryAndFragment) {
		var ret bool
		return ret
	}
	return *o.AllowQueryAndFragment
}

// GetAllowQueryAndFragmentOk returns a tuple with the AllowQueryAndFragment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlWhitelistEntry) GetAllowQueryAndFragmentOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowQueryAndFragment) {
		return nil, false
	}
	return o.AllowQueryAndFragment, true
}

// HasAllowQueryAndFragment returns a boolean if a field has been set.
func (o *UrlWhitelistEntry) HasAllowQueryAndFragment() bool {
	if o != nil && !IsNil(o.AllowQueryAndFragment) {
		return true
	}

	return false
}

// SetAllowQueryAndFragment gets a reference to the given bool and assigns it to the AllowQueryAndFragment field.
func (o *UrlWhitelistEntry) SetAllowQueryAndFragment(v bool) {
	o.AllowQueryAndFragment = &v
}

// GetRequireHttps returns the RequireHttps field value if set, zero value otherwise.
func (o *UrlWhitelistEntry) GetRequireHttps() bool {
	if o == nil || IsNil(o.RequireHttps) {
		var ret bool
		return ret
	}
	return *o.RequireHttps
}

// GetRequireHttpsOk returns a tuple with the RequireHttps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlWhitelistEntry) GetRequireHttpsOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireHttps) {
		return nil, false
	}
	return o.RequireHttps, true
}

// HasRequireHttps returns a boolean if a field has been set.
func (o *UrlWhitelistEntry) HasRequireHttps() bool {
	if o != nil && !IsNil(o.RequireHttps) {
		return true
	}

	return false
}

// SetRequireHttps gets a reference to the given bool and assigns it to the RequireHttps field.
func (o *UrlWhitelistEntry) SetRequireHttps(v bool) {
	o.RequireHttps = &v
}

func (o UrlWhitelistEntry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UrlWhitelistEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ValidDomain) {
		toSerialize["validDomain"] = o.ValidDomain
	}
	if !IsNil(o.ValidPath) {
		toSerialize["validPath"] = o.ValidPath
	}
	if !IsNil(o.AllowQueryAndFragment) {
		toSerialize["allowQueryAndFragment"] = o.AllowQueryAndFragment
	}
	if !IsNil(o.RequireHttps) {
		toSerialize["requireHttps"] = o.RequireHttps
	}
	return toSerialize, nil
}

type NullableUrlWhitelistEntry struct {
	value *UrlWhitelistEntry
	isSet bool
}

func (v NullableUrlWhitelistEntry) Get() *UrlWhitelistEntry {
	return v.value
}

func (v *NullableUrlWhitelistEntry) Set(val *UrlWhitelistEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableUrlWhitelistEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableUrlWhitelistEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUrlWhitelistEntry(val *UrlWhitelistEntry) *NullableUrlWhitelistEntry {
	return &NullableUrlWhitelistEntry{value: val, isSet: true}
}

func (v NullableUrlWhitelistEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUrlWhitelistEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
