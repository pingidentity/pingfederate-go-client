/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ChannelSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelSource{}

// ChannelSource The source data source and LDAP settings.
type ChannelSource struct {
	DataSource ResourceLink `json:"dataSource" tfsdk:"data_source"`
	// the GUID attribute name.
	GuidAttributeName string `json:"guidAttributeName" tfsdk:"guid_attribute_name"`
	// Indicates whether the GUID is stored in binary format.
	GuidBinary                bool                      `json:"guidBinary" tfsdk:"guid_binary"`
	ChangeDetectionSettings   ChangeDetectionSettings   `json:"changeDetectionSettings" tfsdk:"change_detection_settings"`
	GroupMembershipDetection  GroupMembershipDetection  `json:"groupMembershipDetection" tfsdk:"group_membership_detection"`
	AccountManagementSettings AccountManagementSettings `json:"accountManagementSettings" tfsdk:"account_management_settings"`
	// The base DN where the user records are located.
	BaseDn              string                 `json:"baseDn" tfsdk:"base_dn"`
	UserSourceLocation  ChannelSourceLocation  `json:"userSourceLocation" tfsdk:"user_source_location"`
	GroupSourceLocation *ChannelSourceLocation `json:"groupSourceLocation,omitempty" tfsdk:"group_source_location"`
}

// NewChannelSource instantiates a new ChannelSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelSource(dataSource ResourceLink, guidAttributeName string, guidBinary bool, changeDetectionSettings ChangeDetectionSettings, groupMembershipDetection GroupMembershipDetection, accountManagementSettings AccountManagementSettings, baseDn string, userSourceLocation ChannelSourceLocation) *ChannelSource {
	this := ChannelSource{}
	this.DataSource = dataSource
	this.GuidAttributeName = guidAttributeName
	this.GuidBinary = guidBinary
	this.ChangeDetectionSettings = changeDetectionSettings
	this.GroupMembershipDetection = groupMembershipDetection
	this.AccountManagementSettings = accountManagementSettings
	this.BaseDn = baseDn
	this.UserSourceLocation = userSourceLocation
	return &this
}

// NewChannelSourceWithDefaults instantiates a new ChannelSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelSourceWithDefaults() *ChannelSource {
	this := ChannelSource{}
	return &this
}

// GetDataSource returns the DataSource field value
func (o *ChannelSource) GetDataSource() ResourceLink {
	if o == nil {
		var ret ResourceLink
		return ret
	}

	return o.DataSource
}

// GetDataSourceOk returns a tuple with the DataSource field value
// and a boolean to check if the value has been set.
func (o *ChannelSource) GetDataSourceOk() (*ResourceLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataSource, true
}

// SetDataSource sets field value
func (o *ChannelSource) SetDataSource(v ResourceLink) {
	o.DataSource = v
}

// GetGuidAttributeName returns the GuidAttributeName field value
func (o *ChannelSource) GetGuidAttributeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GuidAttributeName
}

// GetGuidAttributeNameOk returns a tuple with the GuidAttributeName field value
// and a boolean to check if the value has been set.
func (o *ChannelSource) GetGuidAttributeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GuidAttributeName, true
}

// SetGuidAttributeName sets field value
func (o *ChannelSource) SetGuidAttributeName(v string) {
	o.GuidAttributeName = v
}

// GetGuidBinary returns the GuidBinary field value
func (o *ChannelSource) GetGuidBinary() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.GuidBinary
}

// GetGuidBinaryOk returns a tuple with the GuidBinary field value
// and a boolean to check if the value has been set.
func (o *ChannelSource) GetGuidBinaryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GuidBinary, true
}

// SetGuidBinary sets field value
func (o *ChannelSource) SetGuidBinary(v bool) {
	o.GuidBinary = v
}

// GetChangeDetectionSettings returns the ChangeDetectionSettings field value
func (o *ChannelSource) GetChangeDetectionSettings() ChangeDetectionSettings {
	if o == nil {
		var ret ChangeDetectionSettings
		return ret
	}

	return o.ChangeDetectionSettings
}

// GetChangeDetectionSettingsOk returns a tuple with the ChangeDetectionSettings field value
// and a boolean to check if the value has been set.
func (o *ChannelSource) GetChangeDetectionSettingsOk() (*ChangeDetectionSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangeDetectionSettings, true
}

// SetChangeDetectionSettings sets field value
func (o *ChannelSource) SetChangeDetectionSettings(v ChangeDetectionSettings) {
	o.ChangeDetectionSettings = v
}

// GetGroupMembershipDetection returns the GroupMembershipDetection field value
func (o *ChannelSource) GetGroupMembershipDetection() GroupMembershipDetection {
	if o == nil {
		var ret GroupMembershipDetection
		return ret
	}

	return o.GroupMembershipDetection
}

// GetGroupMembershipDetectionOk returns a tuple with the GroupMembershipDetection field value
// and a boolean to check if the value has been set.
func (o *ChannelSource) GetGroupMembershipDetectionOk() (*GroupMembershipDetection, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupMembershipDetection, true
}

// SetGroupMembershipDetection sets field value
func (o *ChannelSource) SetGroupMembershipDetection(v GroupMembershipDetection) {
	o.GroupMembershipDetection = v
}

// GetAccountManagementSettings returns the AccountManagementSettings field value
func (o *ChannelSource) GetAccountManagementSettings() AccountManagementSettings {
	if o == nil {
		var ret AccountManagementSettings
		return ret
	}

	return o.AccountManagementSettings
}

// GetAccountManagementSettingsOk returns a tuple with the AccountManagementSettings field value
// and a boolean to check if the value has been set.
func (o *ChannelSource) GetAccountManagementSettingsOk() (*AccountManagementSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountManagementSettings, true
}

// SetAccountManagementSettings sets field value
func (o *ChannelSource) SetAccountManagementSettings(v AccountManagementSettings) {
	o.AccountManagementSettings = v
}

// GetBaseDn returns the BaseDn field value
func (o *ChannelSource) GetBaseDn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BaseDn
}

// GetBaseDnOk returns a tuple with the BaseDn field value
// and a boolean to check if the value has been set.
func (o *ChannelSource) GetBaseDnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseDn, true
}

// SetBaseDn sets field value
func (o *ChannelSource) SetBaseDn(v string) {
	o.BaseDn = v
}

// GetUserSourceLocation returns the UserSourceLocation field value
func (o *ChannelSource) GetUserSourceLocation() ChannelSourceLocation {
	if o == nil {
		var ret ChannelSourceLocation
		return ret
	}

	return o.UserSourceLocation
}

// GetUserSourceLocationOk returns a tuple with the UserSourceLocation field value
// and a boolean to check if the value has been set.
func (o *ChannelSource) GetUserSourceLocationOk() (*ChannelSourceLocation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserSourceLocation, true
}

// SetUserSourceLocation sets field value
func (o *ChannelSource) SetUserSourceLocation(v ChannelSourceLocation) {
	o.UserSourceLocation = v
}

// GetGroupSourceLocation returns the GroupSourceLocation field value if set, zero value otherwise.
func (o *ChannelSource) GetGroupSourceLocation() ChannelSourceLocation {
	if o == nil || IsNil(o.GroupSourceLocation) {
		var ret ChannelSourceLocation
		return ret
	}
	return *o.GroupSourceLocation
}

// GetGroupSourceLocationOk returns a tuple with the GroupSourceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelSource) GetGroupSourceLocationOk() (*ChannelSourceLocation, bool) {
	if o == nil || IsNil(o.GroupSourceLocation) {
		return nil, false
	}
	return o.GroupSourceLocation, true
}

// HasGroupSourceLocation returns a boolean if a field has been set.
func (o *ChannelSource) HasGroupSourceLocation() bool {
	if o != nil && !IsNil(o.GroupSourceLocation) {
		return true
	}

	return false
}

// SetGroupSourceLocation gets a reference to the given ChannelSourceLocation and assigns it to the GroupSourceLocation field.
func (o *ChannelSource) SetGroupSourceLocation(v ChannelSourceLocation) {
	o.GroupSourceLocation = &v
}

func (o ChannelSource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dataSource"] = o.DataSource
	toSerialize["guidAttributeName"] = o.GuidAttributeName
	toSerialize["guidBinary"] = o.GuidBinary
	toSerialize["changeDetectionSettings"] = o.ChangeDetectionSettings
	toSerialize["groupMembershipDetection"] = o.GroupMembershipDetection
	toSerialize["accountManagementSettings"] = o.AccountManagementSettings
	toSerialize["baseDn"] = o.BaseDn
	toSerialize["userSourceLocation"] = o.UserSourceLocation
	if !IsNil(o.GroupSourceLocation) {
		toSerialize["groupSourceLocation"] = o.GroupSourceLocation
	}
	return toSerialize, nil
}

type NullableChannelSource struct {
	value *ChannelSource
	isSet bool
}

func (v NullableChannelSource) Get() *ChannelSource {
	return v.value
}

func (v *NullableChannelSource) Set(val *ChannelSource) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelSource) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelSource(val *ChannelSource) *NullableChannelSource {
	return &NullableChannelSource{value: val, isSet: true}
}

func (v NullableChannelSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
