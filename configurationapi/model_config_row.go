/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ConfigRow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigRow{}

// ConfigRow A row of configuration values for a plugin configuration table.
type ConfigRow struct {
	// The configuration fields in the row.
	Fields []ConfigField `json:"fields" tfsdk:"fields"`
	// Whether this row is the default.
	DefaultRow *bool `json:"defaultRow,omitempty" tfsdk:"default_row"`
}

// NewConfigRow instantiates a new ConfigRow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigRow(fields []ConfigField) *ConfigRow {
	this := ConfigRow{}
	this.Fields = fields
	return &this
}

// NewConfigRowWithDefaults instantiates a new ConfigRow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigRowWithDefaults() *ConfigRow {
	this := ConfigRow{}
	return &this
}

// GetFields returns the Fields field value
func (o *ConfigRow) GetFields() []ConfigField {
	if o == nil {
		var ret []ConfigField
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *ConfigRow) GetFieldsOk() ([]ConfigField, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fields, true
}

// SetFields sets field value
func (o *ConfigRow) SetFields(v []ConfigField) {
	o.Fields = v
}

// GetDefaultRow returns the DefaultRow field value if set, zero value otherwise.
func (o *ConfigRow) GetDefaultRow() bool {
	if o == nil || IsNil(o.DefaultRow) {
		var ret bool
		return ret
	}
	return *o.DefaultRow
}

// GetDefaultRowOk returns a tuple with the DefaultRow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigRow) GetDefaultRowOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultRow) {
		return nil, false
	}
	return o.DefaultRow, true
}

// HasDefaultRow returns a boolean if a field has been set.
func (o *ConfigRow) HasDefaultRow() bool {
	if o != nil && !IsNil(o.DefaultRow) {
		return true
	}

	return false
}

// SetDefaultRow gets a reference to the given bool and assigns it to the DefaultRow field.
func (o *ConfigRow) SetDefaultRow(v bool) {
	o.DefaultRow = &v
}

func (o ConfigRow) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigRow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fields"] = o.Fields
	if !IsNil(o.DefaultRow) {
		toSerialize["defaultRow"] = o.DefaultRow
	}
	return toSerialize, nil
}

type NullableConfigRow struct {
	value *ConfigRow
	isSet bool
}

func (v NullableConfigRow) Get() *ConfigRow {
	return v.value
}

func (v *NullableConfigRow) Set(val *ConfigRow) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigRow) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigRow(val *ConfigRow) *NullableConfigRow {
	return &NullableConfigRow{value: val, isSet: true}
}

func (v NullableConfigRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
