/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ValidationError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidationError{}

// ValidationError A data input validation error.
type ValidationError struct {
	// Error identifier.
	ErrorId *string `json:"errorId,omitempty" tfsdk:"error_id"`
	// User-friendly error description.
	Message *string `json:"message,omitempty" tfsdk:"message"`
	// Developer-oriented error message, if available.
	DeveloperMessage *string `json:"developerMessage,omitempty" tfsdk:"developer_message"`
	// The path to the model field to which the error relates, if one exists.
	FieldPath *string `json:"fieldPath,omitempty" tfsdk:"field_path"`
}

// NewValidationError instantiates a new ValidationError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidationError() *ValidationError {
	this := ValidationError{}
	return &this
}

// NewValidationErrorWithDefaults instantiates a new ValidationError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationErrorWithDefaults() *ValidationError {
	this := ValidationError{}
	return &this
}

// GetErrorId returns the ErrorId field value if set, zero value otherwise.
func (o *ValidationError) GetErrorId() string {
	if o == nil || IsNil(o.ErrorId) {
		var ret string
		return ret
	}
	return *o.ErrorId
}

// GetErrorIdOk returns a tuple with the ErrorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationError) GetErrorIdOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorId) {
		return nil, false
	}
	return o.ErrorId, true
}

// HasErrorId returns a boolean if a field has been set.
func (o *ValidationError) HasErrorId() bool {
	if o != nil && !IsNil(o.ErrorId) {
		return true
	}

	return false
}

// SetErrorId gets a reference to the given string and assigns it to the ErrorId field.
func (o *ValidationError) SetErrorId(v string) {
	o.ErrorId = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ValidationError) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationError) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ValidationError) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ValidationError) SetMessage(v string) {
	o.Message = &v
}

// GetDeveloperMessage returns the DeveloperMessage field value if set, zero value otherwise.
func (o *ValidationError) GetDeveloperMessage() string {
	if o == nil || IsNil(o.DeveloperMessage) {
		var ret string
		return ret
	}
	return *o.DeveloperMessage
}

// GetDeveloperMessageOk returns a tuple with the DeveloperMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationError) GetDeveloperMessageOk() (*string, bool) {
	if o == nil || IsNil(o.DeveloperMessage) {
		return nil, false
	}
	return o.DeveloperMessage, true
}

// HasDeveloperMessage returns a boolean if a field has been set.
func (o *ValidationError) HasDeveloperMessage() bool {
	if o != nil && !IsNil(o.DeveloperMessage) {
		return true
	}

	return false
}

// SetDeveloperMessage gets a reference to the given string and assigns it to the DeveloperMessage field.
func (o *ValidationError) SetDeveloperMessage(v string) {
	o.DeveloperMessage = &v
}

// GetFieldPath returns the FieldPath field value if set, zero value otherwise.
func (o *ValidationError) GetFieldPath() string {
	if o == nil || IsNil(o.FieldPath) {
		var ret string
		return ret
	}
	return *o.FieldPath
}

// GetFieldPathOk returns a tuple with the FieldPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationError) GetFieldPathOk() (*string, bool) {
	if o == nil || IsNil(o.FieldPath) {
		return nil, false
	}
	return o.FieldPath, true
}

// HasFieldPath returns a boolean if a field has been set.
func (o *ValidationError) HasFieldPath() bool {
	if o != nil && !IsNil(o.FieldPath) {
		return true
	}

	return false
}

// SetFieldPath gets a reference to the given string and assigns it to the FieldPath field.
func (o *ValidationError) SetFieldPath(v string) {
	o.FieldPath = &v
}

func (o ValidationError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidationError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorId) {
		toSerialize["errorId"] = o.ErrorId
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.DeveloperMessage) {
		toSerialize["developerMessage"] = o.DeveloperMessage
	}
	if !IsNil(o.FieldPath) {
		toSerialize["fieldPath"] = o.FieldPath
	}
	return toSerialize, nil
}

type NullableValidationError struct {
	value *ValidationError
	isSet bool
}

func (v NullableValidationError) Get() *ValidationError {
	return v.value
}

func (v *NullableValidationError) Set(val *ValidationError) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationError) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationError(val *ValidationError) *NullableValidationError {
	return &NullableValidationError{value: val, isSet: true}
}

func (v NullableValidationError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
