/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TokenExchangeGeneratorGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenExchangeGeneratorGroup{}

// TokenExchangeGeneratorGroup The set of attributes used to configure a OAuth 2.0 Token Exchange Generator group.
type TokenExchangeGeneratorGroup struct {
	// The Token Exchange Generator group ID. ID is unique.
	Id string `json:"id" tfsdk:"id"`
	// The Token Exchange Generator group name. Name is unique.
	Name string `json:"name" tfsdk:"name"`
	// The list of  resource URI's which map to this Token Exchange Generator group.
	ResourceUris []string `json:"resourceUris,omitempty" tfsdk:"resource_uris"`
	// A list of Token Generator mapping into an OAuth 2.0 Token Exchange requested token type.
	GeneratorMappings []TokenExchangeGeneratorMapping `json:"generatorMappings" tfsdk:"generator_mappings"`
}

type _TokenExchangeGeneratorGroup TokenExchangeGeneratorGroup

// NewTokenExchangeGeneratorGroup instantiates a new TokenExchangeGeneratorGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenExchangeGeneratorGroup(id string, name string, generatorMappings []TokenExchangeGeneratorMapping) *TokenExchangeGeneratorGroup {
	this := TokenExchangeGeneratorGroup{}
	this.Id = id
	this.Name = name
	this.GeneratorMappings = generatorMappings
	return &this
}

// NewTokenExchangeGeneratorGroupWithDefaults instantiates a new TokenExchangeGeneratorGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenExchangeGeneratorGroupWithDefaults() *TokenExchangeGeneratorGroup {
	this := TokenExchangeGeneratorGroup{}
	return &this
}

// GetId returns the Id field value
func (o *TokenExchangeGeneratorGroup) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TokenExchangeGeneratorGroup) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TokenExchangeGeneratorGroup) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *TokenExchangeGeneratorGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TokenExchangeGeneratorGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TokenExchangeGeneratorGroup) SetName(v string) {
	o.Name = v
}

// GetResourceUris returns the ResourceUris field value if set, zero value otherwise.
func (o *TokenExchangeGeneratorGroup) GetResourceUris() []string {
	if o == nil || IsNil(o.ResourceUris) {
		var ret []string
		return ret
	}
	return o.ResourceUris
}

// GetResourceUrisOk returns a tuple with the ResourceUris field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenExchangeGeneratorGroup) GetResourceUrisOk() ([]string, bool) {
	if o == nil || IsNil(o.ResourceUris) {
		return nil, false
	}
	return o.ResourceUris, true
}

// HasResourceUris returns a boolean if a field has been set.
func (o *TokenExchangeGeneratorGroup) HasResourceUris() bool {
	if o != nil && !IsNil(o.ResourceUris) {
		return true
	}

	return false
}

// SetResourceUris gets a reference to the given []string and assigns it to the ResourceUris field.
func (o *TokenExchangeGeneratorGroup) SetResourceUris(v []string) {
	o.ResourceUris = v
}

// GetGeneratorMappings returns the GeneratorMappings field value
func (o *TokenExchangeGeneratorGroup) GetGeneratorMappings() []TokenExchangeGeneratorMapping {
	if o == nil {
		var ret []TokenExchangeGeneratorMapping
		return ret
	}

	return o.GeneratorMappings
}

// GetGeneratorMappingsOk returns a tuple with the GeneratorMappings field value
// and a boolean to check if the value has been set.
func (o *TokenExchangeGeneratorGroup) GetGeneratorMappingsOk() ([]TokenExchangeGeneratorMapping, bool) {
	if o == nil {
		return nil, false
	}
	return o.GeneratorMappings, true
}

// SetGeneratorMappings sets field value
func (o *TokenExchangeGeneratorGroup) SetGeneratorMappings(v []TokenExchangeGeneratorMapping) {
	o.GeneratorMappings = v
}

func (o TokenExchangeGeneratorGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenExchangeGeneratorGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.ResourceUris) {
		toSerialize["resourceUris"] = o.ResourceUris
	}
	toSerialize["generatorMappings"] = o.GeneratorMappings
	return toSerialize, nil
}

func (o *TokenExchangeGeneratorGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"generatorMappings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenExchangeGeneratorGroup := _TokenExchangeGeneratorGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varTokenExchangeGeneratorGroup)

	if err != nil {
		return err
	}

	*o = TokenExchangeGeneratorGroup(varTokenExchangeGeneratorGroup)

	return err
}

type NullableTokenExchangeGeneratorGroup struct {
	value *TokenExchangeGeneratorGroup
	isSet bool
}

func (v NullableTokenExchangeGeneratorGroup) Get() *TokenExchangeGeneratorGroup {
	return v.value
}

func (v *NullableTokenExchangeGeneratorGroup) Set(val *TokenExchangeGeneratorGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenExchangeGeneratorGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenExchangeGeneratorGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenExchangeGeneratorGroup(val *TokenExchangeGeneratorGroup) *NullableTokenExchangeGeneratorGroup {
	return &NullableTokenExchangeGeneratorGroup{value: val, isSet: true}
}

func (v NullableTokenExchangeGeneratorGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenExchangeGeneratorGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
