/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"time"
)

// checks if the AdminConsoleInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdminConsoleInfo{}

// AdminConsoleInfo Describes the administrative console state information when the active/passive administrative console feature is enabled.
type AdminConsoleInfo struct {
	// For console nodes, indicates whether the node is active or passive.
	ConsoleRole *string `json:"consoleRole,omitempty" tfsdk:"console_role"`
	// The timestamp of when the administrative console's role was last updated.
	ConsoleRoleLastUpdateDate *time.Time `json:"consoleRoleLastUpdateDate,omitempty" tfsdk:"console_role_last_update_date"`
	// The status of the last configuration synchronization.
	ConfigSyncStatus *string `json:"configSyncStatus,omitempty" tfsdk:"config_sync_status"`
	// The timestamp of the last configuration synchronization.
	ConfigSyncTimestamp *time.Time `json:"configSyncTimestamp,omitempty" tfsdk:"config_sync_timestamp"`
}

// NewAdminConsoleInfo instantiates a new AdminConsoleInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminConsoleInfo() *AdminConsoleInfo {
	this := AdminConsoleInfo{}
	return &this
}

// NewAdminConsoleInfoWithDefaults instantiates a new AdminConsoleInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminConsoleInfoWithDefaults() *AdminConsoleInfo {
	this := AdminConsoleInfo{}
	return &this
}

// GetConsoleRole returns the ConsoleRole field value if set, zero value otherwise.
func (o *AdminConsoleInfo) GetConsoleRole() string {
	if o == nil || IsNil(o.ConsoleRole) {
		var ret string
		return ret
	}
	return *o.ConsoleRole
}

// GetConsoleRoleOk returns a tuple with the ConsoleRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminConsoleInfo) GetConsoleRoleOk() (*string, bool) {
	if o == nil || IsNil(o.ConsoleRole) {
		return nil, false
	}
	return o.ConsoleRole, true
}

// HasConsoleRole returns a boolean if a field has been set.
func (o *AdminConsoleInfo) HasConsoleRole() bool {
	if o != nil && !IsNil(o.ConsoleRole) {
		return true
	}

	return false
}

// SetConsoleRole gets a reference to the given string and assigns it to the ConsoleRole field.
func (o *AdminConsoleInfo) SetConsoleRole(v string) {
	o.ConsoleRole = &v
}

// GetConsoleRoleLastUpdateDate returns the ConsoleRoleLastUpdateDate field value if set, zero value otherwise.
func (o *AdminConsoleInfo) GetConsoleRoleLastUpdateDate() time.Time {
	if o == nil || IsNil(o.ConsoleRoleLastUpdateDate) {
		var ret time.Time
		return ret
	}
	return *o.ConsoleRoleLastUpdateDate
}

// GetConsoleRoleLastUpdateDateOk returns a tuple with the ConsoleRoleLastUpdateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminConsoleInfo) GetConsoleRoleLastUpdateDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ConsoleRoleLastUpdateDate) {
		return nil, false
	}
	return o.ConsoleRoleLastUpdateDate, true
}

// HasConsoleRoleLastUpdateDate returns a boolean if a field has been set.
func (o *AdminConsoleInfo) HasConsoleRoleLastUpdateDate() bool {
	if o != nil && !IsNil(o.ConsoleRoleLastUpdateDate) {
		return true
	}

	return false
}

// SetConsoleRoleLastUpdateDate gets a reference to the given time.Time and assigns it to the ConsoleRoleLastUpdateDate field.
func (o *AdminConsoleInfo) SetConsoleRoleLastUpdateDate(v time.Time) {
	o.ConsoleRoleLastUpdateDate = &v
}

// GetConfigSyncStatus returns the ConfigSyncStatus field value if set, zero value otherwise.
func (o *AdminConsoleInfo) GetConfigSyncStatus() string {
	if o == nil || IsNil(o.ConfigSyncStatus) {
		var ret string
		return ret
	}
	return *o.ConfigSyncStatus
}

// GetConfigSyncStatusOk returns a tuple with the ConfigSyncStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminConsoleInfo) GetConfigSyncStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigSyncStatus) {
		return nil, false
	}
	return o.ConfigSyncStatus, true
}

// HasConfigSyncStatus returns a boolean if a field has been set.
func (o *AdminConsoleInfo) HasConfigSyncStatus() bool {
	if o != nil && !IsNil(o.ConfigSyncStatus) {
		return true
	}

	return false
}

// SetConfigSyncStatus gets a reference to the given string and assigns it to the ConfigSyncStatus field.
func (o *AdminConsoleInfo) SetConfigSyncStatus(v string) {
	o.ConfigSyncStatus = &v
}

// GetConfigSyncTimestamp returns the ConfigSyncTimestamp field value if set, zero value otherwise.
func (o *AdminConsoleInfo) GetConfigSyncTimestamp() time.Time {
	if o == nil || IsNil(o.ConfigSyncTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.ConfigSyncTimestamp
}

// GetConfigSyncTimestampOk returns a tuple with the ConfigSyncTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminConsoleInfo) GetConfigSyncTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ConfigSyncTimestamp) {
		return nil, false
	}
	return o.ConfigSyncTimestamp, true
}

// HasConfigSyncTimestamp returns a boolean if a field has been set.
func (o *AdminConsoleInfo) HasConfigSyncTimestamp() bool {
	if o != nil && !IsNil(o.ConfigSyncTimestamp) {
		return true
	}

	return false
}

// SetConfigSyncTimestamp gets a reference to the given time.Time and assigns it to the ConfigSyncTimestamp field.
func (o *AdminConsoleInfo) SetConfigSyncTimestamp(v time.Time) {
	o.ConfigSyncTimestamp = &v
}

func (o AdminConsoleInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdminConsoleInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConsoleRole) {
		toSerialize["consoleRole"] = o.ConsoleRole
	}
	if !IsNil(o.ConsoleRoleLastUpdateDate) {
		toSerialize["consoleRoleLastUpdateDate"] = o.ConsoleRoleLastUpdateDate
	}
	if !IsNil(o.ConfigSyncStatus) {
		toSerialize["configSyncStatus"] = o.ConfigSyncStatus
	}
	if !IsNil(o.ConfigSyncTimestamp) {
		toSerialize["configSyncTimestamp"] = o.ConfigSyncTimestamp
	}
	return toSerialize, nil
}

type NullableAdminConsoleInfo struct {
	value *AdminConsoleInfo
	isSet bool
}

func (v NullableAdminConsoleInfo) Get() *AdminConsoleInfo {
	return v.value
}

func (v *NullableAdminConsoleInfo) Set(val *AdminConsoleInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminConsoleInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminConsoleInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminConsoleInfo(val *AdminConsoleInfo) *NullableAdminConsoleInfo {
	return &NullableAdminConsoleInfo{value: val, isSet: true}
}

func (v NullableAdminConsoleInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminConsoleInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
