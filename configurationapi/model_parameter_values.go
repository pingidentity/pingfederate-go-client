/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ParameterValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParameterValues{}

// ParameterValues Parameter Values.
type ParameterValues struct {
	// A List of values
	Values []string `json:"values,omitempty" tfsdk:"values"`
}

// NewParameterValues instantiates a new ParameterValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParameterValues() *ParameterValues {
	this := ParameterValues{}
	return &this
}

// NewParameterValuesWithDefaults instantiates a new ParameterValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParameterValuesWithDefaults() *ParameterValues {
	this := ParameterValues{}
	return &this
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *ParameterValues) GetValues() []string {
	if o == nil || IsNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterValues) GetValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ParameterValues) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *ParameterValues) SetValues(v []string) {
	o.Values = v
}

func (o ParameterValues) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParameterValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableParameterValues struct {
	value *ParameterValues
	isSet bool
}

func (v NullableParameterValues) Get() *ParameterValues {
	return v.value
}

func (v *NullableParameterValues) Set(val *ParameterValues) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterValues) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterValues(val *ParameterValues) *NullableParameterValues {
	return &NullableParameterValues{value: val, isSet: true}
}

func (v NullableParameterValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
