/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// InboundProvisioningUserRepositoryAggregation - struct for InboundProvisioningUserRepositoryAggregation
type InboundProvisioningUserRepositoryAggregation struct {
	IdentityStoreInboundProvisioningUserRepository *IdentityStoreInboundProvisioningUserRepository
	LdapInboundProvisioningUserRepository          *LdapInboundProvisioningUserRepository
}

// IdentityStoreInboundProvisioningUserRepositoryAsInboundProvisioningUserRepositoryAggregation is a convenience function that returns IdentityStoreInboundProvisioningUserRepository wrapped in InboundProvisioningUserRepositoryAggregation
func IdentityStoreInboundProvisioningUserRepositoryAsInboundProvisioningUserRepositoryAggregation(v *IdentityStoreInboundProvisioningUserRepository) InboundProvisioningUserRepositoryAggregation {
	return InboundProvisioningUserRepositoryAggregation{
		IdentityStoreInboundProvisioningUserRepository: v,
	}
}

// LdapInboundProvisioningUserRepositoryAsInboundProvisioningUserRepositoryAggregation is a convenience function that returns LdapInboundProvisioningUserRepository wrapped in InboundProvisioningUserRepositoryAggregation
func LdapInboundProvisioningUserRepositoryAsInboundProvisioningUserRepositoryAggregation(v *LdapInboundProvisioningUserRepository) InboundProvisioningUserRepositoryAggregation {
	return InboundProvisioningUserRepositoryAggregation{
		LdapInboundProvisioningUserRepository: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *InboundProvisioningUserRepositoryAggregation) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'IDENTITY_STORE'
	if jsonDict["type"] == "IDENTITY_STORE" {
		// try to unmarshal JSON data into IdentityStoreInboundProvisioningUserRepository
		err = json.Unmarshal(data, &dst.IdentityStoreInboundProvisioningUserRepository)
		if err == nil {
			return nil // data stored in dst.IdentityStoreInboundProvisioningUserRepository, return on the first match
		} else {
			dst.IdentityStoreInboundProvisioningUserRepository = nil
			return fmt.Errorf("failed to unmarshal InboundProvisioningUserRepositoryAggregation as IdentityStoreInboundProvisioningUserRepository: %s", err.Error())
		}
	}

	// check if the discriminator value is 'IdentityStoreInboundProvisioningUserRepository'
	if jsonDict["type"] == "IdentityStoreInboundProvisioningUserRepository" {
		// try to unmarshal JSON data into IdentityStoreInboundProvisioningUserRepository
		err = json.Unmarshal(data, &dst.IdentityStoreInboundProvisioningUserRepository)
		if err == nil {
			return nil // data stored in dst.IdentityStoreInboundProvisioningUserRepository, return on the first match
		} else {
			dst.IdentityStoreInboundProvisioningUserRepository = nil
			return fmt.Errorf("failed to unmarshal InboundProvisioningUserRepositoryAggregation as IdentityStoreInboundProvisioningUserRepository: %s", err.Error())
		}
	}

	// check if the discriminator value is 'LDAP'
	if jsonDict["type"] == "LDAP" {
		// try to unmarshal JSON data into LdapInboundProvisioningUserRepository
		err = json.Unmarshal(data, &dst.LdapInboundProvisioningUserRepository)
		if err == nil {
			return nil // data stored in dst.LdapInboundProvisioningUserRepository, return on the first match
		} else {
			dst.LdapInboundProvisioningUserRepository = nil
			return fmt.Errorf("failed to unmarshal InboundProvisioningUserRepositoryAggregation as LdapInboundProvisioningUserRepository: %s", err.Error())
		}
	}

	// check if the discriminator value is 'LdapInboundProvisioningUserRepository'
	if jsonDict["type"] == "LdapInboundProvisioningUserRepository" {
		// try to unmarshal JSON data into LdapInboundProvisioningUserRepository
		err = json.Unmarshal(data, &dst.LdapInboundProvisioningUserRepository)
		if err == nil {
			return nil // data stored in dst.LdapInboundProvisioningUserRepository, return on the first match
		} else {
			dst.LdapInboundProvisioningUserRepository = nil
			return fmt.Errorf("failed to unmarshal InboundProvisioningUserRepositoryAggregation as LdapInboundProvisioningUserRepository: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src InboundProvisioningUserRepositoryAggregation) MarshalJSON() ([]byte, error) {
	if src.IdentityStoreInboundProvisioningUserRepository != nil {
		return json.Marshal(&src.IdentityStoreInboundProvisioningUserRepository)
	}

	if src.LdapInboundProvisioningUserRepository != nil {
		return json.Marshal(&src.LdapInboundProvisioningUserRepository)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *InboundProvisioningUserRepositoryAggregation) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.IdentityStoreInboundProvisioningUserRepository != nil {
		return obj.IdentityStoreInboundProvisioningUserRepository
	}

	if obj.LdapInboundProvisioningUserRepository != nil {
		return obj.LdapInboundProvisioningUserRepository
	}

	// all schemas are nil
	return nil
}

type NullableInboundProvisioningUserRepositoryAggregation struct {
	value *InboundProvisioningUserRepositoryAggregation
	isSet bool
}

func (v NullableInboundProvisioningUserRepositoryAggregation) Get() *InboundProvisioningUserRepositoryAggregation {
	return v.value
}

func (v *NullableInboundProvisioningUserRepositoryAggregation) Set(val *InboundProvisioningUserRepositoryAggregation) {
	v.value = val
	v.isSet = true
}

func (v NullableInboundProvisioningUserRepositoryAggregation) IsSet() bool {
	return v.isSet
}

func (v *NullableInboundProvisioningUserRepositoryAggregation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInboundProvisioningUserRepositoryAggregation(val *InboundProvisioningUserRepositoryAggregation) *NullableInboundProvisioningUserRepositoryAggregation {
	return &NullableInboundProvisioningUserRepositoryAggregation{value: val, isSet: true}
}

func (v NullableInboundProvisioningUserRepositoryAggregation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInboundProvisioningUserRepositoryAggregation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
