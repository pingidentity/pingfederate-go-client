/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the JdbcAttributeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JdbcAttributeSource{}

// JdbcAttributeSource struct for JdbcAttributeSource
type JdbcAttributeSource struct {
	// The data store type of this attribute source.
	Type         string       `json:"type" tfsdk:"type"`
	DataStoreRef ResourceLink `json:"dataStoreRef" tfsdk:"data_store_ref"`
	// The ID that defines this attribute source. Only alphanumeric characters allowed.<br>Note: Required for OpenID Connect policy attribute sources, OAuth IdP adapter mappings, OAuth access token mappings and APC-to-SP Adapter Mappings. IdP Connections will ignore this property since it only allows one attribute source to be defined per mapping. IdP-to-SP Adapter Mappings can contain multiple attribute sources.
	Id *string `json:"id,omitempty" tfsdk:"id"`
	// The description of this attribute source. The description needs to be unique amongst the attribute sources for the mapping.<br>Note: Required for APC-to-SP Adapter Mappings
	Description *string `json:"description,omitempty" tfsdk:"description"`
	// A list of mappings from attribute names to their fulfillment values. This field is only valid for the SP Connection's Browser SSO mappings
	AttributeContractFulfillment *map[string]AttributeFulfillmentValue `json:"attributeContractFulfillment,omitempty" tfsdk:"attribute_contract_fulfillment"`
	// Lists the table structure that stores information within a database. Some databases, such as Oracle, require a schema for a JDBC query. Other databases, such as MySQL, do not require a schema.
	Schema *string `json:"schema,omitempty" tfsdk:"schema"`
	// The name of the database table. The name is used to construct the SQL query to retrieve data from the data store.
	Table string `json:"table" tfsdk:"table"`
	// A list of column names used to construct the SQL query to retrieve data from the specified table in the datastore.
	ColumnNames []string `json:"columnNames,omitempty" tfsdk:"column_names"`
	// The JDBC WHERE clause used to query your data store to locate a user record.
	Filter string `json:"filter" tfsdk:"filter"`
}

type _JdbcAttributeSource JdbcAttributeSource

// NewJdbcAttributeSource instantiates a new JdbcAttributeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJdbcAttributeSource(type_ string, dataStoreRef ResourceLink, table string, filter string) *JdbcAttributeSource {
	this := JdbcAttributeSource{}
	this.Type = type_
	this.DataStoreRef = dataStoreRef
	this.Table = table
	this.Filter = filter
	return &this
}

// NewJdbcAttributeSourceWithDefaults instantiates a new JdbcAttributeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJdbcAttributeSourceWithDefaults() *JdbcAttributeSource {
	this := JdbcAttributeSource{}
	return &this
}

// GetType returns the Type field value
func (o *JdbcAttributeSource) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *JdbcAttributeSource) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *JdbcAttributeSource) SetType(v string) {
	o.Type = v
}

// GetDataStoreRef returns the DataStoreRef field value
func (o *JdbcAttributeSource) GetDataStoreRef() ResourceLink {
	if o == nil {
		var ret ResourceLink
		return ret
	}

	return o.DataStoreRef
}

// GetDataStoreRefOk returns a tuple with the DataStoreRef field value
// and a boolean to check if the value has been set.
func (o *JdbcAttributeSource) GetDataStoreRefOk() (*ResourceLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataStoreRef, true
}

// SetDataStoreRef sets field value
func (o *JdbcAttributeSource) SetDataStoreRef(v ResourceLink) {
	o.DataStoreRef = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *JdbcAttributeSource) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JdbcAttributeSource) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *JdbcAttributeSource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *JdbcAttributeSource) SetId(v string) {
	o.Id = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *JdbcAttributeSource) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JdbcAttributeSource) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *JdbcAttributeSource) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *JdbcAttributeSource) SetDescription(v string) {
	o.Description = &v
}

// GetAttributeContractFulfillment returns the AttributeContractFulfillment field value if set, zero value otherwise.
func (o *JdbcAttributeSource) GetAttributeContractFulfillment() map[string]AttributeFulfillmentValue {
	if o == nil || IsNil(o.AttributeContractFulfillment) {
		var ret map[string]AttributeFulfillmentValue
		return ret
	}
	return *o.AttributeContractFulfillment
}

// GetAttributeContractFulfillmentOk returns a tuple with the AttributeContractFulfillment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JdbcAttributeSource) GetAttributeContractFulfillmentOk() (*map[string]AttributeFulfillmentValue, bool) {
	if o == nil || IsNil(o.AttributeContractFulfillment) {
		return nil, false
	}
	return o.AttributeContractFulfillment, true
}

// HasAttributeContractFulfillment returns a boolean if a field has been set.
func (o *JdbcAttributeSource) HasAttributeContractFulfillment() bool {
	if o != nil && !IsNil(o.AttributeContractFulfillment) {
		return true
	}

	return false
}

// SetAttributeContractFulfillment gets a reference to the given map[string]AttributeFulfillmentValue and assigns it to the AttributeContractFulfillment field.
func (o *JdbcAttributeSource) SetAttributeContractFulfillment(v map[string]AttributeFulfillmentValue) {
	o.AttributeContractFulfillment = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *JdbcAttributeSource) GetSchema() string {
	if o == nil || IsNil(o.Schema) {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JdbcAttributeSource) GetSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *JdbcAttributeSource) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *JdbcAttributeSource) SetSchema(v string) {
	o.Schema = &v
}

// GetTable returns the Table field value
func (o *JdbcAttributeSource) GetTable() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Table
}

// GetTableOk returns a tuple with the Table field value
// and a boolean to check if the value has been set.
func (o *JdbcAttributeSource) GetTableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Table, true
}

// SetTable sets field value
func (o *JdbcAttributeSource) SetTable(v string) {
	o.Table = v
}

// GetColumnNames returns the ColumnNames field value if set, zero value otherwise.
func (o *JdbcAttributeSource) GetColumnNames() []string {
	if o == nil || IsNil(o.ColumnNames) {
		var ret []string
		return ret
	}
	return o.ColumnNames
}

// GetColumnNamesOk returns a tuple with the ColumnNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JdbcAttributeSource) GetColumnNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ColumnNames) {
		return nil, false
	}
	return o.ColumnNames, true
}

// HasColumnNames returns a boolean if a field has been set.
func (o *JdbcAttributeSource) HasColumnNames() bool {
	if o != nil && !IsNil(o.ColumnNames) {
		return true
	}

	return false
}

// SetColumnNames gets a reference to the given []string and assigns it to the ColumnNames field.
func (o *JdbcAttributeSource) SetColumnNames(v []string) {
	o.ColumnNames = v
}

// GetFilter returns the Filter field value
func (o *JdbcAttributeSource) GetFilter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value
// and a boolean to check if the value has been set.
func (o *JdbcAttributeSource) GetFilterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filter, true
}

// SetFilter sets field value
func (o *JdbcAttributeSource) SetFilter(v string) {
	o.Filter = v
}

func (o JdbcAttributeSource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JdbcAttributeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["dataStoreRef"] = o.DataStoreRef
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.AttributeContractFulfillment) {
		toSerialize["attributeContractFulfillment"] = o.AttributeContractFulfillment
	}
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	toSerialize["table"] = o.Table
	if !IsNil(o.ColumnNames) {
		toSerialize["columnNames"] = o.ColumnNames
	}
	toSerialize["filter"] = o.Filter
	return toSerialize, nil
}

func (o *JdbcAttributeSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"dataStoreRef",
		"table",
		"filter",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJdbcAttributeSource := _JdbcAttributeSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varJdbcAttributeSource)

	if err != nil {
		return err
	}

	*o = JdbcAttributeSource(varJdbcAttributeSource)

	return err
}

type NullableJdbcAttributeSource struct {
	value *JdbcAttributeSource
	isSet bool
}

func (v NullableJdbcAttributeSource) Get() *JdbcAttributeSource {
	return v.value
}

func (v *NullableJdbcAttributeSource) Set(val *JdbcAttributeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableJdbcAttributeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableJdbcAttributeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJdbcAttributeSource(val *JdbcAttributeSource) *NullableJdbcAttributeSource {
	return &NullableJdbcAttributeSource{value: val, isSet: true}
}

func (v NullableJdbcAttributeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJdbcAttributeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
