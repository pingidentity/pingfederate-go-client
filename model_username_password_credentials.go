/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the UsernamePasswordCredentials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsernamePasswordCredentials{}

// UsernamePasswordCredentials Username and password credentials.
type UsernamePasswordCredentials struct {
	// The username.
	Username *string `json:"username,omitempty"`
	// User password.  To update the password, specify the plaintext value in this field.  This field will not be populated for GET requests.
	Password *string `json:"password,omitempty"`
	// For GET requests, this field contains the encrypted password, if one exists.  For POST and PUT requests, if you wish to reuse the existing password, this field should be passed back unchanged.
	EncryptedPassword *string `json:"encryptedPassword,omitempty"`
}

// NewUsernamePasswordCredentials instantiates a new UsernamePasswordCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsernamePasswordCredentials() *UsernamePasswordCredentials {
	this := UsernamePasswordCredentials{}
	return &this
}

// NewUsernamePasswordCredentialsWithDefaults instantiates a new UsernamePasswordCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsernamePasswordCredentialsWithDefaults() *UsernamePasswordCredentials {
	this := UsernamePasswordCredentials{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UsernamePasswordCredentials) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsernamePasswordCredentials) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UsernamePasswordCredentials) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UsernamePasswordCredentials) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UsernamePasswordCredentials) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsernamePasswordCredentials) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UsernamePasswordCredentials) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UsernamePasswordCredentials) SetPassword(v string) {
	o.Password = &v
}

// GetEncryptedPassword returns the EncryptedPassword field value if set, zero value otherwise.
func (o *UsernamePasswordCredentials) GetEncryptedPassword() string {
	if o == nil || IsNil(o.EncryptedPassword) {
		var ret string
		return ret
	}
	return *o.EncryptedPassword
}

// GetEncryptedPasswordOk returns a tuple with the EncryptedPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsernamePasswordCredentials) GetEncryptedPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptedPassword) {
		return nil, false
	}
	return o.EncryptedPassword, true
}

// HasEncryptedPassword returns a boolean if a field has been set.
func (o *UsernamePasswordCredentials) HasEncryptedPassword() bool {
	if o != nil && !IsNil(o.EncryptedPassword) {
		return true
	}

	return false
}

// SetEncryptedPassword gets a reference to the given string and assigns it to the EncryptedPassword field.
func (o *UsernamePasswordCredentials) SetEncryptedPassword(v string) {
	o.EncryptedPassword = &v
}

func (o UsernamePasswordCredentials) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsernamePasswordCredentials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.EncryptedPassword) {
		toSerialize["encryptedPassword"] = o.EncryptedPassword
	}
	return toSerialize, nil
}

type NullableUsernamePasswordCredentials struct {
	value *UsernamePasswordCredentials
	isSet bool
}

func (v NullableUsernamePasswordCredentials) Get() *UsernamePasswordCredentials {
	return v.value
}

func (v *NullableUsernamePasswordCredentials) Set(val *UsernamePasswordCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableUsernamePasswordCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableUsernamePasswordCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsernamePasswordCredentials(val *UsernamePasswordCredentials) *NullableUsernamePasswordCredentials {
	return &NullableUsernamePasswordCredentials{value: val, isSet: true}
}

func (v NullableUsernamePasswordCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsernamePasswordCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
