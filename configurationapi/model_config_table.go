/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ConfigTable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigTable{}

// ConfigTable A plugin configuration table populated with values.
type ConfigTable struct {
	// The name of the table.
	Name string `json:"name" tfsdk:"name"`
	// List of table rows.
	Rows []ConfigRow `json:"rows,omitempty" tfsdk:"rows"`
}

// NewConfigTable instantiates a new ConfigTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigTable(name string) *ConfigTable {
	this := ConfigTable{}
	this.Name = name
	return &this
}

// NewConfigTableWithDefaults instantiates a new ConfigTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigTableWithDefaults() *ConfigTable {
	this := ConfigTable{}
	return &this
}

// GetName returns the Name field value
func (o *ConfigTable) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConfigTable) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConfigTable) SetName(v string) {
	o.Name = v
}

// GetRows returns the Rows field value if set, zero value otherwise.
func (o *ConfigTable) GetRows() []ConfigRow {
	if o == nil || IsNil(o.Rows) {
		var ret []ConfigRow
		return ret
	}
	return o.Rows
}

// GetRowsOk returns a tuple with the Rows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTable) GetRowsOk() ([]ConfigRow, bool) {
	if o == nil || IsNil(o.Rows) {
		return nil, false
	}
	return o.Rows, true
}

// HasRows returns a boolean if a field has been set.
func (o *ConfigTable) HasRows() bool {
	if o != nil && !IsNil(o.Rows) {
		return true
	}

	return false
}

// SetRows gets a reference to the given []ConfigRow and assigns it to the Rows field.
func (o *ConfigTable) SetRows(v []ConfigRow) {
	o.Rows = v
}

func (o ConfigTable) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigTable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Rows) {
		toSerialize["rows"] = o.Rows
	}
	return toSerialize, nil
}

type NullableConfigTable struct {
	value *ConfigTable
	isSet bool
}

func (v NullableConfigTable) Get() *ConfigTable {
	return v.value
}

func (v *NullableConfigTable) Set(val *ConfigTable) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigTable) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigTable(val *ConfigTable) *NullableConfigTable {
	return &NullableConfigTable{value: val, isSet: true}
}

func (v NullableConfigTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
