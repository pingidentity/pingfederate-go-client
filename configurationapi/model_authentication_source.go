/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AuthenticationSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthenticationSource{}

// AuthenticationSource An authentication source (IdP adapter or IdP connection).
type AuthenticationSource struct {
	// The type of this authentication source.
	Type      string       `json:"type" tfsdk:"type"`
	SourceRef ResourceLink `json:"sourceRef" tfsdk:"source_ref"`
}

// NewAuthenticationSource instantiates a new AuthenticationSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticationSource(type_ string, sourceRef ResourceLink) *AuthenticationSource {
	this := AuthenticationSource{}
	this.Type = type_
	this.SourceRef = sourceRef
	return &this
}

// NewAuthenticationSourceWithDefaults instantiates a new AuthenticationSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticationSourceWithDefaults() *AuthenticationSource {
	this := AuthenticationSource{}
	return &this
}

// GetType returns the Type field value
func (o *AuthenticationSource) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AuthenticationSource) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AuthenticationSource) SetType(v string) {
	o.Type = v
}

// GetSourceRef returns the SourceRef field value
func (o *AuthenticationSource) GetSourceRef() ResourceLink {
	if o == nil {
		var ret ResourceLink
		return ret
	}

	return o.SourceRef
}

// GetSourceRefOk returns a tuple with the SourceRef field value
// and a boolean to check if the value has been set.
func (o *AuthenticationSource) GetSourceRefOk() (*ResourceLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceRef, true
}

// SetSourceRef sets field value
func (o *AuthenticationSource) SetSourceRef(v ResourceLink) {
	o.SourceRef = v
}

func (o AuthenticationSource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthenticationSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["sourceRef"] = o.SourceRef
	return toSerialize, nil
}

type NullableAuthenticationSource struct {
	value *AuthenticationSource
	isSet bool
}

func (v NullableAuthenticationSource) Get() *AuthenticationSource {
	return v.value
}

func (v *NullableAuthenticationSource) Set(val *AuthenticationSource) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationSource) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationSource(val *AuthenticationSource) *NullableAuthenticationSource {
	return &NullableAuthenticationSource{value: val, isSet: true}
}

func (v NullableAuthenticationSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
