/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the SpUrlMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpUrlMapping{}

// SpUrlMapping SP URL mapping
type SpUrlMapping struct {
	// The URL that will be compared against the target URL. Use a wildcard (*) to match multiple URLs to the same adapter or connection instance.
	Url *string `json:"url,omitempty"`
	// The URL mapping type
	Type *string       `json:"type,omitempty"`
	Ref  *ResourceLink `json:"ref,omitempty"`
}

// NewSpUrlMapping instantiates a new SpUrlMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpUrlMapping() *SpUrlMapping {
	this := SpUrlMapping{}
	return &this
}

// NewSpUrlMappingWithDefaults instantiates a new SpUrlMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpUrlMappingWithDefaults() *SpUrlMapping {
	this := SpUrlMapping{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *SpUrlMapping) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpUrlMapping) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *SpUrlMapping) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *SpUrlMapping) SetUrl(v string) {
	o.Url = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SpUrlMapping) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpUrlMapping) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SpUrlMapping) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SpUrlMapping) SetType(v string) {
	o.Type = &v
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *SpUrlMapping) GetRef() ResourceLink {
	if o == nil || IsNil(o.Ref) {
		var ret ResourceLink
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpUrlMapping) GetRefOk() (*ResourceLink, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *SpUrlMapping) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given ResourceLink and assigns it to the Ref field.
func (o *SpUrlMapping) SetRef(v ResourceLink) {
	o.Ref = &v
}

func (o SpUrlMapping) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpUrlMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Ref) {
		toSerialize["ref"] = o.Ref
	}
	return toSerialize, nil
}

type NullableSpUrlMapping struct {
	value *SpUrlMapping
	isSet bool
}

func (v NullableSpUrlMapping) Get() *SpUrlMapping {
	return v.value
}

func (v *NullableSpUrlMapping) Set(val *SpUrlMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableSpUrlMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableSpUrlMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpUrlMapping(val *SpUrlMapping) *NullableSpUrlMapping {
	return &NullableSpUrlMapping{value: val, isSet: true}
}

func (v NullableSpUrlMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpUrlMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
