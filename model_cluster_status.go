/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"time"
)

// checks if the ClusterStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterStatus{}

// ClusterStatus Information on cluster nodes and replication status.
type ClusterStatus struct {
	// List of nodes in the cluster.
	Nodes []ClusterNode `json:"nodes,omitempty" tfsdk:"nodes"`
	// Time when the configuration of this node was last updated.
	LastConfigUpdateTime *time.Time `json:"lastConfigUpdateTime,omitempty" tfsdk:"last_config_update_time"`
	// Time when configuration changes were last replicated.
	LastReplicationTime *time.Time `json:"lastReplicationTime,omitempty" tfsdk:"last_replication_time"`
	// Indicates whether a replication is required to propagate config updates.
	ReplicationRequired *bool `json:"replicationRequired,omitempty" tfsdk:"replication_required"`
	// Indicates whether there is more than one version of PingFederate in the cluster.
	MixedMode *bool `json:"mixedMode,omitempty" tfsdk:"mixed_mode"`
}

// NewClusterStatus instantiates a new ClusterStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterStatus() *ClusterStatus {
	this := ClusterStatus{}
	return &this
}

// NewClusterStatusWithDefaults instantiates a new ClusterStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterStatusWithDefaults() *ClusterStatus {
	this := ClusterStatus{}
	return &this
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *ClusterStatus) GetNodes() []ClusterNode {
	if o == nil || IsNil(o.Nodes) {
		var ret []ClusterNode
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStatus) GetNodesOk() ([]ClusterNode, bool) {
	if o == nil || IsNil(o.Nodes) {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *ClusterStatus) HasNodes() bool {
	if o != nil && !IsNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []ClusterNode and assigns it to the Nodes field.
func (o *ClusterStatus) SetNodes(v []ClusterNode) {
	o.Nodes = v
}

// GetLastConfigUpdateTime returns the LastConfigUpdateTime field value if set, zero value otherwise.
func (o *ClusterStatus) GetLastConfigUpdateTime() time.Time {
	if o == nil || IsNil(o.LastConfigUpdateTime) {
		var ret time.Time
		return ret
	}
	return *o.LastConfigUpdateTime
}

// GetLastConfigUpdateTimeOk returns a tuple with the LastConfigUpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStatus) GetLastConfigUpdateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastConfigUpdateTime) {
		return nil, false
	}
	return o.LastConfigUpdateTime, true
}

// HasLastConfigUpdateTime returns a boolean if a field has been set.
func (o *ClusterStatus) HasLastConfigUpdateTime() bool {
	if o != nil && !IsNil(o.LastConfigUpdateTime) {
		return true
	}

	return false
}

// SetLastConfigUpdateTime gets a reference to the given time.Time and assigns it to the LastConfigUpdateTime field.
func (o *ClusterStatus) SetLastConfigUpdateTime(v time.Time) {
	o.LastConfigUpdateTime = &v
}

// GetLastReplicationTime returns the LastReplicationTime field value if set, zero value otherwise.
func (o *ClusterStatus) GetLastReplicationTime() time.Time {
	if o == nil || IsNil(o.LastReplicationTime) {
		var ret time.Time
		return ret
	}
	return *o.LastReplicationTime
}

// GetLastReplicationTimeOk returns a tuple with the LastReplicationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStatus) GetLastReplicationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastReplicationTime) {
		return nil, false
	}
	return o.LastReplicationTime, true
}

// HasLastReplicationTime returns a boolean if a field has been set.
func (o *ClusterStatus) HasLastReplicationTime() bool {
	if o != nil && !IsNil(o.LastReplicationTime) {
		return true
	}

	return false
}

// SetLastReplicationTime gets a reference to the given time.Time and assigns it to the LastReplicationTime field.
func (o *ClusterStatus) SetLastReplicationTime(v time.Time) {
	o.LastReplicationTime = &v
}

// GetReplicationRequired returns the ReplicationRequired field value if set, zero value otherwise.
func (o *ClusterStatus) GetReplicationRequired() bool {
	if o == nil || IsNil(o.ReplicationRequired) {
		var ret bool
		return ret
	}
	return *o.ReplicationRequired
}

// GetReplicationRequiredOk returns a tuple with the ReplicationRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStatus) GetReplicationRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.ReplicationRequired) {
		return nil, false
	}
	return o.ReplicationRequired, true
}

// HasReplicationRequired returns a boolean if a field has been set.
func (o *ClusterStatus) HasReplicationRequired() bool {
	if o != nil && !IsNil(o.ReplicationRequired) {
		return true
	}

	return false
}

// SetReplicationRequired gets a reference to the given bool and assigns it to the ReplicationRequired field.
func (o *ClusterStatus) SetReplicationRequired(v bool) {
	o.ReplicationRequired = &v
}

// GetMixedMode returns the MixedMode field value if set, zero value otherwise.
func (o *ClusterStatus) GetMixedMode() bool {
	if o == nil || IsNil(o.MixedMode) {
		var ret bool
		return ret
	}
	return *o.MixedMode
}

// GetMixedModeOk returns a tuple with the MixedMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStatus) GetMixedModeOk() (*bool, bool) {
	if o == nil || IsNil(o.MixedMode) {
		return nil, false
	}
	return o.MixedMode, true
}

// HasMixedMode returns a boolean if a field has been set.
func (o *ClusterStatus) HasMixedMode() bool {
	if o != nil && !IsNil(o.MixedMode) {
		return true
	}

	return false
}

// SetMixedMode gets a reference to the given bool and assigns it to the MixedMode field.
func (o *ClusterStatus) SetMixedMode(v bool) {
	o.MixedMode = &v
}

func (o ClusterStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Nodes) {
		toSerialize["nodes"] = o.Nodes
	}
	if !IsNil(o.LastConfigUpdateTime) {
		toSerialize["lastConfigUpdateTime"] = o.LastConfigUpdateTime
	}
	if !IsNil(o.LastReplicationTime) {
		toSerialize["lastReplicationTime"] = o.LastReplicationTime
	}
	if !IsNil(o.ReplicationRequired) {
		toSerialize["replicationRequired"] = o.ReplicationRequired
	}
	if !IsNil(o.MixedMode) {
		toSerialize["mixedMode"] = o.MixedMode
	}
	return toSerialize, nil
}

type NullableClusterStatus struct {
	value *ClusterStatus
	isSet bool
}

func (v NullableClusterStatus) Get() *ClusterStatus {
	return v.value
}

func (v *NullableClusterStatus) Set(val *ClusterStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterStatus(val *ClusterStatus) *NullableClusterStatus {
	return &NullableClusterStatus{value: val, isSet: true}
}

func (v NullableClusterStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
