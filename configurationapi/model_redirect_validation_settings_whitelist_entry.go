/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the RedirectValidationSettingsWhitelistEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RedirectValidationSettingsWhitelistEntry{}

// RedirectValidationSettingsWhitelistEntry Whitelist entry for valid target resource.
type RedirectValidationSettingsWhitelistEntry struct {
	// Enable this target resource for SSO redirect validation.
	TargetResourceSSO *bool `json:"targetResourceSSO,omitempty" tfsdk:"target_resource_sso"`
	// Enable this target resource for SLO redirect validation.
	TargetResourceSLO *bool `json:"targetResourceSLO,omitempty" tfsdk:"target_resource_slo"`
	// Enable this target resource for in error resource validation.
	InErrorResource *bool `json:"inErrorResource,omitempty" tfsdk:"in_error_resource"`
	// Enable this target resource for IdP discovery validation.
	IdpDiscovery *bool `json:"idpDiscovery,omitempty" tfsdk:"idp_discovery"`
	// Domain of a valid resource.
	ValidDomain string `json:"validDomain" tfsdk:"valid_domain"`
	// Path of a valid resource.
	ValidPath *string `json:"validPath,omitempty" tfsdk:"valid_path"`
	// Allow any query parameters and fragment in the resource.
	AllowQueryAndFragment *bool `json:"allowQueryAndFragment,omitempty" tfsdk:"allow_query_and_fragment"`
	// Require HTTPS for accessing this resource.
	RequireHttps *bool `json:"requireHttps,omitempty" tfsdk:"require_https"`
}

// NewRedirectValidationSettingsWhitelistEntry instantiates a new RedirectValidationSettingsWhitelistEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedirectValidationSettingsWhitelistEntry(validDomain string) *RedirectValidationSettingsWhitelistEntry {
	this := RedirectValidationSettingsWhitelistEntry{}
	this.ValidDomain = validDomain
	return &this
}

// NewRedirectValidationSettingsWhitelistEntryWithDefaults instantiates a new RedirectValidationSettingsWhitelistEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedirectValidationSettingsWhitelistEntryWithDefaults() *RedirectValidationSettingsWhitelistEntry {
	this := RedirectValidationSettingsWhitelistEntry{}
	return &this
}

// GetTargetResourceSSO returns the TargetResourceSSO field value if set, zero value otherwise.
func (o *RedirectValidationSettingsWhitelistEntry) GetTargetResourceSSO() bool {
	if o == nil || IsNil(o.TargetResourceSSO) {
		var ret bool
		return ret
	}
	return *o.TargetResourceSSO
}

// GetTargetResourceSSOOk returns a tuple with the TargetResourceSSO field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectValidationSettingsWhitelistEntry) GetTargetResourceSSOOk() (*bool, bool) {
	if o == nil || IsNil(o.TargetResourceSSO) {
		return nil, false
	}
	return o.TargetResourceSSO, true
}

// HasTargetResourceSSO returns a boolean if a field has been set.
func (o *RedirectValidationSettingsWhitelistEntry) HasTargetResourceSSO() bool {
	if o != nil && !IsNil(o.TargetResourceSSO) {
		return true
	}

	return false
}

// SetTargetResourceSSO gets a reference to the given bool and assigns it to the TargetResourceSSO field.
func (o *RedirectValidationSettingsWhitelistEntry) SetTargetResourceSSO(v bool) {
	o.TargetResourceSSO = &v
}

// GetTargetResourceSLO returns the TargetResourceSLO field value if set, zero value otherwise.
func (o *RedirectValidationSettingsWhitelistEntry) GetTargetResourceSLO() bool {
	if o == nil || IsNil(o.TargetResourceSLO) {
		var ret bool
		return ret
	}
	return *o.TargetResourceSLO
}

// GetTargetResourceSLOOk returns a tuple with the TargetResourceSLO field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectValidationSettingsWhitelistEntry) GetTargetResourceSLOOk() (*bool, bool) {
	if o == nil || IsNil(o.TargetResourceSLO) {
		return nil, false
	}
	return o.TargetResourceSLO, true
}

// HasTargetResourceSLO returns a boolean if a field has been set.
func (o *RedirectValidationSettingsWhitelistEntry) HasTargetResourceSLO() bool {
	if o != nil && !IsNil(o.TargetResourceSLO) {
		return true
	}

	return false
}

// SetTargetResourceSLO gets a reference to the given bool and assigns it to the TargetResourceSLO field.
func (o *RedirectValidationSettingsWhitelistEntry) SetTargetResourceSLO(v bool) {
	o.TargetResourceSLO = &v
}

// GetInErrorResource returns the InErrorResource field value if set, zero value otherwise.
func (o *RedirectValidationSettingsWhitelistEntry) GetInErrorResource() bool {
	if o == nil || IsNil(o.InErrorResource) {
		var ret bool
		return ret
	}
	return *o.InErrorResource
}

// GetInErrorResourceOk returns a tuple with the InErrorResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectValidationSettingsWhitelistEntry) GetInErrorResourceOk() (*bool, bool) {
	if o == nil || IsNil(o.InErrorResource) {
		return nil, false
	}
	return o.InErrorResource, true
}

// HasInErrorResource returns a boolean if a field has been set.
func (o *RedirectValidationSettingsWhitelistEntry) HasInErrorResource() bool {
	if o != nil && !IsNil(o.InErrorResource) {
		return true
	}

	return false
}

// SetInErrorResource gets a reference to the given bool and assigns it to the InErrorResource field.
func (o *RedirectValidationSettingsWhitelistEntry) SetInErrorResource(v bool) {
	o.InErrorResource = &v
}

// GetIdpDiscovery returns the IdpDiscovery field value if set, zero value otherwise.
func (o *RedirectValidationSettingsWhitelistEntry) GetIdpDiscovery() bool {
	if o == nil || IsNil(o.IdpDiscovery) {
		var ret bool
		return ret
	}
	return *o.IdpDiscovery
}

// GetIdpDiscoveryOk returns a tuple with the IdpDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectValidationSettingsWhitelistEntry) GetIdpDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.IdpDiscovery) {
		return nil, false
	}
	return o.IdpDiscovery, true
}

// HasIdpDiscovery returns a boolean if a field has been set.
func (o *RedirectValidationSettingsWhitelistEntry) HasIdpDiscovery() bool {
	if o != nil && !IsNil(o.IdpDiscovery) {
		return true
	}

	return false
}

// SetIdpDiscovery gets a reference to the given bool and assigns it to the IdpDiscovery field.
func (o *RedirectValidationSettingsWhitelistEntry) SetIdpDiscovery(v bool) {
	o.IdpDiscovery = &v
}

// GetValidDomain returns the ValidDomain field value
func (o *RedirectValidationSettingsWhitelistEntry) GetValidDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValidDomain
}

// GetValidDomainOk returns a tuple with the ValidDomain field value
// and a boolean to check if the value has been set.
func (o *RedirectValidationSettingsWhitelistEntry) GetValidDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidDomain, true
}

// SetValidDomain sets field value
func (o *RedirectValidationSettingsWhitelistEntry) SetValidDomain(v string) {
	o.ValidDomain = v
}

// GetValidPath returns the ValidPath field value if set, zero value otherwise.
func (o *RedirectValidationSettingsWhitelistEntry) GetValidPath() string {
	if o == nil || IsNil(o.ValidPath) {
		var ret string
		return ret
	}
	return *o.ValidPath
}

// GetValidPathOk returns a tuple with the ValidPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectValidationSettingsWhitelistEntry) GetValidPathOk() (*string, bool) {
	if o == nil || IsNil(o.ValidPath) {
		return nil, false
	}
	return o.ValidPath, true
}

// HasValidPath returns a boolean if a field has been set.
func (o *RedirectValidationSettingsWhitelistEntry) HasValidPath() bool {
	if o != nil && !IsNil(o.ValidPath) {
		return true
	}

	return false
}

// SetValidPath gets a reference to the given string and assigns it to the ValidPath field.
func (o *RedirectValidationSettingsWhitelistEntry) SetValidPath(v string) {
	o.ValidPath = &v
}

// GetAllowQueryAndFragment returns the AllowQueryAndFragment field value if set, zero value otherwise.
func (o *RedirectValidationSettingsWhitelistEntry) GetAllowQueryAndFragment() bool {
	if o == nil || IsNil(o.AllowQueryAndFragment) {
		var ret bool
		return ret
	}
	return *o.AllowQueryAndFragment
}

// GetAllowQueryAndFragmentOk returns a tuple with the AllowQueryAndFragment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectValidationSettingsWhitelistEntry) GetAllowQueryAndFragmentOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowQueryAndFragment) {
		return nil, false
	}
	return o.AllowQueryAndFragment, true
}

// HasAllowQueryAndFragment returns a boolean if a field has been set.
func (o *RedirectValidationSettingsWhitelistEntry) HasAllowQueryAndFragment() bool {
	if o != nil && !IsNil(o.AllowQueryAndFragment) {
		return true
	}

	return false
}

// SetAllowQueryAndFragment gets a reference to the given bool and assigns it to the AllowQueryAndFragment field.
func (o *RedirectValidationSettingsWhitelistEntry) SetAllowQueryAndFragment(v bool) {
	o.AllowQueryAndFragment = &v
}

// GetRequireHttps returns the RequireHttps field value if set, zero value otherwise.
func (o *RedirectValidationSettingsWhitelistEntry) GetRequireHttps() bool {
	if o == nil || IsNil(o.RequireHttps) {
		var ret bool
		return ret
	}
	return *o.RequireHttps
}

// GetRequireHttpsOk returns a tuple with the RequireHttps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectValidationSettingsWhitelistEntry) GetRequireHttpsOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireHttps) {
		return nil, false
	}
	return o.RequireHttps, true
}

// HasRequireHttps returns a boolean if a field has been set.
func (o *RedirectValidationSettingsWhitelistEntry) HasRequireHttps() bool {
	if o != nil && !IsNil(o.RequireHttps) {
		return true
	}

	return false
}

// SetRequireHttps gets a reference to the given bool and assigns it to the RequireHttps field.
func (o *RedirectValidationSettingsWhitelistEntry) SetRequireHttps(v bool) {
	o.RequireHttps = &v
}

func (o RedirectValidationSettingsWhitelistEntry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RedirectValidationSettingsWhitelistEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TargetResourceSSO) {
		toSerialize["targetResourceSSO"] = o.TargetResourceSSO
	}
	if !IsNil(o.TargetResourceSLO) {
		toSerialize["targetResourceSLO"] = o.TargetResourceSLO
	}
	if !IsNil(o.InErrorResource) {
		toSerialize["inErrorResource"] = o.InErrorResource
	}
	if !IsNil(o.IdpDiscovery) {
		toSerialize["idpDiscovery"] = o.IdpDiscovery
	}
	toSerialize["validDomain"] = o.ValidDomain
	if !IsNil(o.ValidPath) {
		toSerialize["validPath"] = o.ValidPath
	}
	if !IsNil(o.AllowQueryAndFragment) {
		toSerialize["allowQueryAndFragment"] = o.AllowQueryAndFragment
	}
	if !IsNil(o.RequireHttps) {
		toSerialize["requireHttps"] = o.RequireHttps
	}
	return toSerialize, nil
}

type NullableRedirectValidationSettingsWhitelistEntry struct {
	value *RedirectValidationSettingsWhitelistEntry
	isSet bool
}

func (v NullableRedirectValidationSettingsWhitelistEntry) Get() *RedirectValidationSettingsWhitelistEntry {
	return v.value
}

func (v *NullableRedirectValidationSettingsWhitelistEntry) Set(val *RedirectValidationSettingsWhitelistEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableRedirectValidationSettingsWhitelistEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableRedirectValidationSettingsWhitelistEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedirectValidationSettingsWhitelistEntry(val *RedirectValidationSettingsWhitelistEntry) *NullableRedirectValidationSettingsWhitelistEntry {
	return &NullableRedirectValidationSettingsWhitelistEntry{value: val, isSet: true}
}

func (v NullableRedirectValidationSettingsWhitelistEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedirectValidationSettingsWhitelistEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
