/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"time"
)

// checks if the SecondarySecret type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecondarySecret{}

// SecondarySecret struct for SecondarySecret
type SecondarySecret struct {
	// Secondary client secret for Basic Authentication.  To update the secondary client secret, specify the plaintext value in this field.  This field will not be populated for GET requests.
	Secret *string `json:"secret,omitempty" tfsdk:"secret"`
	// For GET requests, this field contains the encrypted secondary client secret, if one exists.  For POST and PUT requests, if you wish to reuse the existing secret, this field should be passed back unchanged.
	EncryptedSecret *string `json:"encryptedSecret,omitempty" tfsdk:"encrypted_secret"`
	// The expiry time of the secondary secret.
	ExpiryTime *time.Time `json:"expiryTime,omitempty" tfsdk:"expiry_time"`
}

// NewSecondarySecret instantiates a new SecondarySecret object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecondarySecret() *SecondarySecret {
	this := SecondarySecret{}
	return &this
}

// NewSecondarySecretWithDefaults instantiates a new SecondarySecret object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecondarySecretWithDefaults() *SecondarySecret {
	this := SecondarySecret{}
	return &this
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *SecondarySecret) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecondarySecret) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *SecondarySecret) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *SecondarySecret) SetSecret(v string) {
	o.Secret = &v
}

// GetEncryptedSecret returns the EncryptedSecret field value if set, zero value otherwise.
func (o *SecondarySecret) GetEncryptedSecret() string {
	if o == nil || IsNil(o.EncryptedSecret) {
		var ret string
		return ret
	}
	return *o.EncryptedSecret
}

// GetEncryptedSecretOk returns a tuple with the EncryptedSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecondarySecret) GetEncryptedSecretOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptedSecret) {
		return nil, false
	}
	return o.EncryptedSecret, true
}

// HasEncryptedSecret returns a boolean if a field has been set.
func (o *SecondarySecret) HasEncryptedSecret() bool {
	if o != nil && !IsNil(o.EncryptedSecret) {
		return true
	}

	return false
}

// SetEncryptedSecret gets a reference to the given string and assigns it to the EncryptedSecret field.
func (o *SecondarySecret) SetEncryptedSecret(v string) {
	o.EncryptedSecret = &v
}

// GetExpiryTime returns the ExpiryTime field value if set, zero value otherwise.
func (o *SecondarySecret) GetExpiryTime() time.Time {
	if o == nil || IsNil(o.ExpiryTime) {
		var ret time.Time
		return ret
	}
	return *o.ExpiryTime
}

// GetExpiryTimeOk returns a tuple with the ExpiryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecondarySecret) GetExpiryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiryTime) {
		return nil, false
	}
	return o.ExpiryTime, true
}

// HasExpiryTime returns a boolean if a field has been set.
func (o *SecondarySecret) HasExpiryTime() bool {
	if o != nil && !IsNil(o.ExpiryTime) {
		return true
	}

	return false
}

// SetExpiryTime gets a reference to the given time.Time and assigns it to the ExpiryTime field.
func (o *SecondarySecret) SetExpiryTime(v time.Time) {
	o.ExpiryTime = &v
}

func (o SecondarySecret) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecondarySecret) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	if !IsNil(o.EncryptedSecret) {
		toSerialize["encryptedSecret"] = o.EncryptedSecret
	}
	if !IsNil(o.ExpiryTime) {
		toSerialize["expiryTime"] = o.ExpiryTime
	}
	return toSerialize, nil
}

type NullableSecondarySecret struct {
	value *SecondarySecret
	isSet bool
}

func (v NullableSecondarySecret) Get() *SecondarySecret {
	return v.value
}

func (v *NullableSecondarySecret) Set(val *SecondarySecret) {
	v.value = val
	v.isSet = true
}

func (v NullableSecondarySecret) IsSet() bool {
	return v.isSet
}

func (v *NullableSecondarySecret) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecondarySecret(val *SecondarySecret) *NullableSecondarySecret {
	return &NullableSecondarySecret{value: val, isSet: true}
}

func (v NullableSecondarySecret) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecondarySecret) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
