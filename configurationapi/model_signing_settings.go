/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SigningSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SigningSettings{}

// SigningSettings Settings related to signing messages sent to this partner.
type SigningSettings struct {
	SigningKeyPairRef ResourceLink `json:"signingKeyPairRef" tfsdk:"signing_key_pair_ref"`
	// The list of IDs of alternative key pairs used to sign messages sent to this partner. The ID of the key pair is also known as the alias and can be found by viewing the corresponding certificate under 'Signing & Decryption Keys & Certificates' in the PingFederate admin console.
	AlternativeSigningKeyPairRefs []ResourceLink `json:"alternativeSigningKeyPairRefs,omitempty" tfsdk:"alternative_signing_key_pair_refs"`
	// The algorithm used to sign messages sent to this partner. The default is SHA1withDSA for DSA certs, SHA256withRSA for RSA certs, and SHA256withECDSA for EC certs. For RSA certs, SHA1withRSA, SHA384withRSA, SHA512withRSA, SHA256withRSAandMGF1, SHA384withRSAandMGF1 and SHA512withRSAandMGF1 are also supported. For EC certs, SHA384withECDSA and SHA512withECDSA are also supported. If the connection is WS-Federation with JWT token type, then the possible values are RSA SHA256, RSA SHA384, RSA SHA512, RSASSA-PSS SHA256, RSASSA-PSS SHA384, RSASSA-PSS SHA512, ECDSA SHA256, ECDSA SHA384, ECDSA SHA512
	Algorithm *string `json:"algorithm,omitempty" tfsdk:"algorithm"`
	// Determines whether the signing certificate is included in the signature <KeyInfo> element.
	IncludeCertInSignature *bool `json:"includeCertInSignature,omitempty" tfsdk:"include_cert_in_signature"`
	// Determines whether the <KeyValue> element with the raw public key is included in the signature <KeyInfo> element.
	IncludeRawKeyInSignature *bool `json:"includeRawKeyInSignature,omitempty" tfsdk:"include_raw_key_in_signature"`
}

type _SigningSettings SigningSettings

// NewSigningSettings instantiates a new SigningSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSigningSettings(signingKeyPairRef ResourceLink) *SigningSettings {
	this := SigningSettings{}
	this.SigningKeyPairRef = signingKeyPairRef
	return &this
}

// NewSigningSettingsWithDefaults instantiates a new SigningSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSigningSettingsWithDefaults() *SigningSettings {
	this := SigningSettings{}
	return &this
}

// GetSigningKeyPairRef returns the SigningKeyPairRef field value
func (o *SigningSettings) GetSigningKeyPairRef() ResourceLink {
	if o == nil {
		var ret ResourceLink
		return ret
	}

	return o.SigningKeyPairRef
}

// GetSigningKeyPairRefOk returns a tuple with the SigningKeyPairRef field value
// and a boolean to check if the value has been set.
func (o *SigningSettings) GetSigningKeyPairRefOk() (*ResourceLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SigningKeyPairRef, true
}

// SetSigningKeyPairRef sets field value
func (o *SigningSettings) SetSigningKeyPairRef(v ResourceLink) {
	o.SigningKeyPairRef = v
}

// GetAlternativeSigningKeyPairRefs returns the AlternativeSigningKeyPairRefs field value if set, zero value otherwise.
func (o *SigningSettings) GetAlternativeSigningKeyPairRefs() []ResourceLink {
	if o == nil || IsNil(o.AlternativeSigningKeyPairRefs) {
		var ret []ResourceLink
		return ret
	}
	return o.AlternativeSigningKeyPairRefs
}

// GetAlternativeSigningKeyPairRefsOk returns a tuple with the AlternativeSigningKeyPairRefs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningSettings) GetAlternativeSigningKeyPairRefsOk() ([]ResourceLink, bool) {
	if o == nil || IsNil(o.AlternativeSigningKeyPairRefs) {
		return nil, false
	}
	return o.AlternativeSigningKeyPairRefs, true
}

// HasAlternativeSigningKeyPairRefs returns a boolean if a field has been set.
func (o *SigningSettings) HasAlternativeSigningKeyPairRefs() bool {
	if o != nil && !IsNil(o.AlternativeSigningKeyPairRefs) {
		return true
	}

	return false
}

// SetAlternativeSigningKeyPairRefs gets a reference to the given []ResourceLink and assigns it to the AlternativeSigningKeyPairRefs field.
func (o *SigningSettings) SetAlternativeSigningKeyPairRefs(v []ResourceLink) {
	o.AlternativeSigningKeyPairRefs = v
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *SigningSettings) GetAlgorithm() string {
	if o == nil || IsNil(o.Algorithm) {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningSettings) GetAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.Algorithm) {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *SigningSettings) HasAlgorithm() bool {
	if o != nil && !IsNil(o.Algorithm) {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *SigningSettings) SetAlgorithm(v string) {
	o.Algorithm = &v
}

// GetIncludeCertInSignature returns the IncludeCertInSignature field value if set, zero value otherwise.
func (o *SigningSettings) GetIncludeCertInSignature() bool {
	if o == nil || IsNil(o.IncludeCertInSignature) {
		var ret bool
		return ret
	}
	return *o.IncludeCertInSignature
}

// GetIncludeCertInSignatureOk returns a tuple with the IncludeCertInSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningSettings) GetIncludeCertInSignatureOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeCertInSignature) {
		return nil, false
	}
	return o.IncludeCertInSignature, true
}

// HasIncludeCertInSignature returns a boolean if a field has been set.
func (o *SigningSettings) HasIncludeCertInSignature() bool {
	if o != nil && !IsNil(o.IncludeCertInSignature) {
		return true
	}

	return false
}

// SetIncludeCertInSignature gets a reference to the given bool and assigns it to the IncludeCertInSignature field.
func (o *SigningSettings) SetIncludeCertInSignature(v bool) {
	o.IncludeCertInSignature = &v
}

// GetIncludeRawKeyInSignature returns the IncludeRawKeyInSignature field value if set, zero value otherwise.
func (o *SigningSettings) GetIncludeRawKeyInSignature() bool {
	if o == nil || IsNil(o.IncludeRawKeyInSignature) {
		var ret bool
		return ret
	}
	return *o.IncludeRawKeyInSignature
}

// GetIncludeRawKeyInSignatureOk returns a tuple with the IncludeRawKeyInSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningSettings) GetIncludeRawKeyInSignatureOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeRawKeyInSignature) {
		return nil, false
	}
	return o.IncludeRawKeyInSignature, true
}

// HasIncludeRawKeyInSignature returns a boolean if a field has been set.
func (o *SigningSettings) HasIncludeRawKeyInSignature() bool {
	if o != nil && !IsNil(o.IncludeRawKeyInSignature) {
		return true
	}

	return false
}

// SetIncludeRawKeyInSignature gets a reference to the given bool and assigns it to the IncludeRawKeyInSignature field.
func (o *SigningSettings) SetIncludeRawKeyInSignature(v bool) {
	o.IncludeRawKeyInSignature = &v
}

func (o SigningSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SigningSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["signingKeyPairRef"] = o.SigningKeyPairRef
	if !IsNil(o.AlternativeSigningKeyPairRefs) {
		toSerialize["alternativeSigningKeyPairRefs"] = o.AlternativeSigningKeyPairRefs
	}
	if !IsNil(o.Algorithm) {
		toSerialize["algorithm"] = o.Algorithm
	}
	if !IsNil(o.IncludeCertInSignature) {
		toSerialize["includeCertInSignature"] = o.IncludeCertInSignature
	}
	if !IsNil(o.IncludeRawKeyInSignature) {
		toSerialize["includeRawKeyInSignature"] = o.IncludeRawKeyInSignature
	}
	return toSerialize, nil
}

func (o *SigningSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"signingKeyPairRef",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSigningSettings := _SigningSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varSigningSettings)

	if err != nil {
		return err
	}

	*o = SigningSettings(varSigningSettings)

	return err
}

type NullableSigningSettings struct {
	value *SigningSettings
	isSet bool
}

func (v NullableSigningSettings) Get() *SigningSettings {
	return v.value
}

func (v *NullableSigningSettings) Set(val *SigningSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableSigningSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSigningSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSigningSettings(val *SigningSettings) *NullableSigningSettings {
	return &NullableSigningSettings{value: val, isSet: true}
}

func (v NullableSigningSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSigningSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
