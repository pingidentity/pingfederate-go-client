/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// PolicyActionAggregation - struct for PolicyActionAggregation
type PolicyActionAggregation struct {
	ApcMappingPolicyAction           *ApcMappingPolicyAction
	AuthnSelectorPolicyAction        *AuthnSelectorPolicyAction
	AuthnSourcePolicyAction          *AuthnSourcePolicyAction
	ContinuePolicyAction             *ContinuePolicyAction
	DonePolicyAction                 *DonePolicyAction
	FragmentPolicyAction             *FragmentPolicyAction
	LocalIdentityMappingPolicyAction *LocalIdentityMappingPolicyAction
	RestartPolicyAction              *RestartPolicyAction
}

// ApcMappingPolicyActionAsPolicyActionAggregation is a convenience function that returns ApcMappingPolicyAction wrapped in PolicyActionAggregation
func ApcMappingPolicyActionAsPolicyActionAggregation(v *ApcMappingPolicyAction) PolicyActionAggregation {
	return PolicyActionAggregation{
		ApcMappingPolicyAction: v,
	}
}

// AuthnSelectorPolicyActionAsPolicyActionAggregation is a convenience function that returns AuthnSelectorPolicyAction wrapped in PolicyActionAggregation
func AuthnSelectorPolicyActionAsPolicyActionAggregation(v *AuthnSelectorPolicyAction) PolicyActionAggregation {
	return PolicyActionAggregation{
		AuthnSelectorPolicyAction: v,
	}
}

// AuthnSourcePolicyActionAsPolicyActionAggregation is a convenience function that returns AuthnSourcePolicyAction wrapped in PolicyActionAggregation
func AuthnSourcePolicyActionAsPolicyActionAggregation(v *AuthnSourcePolicyAction) PolicyActionAggregation {
	return PolicyActionAggregation{
		AuthnSourcePolicyAction: v,
	}
}

// ContinuePolicyActionAsPolicyActionAggregation is a convenience function that returns ContinuePolicyAction wrapped in PolicyActionAggregation
func ContinuePolicyActionAsPolicyActionAggregation(v *ContinuePolicyAction) PolicyActionAggregation {
	return PolicyActionAggregation{
		ContinuePolicyAction: v,
	}
}

// DonePolicyActionAsPolicyActionAggregation is a convenience function that returns DonePolicyAction wrapped in PolicyActionAggregation
func DonePolicyActionAsPolicyActionAggregation(v *DonePolicyAction) PolicyActionAggregation {
	return PolicyActionAggregation{
		DonePolicyAction: v,
	}
}

// FragmentPolicyActionAsPolicyActionAggregation is a convenience function that returns FragmentPolicyAction wrapped in PolicyActionAggregation
func FragmentPolicyActionAsPolicyActionAggregation(v *FragmentPolicyAction) PolicyActionAggregation {
	return PolicyActionAggregation{
		FragmentPolicyAction: v,
	}
}

// LocalIdentityMappingPolicyActionAsPolicyActionAggregation is a convenience function that returns LocalIdentityMappingPolicyAction wrapped in PolicyActionAggregation
func LocalIdentityMappingPolicyActionAsPolicyActionAggregation(v *LocalIdentityMappingPolicyAction) PolicyActionAggregation {
	return PolicyActionAggregation{
		LocalIdentityMappingPolicyAction: v,
	}
}

// RestartPolicyActionAsPolicyActionAggregation is a convenience function that returns RestartPolicyAction wrapped in PolicyActionAggregation
func RestartPolicyActionAsPolicyActionAggregation(v *RestartPolicyAction) PolicyActionAggregation {
	return PolicyActionAggregation{
		RestartPolicyAction: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *PolicyActionAggregation) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ApcMappingPolicyAction
	err = newStrictDecoder(data).Decode(&dst.ApcMappingPolicyAction)
	if err == nil {
		jsonApcMappingPolicyAction, _ := json.Marshal(dst.ApcMappingPolicyAction)
		if string(jsonApcMappingPolicyAction) == "{}" { // empty struct
			dst.ApcMappingPolicyAction = nil
		} else {
			match++
		}
	} else {
		dst.ApcMappingPolicyAction = nil
	}

	// try to unmarshal data into AuthnSelectorPolicyAction
	err = newStrictDecoder(data).Decode(&dst.AuthnSelectorPolicyAction)
	if err == nil {
		jsonAuthnSelectorPolicyAction, _ := json.Marshal(dst.AuthnSelectorPolicyAction)
		if string(jsonAuthnSelectorPolicyAction) == "{}" { // empty struct
			dst.AuthnSelectorPolicyAction = nil
		} else {
			match++
		}
	} else {
		dst.AuthnSelectorPolicyAction = nil
	}

	// try to unmarshal data into AuthnSourcePolicyAction
	err = newStrictDecoder(data).Decode(&dst.AuthnSourcePolicyAction)
	if err == nil {
		jsonAuthnSourcePolicyAction, _ := json.Marshal(dst.AuthnSourcePolicyAction)
		if string(jsonAuthnSourcePolicyAction) == "{}" { // empty struct
			dst.AuthnSourcePolicyAction = nil
		} else {
			match++
		}
	} else {
		dst.AuthnSourcePolicyAction = nil
	}

	// try to unmarshal data into ContinuePolicyAction
	err = newStrictDecoder(data).Decode(&dst.ContinuePolicyAction)
	if err == nil {
		jsonContinuePolicyAction, _ := json.Marshal(dst.ContinuePolicyAction)
		if string(jsonContinuePolicyAction) == "{}" { // empty struct
			dst.ContinuePolicyAction = nil
		} else {
			match++
		}
	} else {
		dst.ContinuePolicyAction = nil
	}

	// try to unmarshal data into DonePolicyAction
	err = newStrictDecoder(data).Decode(&dst.DonePolicyAction)
	if err == nil {
		jsonDonePolicyAction, _ := json.Marshal(dst.DonePolicyAction)
		if string(jsonDonePolicyAction) == "{}" { // empty struct
			dst.DonePolicyAction = nil
		} else {
			match++
		}
	} else {
		dst.DonePolicyAction = nil
	}

	// try to unmarshal data into FragmentPolicyAction
	err = newStrictDecoder(data).Decode(&dst.FragmentPolicyAction)
	if err == nil {
		jsonFragmentPolicyAction, _ := json.Marshal(dst.FragmentPolicyAction)
		if string(jsonFragmentPolicyAction) == "{}" { // empty struct
			dst.FragmentPolicyAction = nil
		} else {
			match++
		}
	} else {
		dst.FragmentPolicyAction = nil
	}

	// try to unmarshal data into LocalIdentityMappingPolicyAction
	err = newStrictDecoder(data).Decode(&dst.LocalIdentityMappingPolicyAction)
	if err == nil {
		jsonLocalIdentityMappingPolicyAction, _ := json.Marshal(dst.LocalIdentityMappingPolicyAction)
		if string(jsonLocalIdentityMappingPolicyAction) == "{}" { // empty struct
			dst.LocalIdentityMappingPolicyAction = nil
		} else {
			match++
		}
	} else {
		dst.LocalIdentityMappingPolicyAction = nil
	}

	// try to unmarshal data into RestartPolicyAction
	err = newStrictDecoder(data).Decode(&dst.RestartPolicyAction)
	if err == nil {
		jsonRestartPolicyAction, _ := json.Marshal(dst.RestartPolicyAction)
		if string(jsonRestartPolicyAction) == "{}" { // empty struct
			dst.RestartPolicyAction = nil
		} else {
			match++
		}
	} else {
		dst.RestartPolicyAction = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ApcMappingPolicyAction = nil
		dst.AuthnSelectorPolicyAction = nil
		dst.AuthnSourcePolicyAction = nil
		dst.ContinuePolicyAction = nil
		dst.DonePolicyAction = nil
		dst.FragmentPolicyAction = nil
		dst.LocalIdentityMappingPolicyAction = nil
		dst.RestartPolicyAction = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PolicyActionAggregation)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PolicyActionAggregation)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PolicyActionAggregation) MarshalJSON() ([]byte, error) {
	if src.ApcMappingPolicyAction != nil {
		return json.Marshal(&src.ApcMappingPolicyAction)
	}

	if src.AuthnSelectorPolicyAction != nil {
		return json.Marshal(&src.AuthnSelectorPolicyAction)
	}

	if src.AuthnSourcePolicyAction != nil {
		return json.Marshal(&src.AuthnSourcePolicyAction)
	}

	if src.ContinuePolicyAction != nil {
		return json.Marshal(&src.ContinuePolicyAction)
	}

	if src.DonePolicyAction != nil {
		return json.Marshal(&src.DonePolicyAction)
	}

	if src.FragmentPolicyAction != nil {
		return json.Marshal(&src.FragmentPolicyAction)
	}

	if src.LocalIdentityMappingPolicyAction != nil {
		return json.Marshal(&src.LocalIdentityMappingPolicyAction)
	}

	if src.RestartPolicyAction != nil {
		return json.Marshal(&src.RestartPolicyAction)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PolicyActionAggregation) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ApcMappingPolicyAction != nil {
		return obj.ApcMappingPolicyAction
	}

	if obj.AuthnSelectorPolicyAction != nil {
		return obj.AuthnSelectorPolicyAction
	}

	if obj.AuthnSourcePolicyAction != nil {
		return obj.AuthnSourcePolicyAction
	}

	if obj.ContinuePolicyAction != nil {
		return obj.ContinuePolicyAction
	}

	if obj.DonePolicyAction != nil {
		return obj.DonePolicyAction
	}

	if obj.FragmentPolicyAction != nil {
		return obj.FragmentPolicyAction
	}

	if obj.LocalIdentityMappingPolicyAction != nil {
		return obj.LocalIdentityMappingPolicyAction
	}

	if obj.RestartPolicyAction != nil {
		return obj.RestartPolicyAction
	}

	// all schemas are nil
	return nil
}

type NullablePolicyActionAggregation struct {
	value *PolicyActionAggregation
	isSet bool
}

func (v NullablePolicyActionAggregation) Get() *PolicyActionAggregation {
	return v.value
}

func (v *NullablePolicyActionAggregation) Set(val *PolicyActionAggregation) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyActionAggregation) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyActionAggregation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyActionAggregation(val *PolicyActionAggregation) *NullablePolicyActionAggregation {
	return &NullablePolicyActionAggregation{value: val, isSet: true}
}

func (v NullablePolicyActionAggregation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyActionAggregation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
