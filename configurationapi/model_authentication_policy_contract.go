/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AuthenticationPolicyContract type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthenticationPolicyContract{}

// AuthenticationPolicyContract Authentication Policy Contracts carry user attributes from the identity provider to the service provider.
type AuthenticationPolicyContract struct {
	// The persistent, unique ID for the authentication policy contract. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified.
	Id *string `json:"id,omitempty" tfsdk:"id"`
	// The Authentication Policy Contract Name. Name is unique.
	Name *string `json:"name,omitempty" tfsdk:"name"`
	// A list of read-only assertion attributes (for example, subject) that are automatically populated by PingFederate.
	CoreAttributes []AuthenticationPolicyContractAttribute `json:"coreAttributes,omitempty" tfsdk:"core_attributes"`
	// A list of additional attributes as needed.
	ExtendedAttributes []AuthenticationPolicyContractAttribute `json:"extendedAttributes,omitempty" tfsdk:"extended_attributes"`
}

// NewAuthenticationPolicyContract instantiates a new AuthenticationPolicyContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticationPolicyContract() *AuthenticationPolicyContract {
	this := AuthenticationPolicyContract{}
	return &this
}

// NewAuthenticationPolicyContractWithDefaults instantiates a new AuthenticationPolicyContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticationPolicyContractWithDefaults() *AuthenticationPolicyContract {
	this := AuthenticationPolicyContract{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuthenticationPolicyContract) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationPolicyContract) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuthenticationPolicyContract) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AuthenticationPolicyContract) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AuthenticationPolicyContract) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationPolicyContract) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AuthenticationPolicyContract) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AuthenticationPolicyContract) SetName(v string) {
	o.Name = &v
}

// GetCoreAttributes returns the CoreAttributes field value if set, zero value otherwise.
func (o *AuthenticationPolicyContract) GetCoreAttributes() []AuthenticationPolicyContractAttribute {
	if o == nil || IsNil(o.CoreAttributes) {
		var ret []AuthenticationPolicyContractAttribute
		return ret
	}
	return o.CoreAttributes
}

// GetCoreAttributesOk returns a tuple with the CoreAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationPolicyContract) GetCoreAttributesOk() ([]AuthenticationPolicyContractAttribute, bool) {
	if o == nil || IsNil(o.CoreAttributes) {
		return nil, false
	}
	return o.CoreAttributes, true
}

// HasCoreAttributes returns a boolean if a field has been set.
func (o *AuthenticationPolicyContract) HasCoreAttributes() bool {
	if o != nil && !IsNil(o.CoreAttributes) {
		return true
	}

	return false
}

// SetCoreAttributes gets a reference to the given []AuthenticationPolicyContractAttribute and assigns it to the CoreAttributes field.
func (o *AuthenticationPolicyContract) SetCoreAttributes(v []AuthenticationPolicyContractAttribute) {
	o.CoreAttributes = v
}

// GetExtendedAttributes returns the ExtendedAttributes field value if set, zero value otherwise.
func (o *AuthenticationPolicyContract) GetExtendedAttributes() []AuthenticationPolicyContractAttribute {
	if o == nil || IsNil(o.ExtendedAttributes) {
		var ret []AuthenticationPolicyContractAttribute
		return ret
	}
	return o.ExtendedAttributes
}

// GetExtendedAttributesOk returns a tuple with the ExtendedAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationPolicyContract) GetExtendedAttributesOk() ([]AuthenticationPolicyContractAttribute, bool) {
	if o == nil || IsNil(o.ExtendedAttributes) {
		return nil, false
	}
	return o.ExtendedAttributes, true
}

// HasExtendedAttributes returns a boolean if a field has been set.
func (o *AuthenticationPolicyContract) HasExtendedAttributes() bool {
	if o != nil && !IsNil(o.ExtendedAttributes) {
		return true
	}

	return false
}

// SetExtendedAttributes gets a reference to the given []AuthenticationPolicyContractAttribute and assigns it to the ExtendedAttributes field.
func (o *AuthenticationPolicyContract) SetExtendedAttributes(v []AuthenticationPolicyContractAttribute) {
	o.ExtendedAttributes = v
}

func (o AuthenticationPolicyContract) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthenticationPolicyContract) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.CoreAttributes) {
		toSerialize["coreAttributes"] = o.CoreAttributes
	}
	if !IsNil(o.ExtendedAttributes) {
		toSerialize["extendedAttributes"] = o.ExtendedAttributes
	}
	return toSerialize, nil
}

type NullableAuthenticationPolicyContract struct {
	value *AuthenticationPolicyContract
	isSet bool
}

func (v NullableAuthenticationPolicyContract) Get() *AuthenticationPolicyContract {
	return v.value
}

func (v *NullableAuthenticationPolicyContract) Set(val *AuthenticationPolicyContract) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationPolicyContract) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationPolicyContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationPolicyContract(val *AuthenticationPolicyContract) *NullableAuthenticationPolicyContract {
	return &NullableAuthenticationPolicyContract{value: val, isSet: true}
}

func (v NullableAuthenticationPolicyContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationPolicyContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
