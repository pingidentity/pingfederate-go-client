/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the TokenExchangeGeneratorMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenExchangeGeneratorMapping{}

// TokenExchangeGeneratorMapping A Token Generator mapping into an OAuth 2.0 Token Exchange requested token type.
type TokenExchangeGeneratorMapping struct {
	// The Requested token type
	RequestedTokenType string       `json:"requestedTokenType" tfsdk:"requested_token_type"`
	TokenGenerator     ResourceLink `json:"tokenGenerator" tfsdk:"token_generator"`
	// Whether this is the default Token Generator Mapping. Defaults to false if not specified.
	DefaultMapping *bool `json:"defaultMapping,omitempty" tfsdk:"default_mapping"`
}

// NewTokenExchangeGeneratorMapping instantiates a new TokenExchangeGeneratorMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenExchangeGeneratorMapping(requestedTokenType string, tokenGenerator ResourceLink) *TokenExchangeGeneratorMapping {
	this := TokenExchangeGeneratorMapping{}
	this.RequestedTokenType = requestedTokenType
	this.TokenGenerator = tokenGenerator
	return &this
}

// NewTokenExchangeGeneratorMappingWithDefaults instantiates a new TokenExchangeGeneratorMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenExchangeGeneratorMappingWithDefaults() *TokenExchangeGeneratorMapping {
	this := TokenExchangeGeneratorMapping{}
	return &this
}

// GetRequestedTokenType returns the RequestedTokenType field value
func (o *TokenExchangeGeneratorMapping) GetRequestedTokenType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestedTokenType
}

// GetRequestedTokenTypeOk returns a tuple with the RequestedTokenType field value
// and a boolean to check if the value has been set.
func (o *TokenExchangeGeneratorMapping) GetRequestedTokenTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestedTokenType, true
}

// SetRequestedTokenType sets field value
func (o *TokenExchangeGeneratorMapping) SetRequestedTokenType(v string) {
	o.RequestedTokenType = v
}

// GetTokenGenerator returns the TokenGenerator field value
func (o *TokenExchangeGeneratorMapping) GetTokenGenerator() ResourceLink {
	if o == nil {
		var ret ResourceLink
		return ret
	}

	return o.TokenGenerator
}

// GetTokenGeneratorOk returns a tuple with the TokenGenerator field value
// and a boolean to check if the value has been set.
func (o *TokenExchangeGeneratorMapping) GetTokenGeneratorOk() (*ResourceLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenGenerator, true
}

// SetTokenGenerator sets field value
func (o *TokenExchangeGeneratorMapping) SetTokenGenerator(v ResourceLink) {
	o.TokenGenerator = v
}

// GetDefaultMapping returns the DefaultMapping field value if set, zero value otherwise.
func (o *TokenExchangeGeneratorMapping) GetDefaultMapping() bool {
	if o == nil || IsNil(o.DefaultMapping) {
		var ret bool
		return ret
	}
	return *o.DefaultMapping
}

// GetDefaultMappingOk returns a tuple with the DefaultMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenExchangeGeneratorMapping) GetDefaultMappingOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultMapping) {
		return nil, false
	}
	return o.DefaultMapping, true
}

// HasDefaultMapping returns a boolean if a field has been set.
func (o *TokenExchangeGeneratorMapping) HasDefaultMapping() bool {
	if o != nil && !IsNil(o.DefaultMapping) {
		return true
	}

	return false
}

// SetDefaultMapping gets a reference to the given bool and assigns it to the DefaultMapping field.
func (o *TokenExchangeGeneratorMapping) SetDefaultMapping(v bool) {
	o.DefaultMapping = &v
}

func (o TokenExchangeGeneratorMapping) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenExchangeGeneratorMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["requestedTokenType"] = o.RequestedTokenType
	toSerialize["tokenGenerator"] = o.TokenGenerator
	if !IsNil(o.DefaultMapping) {
		toSerialize["defaultMapping"] = o.DefaultMapping
	}
	return toSerialize, nil
}

type NullableTokenExchangeGeneratorMapping struct {
	value *TokenExchangeGeneratorMapping
	isSet bool
}

func (v NullableTokenExchangeGeneratorMapping) Get() *TokenExchangeGeneratorMapping {
	return v.value
}

func (v *NullableTokenExchangeGeneratorMapping) Set(val *TokenExchangeGeneratorMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenExchangeGeneratorMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenExchangeGeneratorMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenExchangeGeneratorMapping(val *TokenExchangeGeneratorMapping) *NullableTokenExchangeGeneratorMapping {
	return &NullableTokenExchangeGeneratorMapping{value: val, isSet: true}
}

func (v NullableTokenExchangeGeneratorMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenExchangeGeneratorMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
