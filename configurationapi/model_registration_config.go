/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RegistrationConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegistrationConfig{}

// RegistrationConfig A local identity profile registration configuration.
type RegistrationConfig struct {
	// Whether CAPTCHA is enabled or not in the registration configuration.
	CaptchaEnabled     *bool         `json:"captchaEnabled,omitempty" tfsdk:"captcha_enabled"`
	CaptchaProviderRef *ResourceLink `json:"captchaProviderRef,omitempty" tfsdk:"captcha_provider_ref"`
	// The template name for the registration configuration.
	TemplateName string `json:"templateName" tfsdk:"template_name"`
	// Whether to create an Authentication Session when registering a local account. Default is true.
	CreateAuthnSessionAfterRegistration *bool `json:"createAuthnSessionAfterRegistration,omitempty" tfsdk:"create_authn_session_after_registration"`
	// When creating an Authentication Session after registering a local account, PingFederate will pass the Unique ID field's value as the username. If the Unique ID value is not the username, then override which field's value will be used as the username.
	UsernameField *string `json:"usernameField,omitempty" tfsdk:"username_field"`
	// Allows users to indicate whether their device is shared or private. In this mode, PingFederate Authentication Sessions will not be stored unless the user indicates the device is private.
	ThisIsMyDeviceEnabled *bool         `json:"thisIsMyDeviceEnabled,omitempty" tfsdk:"this_is_my_device_enabled"`
	RegistrationWorkflow  *ResourceLink `json:"registrationWorkflow,omitempty" tfsdk:"registration_workflow"`
	// This setting indicates whether PingFederate should execute the workflow before or after account creation. The default is to run the registration workflow after account creation.
	ExecuteWorkflow *string `json:"executeWorkflow,omitempty" tfsdk:"execute_workflow"`
}

type _RegistrationConfig RegistrationConfig

// NewRegistrationConfig instantiates a new RegistrationConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegistrationConfig(templateName string) *RegistrationConfig {
	this := RegistrationConfig{}
	this.TemplateName = templateName
	return &this
}

// NewRegistrationConfigWithDefaults instantiates a new RegistrationConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegistrationConfigWithDefaults() *RegistrationConfig {
	this := RegistrationConfig{}
	return &this
}

// GetCaptchaEnabled returns the CaptchaEnabled field value if set, zero value otherwise.
func (o *RegistrationConfig) GetCaptchaEnabled() bool {
	if o == nil || IsNil(o.CaptchaEnabled) {
		var ret bool
		return ret
	}
	return *o.CaptchaEnabled
}

// GetCaptchaEnabledOk returns a tuple with the CaptchaEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationConfig) GetCaptchaEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CaptchaEnabled) {
		return nil, false
	}
	return o.CaptchaEnabled, true
}

// HasCaptchaEnabled returns a boolean if a field has been set.
func (o *RegistrationConfig) HasCaptchaEnabled() bool {
	if o != nil && !IsNil(o.CaptchaEnabled) {
		return true
	}

	return false
}

// SetCaptchaEnabled gets a reference to the given bool and assigns it to the CaptchaEnabled field.
func (o *RegistrationConfig) SetCaptchaEnabled(v bool) {
	o.CaptchaEnabled = &v
}

// GetCaptchaProviderRef returns the CaptchaProviderRef field value if set, zero value otherwise.
func (o *RegistrationConfig) GetCaptchaProviderRef() ResourceLink {
	if o == nil || IsNil(o.CaptchaProviderRef) {
		var ret ResourceLink
		return ret
	}
	return *o.CaptchaProviderRef
}

// GetCaptchaProviderRefOk returns a tuple with the CaptchaProviderRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationConfig) GetCaptchaProviderRefOk() (*ResourceLink, bool) {
	if o == nil || IsNil(o.CaptchaProviderRef) {
		return nil, false
	}
	return o.CaptchaProviderRef, true
}

// HasCaptchaProviderRef returns a boolean if a field has been set.
func (o *RegistrationConfig) HasCaptchaProviderRef() bool {
	if o != nil && !IsNil(o.CaptchaProviderRef) {
		return true
	}

	return false
}

// SetCaptchaProviderRef gets a reference to the given ResourceLink and assigns it to the CaptchaProviderRef field.
func (o *RegistrationConfig) SetCaptchaProviderRef(v ResourceLink) {
	o.CaptchaProviderRef = &v
}

// GetTemplateName returns the TemplateName field value
func (o *RegistrationConfig) GetTemplateName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TemplateName
}

// GetTemplateNameOk returns a tuple with the TemplateName field value
// and a boolean to check if the value has been set.
func (o *RegistrationConfig) GetTemplateNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TemplateName, true
}

// SetTemplateName sets field value
func (o *RegistrationConfig) SetTemplateName(v string) {
	o.TemplateName = v
}

// GetCreateAuthnSessionAfterRegistration returns the CreateAuthnSessionAfterRegistration field value if set, zero value otherwise.
func (o *RegistrationConfig) GetCreateAuthnSessionAfterRegistration() bool {
	if o == nil || IsNil(o.CreateAuthnSessionAfterRegistration) {
		var ret bool
		return ret
	}
	return *o.CreateAuthnSessionAfterRegistration
}

// GetCreateAuthnSessionAfterRegistrationOk returns a tuple with the CreateAuthnSessionAfterRegistration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationConfig) GetCreateAuthnSessionAfterRegistrationOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateAuthnSessionAfterRegistration) {
		return nil, false
	}
	return o.CreateAuthnSessionAfterRegistration, true
}

// HasCreateAuthnSessionAfterRegistration returns a boolean if a field has been set.
func (o *RegistrationConfig) HasCreateAuthnSessionAfterRegistration() bool {
	if o != nil && !IsNil(o.CreateAuthnSessionAfterRegistration) {
		return true
	}

	return false
}

// SetCreateAuthnSessionAfterRegistration gets a reference to the given bool and assigns it to the CreateAuthnSessionAfterRegistration field.
func (o *RegistrationConfig) SetCreateAuthnSessionAfterRegistration(v bool) {
	o.CreateAuthnSessionAfterRegistration = &v
}

// GetUsernameField returns the UsernameField field value if set, zero value otherwise.
func (o *RegistrationConfig) GetUsernameField() string {
	if o == nil || IsNil(o.UsernameField) {
		var ret string
		return ret
	}
	return *o.UsernameField
}

// GetUsernameFieldOk returns a tuple with the UsernameField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationConfig) GetUsernameFieldOk() (*string, bool) {
	if o == nil || IsNil(o.UsernameField) {
		return nil, false
	}
	return o.UsernameField, true
}

// HasUsernameField returns a boolean if a field has been set.
func (o *RegistrationConfig) HasUsernameField() bool {
	if o != nil && !IsNil(o.UsernameField) {
		return true
	}

	return false
}

// SetUsernameField gets a reference to the given string and assigns it to the UsernameField field.
func (o *RegistrationConfig) SetUsernameField(v string) {
	o.UsernameField = &v
}

// GetThisIsMyDeviceEnabled returns the ThisIsMyDeviceEnabled field value if set, zero value otherwise.
func (o *RegistrationConfig) GetThisIsMyDeviceEnabled() bool {
	if o == nil || IsNil(o.ThisIsMyDeviceEnabled) {
		var ret bool
		return ret
	}
	return *o.ThisIsMyDeviceEnabled
}

// GetThisIsMyDeviceEnabledOk returns a tuple with the ThisIsMyDeviceEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationConfig) GetThisIsMyDeviceEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ThisIsMyDeviceEnabled) {
		return nil, false
	}
	return o.ThisIsMyDeviceEnabled, true
}

// HasThisIsMyDeviceEnabled returns a boolean if a field has been set.
func (o *RegistrationConfig) HasThisIsMyDeviceEnabled() bool {
	if o != nil && !IsNil(o.ThisIsMyDeviceEnabled) {
		return true
	}

	return false
}

// SetThisIsMyDeviceEnabled gets a reference to the given bool and assigns it to the ThisIsMyDeviceEnabled field.
func (o *RegistrationConfig) SetThisIsMyDeviceEnabled(v bool) {
	o.ThisIsMyDeviceEnabled = &v
}

// GetRegistrationWorkflow returns the RegistrationWorkflow field value if set, zero value otherwise.
func (o *RegistrationConfig) GetRegistrationWorkflow() ResourceLink {
	if o == nil || IsNil(o.RegistrationWorkflow) {
		var ret ResourceLink
		return ret
	}
	return *o.RegistrationWorkflow
}

// GetRegistrationWorkflowOk returns a tuple with the RegistrationWorkflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationConfig) GetRegistrationWorkflowOk() (*ResourceLink, bool) {
	if o == nil || IsNil(o.RegistrationWorkflow) {
		return nil, false
	}
	return o.RegistrationWorkflow, true
}

// HasRegistrationWorkflow returns a boolean if a field has been set.
func (o *RegistrationConfig) HasRegistrationWorkflow() bool {
	if o != nil && !IsNil(o.RegistrationWorkflow) {
		return true
	}

	return false
}

// SetRegistrationWorkflow gets a reference to the given ResourceLink and assigns it to the RegistrationWorkflow field.
func (o *RegistrationConfig) SetRegistrationWorkflow(v ResourceLink) {
	o.RegistrationWorkflow = &v
}

// GetExecuteWorkflow returns the ExecuteWorkflow field value if set, zero value otherwise.
func (o *RegistrationConfig) GetExecuteWorkflow() string {
	if o == nil || IsNil(o.ExecuteWorkflow) {
		var ret string
		return ret
	}
	return *o.ExecuteWorkflow
}

// GetExecuteWorkflowOk returns a tuple with the ExecuteWorkflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationConfig) GetExecuteWorkflowOk() (*string, bool) {
	if o == nil || IsNil(o.ExecuteWorkflow) {
		return nil, false
	}
	return o.ExecuteWorkflow, true
}

// HasExecuteWorkflow returns a boolean if a field has been set.
func (o *RegistrationConfig) HasExecuteWorkflow() bool {
	if o != nil && !IsNil(o.ExecuteWorkflow) {
		return true
	}

	return false
}

// SetExecuteWorkflow gets a reference to the given string and assigns it to the ExecuteWorkflow field.
func (o *RegistrationConfig) SetExecuteWorkflow(v string) {
	o.ExecuteWorkflow = &v
}

func (o RegistrationConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegistrationConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CaptchaEnabled) {
		toSerialize["captchaEnabled"] = o.CaptchaEnabled
	}
	if !IsNil(o.CaptchaProviderRef) {
		toSerialize["captchaProviderRef"] = o.CaptchaProviderRef
	}
	toSerialize["templateName"] = o.TemplateName
	if !IsNil(o.CreateAuthnSessionAfterRegistration) {
		toSerialize["createAuthnSessionAfterRegistration"] = o.CreateAuthnSessionAfterRegistration
	}
	if !IsNil(o.UsernameField) {
		toSerialize["usernameField"] = o.UsernameField
	}
	if !IsNil(o.ThisIsMyDeviceEnabled) {
		toSerialize["thisIsMyDeviceEnabled"] = o.ThisIsMyDeviceEnabled
	}
	if !IsNil(o.RegistrationWorkflow) {
		toSerialize["registrationWorkflow"] = o.RegistrationWorkflow
	}
	if !IsNil(o.ExecuteWorkflow) {
		toSerialize["executeWorkflow"] = o.ExecuteWorkflow
	}
	return toSerialize, nil
}

func (o *RegistrationConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"templateName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegistrationConfig := _RegistrationConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varRegistrationConfig)

	if err != nil {
		return err
	}

	*o = RegistrationConfig(varRegistrationConfig)

	return err
}

type NullableRegistrationConfig struct {
	value *RegistrationConfig
	isSet bool
}

func (v NullableRegistrationConfig) Get() *RegistrationConfig {
	return v.value
}

func (v *NullableRegistrationConfig) Set(val *RegistrationConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistrationConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistrationConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistrationConfig(val *RegistrationConfig) *NullableRegistrationConfig {
	return &NullableRegistrationConfig{value: val, isSet: true}
}

func (v NullableRegistrationConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistrationConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
