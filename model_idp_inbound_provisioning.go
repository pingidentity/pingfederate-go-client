/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the IdpInboundProvisioning type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdpInboundProvisioning{}

// IdpInboundProvisioning SCIM Inbound Provisioning specifies how and when to provision user accounts and groups.
type IdpInboundProvisioning struct {
	// Specify support for provisioning of groups.
	GroupSupport   bool                              `json:"groupSupport"`
	UserRepository InboundProvisioningUserRepository `json:"userRepository"`
	CustomSchema   Schema                            `json:"customSchema"`
	Users          Users                             `json:"users"`
	Groups         Groups                            `json:"groups"`
	// Specify behavior of how SCIM DELETE requests are handled.
	ActionOnDelete *string `json:"actionOnDelete,omitempty"`
}

// NewIdpInboundProvisioning instantiates a new IdpInboundProvisioning object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdpInboundProvisioning(groupSupport bool, userRepository InboundProvisioningUserRepository, customSchema Schema, users Users, groups Groups) *IdpInboundProvisioning {
	this := IdpInboundProvisioning{}
	this.GroupSupport = groupSupport
	this.UserRepository = userRepository
	this.CustomSchema = customSchema
	this.Users = users
	this.Groups = groups
	return &this
}

// NewIdpInboundProvisioningWithDefaults instantiates a new IdpInboundProvisioning object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdpInboundProvisioningWithDefaults() *IdpInboundProvisioning {
	this := IdpInboundProvisioning{}
	return &this
}

// GetGroupSupport returns the GroupSupport field value
func (o *IdpInboundProvisioning) GetGroupSupport() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.GroupSupport
}

// GetGroupSupportOk returns a tuple with the GroupSupport field value
// and a boolean to check if the value has been set.
func (o *IdpInboundProvisioning) GetGroupSupportOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupSupport, true
}

// SetGroupSupport sets field value
func (o *IdpInboundProvisioning) SetGroupSupport(v bool) {
	o.GroupSupport = v
}

// GetUserRepository returns the UserRepository field value
func (o *IdpInboundProvisioning) GetUserRepository() InboundProvisioningUserRepository {
	if o == nil {
		var ret InboundProvisioningUserRepository
		return ret
	}

	return o.UserRepository
}

// GetUserRepositoryOk returns a tuple with the UserRepository field value
// and a boolean to check if the value has been set.
func (o *IdpInboundProvisioning) GetUserRepositoryOk() (*InboundProvisioningUserRepository, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserRepository, true
}

// SetUserRepository sets field value
func (o *IdpInboundProvisioning) SetUserRepository(v InboundProvisioningUserRepository) {
	o.UserRepository = v
}

// GetCustomSchema returns the CustomSchema field value
func (o *IdpInboundProvisioning) GetCustomSchema() Schema {
	if o == nil {
		var ret Schema
		return ret
	}

	return o.CustomSchema
}

// GetCustomSchemaOk returns a tuple with the CustomSchema field value
// and a boolean to check if the value has been set.
func (o *IdpInboundProvisioning) GetCustomSchemaOk() (*Schema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomSchema, true
}

// SetCustomSchema sets field value
func (o *IdpInboundProvisioning) SetCustomSchema(v Schema) {
	o.CustomSchema = v
}

// GetUsers returns the Users field value
func (o *IdpInboundProvisioning) GetUsers() Users {
	if o == nil {
		var ret Users
		return ret
	}

	return o.Users
}

// GetUsersOk returns a tuple with the Users field value
// and a boolean to check if the value has been set.
func (o *IdpInboundProvisioning) GetUsersOk() (*Users, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Users, true
}

// SetUsers sets field value
func (o *IdpInboundProvisioning) SetUsers(v Users) {
	o.Users = v
}

// GetGroups returns the Groups field value
func (o *IdpInboundProvisioning) GetGroups() Groups {
	if o == nil {
		var ret Groups
		return ret
	}

	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value
// and a boolean to check if the value has been set.
func (o *IdpInboundProvisioning) GetGroupsOk() (*Groups, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Groups, true
}

// SetGroups sets field value
func (o *IdpInboundProvisioning) SetGroups(v Groups) {
	o.Groups = v
}

// GetActionOnDelete returns the ActionOnDelete field value if set, zero value otherwise.
func (o *IdpInboundProvisioning) GetActionOnDelete() string {
	if o == nil || IsNil(o.ActionOnDelete) {
		var ret string
		return ret
	}
	return *o.ActionOnDelete
}

// GetActionOnDeleteOk returns a tuple with the ActionOnDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpInboundProvisioning) GetActionOnDeleteOk() (*string, bool) {
	if o == nil || IsNil(o.ActionOnDelete) {
		return nil, false
	}
	return o.ActionOnDelete, true
}

// HasActionOnDelete returns a boolean if a field has been set.
func (o *IdpInboundProvisioning) HasActionOnDelete() bool {
	if o != nil && !IsNil(o.ActionOnDelete) {
		return true
	}

	return false
}

// SetActionOnDelete gets a reference to the given string and assigns it to the ActionOnDelete field.
func (o *IdpInboundProvisioning) SetActionOnDelete(v string) {
	o.ActionOnDelete = &v
}

func (o IdpInboundProvisioning) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdpInboundProvisioning) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["groupSupport"] = o.GroupSupport
	toSerialize["userRepository"] = o.UserRepository
	toSerialize["customSchema"] = o.CustomSchema
	toSerialize["users"] = o.Users
	toSerialize["groups"] = o.Groups
	if !IsNil(o.ActionOnDelete) {
		toSerialize["actionOnDelete"] = o.ActionOnDelete
	}
	return toSerialize, nil
}

type NullableIdpInboundProvisioning struct {
	value *IdpInboundProvisioning
	isSet bool
}

func (v NullableIdpInboundProvisioning) Get() *IdpInboundProvisioning {
	return v.value
}

func (v *NullableIdpInboundProvisioning) Set(val *IdpInboundProvisioning) {
	v.value = val
	v.isSet = true
}

func (v NullableIdpInboundProvisioning) IsSet() bool {
	return v.isSet
}

func (v *NullableIdpInboundProvisioning) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdpInboundProvisioning(val *IdpInboundProvisioning) *NullableIdpInboundProvisioning {
	return &NullableIdpInboundProvisioning{value: val, isSet: true}
}

func (v NullableIdpInboundProvisioning) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdpInboundProvisioning) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
