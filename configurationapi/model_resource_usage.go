/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ResourceUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceUsage{}

// ResourceUsage An API model representing a reference to an API resource.
type ResourceUsage struct {
	// The ID of the referencing resource.
	Id *string `json:"id,omitempty" tfsdk:"id"`
	// The name of the referencing resource.
	Name *string `json:"name,omitempty" tfsdk:"name"`
	// The category of the referencing resource.
	CategoryId *string `json:"categoryId,omitempty" tfsdk:"category_id"`
	// The type of the referencing resource. In the case of plugins, this is the plugin type. Otherwise, it is usually the same as the name of the category.
	Type *string       `json:"type,omitempty" tfsdk:"type"`
	Ref  *ResourceLink `json:"ref,omitempty" tfsdk:"ref"`
}

// NewResourceUsage instantiates a new ResourceUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceUsage() *ResourceUsage {
	this := ResourceUsage{}
	return &this
}

// NewResourceUsageWithDefaults instantiates a new ResourceUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceUsageWithDefaults() *ResourceUsage {
	this := ResourceUsage{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResourceUsage) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceUsage) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResourceUsage) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ResourceUsage) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResourceUsage) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceUsage) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResourceUsage) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResourceUsage) SetName(v string) {
	o.Name = &v
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *ResourceUsage) GetCategoryId() string {
	if o == nil || IsNil(o.CategoryId) {
		var ret string
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceUsage) GetCategoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryId) {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *ResourceUsage) HasCategoryId() bool {
	if o != nil && !IsNil(o.CategoryId) {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given string and assigns it to the CategoryId field.
func (o *ResourceUsage) SetCategoryId(v string) {
	o.CategoryId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ResourceUsage) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceUsage) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ResourceUsage) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ResourceUsage) SetType(v string) {
	o.Type = &v
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *ResourceUsage) GetRef() ResourceLink {
	if o == nil || IsNil(o.Ref) {
		var ret ResourceLink
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceUsage) GetRefOk() (*ResourceLink, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *ResourceUsage) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given ResourceLink and assigns it to the Ref field.
func (o *ResourceUsage) SetRef(v ResourceLink) {
	o.Ref = &v
}

func (o ResourceUsage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.CategoryId) {
		toSerialize["categoryId"] = o.CategoryId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Ref) {
		toSerialize["ref"] = o.Ref
	}
	return toSerialize, nil
}

type NullableResourceUsage struct {
	value *ResourceUsage
	isSet bool
}

func (v NullableResourceUsage) Get() *ResourceUsage {
	return v.value
}

func (v *NullableResourceUsage) Set(val *ResourceUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceUsage(val *ResourceUsage) *NullableResourceUsage {
	return &NullableResourceUsage{value: val, isSet: true}
}

func (v NullableResourceUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
