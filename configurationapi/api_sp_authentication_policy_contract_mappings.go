/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// SpAuthenticationPolicyContractMappingsAPIService SpAuthenticationPolicyContractMappingsAPI service
type SpAuthenticationPolicyContractMappingsAPIService service

type ApiCreateApcToSpAdapterMappingRequest struct {
	ctx                       context.Context
	ApiService                *SpAuthenticationPolicyContractMappingsAPIService
	body                      *ApcToSpAdapterMapping
	xBypassExternalValidation *bool
}

// Configuration for a new APC-to-SP Adapter Mapping.
func (r ApiCreateApcToSpAdapterMappingRequest) Body(body ApcToSpAdapterMapping) ApiCreateApcToSpAdapterMappingRequest {
	r.body = &body
	return r
}

// External validation will be bypassed when set to true. Default to false.
func (r ApiCreateApcToSpAdapterMappingRequest) XBypassExternalValidation(xBypassExternalValidation bool) ApiCreateApcToSpAdapterMappingRequest {
	r.xBypassExternalValidation = &xBypassExternalValidation
	return r
}

func (r ApiCreateApcToSpAdapterMappingRequest) Execute() (*ApcToSpAdapterMapping, *http.Response, error) {
	return r.ApiService.CreateApcToSpAdapterMappingExecute(r)
}

/*
CreateApcToSpAdapterMapping Create a new APC-to-SP Adapter Mapping.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateApcToSpAdapterMappingRequest
*/
func (a *SpAuthenticationPolicyContractMappingsAPIService) CreateApcToSpAdapterMapping(ctx context.Context) ApiCreateApcToSpAdapterMappingRequest {
	return ApiCreateApcToSpAdapterMappingRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ApcToSpAdapterMapping
func (a *SpAuthenticationPolicyContractMappingsAPIService) CreateApcToSpAdapterMappingExecute(r ApiCreateApcToSpAdapterMappingRequest) (*ApcToSpAdapterMapping, *http.Response, error) {
	var (
		err                 error
		response            *http.Response
		localVarReturnValue *ApcToSpAdapterMapping
	)

	response, err = processResponse(
		func() (any, *http.Response, error) {
			return r.ApiService.internalCreateApcToSpAdapterMappingExecute(r)
		},
		&localVarReturnValue,
	)
	return localVarReturnValue, response, err
}

func (a *SpAuthenticationPolicyContractMappingsAPIService) internalCreateApcToSpAdapterMappingExecute(r ApiCreateApcToSpAdapterMappingRequest) (*ApcToSpAdapterMapping, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ApcToSpAdapterMapping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpAuthenticationPolicyContractMappingsAPIService.CreateApcToSpAdapterMapping")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sp/authenticationPolicyContractMappings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xBypassExternalValidation != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-BypassExternalValidation", r.xBypassExternalValidation, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ApiResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteApcToSpAdapterMappingByIdRequest struct {
	ctx        context.Context
	ApiService *SpAuthenticationPolicyContractMappingsAPIService
	id         string
}

func (r ApiDeleteApcToSpAdapterMappingByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteApcToSpAdapterMappingByIdExecute(r)
}

/*
DeleteApcToSpAdapterMappingById Delete an APC-to-SP Adapter Mapping.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of APC-to-SP Adapter Mapping to delete.
	@return ApiDeleteApcToSpAdapterMappingByIdRequest
*/
func (a *SpAuthenticationPolicyContractMappingsAPIService) DeleteApcToSpAdapterMappingById(ctx context.Context, id string) ApiDeleteApcToSpAdapterMappingByIdRequest {
	return ApiDeleteApcToSpAdapterMappingByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *SpAuthenticationPolicyContractMappingsAPIService) DeleteApcToSpAdapterMappingByIdExecute(r ApiDeleteApcToSpAdapterMappingByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpAuthenticationPolicyContractMappingsAPIService.DeleteApcToSpAdapterMappingById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sp/authenticationPolicyContractMappings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetApcToSpAdapterMappingByIdRequest struct {
	ctx        context.Context
	ApiService *SpAuthenticationPolicyContractMappingsAPIService
	id         string
}

func (r ApiGetApcToSpAdapterMappingByIdRequest) Execute() (*ApcToSpAdapterMapping, *http.Response, error) {
	return r.ApiService.GetApcToSpAdapterMappingByIdExecute(r)
}

/*
GetApcToSpAdapterMappingById Get an APC-to-SP Adapter Mapping.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of APC-to-SP Adapter Mapping to fetch.
	@return ApiGetApcToSpAdapterMappingByIdRequest
*/
func (a *SpAuthenticationPolicyContractMappingsAPIService) GetApcToSpAdapterMappingById(ctx context.Context, id string) ApiGetApcToSpAdapterMappingByIdRequest {
	return ApiGetApcToSpAdapterMappingByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ApcToSpAdapterMapping
func (a *SpAuthenticationPolicyContractMappingsAPIService) GetApcToSpAdapterMappingByIdExecute(r ApiGetApcToSpAdapterMappingByIdRequest) (*ApcToSpAdapterMapping, *http.Response, error) {
	var (
		err                 error
		response            *http.Response
		localVarReturnValue *ApcToSpAdapterMapping
	)

	response, err = processResponse(
		func() (any, *http.Response, error) {
			return r.ApiService.internalGetApcToSpAdapterMappingByIdExecute(r)
		},
		&localVarReturnValue,
	)
	return localVarReturnValue, response, err
}

func (a *SpAuthenticationPolicyContractMappingsAPIService) internalGetApcToSpAdapterMappingByIdExecute(r ApiGetApcToSpAdapterMappingByIdRequest) (*ApcToSpAdapterMapping, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ApcToSpAdapterMapping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpAuthenticationPolicyContractMappingsAPIService.GetApcToSpAdapterMappingById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sp/authenticationPolicyContractMappings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetApcToSpAdapterMappingsRequest struct {
	ctx        context.Context
	ApiService *SpAuthenticationPolicyContractMappingsAPIService
}

func (r ApiGetApcToSpAdapterMappingsRequest) Execute() (*ApcToSpAdapterMappings, *http.Response, error) {
	return r.ApiService.GetApcToSpAdapterMappingsExecute(r)
}

/*
GetApcToSpAdapterMappings Get the list of APC-to-SP Adapter Mappings.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetApcToSpAdapterMappingsRequest
*/
func (a *SpAuthenticationPolicyContractMappingsAPIService) GetApcToSpAdapterMappings(ctx context.Context) ApiGetApcToSpAdapterMappingsRequest {
	return ApiGetApcToSpAdapterMappingsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ApcToSpAdapterMappings
func (a *SpAuthenticationPolicyContractMappingsAPIService) GetApcToSpAdapterMappingsExecute(r ApiGetApcToSpAdapterMappingsRequest) (*ApcToSpAdapterMappings, *http.Response, error) {
	var (
		err                 error
		response            *http.Response
		localVarReturnValue *ApcToSpAdapterMappings
	)

	response, err = processResponse(
		func() (any, *http.Response, error) {
			return r.ApiService.internalGetApcToSpAdapterMappingsExecute(r)
		},
		&localVarReturnValue,
	)
	return localVarReturnValue, response, err
}

func (a *SpAuthenticationPolicyContractMappingsAPIService) internalGetApcToSpAdapterMappingsExecute(r ApiGetApcToSpAdapterMappingsRequest) (*ApcToSpAdapterMappings, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ApcToSpAdapterMappings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpAuthenticationPolicyContractMappingsAPIService.GetApcToSpAdapterMappings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sp/authenticationPolicyContractMappings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateApcToSpAdapterMappingByIdRequest struct {
	ctx                       context.Context
	ApiService                *SpAuthenticationPolicyContractMappingsAPIService
	id                        string
	body                      *ApcToSpAdapterMapping
	xBypassExternalValidation *bool
}

// Configuration for updated APC-to-SP Adapter Mapping.
func (r ApiUpdateApcToSpAdapterMappingByIdRequest) Body(body ApcToSpAdapterMapping) ApiUpdateApcToSpAdapterMappingByIdRequest {
	r.body = &body
	return r
}

// External validation will be bypassed when set to true. Default to false.
func (r ApiUpdateApcToSpAdapterMappingByIdRequest) XBypassExternalValidation(xBypassExternalValidation bool) ApiUpdateApcToSpAdapterMappingByIdRequest {
	r.xBypassExternalValidation = &xBypassExternalValidation
	return r
}

func (r ApiUpdateApcToSpAdapterMappingByIdRequest) Execute() (*ApcToSpAdapterMapping, *http.Response, error) {
	return r.ApiService.UpdateApcToSpAdapterMappingByIdExecute(r)
}

/*
UpdateApcToSpAdapterMappingById Update an APC-to-SP Adapter Mapping.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of APC-to-SP Adapter Mapping to update.
	@return ApiUpdateApcToSpAdapterMappingByIdRequest
*/
func (a *SpAuthenticationPolicyContractMappingsAPIService) UpdateApcToSpAdapterMappingById(ctx context.Context, id string) ApiUpdateApcToSpAdapterMappingByIdRequest {
	return ApiUpdateApcToSpAdapterMappingByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ApcToSpAdapterMapping
func (a *SpAuthenticationPolicyContractMappingsAPIService) UpdateApcToSpAdapterMappingByIdExecute(r ApiUpdateApcToSpAdapterMappingByIdRequest) (*ApcToSpAdapterMapping, *http.Response, error) {
	var (
		err                 error
		response            *http.Response
		localVarReturnValue *ApcToSpAdapterMapping
	)

	response, err = processResponse(
		func() (any, *http.Response, error) {
			return r.ApiService.internalUpdateApcToSpAdapterMappingByIdExecute(r)
		},
		&localVarReturnValue,
	)
	return localVarReturnValue, response, err
}

func (a *SpAuthenticationPolicyContractMappingsAPIService) internalUpdateApcToSpAdapterMappingByIdExecute(r ApiUpdateApcToSpAdapterMappingByIdRequest) (*ApcToSpAdapterMapping, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ApcToSpAdapterMapping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpAuthenticationPolicyContractMappingsAPIService.UpdateApcToSpAdapterMappingById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sp/authenticationPolicyContractMappings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xBypassExternalValidation != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-BypassExternalValidation", r.xBypassExternalValidation, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ApiResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
