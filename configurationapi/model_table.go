/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// checks if the Table type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Table{}

// Table SQL Method Table.
type Table struct {
	// Lists the table structure that stores information within a database.
	Schema string `json:"schema" tfsdk:"schema"`
	// The name of the database table.
	TableName string `json:"tableName" tfsdk:"table_name"`
	// The database column that uniquely identifies the provisioned user on the SP side.
	UniqueIdColumn string `json:"uniqueIdColumn" tfsdk:"unique_id_column"`
}

type _Table Table

// NewTable instantiates a new Table object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTable(schema string, tableName string, uniqueIdColumn string) *Table {
	this := Table{}
	this.Schema = schema
	this.TableName = tableName
	this.UniqueIdColumn = uniqueIdColumn
	return &this
}

// NewTableWithDefaults instantiates a new Table object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableWithDefaults() *Table {
	this := Table{}
	return &this
}

// GetSchema returns the Schema field value
func (o *Table) GetSchema() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value
// and a boolean to check if the value has been set.
func (o *Table) GetSchemaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Schema, true
}

// SetSchema sets field value
func (o *Table) SetSchema(v string) {
	o.Schema = v
}

// GetTableName returns the TableName field value
func (o *Table) GetTableName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value
// and a boolean to check if the value has been set.
func (o *Table) GetTableNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TableName, true
}

// SetTableName sets field value
func (o *Table) SetTableName(v string) {
	o.TableName = v
}

// GetUniqueIdColumn returns the UniqueIdColumn field value
func (o *Table) GetUniqueIdColumn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UniqueIdColumn
}

// GetUniqueIdColumnOk returns a tuple with the UniqueIdColumn field value
// and a boolean to check if the value has been set.
func (o *Table) GetUniqueIdColumnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UniqueIdColumn, true
}

// SetUniqueIdColumn sets field value
func (o *Table) SetUniqueIdColumn(v string) {
	o.UniqueIdColumn = v
}

func (o Table) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Table) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["schema"] = o.Schema
	toSerialize["tableName"] = o.TableName
	toSerialize["uniqueIdColumn"] = o.UniqueIdColumn
	return toSerialize, nil
}

func (o *Table) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"schema",
		"tableName",
		"uniqueIdColumn",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTable := _Table{}

	err = json.Unmarshal(bytes, &varTable)

	if err != nil {
		return err
	}

	*o = Table(varTable)

	return err
}

type NullableTable struct {
	value *Table
	isSet bool
}

func (v NullableTable) Get() *Table {
	return v.value
}

func (v *NullableTable) Set(val *Table) {
	v.value = val
	v.isSet = true
}

func (v NullableTable) IsSet() bool {
	return v.isSet
}

func (v *NullableTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTable(val *Table) *NullableTable {
	return &NullableTable{value: val, isSet: true}
}

func (v NullableTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
