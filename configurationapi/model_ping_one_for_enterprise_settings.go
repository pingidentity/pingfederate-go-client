/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"time"
)

// checks if the PingOneForEnterpriseSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PingOneForEnterpriseSettings{}

// PingOneForEnterpriseSettings PingOne for Enterprise Settings
type PingOneForEnterpriseSettings struct {
	// A read only field indicating whether PingFederate is connected to PingOne for Enterprise.
	ConnectedToPingOneForEnterprise *bool         `json:"connectedToPingOneForEnterprise,omitempty" tfsdk:"connected_to_ping_one_for_enterprise"`
	PingOneSsoConnection            *ResourceLink `json:"pingOneSsoConnection,omitempty" tfsdk:"ping_one_sso_connection"`
	// A read only field indicating the company name.
	CompanyName *string `json:"companyName,omitempty" tfsdk:"company_name"`
	// Indicates whether single sign on from PingOne for Enterprise to the PingFederate admin console is enabled. The default is false.
	EnableAdminConsoleSso *bool `json:"enableAdminConsoleSso,omitempty" tfsdk:"enable_admin_console_sso"`
	// Indicates whether monitoring of PingFederate from PingOne for Enterprise is enabled. The default is true.
	EnableMonitoring *bool `json:"enableMonitoring,omitempty" tfsdk:"enable_monitoring"`
	// A read only field indicating the creation time of the current authentication key.
	CurrentAuthnKeyCreationTime *time.Time `json:"currentAuthnKeyCreationTime,omitempty" tfsdk:"current_authn_key_creation_time"`
	// A read only field indicating the creation time of the previous authentication key.
	PreviousAuthnKeyCreationTime *time.Time `json:"previousAuthnKeyCreationTime,omitempty" tfsdk:"previous_authn_key_creation_time"`
	// A read-only field indicating whether changes were made in the current PingFederate configuration that might affect your connection with PingOne for Enterprise. For example, if you modified the attribute contract of your SSO configuration. Update the identity repository to keep your PingFederate and PingOne for Enterprise settings synchronized.
	IdentityRepositoryUpdateRequired *bool `json:"identityRepositoryUpdateRequired,omitempty" tfsdk:"identity_repository_update_required"`
}

// NewPingOneForEnterpriseSettings instantiates a new PingOneForEnterpriseSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPingOneForEnterpriseSettings() *PingOneForEnterpriseSettings {
	this := PingOneForEnterpriseSettings{}
	return &this
}

// NewPingOneForEnterpriseSettingsWithDefaults instantiates a new PingOneForEnterpriseSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPingOneForEnterpriseSettingsWithDefaults() *PingOneForEnterpriseSettings {
	this := PingOneForEnterpriseSettings{}
	return &this
}

// GetConnectedToPingOneForEnterprise returns the ConnectedToPingOneForEnterprise field value if set, zero value otherwise.
func (o *PingOneForEnterpriseSettings) GetConnectedToPingOneForEnterprise() bool {
	if o == nil || IsNil(o.ConnectedToPingOneForEnterprise) {
		var ret bool
		return ret
	}
	return *o.ConnectedToPingOneForEnterprise
}

// GetConnectedToPingOneForEnterpriseOk returns a tuple with the ConnectedToPingOneForEnterprise field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneForEnterpriseSettings) GetConnectedToPingOneForEnterpriseOk() (*bool, bool) {
	if o == nil || IsNil(o.ConnectedToPingOneForEnterprise) {
		return nil, false
	}
	return o.ConnectedToPingOneForEnterprise, true
}

// HasConnectedToPingOneForEnterprise returns a boolean if a field has been set.
func (o *PingOneForEnterpriseSettings) HasConnectedToPingOneForEnterprise() bool {
	if o != nil && !IsNil(o.ConnectedToPingOneForEnterprise) {
		return true
	}

	return false
}

// SetConnectedToPingOneForEnterprise gets a reference to the given bool and assigns it to the ConnectedToPingOneForEnterprise field.
func (o *PingOneForEnterpriseSettings) SetConnectedToPingOneForEnterprise(v bool) {
	o.ConnectedToPingOneForEnterprise = &v
}

// GetPingOneSsoConnection returns the PingOneSsoConnection field value if set, zero value otherwise.
func (o *PingOneForEnterpriseSettings) GetPingOneSsoConnection() ResourceLink {
	if o == nil || IsNil(o.PingOneSsoConnection) {
		var ret ResourceLink
		return ret
	}
	return *o.PingOneSsoConnection
}

// GetPingOneSsoConnectionOk returns a tuple with the PingOneSsoConnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneForEnterpriseSettings) GetPingOneSsoConnectionOk() (*ResourceLink, bool) {
	if o == nil || IsNil(o.PingOneSsoConnection) {
		return nil, false
	}
	return o.PingOneSsoConnection, true
}

// HasPingOneSsoConnection returns a boolean if a field has been set.
func (o *PingOneForEnterpriseSettings) HasPingOneSsoConnection() bool {
	if o != nil && !IsNil(o.PingOneSsoConnection) {
		return true
	}

	return false
}

// SetPingOneSsoConnection gets a reference to the given ResourceLink and assigns it to the PingOneSsoConnection field.
func (o *PingOneForEnterpriseSettings) SetPingOneSsoConnection(v ResourceLink) {
	o.PingOneSsoConnection = &v
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *PingOneForEnterpriseSettings) GetCompanyName() string {
	if o == nil || IsNil(o.CompanyName) {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneForEnterpriseSettings) GetCompanyNameOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyName) {
		return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *PingOneForEnterpriseSettings) HasCompanyName() bool {
	if o != nil && !IsNil(o.CompanyName) {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *PingOneForEnterpriseSettings) SetCompanyName(v string) {
	o.CompanyName = &v
}

// GetEnableAdminConsoleSso returns the EnableAdminConsoleSso field value if set, zero value otherwise.
func (o *PingOneForEnterpriseSettings) GetEnableAdminConsoleSso() bool {
	if o == nil || IsNil(o.EnableAdminConsoleSso) {
		var ret bool
		return ret
	}
	return *o.EnableAdminConsoleSso
}

// GetEnableAdminConsoleSsoOk returns a tuple with the EnableAdminConsoleSso field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneForEnterpriseSettings) GetEnableAdminConsoleSsoOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAdminConsoleSso) {
		return nil, false
	}
	return o.EnableAdminConsoleSso, true
}

// HasEnableAdminConsoleSso returns a boolean if a field has been set.
func (o *PingOneForEnterpriseSettings) HasEnableAdminConsoleSso() bool {
	if o != nil && !IsNil(o.EnableAdminConsoleSso) {
		return true
	}

	return false
}

// SetEnableAdminConsoleSso gets a reference to the given bool and assigns it to the EnableAdminConsoleSso field.
func (o *PingOneForEnterpriseSettings) SetEnableAdminConsoleSso(v bool) {
	o.EnableAdminConsoleSso = &v
}

// GetEnableMonitoring returns the EnableMonitoring field value if set, zero value otherwise.
func (o *PingOneForEnterpriseSettings) GetEnableMonitoring() bool {
	if o == nil || IsNil(o.EnableMonitoring) {
		var ret bool
		return ret
	}
	return *o.EnableMonitoring
}

// GetEnableMonitoringOk returns a tuple with the EnableMonitoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneForEnterpriseSettings) GetEnableMonitoringOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMonitoring) {
		return nil, false
	}
	return o.EnableMonitoring, true
}

// HasEnableMonitoring returns a boolean if a field has been set.
func (o *PingOneForEnterpriseSettings) HasEnableMonitoring() bool {
	if o != nil && !IsNil(o.EnableMonitoring) {
		return true
	}

	return false
}

// SetEnableMonitoring gets a reference to the given bool and assigns it to the EnableMonitoring field.
func (o *PingOneForEnterpriseSettings) SetEnableMonitoring(v bool) {
	o.EnableMonitoring = &v
}

// GetCurrentAuthnKeyCreationTime returns the CurrentAuthnKeyCreationTime field value if set, zero value otherwise.
func (o *PingOneForEnterpriseSettings) GetCurrentAuthnKeyCreationTime() time.Time {
	if o == nil || IsNil(o.CurrentAuthnKeyCreationTime) {
		var ret time.Time
		return ret
	}
	return *o.CurrentAuthnKeyCreationTime
}

// GetCurrentAuthnKeyCreationTimeOk returns a tuple with the CurrentAuthnKeyCreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneForEnterpriseSettings) GetCurrentAuthnKeyCreationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CurrentAuthnKeyCreationTime) {
		return nil, false
	}
	return o.CurrentAuthnKeyCreationTime, true
}

// HasCurrentAuthnKeyCreationTime returns a boolean if a field has been set.
func (o *PingOneForEnterpriseSettings) HasCurrentAuthnKeyCreationTime() bool {
	if o != nil && !IsNil(o.CurrentAuthnKeyCreationTime) {
		return true
	}

	return false
}

// SetCurrentAuthnKeyCreationTime gets a reference to the given time.Time and assigns it to the CurrentAuthnKeyCreationTime field.
func (o *PingOneForEnterpriseSettings) SetCurrentAuthnKeyCreationTime(v time.Time) {
	o.CurrentAuthnKeyCreationTime = &v
}

// GetPreviousAuthnKeyCreationTime returns the PreviousAuthnKeyCreationTime field value if set, zero value otherwise.
func (o *PingOneForEnterpriseSettings) GetPreviousAuthnKeyCreationTime() time.Time {
	if o == nil || IsNil(o.PreviousAuthnKeyCreationTime) {
		var ret time.Time
		return ret
	}
	return *o.PreviousAuthnKeyCreationTime
}

// GetPreviousAuthnKeyCreationTimeOk returns a tuple with the PreviousAuthnKeyCreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneForEnterpriseSettings) GetPreviousAuthnKeyCreationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PreviousAuthnKeyCreationTime) {
		return nil, false
	}
	return o.PreviousAuthnKeyCreationTime, true
}

// HasPreviousAuthnKeyCreationTime returns a boolean if a field has been set.
func (o *PingOneForEnterpriseSettings) HasPreviousAuthnKeyCreationTime() bool {
	if o != nil && !IsNil(o.PreviousAuthnKeyCreationTime) {
		return true
	}

	return false
}

// SetPreviousAuthnKeyCreationTime gets a reference to the given time.Time and assigns it to the PreviousAuthnKeyCreationTime field.
func (o *PingOneForEnterpriseSettings) SetPreviousAuthnKeyCreationTime(v time.Time) {
	o.PreviousAuthnKeyCreationTime = &v
}

// GetIdentityRepositoryUpdateRequired returns the IdentityRepositoryUpdateRequired field value if set, zero value otherwise.
func (o *PingOneForEnterpriseSettings) GetIdentityRepositoryUpdateRequired() bool {
	if o == nil || IsNil(o.IdentityRepositoryUpdateRequired) {
		var ret bool
		return ret
	}
	return *o.IdentityRepositoryUpdateRequired
}

// GetIdentityRepositoryUpdateRequiredOk returns a tuple with the IdentityRepositoryUpdateRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneForEnterpriseSettings) GetIdentityRepositoryUpdateRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.IdentityRepositoryUpdateRequired) {
		return nil, false
	}
	return o.IdentityRepositoryUpdateRequired, true
}

// HasIdentityRepositoryUpdateRequired returns a boolean if a field has been set.
func (o *PingOneForEnterpriseSettings) HasIdentityRepositoryUpdateRequired() bool {
	if o != nil && !IsNil(o.IdentityRepositoryUpdateRequired) {
		return true
	}

	return false
}

// SetIdentityRepositoryUpdateRequired gets a reference to the given bool and assigns it to the IdentityRepositoryUpdateRequired field.
func (o *PingOneForEnterpriseSettings) SetIdentityRepositoryUpdateRequired(v bool) {
	o.IdentityRepositoryUpdateRequired = &v
}

func (o PingOneForEnterpriseSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PingOneForEnterpriseSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConnectedToPingOneForEnterprise) {
		toSerialize["connectedToPingOneForEnterprise"] = o.ConnectedToPingOneForEnterprise
	}
	if !IsNil(o.PingOneSsoConnection) {
		toSerialize["pingOneSsoConnection"] = o.PingOneSsoConnection
	}
	if !IsNil(o.CompanyName) {
		toSerialize["companyName"] = o.CompanyName
	}
	if !IsNil(o.EnableAdminConsoleSso) {
		toSerialize["enableAdminConsoleSso"] = o.EnableAdminConsoleSso
	}
	if !IsNil(o.EnableMonitoring) {
		toSerialize["enableMonitoring"] = o.EnableMonitoring
	}
	if !IsNil(o.CurrentAuthnKeyCreationTime) {
		toSerialize["currentAuthnKeyCreationTime"] = o.CurrentAuthnKeyCreationTime
	}
	if !IsNil(o.PreviousAuthnKeyCreationTime) {
		toSerialize["previousAuthnKeyCreationTime"] = o.PreviousAuthnKeyCreationTime
	}
	if !IsNil(o.IdentityRepositoryUpdateRequired) {
		toSerialize["identityRepositoryUpdateRequired"] = o.IdentityRepositoryUpdateRequired
	}
	return toSerialize, nil
}

type NullablePingOneForEnterpriseSettings struct {
	value *PingOneForEnterpriseSettings
	isSet bool
}

func (v NullablePingOneForEnterpriseSettings) Get() *PingOneForEnterpriseSettings {
	return v.value
}

func (v *NullablePingOneForEnterpriseSettings) Set(val *PingOneForEnterpriseSettings) {
	v.value = val
	v.isSet = true
}

func (v NullablePingOneForEnterpriseSettings) IsSet() bool {
	return v.isSet
}

func (v *NullablePingOneForEnterpriseSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePingOneForEnterpriseSettings(val *PingOneForEnterpriseSettings) *NullablePingOneForEnterpriseSettings {
	return &NullablePingOneForEnterpriseSettings{value: val, isSet: true}
}

func (v NullablePingOneForEnterpriseSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePingOneForEnterpriseSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
