/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the JwksSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JwksSettings{}

// JwksSettings JSON Web Key Set Settings.
type JwksSettings struct {
	// JSON Web Key Set (JWKS) URL of the OAuth client. Either 'jwks' or 'jwksUrl' must be provided if private key JWT client authentication or signed requests is enabled.  If the client signs its JWTs using an RSASSA-PSS signing algorithm, PingFederate must either use Java 11 or be integrated with a hardware security module (HSM) to process the digital signatures.
	JwksUrl *string `json:"jwksUrl,omitempty" tfsdk:"jwks_url"`
	// JSON Web Key Set (JWKS) document of the OAuth client. Either 'jwks' or 'jwksUrl' must be provided if private key JWT client authentication or signed requests is enabled.  If the client signs its JWTs using an RSASSA-PSS signing algorithm, PingFederate must either use Java 11 or be integrated with a hardware security module (HSM) to process the digital signatures.
	Jwks *string `json:"jwks,omitempty" tfsdk:"jwks"`
}

// NewJwksSettings instantiates a new JwksSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJwksSettings() *JwksSettings {
	this := JwksSettings{}
	return &this
}

// NewJwksSettingsWithDefaults instantiates a new JwksSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJwksSettingsWithDefaults() *JwksSettings {
	this := JwksSettings{}
	return &this
}

// GetJwksUrl returns the JwksUrl field value if set, zero value otherwise.
func (o *JwksSettings) GetJwksUrl() string {
	if o == nil || IsNil(o.JwksUrl) {
		var ret string
		return ret
	}
	return *o.JwksUrl
}

// GetJwksUrlOk returns a tuple with the JwksUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JwksSettings) GetJwksUrlOk() (*string, bool) {
	if o == nil || IsNil(o.JwksUrl) {
		return nil, false
	}
	return o.JwksUrl, true
}

// HasJwksUrl returns a boolean if a field has been set.
func (o *JwksSettings) HasJwksUrl() bool {
	if o != nil && !IsNil(o.JwksUrl) {
		return true
	}

	return false
}

// SetJwksUrl gets a reference to the given string and assigns it to the JwksUrl field.
func (o *JwksSettings) SetJwksUrl(v string) {
	o.JwksUrl = &v
}

// GetJwks returns the Jwks field value if set, zero value otherwise.
func (o *JwksSettings) GetJwks() string {
	if o == nil || IsNil(o.Jwks) {
		var ret string
		return ret
	}
	return *o.Jwks
}

// GetJwksOk returns a tuple with the Jwks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JwksSettings) GetJwksOk() (*string, bool) {
	if o == nil || IsNil(o.Jwks) {
		return nil, false
	}
	return o.Jwks, true
}

// HasJwks returns a boolean if a field has been set.
func (o *JwksSettings) HasJwks() bool {
	if o != nil && !IsNil(o.Jwks) {
		return true
	}

	return false
}

// SetJwks gets a reference to the given string and assigns it to the Jwks field.
func (o *JwksSettings) SetJwks(v string) {
	o.Jwks = &v
}

func (o JwksSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JwksSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.JwksUrl) {
		toSerialize["jwksUrl"] = o.JwksUrl
	}
	if !IsNil(o.Jwks) {
		toSerialize["jwks"] = o.Jwks
	}
	return toSerialize, nil
}

type NullableJwksSettings struct {
	value *JwksSettings
	isSet bool
}

func (v NullableJwksSettings) Get() *JwksSettings {
	return v.value
}

func (v *NullableJwksSettings) Set(val *JwksSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableJwksSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableJwksSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJwksSettings(val *JwksSettings) *NullableJwksSettings {
	return &NullableJwksSettings{value: val, isSet: true}
}

func (v NullableJwksSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJwksSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
