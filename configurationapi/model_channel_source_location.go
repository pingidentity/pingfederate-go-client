/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ChannelSourceLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelSourceLocation{}

// ChannelSourceLocation The location settings that includes a DN and a LDAP filter.
type ChannelSourceLocation struct {
	// The group DN for users or groups.
	GroupDN *string `json:"groupDN,omitempty" tfsdk:"group_dn"`
	// An LDAP filter.
	Filter *string `json:"filter,omitempty" tfsdk:"filter"`
	// Indicates whether the search is nested.
	NestedSearch *bool `json:"nestedSearch,omitempty" tfsdk:"nested_search"`
}

// NewChannelSourceLocation instantiates a new ChannelSourceLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelSourceLocation() *ChannelSourceLocation {
	this := ChannelSourceLocation{}
	return &this
}

// NewChannelSourceLocationWithDefaults instantiates a new ChannelSourceLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelSourceLocationWithDefaults() *ChannelSourceLocation {
	this := ChannelSourceLocation{}
	return &this
}

// GetGroupDN returns the GroupDN field value if set, zero value otherwise.
func (o *ChannelSourceLocation) GetGroupDN() string {
	if o == nil || IsNil(o.GroupDN) {
		var ret string
		return ret
	}
	return *o.GroupDN
}

// GetGroupDNOk returns a tuple with the GroupDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelSourceLocation) GetGroupDNOk() (*string, bool) {
	if o == nil || IsNil(o.GroupDN) {
		return nil, false
	}
	return o.GroupDN, true
}

// HasGroupDN returns a boolean if a field has been set.
func (o *ChannelSourceLocation) HasGroupDN() bool {
	if o != nil && !IsNil(o.GroupDN) {
		return true
	}

	return false
}

// SetGroupDN gets a reference to the given string and assigns it to the GroupDN field.
func (o *ChannelSourceLocation) SetGroupDN(v string) {
	o.GroupDN = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *ChannelSourceLocation) GetFilter() string {
	if o == nil || IsNil(o.Filter) {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelSourceLocation) GetFilterOk() (*string, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *ChannelSourceLocation) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *ChannelSourceLocation) SetFilter(v string) {
	o.Filter = &v
}

// GetNestedSearch returns the NestedSearch field value if set, zero value otherwise.
func (o *ChannelSourceLocation) GetNestedSearch() bool {
	if o == nil || IsNil(o.NestedSearch) {
		var ret bool
		return ret
	}
	return *o.NestedSearch
}

// GetNestedSearchOk returns a tuple with the NestedSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelSourceLocation) GetNestedSearchOk() (*bool, bool) {
	if o == nil || IsNil(o.NestedSearch) {
		return nil, false
	}
	return o.NestedSearch, true
}

// HasNestedSearch returns a boolean if a field has been set.
func (o *ChannelSourceLocation) HasNestedSearch() bool {
	if o != nil && !IsNil(o.NestedSearch) {
		return true
	}

	return false
}

// SetNestedSearch gets a reference to the given bool and assigns it to the NestedSearch field.
func (o *ChannelSourceLocation) SetNestedSearch(v bool) {
	o.NestedSearch = &v
}

func (o ChannelSourceLocation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelSourceLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GroupDN) {
		toSerialize["groupDN"] = o.GroupDN
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.NestedSearch) {
		toSerialize["nestedSearch"] = o.NestedSearch
	}
	return toSerialize, nil
}

type NullableChannelSourceLocation struct {
	value *ChannelSourceLocation
	isSet bool
}

func (v NullableChannelSourceLocation) Get() *ChannelSourceLocation {
	return v.value
}

func (v *NullableChannelSourceLocation) Set(val *ChannelSourceLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelSourceLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelSourceLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelSourceLocation(val *ChannelSourceLocation) *NullableChannelSourceLocation {
	return &NullableChannelSourceLocation{value: val, isSet: true}
}

func (v NullableChannelSourceLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelSourceLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
