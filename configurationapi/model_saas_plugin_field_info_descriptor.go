/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// checks if the SaasPluginFieldInfoDescriptor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SaasPluginFieldInfoDescriptor{}

// SaasPluginFieldInfoDescriptor A Saas Plugin Field configuration.
type SaasPluginFieldInfoDescriptor struct {
	// The name or code that represents a field.
	Code string `json:"code" tfsdk:"code"`
	// The label for a field.
	Label string `json:"label" tfsdk:"label"`
	// Indicates whether a value is required for this field.
	Required *bool `json:"required,omitempty" tfsdk:"required"`
	// indicates whether the value of this field is unique.
	Unique *bool `json:"unique,omitempty" tfsdk:"unique"`
	// Whether the field can have multiple values.
	MultiValue *bool `json:"multiValue,omitempty" tfsdk:"multi_value"`
	// List of Option values available for this field.
	Options []SaasPluginFieldOption `json:"options,omitempty" tfsdk:"options"`
	// Minimum character length for a value.
	MinLength *int64 `json:"minLength,omitempty" tfsdk:"min_length"`
	// Maximum character length for a value.
	MaxLength *int64 `json:"maxLength,omitempty" tfsdk:"max_length"`
	// Pattern used to validate values of this field.
	Pattern *string `json:"pattern,omitempty" tfsdk:"pattern"`
	// Description or notes for the field.
	Notes []string `json:"notes,omitempty" tfsdk:"notes"`
	// Default value for the field.
	DefaultValue *string `json:"defaultValue,omitempty" tfsdk:"default_value"`
	// Indicates whether the field can be mapped raw to an LDAP attribute.
	DsLdapMap *bool `json:"dsLdapMap,omitempty" tfsdk:"ds_ldap_map"`
	// The code that represents the field.
	PersistForMembership *bool `json:"persistForMembership,omitempty" tfsdk:"persist_for_membership"`
	// Indicates whether this field belongs to group of attribute such as multivalued or sub-type custom attributes.
	AttributeGroup *bool `json:"attributeGroup,omitempty" tfsdk:"attribute_group"`
}

type _SaasPluginFieldInfoDescriptor SaasPluginFieldInfoDescriptor

// NewSaasPluginFieldInfoDescriptor instantiates a new SaasPluginFieldInfoDescriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSaasPluginFieldInfoDescriptor(code string, label string) *SaasPluginFieldInfoDescriptor {
	this := SaasPluginFieldInfoDescriptor{}
	this.Code = code
	this.Label = label
	return &this
}

// NewSaasPluginFieldInfoDescriptorWithDefaults instantiates a new SaasPluginFieldInfoDescriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSaasPluginFieldInfoDescriptorWithDefaults() *SaasPluginFieldInfoDescriptor {
	this := SaasPluginFieldInfoDescriptor{}
	return &this
}

// GetCode returns the Code field value
func (o *SaasPluginFieldInfoDescriptor) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *SaasPluginFieldInfoDescriptor) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *SaasPluginFieldInfoDescriptor) SetCode(v string) {
	o.Code = v
}

// GetLabel returns the Label field value
func (o *SaasPluginFieldInfoDescriptor) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *SaasPluginFieldInfoDescriptor) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *SaasPluginFieldInfoDescriptor) SetLabel(v string) {
	o.Label = v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *SaasPluginFieldInfoDescriptor) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasPluginFieldInfoDescriptor) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *SaasPluginFieldInfoDescriptor) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *SaasPluginFieldInfoDescriptor) SetRequired(v bool) {
	o.Required = &v
}

// GetUnique returns the Unique field value if set, zero value otherwise.
func (o *SaasPluginFieldInfoDescriptor) GetUnique() bool {
	if o == nil || IsNil(o.Unique) {
		var ret bool
		return ret
	}
	return *o.Unique
}

// GetUniqueOk returns a tuple with the Unique field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasPluginFieldInfoDescriptor) GetUniqueOk() (*bool, bool) {
	if o == nil || IsNil(o.Unique) {
		return nil, false
	}
	return o.Unique, true
}

// HasUnique returns a boolean if a field has been set.
func (o *SaasPluginFieldInfoDescriptor) HasUnique() bool {
	if o != nil && !IsNil(o.Unique) {
		return true
	}

	return false
}

// SetUnique gets a reference to the given bool and assigns it to the Unique field.
func (o *SaasPluginFieldInfoDescriptor) SetUnique(v bool) {
	o.Unique = &v
}

// GetMultiValue returns the MultiValue field value if set, zero value otherwise.
func (o *SaasPluginFieldInfoDescriptor) GetMultiValue() bool {
	if o == nil || IsNil(o.MultiValue) {
		var ret bool
		return ret
	}
	return *o.MultiValue
}

// GetMultiValueOk returns a tuple with the MultiValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasPluginFieldInfoDescriptor) GetMultiValueOk() (*bool, bool) {
	if o == nil || IsNil(o.MultiValue) {
		return nil, false
	}
	return o.MultiValue, true
}

// HasMultiValue returns a boolean if a field has been set.
func (o *SaasPluginFieldInfoDescriptor) HasMultiValue() bool {
	if o != nil && !IsNil(o.MultiValue) {
		return true
	}

	return false
}

// SetMultiValue gets a reference to the given bool and assigns it to the MultiValue field.
func (o *SaasPluginFieldInfoDescriptor) SetMultiValue(v bool) {
	o.MultiValue = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *SaasPluginFieldInfoDescriptor) GetOptions() []SaasPluginFieldOption {
	if o == nil || IsNil(o.Options) {
		var ret []SaasPluginFieldOption
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasPluginFieldInfoDescriptor) GetOptionsOk() ([]SaasPluginFieldOption, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *SaasPluginFieldInfoDescriptor) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []SaasPluginFieldOption and assigns it to the Options field.
func (o *SaasPluginFieldInfoDescriptor) SetOptions(v []SaasPluginFieldOption) {
	o.Options = v
}

// GetMinLength returns the MinLength field value if set, zero value otherwise.
func (o *SaasPluginFieldInfoDescriptor) GetMinLength() int64 {
	if o == nil || IsNil(o.MinLength) {
		var ret int64
		return ret
	}
	return *o.MinLength
}

// GetMinLengthOk returns a tuple with the MinLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasPluginFieldInfoDescriptor) GetMinLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.MinLength) {
		return nil, false
	}
	return o.MinLength, true
}

// HasMinLength returns a boolean if a field has been set.
func (o *SaasPluginFieldInfoDescriptor) HasMinLength() bool {
	if o != nil && !IsNil(o.MinLength) {
		return true
	}

	return false
}

// SetMinLength gets a reference to the given int64 and assigns it to the MinLength field.
func (o *SaasPluginFieldInfoDescriptor) SetMinLength(v int64) {
	o.MinLength = &v
}

// GetMaxLength returns the MaxLength field value if set, zero value otherwise.
func (o *SaasPluginFieldInfoDescriptor) GetMaxLength() int64 {
	if o == nil || IsNil(o.MaxLength) {
		var ret int64
		return ret
	}
	return *o.MaxLength
}

// GetMaxLengthOk returns a tuple with the MaxLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasPluginFieldInfoDescriptor) GetMaxLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxLength) {
		return nil, false
	}
	return o.MaxLength, true
}

// HasMaxLength returns a boolean if a field has been set.
func (o *SaasPluginFieldInfoDescriptor) HasMaxLength() bool {
	if o != nil && !IsNil(o.MaxLength) {
		return true
	}

	return false
}

// SetMaxLength gets a reference to the given int64 and assigns it to the MaxLength field.
func (o *SaasPluginFieldInfoDescriptor) SetMaxLength(v int64) {
	o.MaxLength = &v
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *SaasPluginFieldInfoDescriptor) GetPattern() string {
	if o == nil || IsNil(o.Pattern) {
		var ret string
		return ret
	}
	return *o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasPluginFieldInfoDescriptor) GetPatternOk() (*string, bool) {
	if o == nil || IsNil(o.Pattern) {
		return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *SaasPluginFieldInfoDescriptor) HasPattern() bool {
	if o != nil && !IsNil(o.Pattern) {
		return true
	}

	return false
}

// SetPattern gets a reference to the given string and assigns it to the Pattern field.
func (o *SaasPluginFieldInfoDescriptor) SetPattern(v string) {
	o.Pattern = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *SaasPluginFieldInfoDescriptor) GetNotes() []string {
	if o == nil || IsNil(o.Notes) {
		var ret []string
		return ret
	}
	return o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasPluginFieldInfoDescriptor) GetNotesOk() ([]string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *SaasPluginFieldInfoDescriptor) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given []string and assigns it to the Notes field.
func (o *SaasPluginFieldInfoDescriptor) SetNotes(v []string) {
	o.Notes = v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *SaasPluginFieldInfoDescriptor) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue) {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasPluginFieldInfoDescriptor) GetDefaultValueOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *SaasPluginFieldInfoDescriptor) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *SaasPluginFieldInfoDescriptor) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetDsLdapMap returns the DsLdapMap field value if set, zero value otherwise.
func (o *SaasPluginFieldInfoDescriptor) GetDsLdapMap() bool {
	if o == nil || IsNil(o.DsLdapMap) {
		var ret bool
		return ret
	}
	return *o.DsLdapMap
}

// GetDsLdapMapOk returns a tuple with the DsLdapMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasPluginFieldInfoDescriptor) GetDsLdapMapOk() (*bool, bool) {
	if o == nil || IsNil(o.DsLdapMap) {
		return nil, false
	}
	return o.DsLdapMap, true
}

// HasDsLdapMap returns a boolean if a field has been set.
func (o *SaasPluginFieldInfoDescriptor) HasDsLdapMap() bool {
	if o != nil && !IsNil(o.DsLdapMap) {
		return true
	}

	return false
}

// SetDsLdapMap gets a reference to the given bool and assigns it to the DsLdapMap field.
func (o *SaasPluginFieldInfoDescriptor) SetDsLdapMap(v bool) {
	o.DsLdapMap = &v
}

// GetPersistForMembership returns the PersistForMembership field value if set, zero value otherwise.
func (o *SaasPluginFieldInfoDescriptor) GetPersistForMembership() bool {
	if o == nil || IsNil(o.PersistForMembership) {
		var ret bool
		return ret
	}
	return *o.PersistForMembership
}

// GetPersistForMembershipOk returns a tuple with the PersistForMembership field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasPluginFieldInfoDescriptor) GetPersistForMembershipOk() (*bool, bool) {
	if o == nil || IsNil(o.PersistForMembership) {
		return nil, false
	}
	return o.PersistForMembership, true
}

// HasPersistForMembership returns a boolean if a field has been set.
func (o *SaasPluginFieldInfoDescriptor) HasPersistForMembership() bool {
	if o != nil && !IsNil(o.PersistForMembership) {
		return true
	}

	return false
}

// SetPersistForMembership gets a reference to the given bool and assigns it to the PersistForMembership field.
func (o *SaasPluginFieldInfoDescriptor) SetPersistForMembership(v bool) {
	o.PersistForMembership = &v
}

// GetAttributeGroup returns the AttributeGroup field value if set, zero value otherwise.
func (o *SaasPluginFieldInfoDescriptor) GetAttributeGroup() bool {
	if o == nil || IsNil(o.AttributeGroup) {
		var ret bool
		return ret
	}
	return *o.AttributeGroup
}

// GetAttributeGroupOk returns a tuple with the AttributeGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasPluginFieldInfoDescriptor) GetAttributeGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.AttributeGroup) {
		return nil, false
	}
	return o.AttributeGroup, true
}

// HasAttributeGroup returns a boolean if a field has been set.
func (o *SaasPluginFieldInfoDescriptor) HasAttributeGroup() bool {
	if o != nil && !IsNil(o.AttributeGroup) {
		return true
	}

	return false
}

// SetAttributeGroup gets a reference to the given bool and assigns it to the AttributeGroup field.
func (o *SaasPluginFieldInfoDescriptor) SetAttributeGroup(v bool) {
	o.AttributeGroup = &v
}

func (o SaasPluginFieldInfoDescriptor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SaasPluginFieldInfoDescriptor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["label"] = o.Label
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.Unique) {
		toSerialize["unique"] = o.Unique
	}
	if !IsNil(o.MultiValue) {
		toSerialize["multiValue"] = o.MultiValue
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.MinLength) {
		toSerialize["minLength"] = o.MinLength
	}
	if !IsNil(o.MaxLength) {
		toSerialize["maxLength"] = o.MaxLength
	}
	if !IsNil(o.Pattern) {
		toSerialize["pattern"] = o.Pattern
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.DefaultValue) {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if !IsNil(o.DsLdapMap) {
		toSerialize["dsLdapMap"] = o.DsLdapMap
	}
	if !IsNil(o.PersistForMembership) {
		toSerialize["persistForMembership"] = o.PersistForMembership
	}
	if !IsNil(o.AttributeGroup) {
		toSerialize["attributeGroup"] = o.AttributeGroup
	}
	return toSerialize, nil
}

func (o *SaasPluginFieldInfoDescriptor) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"label",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSaasPluginFieldInfoDescriptor := _SaasPluginFieldInfoDescriptor{}

	err = json.Unmarshal(bytes, &varSaasPluginFieldInfoDescriptor)

	if err != nil {
		return err
	}

	*o = SaasPluginFieldInfoDescriptor(varSaasPluginFieldInfoDescriptor)

	return err
}

type NullableSaasPluginFieldInfoDescriptor struct {
	value *SaasPluginFieldInfoDescriptor
	isSet bool
}

func (v NullableSaasPluginFieldInfoDescriptor) Get() *SaasPluginFieldInfoDescriptor {
	return v.value
}

func (v *NullableSaasPluginFieldInfoDescriptor) Set(val *SaasPluginFieldInfoDescriptor) {
	v.value = val
	v.isSet = true
}

func (v NullableSaasPluginFieldInfoDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullableSaasPluginFieldInfoDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSaasPluginFieldInfoDescriptor(val *SaasPluginFieldInfoDescriptor) *NullableSaasPluginFieldInfoDescriptor {
	return &NullableSaasPluginFieldInfoDescriptor{value: val, isSet: true}
}

func (v NullableSaasPluginFieldInfoDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSaasPluginFieldInfoDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
