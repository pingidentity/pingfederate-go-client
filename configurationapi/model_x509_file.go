/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the X509File type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &X509File{}

// X509File Encoded certificate data.
type X509File struct {
	// The persistent, unique ID for the certificate. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified.
	Id *string `json:"id,omitempty" tfsdk:"id"`
	// The certificate data in PEM format. New line characters should be omitted or encoded in this value.
	FileData string `json:"fileData" tfsdk:"file_data"`
	// Cryptographic Provider. This is only applicable if Hybrid HSM mode is true.
	CryptoProvider *string `json:"cryptoProvider,omitempty" tfsdk:"crypto_provider"`
}

// NewX509File instantiates a new X509File object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewX509File(fileData string) *X509File {
	this := X509File{}
	this.FileData = fileData
	return &this
}

// NewX509FileWithDefaults instantiates a new X509File object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewX509FileWithDefaults() *X509File {
	this := X509File{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *X509File) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *X509File) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *X509File) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *X509File) SetId(v string) {
	o.Id = &v
}

// GetFileData returns the FileData field value
func (o *X509File) GetFileData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileData
}

// GetFileDataOk returns a tuple with the FileData field value
// and a boolean to check if the value has been set.
func (o *X509File) GetFileDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileData, true
}

// SetFileData sets field value
func (o *X509File) SetFileData(v string) {
	o.FileData = v
}

// GetCryptoProvider returns the CryptoProvider field value if set, zero value otherwise.
func (o *X509File) GetCryptoProvider() string {
	if o == nil || IsNil(o.CryptoProvider) {
		var ret string
		return ret
	}
	return *o.CryptoProvider
}

// GetCryptoProviderOk returns a tuple with the CryptoProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *X509File) GetCryptoProviderOk() (*string, bool) {
	if o == nil || IsNil(o.CryptoProvider) {
		return nil, false
	}
	return o.CryptoProvider, true
}

// HasCryptoProvider returns a boolean if a field has been set.
func (o *X509File) HasCryptoProvider() bool {
	if o != nil && !IsNil(o.CryptoProvider) {
		return true
	}

	return false
}

// SetCryptoProvider gets a reference to the given string and assigns it to the CryptoProvider field.
func (o *X509File) SetCryptoProvider(v string) {
	o.CryptoProvider = &v
}

func (o X509File) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o X509File) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["fileData"] = o.FileData
	if !IsNil(o.CryptoProvider) {
		toSerialize["cryptoProvider"] = o.CryptoProvider
	}
	return toSerialize, nil
}

type NullableX509File struct {
	value *X509File
	isSet bool
}

func (v NullableX509File) Get() *X509File {
	return v.value
}

func (v *NullableX509File) Set(val *X509File) {
	v.value = val
	v.isSet = true
}

func (v NullableX509File) IsSet() bool {
	return v.isSet
}

func (v *NullableX509File) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableX509File(val *X509File) *NullableX509File {
	return &NullableX509File{value: val, isSet: true}
}

func (v NullableX509File) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableX509File) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
