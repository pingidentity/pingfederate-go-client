/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the DecryptionPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DecryptionPolicy{}

// DecryptionPolicy Defines what to decrypt in the browser-based SSO profile.
type DecryptionPolicy struct {
	// Specify whether the incoming SAML assertion is encrypted for an IdP connection.
	AssertionEncrypted *bool `json:"assertionEncrypted,omitempty" tfsdk:"assertion_encrypted"`
	// Specify whether one or more incoming SAML attributes are encrypted for an IdP connection.
	AttributesEncrypted *bool `json:"attributesEncrypted,omitempty" tfsdk:"attributes_encrypted"`
	// Specify whether the incoming Subject Name ID is encrypted for an IdP connection.
	SubjectNameIdEncrypted *bool `json:"subjectNameIdEncrypted,omitempty" tfsdk:"subject_name_id_encrypted"`
	// Encrypt the Subject Name ID in SLO messages to the IdP.
	SloEncryptSubjectNameID *bool `json:"sloEncryptSubjectNameID,omitempty" tfsdk:"slo_encrypt_subject_name_id"`
	// Allow encrypted Subject Name ID in SLO messages from the IdP.
	SloSubjectNameIDEncrypted *bool `json:"sloSubjectNameIDEncrypted,omitempty" tfsdk:"slo_subject_name_ide_ncrypted"`
}

// NewDecryptionPolicy instantiates a new DecryptionPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecryptionPolicy() *DecryptionPolicy {
	this := DecryptionPolicy{}
	return &this
}

// NewDecryptionPolicyWithDefaults instantiates a new DecryptionPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecryptionPolicyWithDefaults() *DecryptionPolicy {
	this := DecryptionPolicy{}
	return &this
}

// GetAssertionEncrypted returns the AssertionEncrypted field value if set, zero value otherwise.
func (o *DecryptionPolicy) GetAssertionEncrypted() bool {
	if o == nil || IsNil(o.AssertionEncrypted) {
		var ret bool
		return ret
	}
	return *o.AssertionEncrypted
}

// GetAssertionEncryptedOk returns a tuple with the AssertionEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionPolicy) GetAssertionEncryptedOk() (*bool, bool) {
	if o == nil || IsNil(o.AssertionEncrypted) {
		return nil, false
	}
	return o.AssertionEncrypted, true
}

// HasAssertionEncrypted returns a boolean if a field has been set.
func (o *DecryptionPolicy) HasAssertionEncrypted() bool {
	if o != nil && !IsNil(o.AssertionEncrypted) {
		return true
	}

	return false
}

// SetAssertionEncrypted gets a reference to the given bool and assigns it to the AssertionEncrypted field.
func (o *DecryptionPolicy) SetAssertionEncrypted(v bool) {
	o.AssertionEncrypted = &v
}

// GetAttributesEncrypted returns the AttributesEncrypted field value if set, zero value otherwise.
func (o *DecryptionPolicy) GetAttributesEncrypted() bool {
	if o == nil || IsNil(o.AttributesEncrypted) {
		var ret bool
		return ret
	}
	return *o.AttributesEncrypted
}

// GetAttributesEncryptedOk returns a tuple with the AttributesEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionPolicy) GetAttributesEncryptedOk() (*bool, bool) {
	if o == nil || IsNil(o.AttributesEncrypted) {
		return nil, false
	}
	return o.AttributesEncrypted, true
}

// HasAttributesEncrypted returns a boolean if a field has been set.
func (o *DecryptionPolicy) HasAttributesEncrypted() bool {
	if o != nil && !IsNil(o.AttributesEncrypted) {
		return true
	}

	return false
}

// SetAttributesEncrypted gets a reference to the given bool and assigns it to the AttributesEncrypted field.
func (o *DecryptionPolicy) SetAttributesEncrypted(v bool) {
	o.AttributesEncrypted = &v
}

// GetSubjectNameIdEncrypted returns the SubjectNameIdEncrypted field value if set, zero value otherwise.
func (o *DecryptionPolicy) GetSubjectNameIdEncrypted() bool {
	if o == nil || IsNil(o.SubjectNameIdEncrypted) {
		var ret bool
		return ret
	}
	return *o.SubjectNameIdEncrypted
}

// GetSubjectNameIdEncryptedOk returns a tuple with the SubjectNameIdEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionPolicy) GetSubjectNameIdEncryptedOk() (*bool, bool) {
	if o == nil || IsNil(o.SubjectNameIdEncrypted) {
		return nil, false
	}
	return o.SubjectNameIdEncrypted, true
}

// HasSubjectNameIdEncrypted returns a boolean if a field has been set.
func (o *DecryptionPolicy) HasSubjectNameIdEncrypted() bool {
	if o != nil && !IsNil(o.SubjectNameIdEncrypted) {
		return true
	}

	return false
}

// SetSubjectNameIdEncrypted gets a reference to the given bool and assigns it to the SubjectNameIdEncrypted field.
func (o *DecryptionPolicy) SetSubjectNameIdEncrypted(v bool) {
	o.SubjectNameIdEncrypted = &v
}

// GetSloEncryptSubjectNameID returns the SloEncryptSubjectNameID field value if set, zero value otherwise.
func (o *DecryptionPolicy) GetSloEncryptSubjectNameID() bool {
	if o == nil || IsNil(o.SloEncryptSubjectNameID) {
		var ret bool
		return ret
	}
	return *o.SloEncryptSubjectNameID
}

// GetSloEncryptSubjectNameIDOk returns a tuple with the SloEncryptSubjectNameID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionPolicy) GetSloEncryptSubjectNameIDOk() (*bool, bool) {
	if o == nil || IsNil(o.SloEncryptSubjectNameID) {
		return nil, false
	}
	return o.SloEncryptSubjectNameID, true
}

// HasSloEncryptSubjectNameID returns a boolean if a field has been set.
func (o *DecryptionPolicy) HasSloEncryptSubjectNameID() bool {
	if o != nil && !IsNil(o.SloEncryptSubjectNameID) {
		return true
	}

	return false
}

// SetSloEncryptSubjectNameID gets a reference to the given bool and assigns it to the SloEncryptSubjectNameID field.
func (o *DecryptionPolicy) SetSloEncryptSubjectNameID(v bool) {
	o.SloEncryptSubjectNameID = &v
}

// GetSloSubjectNameIDEncrypted returns the SloSubjectNameIDEncrypted field value if set, zero value otherwise.
func (o *DecryptionPolicy) GetSloSubjectNameIDEncrypted() bool {
	if o == nil || IsNil(o.SloSubjectNameIDEncrypted) {
		var ret bool
		return ret
	}
	return *o.SloSubjectNameIDEncrypted
}

// GetSloSubjectNameIDEncryptedOk returns a tuple with the SloSubjectNameIDEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionPolicy) GetSloSubjectNameIDEncryptedOk() (*bool, bool) {
	if o == nil || IsNil(o.SloSubjectNameIDEncrypted) {
		return nil, false
	}
	return o.SloSubjectNameIDEncrypted, true
}

// HasSloSubjectNameIDEncrypted returns a boolean if a field has been set.
func (o *DecryptionPolicy) HasSloSubjectNameIDEncrypted() bool {
	if o != nil && !IsNil(o.SloSubjectNameIDEncrypted) {
		return true
	}

	return false
}

// SetSloSubjectNameIDEncrypted gets a reference to the given bool and assigns it to the SloSubjectNameIDEncrypted field.
func (o *DecryptionPolicy) SetSloSubjectNameIDEncrypted(v bool) {
	o.SloSubjectNameIDEncrypted = &v
}

func (o DecryptionPolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DecryptionPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssertionEncrypted) {
		toSerialize["assertionEncrypted"] = o.AssertionEncrypted
	}
	if !IsNil(o.AttributesEncrypted) {
		toSerialize["attributesEncrypted"] = o.AttributesEncrypted
	}
	if !IsNil(o.SubjectNameIdEncrypted) {
		toSerialize["subjectNameIdEncrypted"] = o.SubjectNameIdEncrypted
	}
	if !IsNil(o.SloEncryptSubjectNameID) {
		toSerialize["sloEncryptSubjectNameID"] = o.SloEncryptSubjectNameID
	}
	if !IsNil(o.SloSubjectNameIDEncrypted) {
		toSerialize["sloSubjectNameIDEncrypted"] = o.SloSubjectNameIDEncrypted
	}
	return toSerialize, nil
}

type NullableDecryptionPolicy struct {
	value *DecryptionPolicy
	isSet bool
}

func (v NullableDecryptionPolicy) Get() *DecryptionPolicy {
	return v.value
}

func (v *NullableDecryptionPolicy) Set(val *DecryptionPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableDecryptionPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableDecryptionPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecryptionPolicy(val *DecryptionPolicy) *NullableDecryptionPolicy {
	return &NullableDecryptionPolicy{value: val, isSet: true}
}

func (v NullableDecryptionPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecryptionPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
