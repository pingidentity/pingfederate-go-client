/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CustomAttributeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomAttributeSource{}

// CustomAttributeSource struct for CustomAttributeSource
type CustomAttributeSource struct {
	// The data store type of this attribute source.
	Type         string       `json:"type" tfsdk:"type"`
	DataStoreRef ResourceLink `json:"dataStoreRef" tfsdk:"data_store_ref"`
	// The ID that defines this attribute source. Only alphanumeric characters allowed.<br>Note: Required for OpenID Connect policy attribute sources, OAuth IdP adapter mappings, OAuth access token mappings and APC-to-SP Adapter Mappings. IdP Connections will ignore this property since it only allows one attribute source to be defined per mapping. IdP-to-SP Adapter Mappings can contain multiple attribute sources.
	Id *string `json:"id,omitempty" tfsdk:"id"`
	// The description of this attribute source. The description needs to be unique amongst the attribute sources for the mapping.<br>Note: Required for APC-to-SP Adapter Mappings
	Description *string `json:"description,omitempty" tfsdk:"description"`
	// A list of mappings from attribute names to their fulfillment values. This field is only valid for the SP Connection's Browser SSO mappings
	AttributeContractFulfillment *map[string]AttributeFulfillmentValue `json:"attributeContractFulfillment,omitempty" tfsdk:"attribute_contract_fulfillment"`
	// The list of fields that can be used to filter a request to the custom data store.
	FilterFields []FieldEntry `json:"filterFields,omitempty" tfsdk:"filter_fields"`
}

type _CustomAttributeSource CustomAttributeSource

// NewCustomAttributeSource instantiates a new CustomAttributeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomAttributeSource(type_ string, dataStoreRef ResourceLink) *CustomAttributeSource {
	this := CustomAttributeSource{}
	this.Type = type_
	this.DataStoreRef = dataStoreRef
	return &this
}

// NewCustomAttributeSourceWithDefaults instantiates a new CustomAttributeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomAttributeSourceWithDefaults() *CustomAttributeSource {
	this := CustomAttributeSource{}
	return &this
}

// GetType returns the Type field value
func (o *CustomAttributeSource) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CustomAttributeSource) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CustomAttributeSource) SetType(v string) {
	o.Type = v
}

// GetDataStoreRef returns the DataStoreRef field value
func (o *CustomAttributeSource) GetDataStoreRef() ResourceLink {
	if o == nil {
		var ret ResourceLink
		return ret
	}

	return o.DataStoreRef
}

// GetDataStoreRefOk returns a tuple with the DataStoreRef field value
// and a boolean to check if the value has been set.
func (o *CustomAttributeSource) GetDataStoreRefOk() (*ResourceLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataStoreRef, true
}

// SetDataStoreRef sets field value
func (o *CustomAttributeSource) SetDataStoreRef(v ResourceLink) {
	o.DataStoreRef = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustomAttributeSource) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomAttributeSource) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustomAttributeSource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CustomAttributeSource) SetId(v string) {
	o.Id = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CustomAttributeSource) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomAttributeSource) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CustomAttributeSource) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CustomAttributeSource) SetDescription(v string) {
	o.Description = &v
}

// GetAttributeContractFulfillment returns the AttributeContractFulfillment field value if set, zero value otherwise.
func (o *CustomAttributeSource) GetAttributeContractFulfillment() map[string]AttributeFulfillmentValue {
	if o == nil || IsNil(o.AttributeContractFulfillment) {
		var ret map[string]AttributeFulfillmentValue
		return ret
	}
	return *o.AttributeContractFulfillment
}

// GetAttributeContractFulfillmentOk returns a tuple with the AttributeContractFulfillment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomAttributeSource) GetAttributeContractFulfillmentOk() (*map[string]AttributeFulfillmentValue, bool) {
	if o == nil || IsNil(o.AttributeContractFulfillment) {
		return nil, false
	}
	return o.AttributeContractFulfillment, true
}

// HasAttributeContractFulfillment returns a boolean if a field has been set.
func (o *CustomAttributeSource) HasAttributeContractFulfillment() bool {
	if o != nil && !IsNil(o.AttributeContractFulfillment) {
		return true
	}

	return false
}

// SetAttributeContractFulfillment gets a reference to the given map[string]AttributeFulfillmentValue and assigns it to the AttributeContractFulfillment field.
func (o *CustomAttributeSource) SetAttributeContractFulfillment(v map[string]AttributeFulfillmentValue) {
	o.AttributeContractFulfillment = &v
}

// GetFilterFields returns the FilterFields field value if set, zero value otherwise.
func (o *CustomAttributeSource) GetFilterFields() []FieldEntry {
	if o == nil || IsNil(o.FilterFields) {
		var ret []FieldEntry
		return ret
	}
	return o.FilterFields
}

// GetFilterFieldsOk returns a tuple with the FilterFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomAttributeSource) GetFilterFieldsOk() ([]FieldEntry, bool) {
	if o == nil || IsNil(o.FilterFields) {
		return nil, false
	}
	return o.FilterFields, true
}

// HasFilterFields returns a boolean if a field has been set.
func (o *CustomAttributeSource) HasFilterFields() bool {
	if o != nil && !IsNil(o.FilterFields) {
		return true
	}

	return false
}

// SetFilterFields gets a reference to the given []FieldEntry and assigns it to the FilterFields field.
func (o *CustomAttributeSource) SetFilterFields(v []FieldEntry) {
	o.FilterFields = v
}

func (o CustomAttributeSource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomAttributeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["dataStoreRef"] = o.DataStoreRef
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.AttributeContractFulfillment) {
		toSerialize["attributeContractFulfillment"] = o.AttributeContractFulfillment
	}
	if !IsNil(o.FilterFields) {
		toSerialize["filterFields"] = o.FilterFields
	}
	return toSerialize, nil
}

func (o *CustomAttributeSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"dataStoreRef",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomAttributeSource := _CustomAttributeSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varCustomAttributeSource)

	if err != nil {
		return err
	}

	*o = CustomAttributeSource(varCustomAttributeSource)

	return err
}

type NullableCustomAttributeSource struct {
	value *CustomAttributeSource
	isSet bool
}

func (v NullableCustomAttributeSource) Get() *CustomAttributeSource {
	return v.value
}

func (v *NullableCustomAttributeSource) Set(val *CustomAttributeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomAttributeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomAttributeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomAttributeSource(val *CustomAttributeSource) *NullableCustomAttributeSource {
	return &NullableCustomAttributeSource{value: val, isSet: true}
}

func (v NullableCustomAttributeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomAttributeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
