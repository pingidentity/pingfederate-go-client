/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the SloServiceEndpoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloServiceEndpoint{}

// SloServiceEndpoint Where SLO logout messages are sent. Only applicable for SAML 2.0.
type SloServiceEndpoint struct {
	// The binding of this endpoint, if applicable - usually only required for SAML 2.0 endpoints.
	Binding *string `json:"binding,omitempty" tfsdk:"binding"`
	// The absolute or relative URL of the endpoint. A relative URL can be specified if a base URL for the connection has been defined.
	Url string `json:"url" tfsdk:"url"`
	// The absolute or relative URL to which logout responses are sent. A relative URL can be specified if a base URL for the connection has been defined.
	ResponseUrl *string `json:"responseUrl,omitempty" tfsdk:"response_url"`
}

// NewSloServiceEndpoint instantiates a new SloServiceEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloServiceEndpoint(url string) *SloServiceEndpoint {
	this := SloServiceEndpoint{}
	this.Url = url
	return &this
}

// NewSloServiceEndpointWithDefaults instantiates a new SloServiceEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloServiceEndpointWithDefaults() *SloServiceEndpoint {
	this := SloServiceEndpoint{}
	return &this
}

// GetBinding returns the Binding field value if set, zero value otherwise.
func (o *SloServiceEndpoint) GetBinding() string {
	if o == nil || IsNil(o.Binding) {
		var ret string
		return ret
	}
	return *o.Binding
}

// GetBindingOk returns a tuple with the Binding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloServiceEndpoint) GetBindingOk() (*string, bool) {
	if o == nil || IsNil(o.Binding) {
		return nil, false
	}
	return o.Binding, true
}

// HasBinding returns a boolean if a field has been set.
func (o *SloServiceEndpoint) HasBinding() bool {
	if o != nil && !IsNil(o.Binding) {
		return true
	}

	return false
}

// SetBinding gets a reference to the given string and assigns it to the Binding field.
func (o *SloServiceEndpoint) SetBinding(v string) {
	o.Binding = &v
}

// GetUrl returns the Url field value
func (o *SloServiceEndpoint) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *SloServiceEndpoint) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *SloServiceEndpoint) SetUrl(v string) {
	o.Url = v
}

// GetResponseUrl returns the ResponseUrl field value if set, zero value otherwise.
func (o *SloServiceEndpoint) GetResponseUrl() string {
	if o == nil || IsNil(o.ResponseUrl) {
		var ret string
		return ret
	}
	return *o.ResponseUrl
}

// GetResponseUrlOk returns a tuple with the ResponseUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloServiceEndpoint) GetResponseUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ResponseUrl) {
		return nil, false
	}
	return o.ResponseUrl, true
}

// HasResponseUrl returns a boolean if a field has been set.
func (o *SloServiceEndpoint) HasResponseUrl() bool {
	if o != nil && !IsNil(o.ResponseUrl) {
		return true
	}

	return false
}

// SetResponseUrl gets a reference to the given string and assigns it to the ResponseUrl field.
func (o *SloServiceEndpoint) SetResponseUrl(v string) {
	o.ResponseUrl = &v
}

func (o SloServiceEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloServiceEndpoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Binding) {
		toSerialize["binding"] = o.Binding
	}
	toSerialize["url"] = o.Url
	if !IsNil(o.ResponseUrl) {
		toSerialize["responseUrl"] = o.ResponseUrl
	}
	return toSerialize, nil
}

type NullableSloServiceEndpoint struct {
	value *SloServiceEndpoint
	isSet bool
}

func (v NullableSloServiceEndpoint) Get() *SloServiceEndpoint {
	return v.value
}

func (v *NullableSloServiceEndpoint) Set(val *SloServiceEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableSloServiceEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableSloServiceEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloServiceEndpoint(val *SloServiceEndpoint) *NullableSloServiceEndpoint {
	return &NullableSloServiceEndpoint{value: val, isSet: true}
}

func (v NullableSloServiceEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloServiceEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
