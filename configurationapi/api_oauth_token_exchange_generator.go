/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// OauthTokenExchangeGeneratorAPIService OauthTokenExchangeGeneratorAPI service
type OauthTokenExchangeGeneratorAPIService service

type ApiCreateGroupRequest struct {
	ctx                      context.Context
	ApiService               *OauthTokenExchangeGeneratorAPIService
	body                     *TokenExchangeGeneratorGroup
	bypassExternalValidation *bool
}

// Configuration for new OAuth 2.0 Token Exchange Generator.
func (r ApiCreateGroupRequest) Body(body TokenExchangeGeneratorGroup) ApiCreateGroupRequest {
	r.body = &body
	return r
}

// External validation will be bypassed when set to true. Default to false.
func (r ApiCreateGroupRequest) BypassExternalValidation(bypassExternalValidation bool) ApiCreateGroupRequest {
	r.bypassExternalValidation = &bypassExternalValidation
	return r
}

func (r ApiCreateGroupRequest) Execute() (*TokenExchangeGeneratorGroup, *http.Response, error) {
	return r.ApiService.CreateGroupExecute(r)
}

/*
CreateGroup Create a new OAuth 2.0 Token Exchange Generator group.

Create a new OAuth 2.0 Token Exchange Generator group. If the OAuth 2.0 Token Exchange Generator group is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateGroupRequest
*/
func (a *OauthTokenExchangeGeneratorAPIService) CreateGroup(ctx context.Context) ApiCreateGroupRequest {
	return ApiCreateGroupRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TokenExchangeGeneratorGroup
func (a *OauthTokenExchangeGeneratorAPIService) CreateGroupExecute(r ApiCreateGroupRequest) (*TokenExchangeGeneratorGroup, *http.Response, error) {
	var (
		err                 error
		response            *http.Response
		localVarReturnValue *TokenExchangeGeneratorGroup
	)

	response, err = processResponse(
		func() (any, *http.Response, error) {
			return r.ApiService.internalCreateGroupExecute(r)
		},
		&localVarReturnValue,
	)
	return localVarReturnValue, response, err
}

func (a *OauthTokenExchangeGeneratorAPIService) internalCreateGroupExecute(r ApiCreateGroupRequest) (*TokenExchangeGeneratorGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TokenExchangeGeneratorGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OauthTokenExchangeGeneratorAPIService.CreateGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth/tokenExchange/generator/groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.bypassExternalValidation != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "bypassExternalValidation", r.bypassExternalValidation, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ApiResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteOauthTokenExchangeGroupRequest struct {
	ctx        context.Context
	ApiService *OauthTokenExchangeGeneratorAPIService
	id         string
}

func (r ApiDeleteOauthTokenExchangeGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteOauthTokenExchangeGroupExecute(r)
}

/*
DeleteOauthTokenExchangeGroup Delete an OAuth 2.0 Token Exchange Generator group.

Delete an OAuth 2.0 Token Exchange Generator group with the specified ID. A 404 status code is returned for nonexistent IDs. Note: If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of OAuth 2.0 Token Exchange Generator group to delete.
	@return ApiDeleteOauthTokenExchangeGroupRequest
*/
func (a *OauthTokenExchangeGeneratorAPIService) DeleteOauthTokenExchangeGroup(ctx context.Context, id string) ApiDeleteOauthTokenExchangeGroupRequest {
	return ApiDeleteOauthTokenExchangeGroupRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *OauthTokenExchangeGeneratorAPIService) DeleteOauthTokenExchangeGroupExecute(r ApiDeleteOauthTokenExchangeGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OauthTokenExchangeGeneratorAPIService.DeleteOauthTokenExchangeGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth/tokenExchange/generator/groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ApiResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetOauthTokenExchangeGroupByIdRequest struct {
	ctx        context.Context
	ApiService *OauthTokenExchangeGeneratorAPIService
	id         string
}

func (r ApiGetOauthTokenExchangeGroupByIdRequest) Execute() (*TokenExchangeGeneratorGroup, *http.Response, error) {
	return r.ApiService.GetOauthTokenExchangeGroupByIdExecute(r)
}

/*
GetOauthTokenExchangeGroupById Find an OAuth 2.0 Token Exchange Generator group by ID.

Get an OAuth 2.0 Token Exchange Generator group with the specified ID. A 404 status code is returned for nonexistent IDs.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of the OAuth 2.0 Token Exchange Generator group to fetch.
	@return ApiGetOauthTokenExchangeGroupByIdRequest
*/
func (a *OauthTokenExchangeGeneratorAPIService) GetOauthTokenExchangeGroupById(ctx context.Context, id string) ApiGetOauthTokenExchangeGroupByIdRequest {
	return ApiGetOauthTokenExchangeGroupByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return TokenExchangeGeneratorGroup
func (a *OauthTokenExchangeGeneratorAPIService) GetOauthTokenExchangeGroupByIdExecute(r ApiGetOauthTokenExchangeGroupByIdRequest) (*TokenExchangeGeneratorGroup, *http.Response, error) {
	var (
		err                 error
		response            *http.Response
		localVarReturnValue *TokenExchangeGeneratorGroup
	)

	response, err = processResponse(
		func() (any, *http.Response, error) {
			return r.ApiService.internalGetOauthTokenExchangeGroupByIdExecute(r)
		},
		&localVarReturnValue,
	)
	return localVarReturnValue, response, err
}

func (a *OauthTokenExchangeGeneratorAPIService) internalGetOauthTokenExchangeGroupByIdExecute(r ApiGetOauthTokenExchangeGroupByIdRequest) (*TokenExchangeGeneratorGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TokenExchangeGeneratorGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OauthTokenExchangeGeneratorAPIService.GetOauthTokenExchangeGroupById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth/tokenExchange/generator/groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOauthTokenExchangeGroupsRequest struct {
	ctx        context.Context
	ApiService *OauthTokenExchangeGeneratorAPIService
}

func (r ApiGetOauthTokenExchangeGroupsRequest) Execute() (*TokenExchangeGeneratorGroups, *http.Response, error) {
	return r.ApiService.GetOauthTokenExchangeGroupsExecute(r)
}

/*
GetOauthTokenExchangeGroups Get list of OAuth 2.0 Token Exchange Generator groups.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetOauthTokenExchangeGroupsRequest
*/
func (a *OauthTokenExchangeGeneratorAPIService) GetOauthTokenExchangeGroups(ctx context.Context) ApiGetOauthTokenExchangeGroupsRequest {
	return ApiGetOauthTokenExchangeGroupsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TokenExchangeGeneratorGroups
func (a *OauthTokenExchangeGeneratorAPIService) GetOauthTokenExchangeGroupsExecute(r ApiGetOauthTokenExchangeGroupsRequest) (*TokenExchangeGeneratorGroups, *http.Response, error) {
	var (
		err                 error
		response            *http.Response
		localVarReturnValue *TokenExchangeGeneratorGroups
	)

	response, err = processResponse(
		func() (any, *http.Response, error) {
			return r.ApiService.internalGetOauthTokenExchangeGroupsExecute(r)
		},
		&localVarReturnValue,
	)
	return localVarReturnValue, response, err
}

func (a *OauthTokenExchangeGeneratorAPIService) internalGetOauthTokenExchangeGroupsExecute(r ApiGetOauthTokenExchangeGroupsRequest) (*TokenExchangeGeneratorGroups, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TokenExchangeGeneratorGroups
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OauthTokenExchangeGeneratorAPIService.GetOauthTokenExchangeGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth/tokenExchange/generator/groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOauthTokenExchangeSettingsRequest struct {
	ctx        context.Context
	ApiService *OauthTokenExchangeGeneratorAPIService
}

func (r ApiGetOauthTokenExchangeSettingsRequest) Execute() (*TokenExchangeGeneratorSettings, *http.Response, error) {
	return r.ApiService.GetOauthTokenExchangeSettingsExecute(r)
}

/*
GetOauthTokenExchangeSettings Get general OAuth 2.0 Token Exchange Generator settings.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetOauthTokenExchangeSettingsRequest
*/
func (a *OauthTokenExchangeGeneratorAPIService) GetOauthTokenExchangeSettings(ctx context.Context) ApiGetOauthTokenExchangeSettingsRequest {
	return ApiGetOauthTokenExchangeSettingsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TokenExchangeGeneratorSettings
func (a *OauthTokenExchangeGeneratorAPIService) GetOauthTokenExchangeSettingsExecute(r ApiGetOauthTokenExchangeSettingsRequest) (*TokenExchangeGeneratorSettings, *http.Response, error) {
	var (
		err                 error
		response            *http.Response
		localVarReturnValue *TokenExchangeGeneratorSettings
	)

	response, err = processResponse(
		func() (any, *http.Response, error) {
			return r.ApiService.internalGetOauthTokenExchangeSettingsExecute(r)
		},
		&localVarReturnValue,
	)
	return localVarReturnValue, response, err
}

func (a *OauthTokenExchangeGeneratorAPIService) internalGetOauthTokenExchangeSettingsExecute(r ApiGetOauthTokenExchangeSettingsRequest) (*TokenExchangeGeneratorSettings, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TokenExchangeGeneratorSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OauthTokenExchangeGeneratorAPIService.GetOauthTokenExchangeSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth/tokenExchange/generator/settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateOauthTokenExchangeGroupRequest struct {
	ctx                      context.Context
	ApiService               *OauthTokenExchangeGeneratorAPIService
	id                       string
	body                     *TokenExchangeGeneratorGroup
	bypassExternalValidation *bool
}

// Configuration for updated OAuth 2.0 Token Exchange Generator group.
func (r ApiUpdateOauthTokenExchangeGroupRequest) Body(body TokenExchangeGeneratorGroup) ApiUpdateOauthTokenExchangeGroupRequest {
	r.body = &body
	return r
}

// External validation will be bypassed when set to true. Default to false.
func (r ApiUpdateOauthTokenExchangeGroupRequest) BypassExternalValidation(bypassExternalValidation bool) ApiUpdateOauthTokenExchangeGroupRequest {
	r.bypassExternalValidation = &bypassExternalValidation
	return r
}

func (r ApiUpdateOauthTokenExchangeGroupRequest) Execute() (*TokenExchangeGeneratorGroup, *http.Response, error) {
	return r.ApiService.UpdateOauthTokenExchangeGroupExecute(r)
}

/*
UpdateOauthTokenExchangeGroup Update an OAuth 2.0 Token Exchange Generator group.

Update an OAuth 2.0 Token Exchange Generator group with the matching ID. If the group is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent IDs.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of the OAuth 2.0 Token Exchange Generator group to update.
	@return ApiUpdateOauthTokenExchangeGroupRequest
*/
func (a *OauthTokenExchangeGeneratorAPIService) UpdateOauthTokenExchangeGroup(ctx context.Context, id string) ApiUpdateOauthTokenExchangeGroupRequest {
	return ApiUpdateOauthTokenExchangeGroupRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return TokenExchangeGeneratorGroup
func (a *OauthTokenExchangeGeneratorAPIService) UpdateOauthTokenExchangeGroupExecute(r ApiUpdateOauthTokenExchangeGroupRequest) (*TokenExchangeGeneratorGroup, *http.Response, error) {
	var (
		err                 error
		response            *http.Response
		localVarReturnValue *TokenExchangeGeneratorGroup
	)

	response, err = processResponse(
		func() (any, *http.Response, error) {
			return r.ApiService.internalUpdateOauthTokenExchangeGroupExecute(r)
		},
		&localVarReturnValue,
	)
	return localVarReturnValue, response, err
}

func (a *OauthTokenExchangeGeneratorAPIService) internalUpdateOauthTokenExchangeGroupExecute(r ApiUpdateOauthTokenExchangeGroupRequest) (*TokenExchangeGeneratorGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TokenExchangeGeneratorGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OauthTokenExchangeGeneratorAPIService.UpdateOauthTokenExchangeGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth/tokenExchange/generator/groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.bypassExternalValidation != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "bypassExternalValidation", r.bypassExternalValidation, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ApiResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateOauthTokenExchangeSettingsRequest struct {
	ctx                      context.Context
	ApiService               *OauthTokenExchangeGeneratorAPIService
	body                     *TokenExchangeGeneratorSettings
	bypassExternalValidation *bool
}

// OAuth 2.0 Token Exchange Generator settings.
func (r ApiUpdateOauthTokenExchangeSettingsRequest) Body(body TokenExchangeGeneratorSettings) ApiUpdateOauthTokenExchangeSettingsRequest {
	r.body = &body
	return r
}

// External validation will be bypassed when set to true. Default to false.
func (r ApiUpdateOauthTokenExchangeSettingsRequest) BypassExternalValidation(bypassExternalValidation bool) ApiUpdateOauthTokenExchangeSettingsRequest {
	r.bypassExternalValidation = &bypassExternalValidation
	return r
}

func (r ApiUpdateOauthTokenExchangeSettingsRequest) Execute() (*TokenExchangeGeneratorSettings, *http.Response, error) {
	return r.ApiService.UpdateOauthTokenExchangeSettingsExecute(r)
}

/*
UpdateOauthTokenExchangeSettings Update general OAuth 2.0 Token Exchange Generator settings.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUpdateOauthTokenExchangeSettingsRequest
*/
func (a *OauthTokenExchangeGeneratorAPIService) UpdateOauthTokenExchangeSettings(ctx context.Context) ApiUpdateOauthTokenExchangeSettingsRequest {
	return ApiUpdateOauthTokenExchangeSettingsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TokenExchangeGeneratorSettings
func (a *OauthTokenExchangeGeneratorAPIService) UpdateOauthTokenExchangeSettingsExecute(r ApiUpdateOauthTokenExchangeSettingsRequest) (*TokenExchangeGeneratorSettings, *http.Response, error) {
	var (
		err                 error
		response            *http.Response
		localVarReturnValue *TokenExchangeGeneratorSettings
	)

	response, err = processResponse(
		func() (any, *http.Response, error) {
			return r.ApiService.internalUpdateOauthTokenExchangeSettingsExecute(r)
		},
		&localVarReturnValue,
	)
	return localVarReturnValue, response, err
}

func (a *OauthTokenExchangeGeneratorAPIService) internalUpdateOauthTokenExchangeSettingsExecute(r ApiUpdateOauthTokenExchangeSettingsRequest) (*TokenExchangeGeneratorSettings, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TokenExchangeGeneratorSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OauthTokenExchangeGeneratorAPIService.UpdateOauthTokenExchangeSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth/tokenExchange/generator/settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.bypassExternalValidation != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "bypassExternalValidation", r.bypassExternalValidation, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ApiResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
