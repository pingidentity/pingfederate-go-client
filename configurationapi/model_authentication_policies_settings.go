/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AuthenticationPoliciesSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthenticationPoliciesSettings{}

// AuthenticationPoliciesSettings The settings for the authentication policies.
type AuthenticationPoliciesSettings struct {
	// Enable IdP authentication policies.
	EnableIdpAuthnSelection *bool `json:"enableIdpAuthnSelection,omitempty" tfsdk:"enable_idp_authn_selection"`
	// Enable SP authentication policies.
	EnableSpAuthnSelection *bool `json:"enableSpAuthnSelection,omitempty" tfsdk:"enable_sp_authn_selection"`
}

// NewAuthenticationPoliciesSettings instantiates a new AuthenticationPoliciesSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticationPoliciesSettings() *AuthenticationPoliciesSettings {
	this := AuthenticationPoliciesSettings{}
	return &this
}

// NewAuthenticationPoliciesSettingsWithDefaults instantiates a new AuthenticationPoliciesSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticationPoliciesSettingsWithDefaults() *AuthenticationPoliciesSettings {
	this := AuthenticationPoliciesSettings{}
	return &this
}

// GetEnableIdpAuthnSelection returns the EnableIdpAuthnSelection field value if set, zero value otherwise.
func (o *AuthenticationPoliciesSettings) GetEnableIdpAuthnSelection() bool {
	if o == nil || IsNil(o.EnableIdpAuthnSelection) {
		var ret bool
		return ret
	}
	return *o.EnableIdpAuthnSelection
}

// GetEnableIdpAuthnSelectionOk returns a tuple with the EnableIdpAuthnSelection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationPoliciesSettings) GetEnableIdpAuthnSelectionOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableIdpAuthnSelection) {
		return nil, false
	}
	return o.EnableIdpAuthnSelection, true
}

// HasEnableIdpAuthnSelection returns a boolean if a field has been set.
func (o *AuthenticationPoliciesSettings) HasEnableIdpAuthnSelection() bool {
	if o != nil && !IsNil(o.EnableIdpAuthnSelection) {
		return true
	}

	return false
}

// SetEnableIdpAuthnSelection gets a reference to the given bool and assigns it to the EnableIdpAuthnSelection field.
func (o *AuthenticationPoliciesSettings) SetEnableIdpAuthnSelection(v bool) {
	o.EnableIdpAuthnSelection = &v
}

// GetEnableSpAuthnSelection returns the EnableSpAuthnSelection field value if set, zero value otherwise.
func (o *AuthenticationPoliciesSettings) GetEnableSpAuthnSelection() bool {
	if o == nil || IsNil(o.EnableSpAuthnSelection) {
		var ret bool
		return ret
	}
	return *o.EnableSpAuthnSelection
}

// GetEnableSpAuthnSelectionOk returns a tuple with the EnableSpAuthnSelection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationPoliciesSettings) GetEnableSpAuthnSelectionOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSpAuthnSelection) {
		return nil, false
	}
	return o.EnableSpAuthnSelection, true
}

// HasEnableSpAuthnSelection returns a boolean if a field has been set.
func (o *AuthenticationPoliciesSettings) HasEnableSpAuthnSelection() bool {
	if o != nil && !IsNil(o.EnableSpAuthnSelection) {
		return true
	}

	return false
}

// SetEnableSpAuthnSelection gets a reference to the given bool and assigns it to the EnableSpAuthnSelection field.
func (o *AuthenticationPoliciesSettings) SetEnableSpAuthnSelection(v bool) {
	o.EnableSpAuthnSelection = &v
}

func (o AuthenticationPoliciesSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthenticationPoliciesSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnableIdpAuthnSelection) {
		toSerialize["enableIdpAuthnSelection"] = o.EnableIdpAuthnSelection
	}
	if !IsNil(o.EnableSpAuthnSelection) {
		toSerialize["enableSpAuthnSelection"] = o.EnableSpAuthnSelection
	}
	return toSerialize, nil
}

type NullableAuthenticationPoliciesSettings struct {
	value *AuthenticationPoliciesSettings
	isSet bool
}

func (v NullableAuthenticationPoliciesSettings) Get() *AuthenticationPoliciesSettings {
	return v.value
}

func (v *NullableAuthenticationPoliciesSettings) Set(val *AuthenticationPoliciesSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationPoliciesSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationPoliciesSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationPoliciesSettings(val *AuthenticationPoliciesSettings) *NullableAuthenticationPoliciesSettings {
	return &NullableAuthenticationPoliciesSettings{value: val, isSet: true}
}

func (v NullableAuthenticationPoliciesSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationPoliciesSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
