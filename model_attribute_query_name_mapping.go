/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AttributeQueryNameMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttributeQueryNameMapping{}

// AttributeQueryNameMapping The attribute query name mappings between the SP and the IdP.
type AttributeQueryNameMapping struct {
	// The local attribute name.
	LocalName string `json:"localName"`
	// The remote attribute name as defined by the attribute authority.
	RemoteName string `json:"remoteName"`
}

// NewAttributeQueryNameMapping instantiates a new AttributeQueryNameMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttributeQueryNameMapping(localName string, remoteName string) *AttributeQueryNameMapping {
	this := AttributeQueryNameMapping{}
	this.LocalName = localName
	this.RemoteName = remoteName
	return &this
}

// NewAttributeQueryNameMappingWithDefaults instantiates a new AttributeQueryNameMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributeQueryNameMappingWithDefaults() *AttributeQueryNameMapping {
	this := AttributeQueryNameMapping{}
	return &this
}

// GetLocalName returns the LocalName field value
func (o *AttributeQueryNameMapping) GetLocalName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LocalName
}

// GetLocalNameOk returns a tuple with the LocalName field value
// and a boolean to check if the value has been set.
func (o *AttributeQueryNameMapping) GetLocalNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocalName, true
}

// SetLocalName sets field value
func (o *AttributeQueryNameMapping) SetLocalName(v string) {
	o.LocalName = v
}

// GetRemoteName returns the RemoteName field value
func (o *AttributeQueryNameMapping) GetRemoteName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteName
}

// GetRemoteNameOk returns a tuple with the RemoteName field value
// and a boolean to check if the value has been set.
func (o *AttributeQueryNameMapping) GetRemoteNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteName, true
}

// SetRemoteName sets field value
func (o *AttributeQueryNameMapping) SetRemoteName(v string) {
	o.RemoteName = v
}

func (o AttributeQueryNameMapping) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttributeQueryNameMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["localName"] = o.LocalName
	toSerialize["remoteName"] = o.RemoteName
	return toSerialize, nil
}

type NullableAttributeQueryNameMapping struct {
	value *AttributeQueryNameMapping
	isSet bool
}

func (v NullableAttributeQueryNameMapping) Get() *AttributeQueryNameMapping {
	return v.value
}

func (v *NullableAttributeQueryNameMapping) Set(val *AttributeQueryNameMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeQueryNameMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeQueryNameMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeQueryNameMapping(val *AttributeQueryNameMapping) *NullableAttributeQueryNameMapping {
	return &NullableAttributeQueryNameMapping{value: val, isSet: true}
}

func (v NullableAttributeQueryNameMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeQueryNameMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
