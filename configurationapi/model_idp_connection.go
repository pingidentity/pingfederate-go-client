/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the IdpConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdpConnection{}

// IdpConnection struct for IdpConnection
type IdpConnection struct {
	// The type of this connection. Default is 'IDP'.
	Type *string `json:"type,omitempty" tfsdk:"type"`
	// The persistent, unique ID for the connection. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified.
	Id *string `json:"id,omitempty" tfsdk:"id"`
	// The partner's entity ID (connection ID) or issuer value (for OIDC Connections).
	EntityId string `json:"entityId" tfsdk:"entity_id"`
	// The connection name.
	Name string `json:"name" tfsdk:"name"`
	// The time at which the connection was last changed. This property is read only and is ignored on PUT and POST requests.
	ModificationDate *time.Time `json:"modificationDate,omitempty" tfsdk:"modification_date"`
	// The time at which the connection was created. This property is read only and is ignored on PUT and POST requests.
	CreationDate *time.Time `json:"creationDate,omitempty" tfsdk:"creation_date"`
	// Specifies whether the connection is active and ready to process incoming requests. The default value is false.
	Active *bool `json:"active,omitempty" tfsdk:"active"`
	// The fully-qualified hostname and port on which your partner's federation deployment runs.
	BaseUrl *string `json:"baseUrl,omitempty" tfsdk:"base_url"`
	// The default alternate entity ID that identifies the local server to this partner. It is required when virtualEntityIds is not empty and must be included in that list.
	DefaultVirtualEntityId *string `json:"defaultVirtualEntityId,omitempty" tfsdk:"default_virtual_entity_id"`
	// List of alternate entity IDs that identifies the local server to this partner.
	VirtualEntityIds       []string               `json:"virtualEntityIds,omitempty" tfsdk:"virtual_entity_ids"`
	MetadataReloadSettings *ConnectionMetadataUrl `json:"metadataReloadSettings,omitempty" tfsdk:"metadata_reload_settings"`
	Credentials            *ConnectionCredentials `json:"credentials,omitempty" tfsdk:"credentials"`
	ContactInfo            *ContactInfo           `json:"contactInfo,omitempty" tfsdk:"contact_info"`
	// The license connection group. If your PingFederate license is based on connection groups, each connection must be assigned to a group before it can be used.
	LicenseConnectionGroup *string `json:"licenseConnectionGroup,omitempty" tfsdk:"license_connection_group"`
	// The level of transaction logging applicable for this connection. Default is STANDARD.
	LoggingMode                            *string                                 `json:"loggingMode,omitempty" tfsdk:"logging_mode"`
	AdditionalAllowedEntitiesConfiguration *AdditionalAllowedEntitiesConfiguration `json:"additionalAllowedEntitiesConfiguration,omitempty" tfsdk:"additional_allowed_entities_configuration"`
	// Extended Properties allows to store additional information for IdP/SP Connections. The names of these extended properties should be defined in /extendedProperties.
	ExtendedProperties *map[string]ParameterValues `json:"extendedProperties,omitempty" tfsdk:"extended_properties"`
	// This status indicates whether the connection has been replicated to the cluster. This property only applies when automatic replication of connections is enabled. It is read only and is ignored on PUT and POST requests.
	ReplicationStatus             *string                        `json:"replicationStatus,omitempty" tfsdk:"replication_status"`
	OidcClientCredentials         *OIDCClientCredentials         `json:"oidcClientCredentials,omitempty" tfsdk:"oidc_client_credentials"`
	IdpBrowserSso                 *IdpBrowserSso                 `json:"idpBrowserSso,omitempty" tfsdk:"idp_browser_sso"`
	AttributeQuery                *IdpAttributeQuery             `json:"attributeQuery,omitempty" tfsdk:"attribute_query"`
	IdpOAuthGrantAttributeMapping *IdpOAuthGrantAttributeMapping `json:"idpOAuthGrantAttributeMapping,omitempty" tfsdk:"idp_oauth_grant_attribute_mapping"`
	WsTrust                       *IdpWsTrust                    `json:"wsTrust,omitempty" tfsdk:"ws_trust"`
	InboundProvisioning           *IdpInboundProvisioning        `json:"inboundProvisioning,omitempty" tfsdk:"inbound_provisioning"`
	// Identifier that specifies the message displayed on a user-facing error page.
	ErrorPageMsgId *string `json:"errorPageMsgId,omitempty" tfsdk:"error_page_msg_id"`
}

type _IdpConnection IdpConnection

// NewIdpConnection instantiates a new IdpConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdpConnection(entityId string, name string) *IdpConnection {
	this := IdpConnection{}
	this.EntityId = entityId
	this.Name = name
	return &this
}

// NewIdpConnectionWithDefaults instantiates a new IdpConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdpConnectionWithDefaults() *IdpConnection {
	this := IdpConnection{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IdpConnection) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IdpConnection) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IdpConnection) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IdpConnection) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IdpConnection) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IdpConnection) SetId(v string) {
	o.Id = &v
}

// GetEntityId returns the EntityId field value
func (o *IdpConnection) GetEntityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetEntityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityId, true
}

// SetEntityId sets field value
func (o *IdpConnection) SetEntityId(v string) {
	o.EntityId = v
}

// GetName returns the Name field value
func (o *IdpConnection) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IdpConnection) SetName(v string) {
	o.Name = v
}

// GetModificationDate returns the ModificationDate field value if set, zero value otherwise.
func (o *IdpConnection) GetModificationDate() time.Time {
	if o == nil || IsNil(o.ModificationDate) {
		var ret time.Time
		return ret
	}
	return *o.ModificationDate
}

// GetModificationDateOk returns a tuple with the ModificationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetModificationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ModificationDate) {
		return nil, false
	}
	return o.ModificationDate, true
}

// HasModificationDate returns a boolean if a field has been set.
func (o *IdpConnection) HasModificationDate() bool {
	if o != nil && !IsNil(o.ModificationDate) {
		return true
	}

	return false
}

// SetModificationDate gets a reference to the given time.Time and assigns it to the ModificationDate field.
func (o *IdpConnection) SetModificationDate(v time.Time) {
	o.ModificationDate = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *IdpConnection) GetCreationDate() time.Time {
	if o == nil || IsNil(o.CreationDate) {
		var ret time.Time
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetCreationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationDate) {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *IdpConnection) HasCreationDate() bool {
	if o != nil && !IsNil(o.CreationDate) {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given time.Time and assigns it to the CreationDate field.
func (o *IdpConnection) SetCreationDate(v time.Time) {
	o.CreationDate = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *IdpConnection) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *IdpConnection) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *IdpConnection) SetActive(v bool) {
	o.Active = &v
}

// GetBaseUrl returns the BaseUrl field value if set, zero value otherwise.
func (o *IdpConnection) GetBaseUrl() string {
	if o == nil || IsNil(o.BaseUrl) {
		var ret string
		return ret
	}
	return *o.BaseUrl
}

// GetBaseUrlOk returns a tuple with the BaseUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetBaseUrlOk() (*string, bool) {
	if o == nil || IsNil(o.BaseUrl) {
		return nil, false
	}
	return o.BaseUrl, true
}

// HasBaseUrl returns a boolean if a field has been set.
func (o *IdpConnection) HasBaseUrl() bool {
	if o != nil && !IsNil(o.BaseUrl) {
		return true
	}

	return false
}

// SetBaseUrl gets a reference to the given string and assigns it to the BaseUrl field.
func (o *IdpConnection) SetBaseUrl(v string) {
	o.BaseUrl = &v
}

// GetDefaultVirtualEntityId returns the DefaultVirtualEntityId field value if set, zero value otherwise.
func (o *IdpConnection) GetDefaultVirtualEntityId() string {
	if o == nil || IsNil(o.DefaultVirtualEntityId) {
		var ret string
		return ret
	}
	return *o.DefaultVirtualEntityId
}

// GetDefaultVirtualEntityIdOk returns a tuple with the DefaultVirtualEntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetDefaultVirtualEntityIdOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultVirtualEntityId) {
		return nil, false
	}
	return o.DefaultVirtualEntityId, true
}

// HasDefaultVirtualEntityId returns a boolean if a field has been set.
func (o *IdpConnection) HasDefaultVirtualEntityId() bool {
	if o != nil && !IsNil(o.DefaultVirtualEntityId) {
		return true
	}

	return false
}

// SetDefaultVirtualEntityId gets a reference to the given string and assigns it to the DefaultVirtualEntityId field.
func (o *IdpConnection) SetDefaultVirtualEntityId(v string) {
	o.DefaultVirtualEntityId = &v
}

// GetVirtualEntityIds returns the VirtualEntityIds field value if set, zero value otherwise.
func (o *IdpConnection) GetVirtualEntityIds() []string {
	if o == nil || IsNil(o.VirtualEntityIds) {
		var ret []string
		return ret
	}
	return o.VirtualEntityIds
}

// GetVirtualEntityIdsOk returns a tuple with the VirtualEntityIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetVirtualEntityIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.VirtualEntityIds) {
		return nil, false
	}
	return o.VirtualEntityIds, true
}

// HasVirtualEntityIds returns a boolean if a field has been set.
func (o *IdpConnection) HasVirtualEntityIds() bool {
	if o != nil && !IsNil(o.VirtualEntityIds) {
		return true
	}

	return false
}

// SetVirtualEntityIds gets a reference to the given []string and assigns it to the VirtualEntityIds field.
func (o *IdpConnection) SetVirtualEntityIds(v []string) {
	o.VirtualEntityIds = v
}

// GetMetadataReloadSettings returns the MetadataReloadSettings field value if set, zero value otherwise.
func (o *IdpConnection) GetMetadataReloadSettings() ConnectionMetadataUrl {
	if o == nil || IsNil(o.MetadataReloadSettings) {
		var ret ConnectionMetadataUrl
		return ret
	}
	return *o.MetadataReloadSettings
}

// GetMetadataReloadSettingsOk returns a tuple with the MetadataReloadSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetMetadataReloadSettingsOk() (*ConnectionMetadataUrl, bool) {
	if o == nil || IsNil(o.MetadataReloadSettings) {
		return nil, false
	}
	return o.MetadataReloadSettings, true
}

// HasMetadataReloadSettings returns a boolean if a field has been set.
func (o *IdpConnection) HasMetadataReloadSettings() bool {
	if o != nil && !IsNil(o.MetadataReloadSettings) {
		return true
	}

	return false
}

// SetMetadataReloadSettings gets a reference to the given ConnectionMetadataUrl and assigns it to the MetadataReloadSettings field.
func (o *IdpConnection) SetMetadataReloadSettings(v ConnectionMetadataUrl) {
	o.MetadataReloadSettings = &v
}

// GetCredentials returns the Credentials field value if set, zero value otherwise.
func (o *IdpConnection) GetCredentials() ConnectionCredentials {
	if o == nil || IsNil(o.Credentials) {
		var ret ConnectionCredentials
		return ret
	}
	return *o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetCredentialsOk() (*ConnectionCredentials, bool) {
	if o == nil || IsNil(o.Credentials) {
		return nil, false
	}
	return o.Credentials, true
}

// HasCredentials returns a boolean if a field has been set.
func (o *IdpConnection) HasCredentials() bool {
	if o != nil && !IsNil(o.Credentials) {
		return true
	}

	return false
}

// SetCredentials gets a reference to the given ConnectionCredentials and assigns it to the Credentials field.
func (o *IdpConnection) SetCredentials(v ConnectionCredentials) {
	o.Credentials = &v
}

// GetContactInfo returns the ContactInfo field value if set, zero value otherwise.
func (o *IdpConnection) GetContactInfo() ContactInfo {
	if o == nil || IsNil(o.ContactInfo) {
		var ret ContactInfo
		return ret
	}
	return *o.ContactInfo
}

// GetContactInfoOk returns a tuple with the ContactInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetContactInfoOk() (*ContactInfo, bool) {
	if o == nil || IsNil(o.ContactInfo) {
		return nil, false
	}
	return o.ContactInfo, true
}

// HasContactInfo returns a boolean if a field has been set.
func (o *IdpConnection) HasContactInfo() bool {
	if o != nil && !IsNil(o.ContactInfo) {
		return true
	}

	return false
}

// SetContactInfo gets a reference to the given ContactInfo and assigns it to the ContactInfo field.
func (o *IdpConnection) SetContactInfo(v ContactInfo) {
	o.ContactInfo = &v
}

// GetLicenseConnectionGroup returns the LicenseConnectionGroup field value if set, zero value otherwise.
func (o *IdpConnection) GetLicenseConnectionGroup() string {
	if o == nil || IsNil(o.LicenseConnectionGroup) {
		var ret string
		return ret
	}
	return *o.LicenseConnectionGroup
}

// GetLicenseConnectionGroupOk returns a tuple with the LicenseConnectionGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetLicenseConnectionGroupOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseConnectionGroup) {
		return nil, false
	}
	return o.LicenseConnectionGroup, true
}

// HasLicenseConnectionGroup returns a boolean if a field has been set.
func (o *IdpConnection) HasLicenseConnectionGroup() bool {
	if o != nil && !IsNil(o.LicenseConnectionGroup) {
		return true
	}

	return false
}

// SetLicenseConnectionGroup gets a reference to the given string and assigns it to the LicenseConnectionGroup field.
func (o *IdpConnection) SetLicenseConnectionGroup(v string) {
	o.LicenseConnectionGroup = &v
}

// GetLoggingMode returns the LoggingMode field value if set, zero value otherwise.
func (o *IdpConnection) GetLoggingMode() string {
	if o == nil || IsNil(o.LoggingMode) {
		var ret string
		return ret
	}
	return *o.LoggingMode
}

// GetLoggingModeOk returns a tuple with the LoggingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetLoggingModeOk() (*string, bool) {
	if o == nil || IsNil(o.LoggingMode) {
		return nil, false
	}
	return o.LoggingMode, true
}

// HasLoggingMode returns a boolean if a field has been set.
func (o *IdpConnection) HasLoggingMode() bool {
	if o != nil && !IsNil(o.LoggingMode) {
		return true
	}

	return false
}

// SetLoggingMode gets a reference to the given string and assigns it to the LoggingMode field.
func (o *IdpConnection) SetLoggingMode(v string) {
	o.LoggingMode = &v
}

// GetAdditionalAllowedEntitiesConfiguration returns the AdditionalAllowedEntitiesConfiguration field value if set, zero value otherwise.
func (o *IdpConnection) GetAdditionalAllowedEntitiesConfiguration() AdditionalAllowedEntitiesConfiguration {
	if o == nil || IsNil(o.AdditionalAllowedEntitiesConfiguration) {
		var ret AdditionalAllowedEntitiesConfiguration
		return ret
	}
	return *o.AdditionalAllowedEntitiesConfiguration
}

// GetAdditionalAllowedEntitiesConfigurationOk returns a tuple with the AdditionalAllowedEntitiesConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetAdditionalAllowedEntitiesConfigurationOk() (*AdditionalAllowedEntitiesConfiguration, bool) {
	if o == nil || IsNil(o.AdditionalAllowedEntitiesConfiguration) {
		return nil, false
	}
	return o.AdditionalAllowedEntitiesConfiguration, true
}

// HasAdditionalAllowedEntitiesConfiguration returns a boolean if a field has been set.
func (o *IdpConnection) HasAdditionalAllowedEntitiesConfiguration() bool {
	if o != nil && !IsNil(o.AdditionalAllowedEntitiesConfiguration) {
		return true
	}

	return false
}

// SetAdditionalAllowedEntitiesConfiguration gets a reference to the given AdditionalAllowedEntitiesConfiguration and assigns it to the AdditionalAllowedEntitiesConfiguration field.
func (o *IdpConnection) SetAdditionalAllowedEntitiesConfiguration(v AdditionalAllowedEntitiesConfiguration) {
	o.AdditionalAllowedEntitiesConfiguration = &v
}

// GetExtendedProperties returns the ExtendedProperties field value if set, zero value otherwise.
func (o *IdpConnection) GetExtendedProperties() map[string]ParameterValues {
	if o == nil || IsNil(o.ExtendedProperties) {
		var ret map[string]ParameterValues
		return ret
	}
	return *o.ExtendedProperties
}

// GetExtendedPropertiesOk returns a tuple with the ExtendedProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetExtendedPropertiesOk() (*map[string]ParameterValues, bool) {
	if o == nil || IsNil(o.ExtendedProperties) {
		return nil, false
	}
	return o.ExtendedProperties, true
}

// HasExtendedProperties returns a boolean if a field has been set.
func (o *IdpConnection) HasExtendedProperties() bool {
	if o != nil && !IsNil(o.ExtendedProperties) {
		return true
	}

	return false
}

// SetExtendedProperties gets a reference to the given map[string]ParameterValues and assigns it to the ExtendedProperties field.
func (o *IdpConnection) SetExtendedProperties(v map[string]ParameterValues) {
	o.ExtendedProperties = &v
}

// GetReplicationStatus returns the ReplicationStatus field value if set, zero value otherwise.
func (o *IdpConnection) GetReplicationStatus() string {
	if o == nil || IsNil(o.ReplicationStatus) {
		var ret string
		return ret
	}
	return *o.ReplicationStatus
}

// GetReplicationStatusOk returns a tuple with the ReplicationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetReplicationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ReplicationStatus) {
		return nil, false
	}
	return o.ReplicationStatus, true
}

// HasReplicationStatus returns a boolean if a field has been set.
func (o *IdpConnection) HasReplicationStatus() bool {
	if o != nil && !IsNil(o.ReplicationStatus) {
		return true
	}

	return false
}

// SetReplicationStatus gets a reference to the given string and assigns it to the ReplicationStatus field.
func (o *IdpConnection) SetReplicationStatus(v string) {
	o.ReplicationStatus = &v
}

// GetOidcClientCredentials returns the OidcClientCredentials field value if set, zero value otherwise.
func (o *IdpConnection) GetOidcClientCredentials() OIDCClientCredentials {
	if o == nil || IsNil(o.OidcClientCredentials) {
		var ret OIDCClientCredentials
		return ret
	}
	return *o.OidcClientCredentials
}

// GetOidcClientCredentialsOk returns a tuple with the OidcClientCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetOidcClientCredentialsOk() (*OIDCClientCredentials, bool) {
	if o == nil || IsNil(o.OidcClientCredentials) {
		return nil, false
	}
	return o.OidcClientCredentials, true
}

// HasOidcClientCredentials returns a boolean if a field has been set.
func (o *IdpConnection) HasOidcClientCredentials() bool {
	if o != nil && !IsNil(o.OidcClientCredentials) {
		return true
	}

	return false
}

// SetOidcClientCredentials gets a reference to the given OIDCClientCredentials and assigns it to the OidcClientCredentials field.
func (o *IdpConnection) SetOidcClientCredentials(v OIDCClientCredentials) {
	o.OidcClientCredentials = &v
}

// GetIdpBrowserSso returns the IdpBrowserSso field value if set, zero value otherwise.
func (o *IdpConnection) GetIdpBrowserSso() IdpBrowserSso {
	if o == nil || IsNil(o.IdpBrowserSso) {
		var ret IdpBrowserSso
		return ret
	}
	return *o.IdpBrowserSso
}

// GetIdpBrowserSsoOk returns a tuple with the IdpBrowserSso field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetIdpBrowserSsoOk() (*IdpBrowserSso, bool) {
	if o == nil || IsNil(o.IdpBrowserSso) {
		return nil, false
	}
	return o.IdpBrowserSso, true
}

// HasIdpBrowserSso returns a boolean if a field has been set.
func (o *IdpConnection) HasIdpBrowserSso() bool {
	if o != nil && !IsNil(o.IdpBrowserSso) {
		return true
	}

	return false
}

// SetIdpBrowserSso gets a reference to the given IdpBrowserSso and assigns it to the IdpBrowserSso field.
func (o *IdpConnection) SetIdpBrowserSso(v IdpBrowserSso) {
	o.IdpBrowserSso = &v
}

// GetAttributeQuery returns the AttributeQuery field value if set, zero value otherwise.
func (o *IdpConnection) GetAttributeQuery() IdpAttributeQuery {
	if o == nil || IsNil(o.AttributeQuery) {
		var ret IdpAttributeQuery
		return ret
	}
	return *o.AttributeQuery
}

// GetAttributeQueryOk returns a tuple with the AttributeQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetAttributeQueryOk() (*IdpAttributeQuery, bool) {
	if o == nil || IsNil(o.AttributeQuery) {
		return nil, false
	}
	return o.AttributeQuery, true
}

// HasAttributeQuery returns a boolean if a field has been set.
func (o *IdpConnection) HasAttributeQuery() bool {
	if o != nil && !IsNil(o.AttributeQuery) {
		return true
	}

	return false
}

// SetAttributeQuery gets a reference to the given IdpAttributeQuery and assigns it to the AttributeQuery field.
func (o *IdpConnection) SetAttributeQuery(v IdpAttributeQuery) {
	o.AttributeQuery = &v
}

// GetIdpOAuthGrantAttributeMapping returns the IdpOAuthGrantAttributeMapping field value if set, zero value otherwise.
func (o *IdpConnection) GetIdpOAuthGrantAttributeMapping() IdpOAuthGrantAttributeMapping {
	if o == nil || IsNil(o.IdpOAuthGrantAttributeMapping) {
		var ret IdpOAuthGrantAttributeMapping
		return ret
	}
	return *o.IdpOAuthGrantAttributeMapping
}

// GetIdpOAuthGrantAttributeMappingOk returns a tuple with the IdpOAuthGrantAttributeMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetIdpOAuthGrantAttributeMappingOk() (*IdpOAuthGrantAttributeMapping, bool) {
	if o == nil || IsNil(o.IdpOAuthGrantAttributeMapping) {
		return nil, false
	}
	return o.IdpOAuthGrantAttributeMapping, true
}

// HasIdpOAuthGrantAttributeMapping returns a boolean if a field has been set.
func (o *IdpConnection) HasIdpOAuthGrantAttributeMapping() bool {
	if o != nil && !IsNil(o.IdpOAuthGrantAttributeMapping) {
		return true
	}

	return false
}

// SetIdpOAuthGrantAttributeMapping gets a reference to the given IdpOAuthGrantAttributeMapping and assigns it to the IdpOAuthGrantAttributeMapping field.
func (o *IdpConnection) SetIdpOAuthGrantAttributeMapping(v IdpOAuthGrantAttributeMapping) {
	o.IdpOAuthGrantAttributeMapping = &v
}

// GetWsTrust returns the WsTrust field value if set, zero value otherwise.
func (o *IdpConnection) GetWsTrust() IdpWsTrust {
	if o == nil || IsNil(o.WsTrust) {
		var ret IdpWsTrust
		return ret
	}
	return *o.WsTrust
}

// GetWsTrustOk returns a tuple with the WsTrust field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetWsTrustOk() (*IdpWsTrust, bool) {
	if o == nil || IsNil(o.WsTrust) {
		return nil, false
	}
	return o.WsTrust, true
}

// HasWsTrust returns a boolean if a field has been set.
func (o *IdpConnection) HasWsTrust() bool {
	if o != nil && !IsNil(o.WsTrust) {
		return true
	}

	return false
}

// SetWsTrust gets a reference to the given IdpWsTrust and assigns it to the WsTrust field.
func (o *IdpConnection) SetWsTrust(v IdpWsTrust) {
	o.WsTrust = &v
}

// GetInboundProvisioning returns the InboundProvisioning field value if set, zero value otherwise.
func (o *IdpConnection) GetInboundProvisioning() IdpInboundProvisioning {
	if o == nil || IsNil(o.InboundProvisioning) {
		var ret IdpInboundProvisioning
		return ret
	}
	return *o.InboundProvisioning
}

// GetInboundProvisioningOk returns a tuple with the InboundProvisioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetInboundProvisioningOk() (*IdpInboundProvisioning, bool) {
	if o == nil || IsNil(o.InboundProvisioning) {
		return nil, false
	}
	return o.InboundProvisioning, true
}

// HasInboundProvisioning returns a boolean if a field has been set.
func (o *IdpConnection) HasInboundProvisioning() bool {
	if o != nil && !IsNil(o.InboundProvisioning) {
		return true
	}

	return false
}

// SetInboundProvisioning gets a reference to the given IdpInboundProvisioning and assigns it to the InboundProvisioning field.
func (o *IdpConnection) SetInboundProvisioning(v IdpInboundProvisioning) {
	o.InboundProvisioning = &v
}

// GetErrorPageMsgId returns the ErrorPageMsgId field value if set, zero value otherwise.
func (o *IdpConnection) GetErrorPageMsgId() string {
	if o == nil || IsNil(o.ErrorPageMsgId) {
		var ret string
		return ret
	}
	return *o.ErrorPageMsgId
}

// GetErrorPageMsgIdOk returns a tuple with the ErrorPageMsgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpConnection) GetErrorPageMsgIdOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorPageMsgId) {
		return nil, false
	}
	return o.ErrorPageMsgId, true
}

// HasErrorPageMsgId returns a boolean if a field has been set.
func (o *IdpConnection) HasErrorPageMsgId() bool {
	if o != nil && !IsNil(o.ErrorPageMsgId) {
		return true
	}

	return false
}

// SetErrorPageMsgId gets a reference to the given string and assigns it to the ErrorPageMsgId field.
func (o *IdpConnection) SetErrorPageMsgId(v string) {
	o.ErrorPageMsgId = &v
}

func (o IdpConnection) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdpConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["entityId"] = o.EntityId
	toSerialize["name"] = o.Name
	if !IsNil(o.ModificationDate) {
		toSerialize["modificationDate"] = o.ModificationDate
	}
	if !IsNil(o.CreationDate) {
		toSerialize["creationDate"] = o.CreationDate
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.BaseUrl) {
		toSerialize["baseUrl"] = o.BaseUrl
	}
	if !IsNil(o.DefaultVirtualEntityId) {
		toSerialize["defaultVirtualEntityId"] = o.DefaultVirtualEntityId
	}
	if !IsNil(o.VirtualEntityIds) {
		toSerialize["virtualEntityIds"] = o.VirtualEntityIds
	}
	if !IsNil(o.MetadataReloadSettings) {
		toSerialize["metadataReloadSettings"] = o.MetadataReloadSettings
	}
	if !IsNil(o.Credentials) {
		toSerialize["credentials"] = o.Credentials
	}
	if !IsNil(o.ContactInfo) {
		toSerialize["contactInfo"] = o.ContactInfo
	}
	if !IsNil(o.LicenseConnectionGroup) {
		toSerialize["licenseConnectionGroup"] = o.LicenseConnectionGroup
	}
	if !IsNil(o.LoggingMode) {
		toSerialize["loggingMode"] = o.LoggingMode
	}
	if !IsNil(o.AdditionalAllowedEntitiesConfiguration) {
		toSerialize["additionalAllowedEntitiesConfiguration"] = o.AdditionalAllowedEntitiesConfiguration
	}
	if !IsNil(o.ExtendedProperties) {
		toSerialize["extendedProperties"] = o.ExtendedProperties
	}
	if !IsNil(o.ReplicationStatus) {
		toSerialize["replicationStatus"] = o.ReplicationStatus
	}
	if !IsNil(o.OidcClientCredentials) {
		toSerialize["oidcClientCredentials"] = o.OidcClientCredentials
	}
	if !IsNil(o.IdpBrowserSso) {
		toSerialize["idpBrowserSso"] = o.IdpBrowserSso
	}
	if !IsNil(o.AttributeQuery) {
		toSerialize["attributeQuery"] = o.AttributeQuery
	}
	if !IsNil(o.IdpOAuthGrantAttributeMapping) {
		toSerialize["idpOAuthGrantAttributeMapping"] = o.IdpOAuthGrantAttributeMapping
	}
	if !IsNil(o.WsTrust) {
		toSerialize["wsTrust"] = o.WsTrust
	}
	if !IsNil(o.InboundProvisioning) {
		toSerialize["inboundProvisioning"] = o.InboundProvisioning
	}
	if !IsNil(o.ErrorPageMsgId) {
		toSerialize["errorPageMsgId"] = o.ErrorPageMsgId
	}
	return toSerialize, nil
}

func (o *IdpConnection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entityId",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdpConnection := _IdpConnection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varIdpConnection)

	if err != nil {
		return err
	}

	*o = IdpConnection(varIdpConnection)

	return err
}

type NullableIdpConnection struct {
	value *IdpConnection
	isSet bool
}

func (v NullableIdpConnection) Get() *IdpConnection {
	return v.value
}

func (v *NullableIdpConnection) Set(val *IdpConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableIdpConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableIdpConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdpConnection(val *IdpConnection) *NullableIdpConnection {
	return &NullableIdpConnection{value: val, isSet: true}
}

func (v NullableIdpConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdpConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
