/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AuthnContextMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthnContextMapping{}

// AuthnContextMapping The authentication context mapping between local and remote values.
type AuthnContextMapping struct {
	// The local authentication context value.
	Local *string `json:"local,omitempty" tfsdk:"local"`
	// The remote authentication context value.
	Remote *string `json:"remote,omitempty" tfsdk:"remote"`
}

// NewAuthnContextMapping instantiates a new AuthnContextMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthnContextMapping() *AuthnContextMapping {
	this := AuthnContextMapping{}
	return &this
}

// NewAuthnContextMappingWithDefaults instantiates a new AuthnContextMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthnContextMappingWithDefaults() *AuthnContextMapping {
	this := AuthnContextMapping{}
	return &this
}

// GetLocal returns the Local field value if set, zero value otherwise.
func (o *AuthnContextMapping) GetLocal() string {
	if o == nil || IsNil(o.Local) {
		var ret string
		return ret
	}
	return *o.Local
}

// GetLocalOk returns a tuple with the Local field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthnContextMapping) GetLocalOk() (*string, bool) {
	if o == nil || IsNil(o.Local) {
		return nil, false
	}
	return o.Local, true
}

// HasLocal returns a boolean if a field has been set.
func (o *AuthnContextMapping) HasLocal() bool {
	if o != nil && !IsNil(o.Local) {
		return true
	}

	return false
}

// SetLocal gets a reference to the given string and assigns it to the Local field.
func (o *AuthnContextMapping) SetLocal(v string) {
	o.Local = &v
}

// GetRemote returns the Remote field value if set, zero value otherwise.
func (o *AuthnContextMapping) GetRemote() string {
	if o == nil || IsNil(o.Remote) {
		var ret string
		return ret
	}
	return *o.Remote
}

// GetRemoteOk returns a tuple with the Remote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthnContextMapping) GetRemoteOk() (*string, bool) {
	if o == nil || IsNil(o.Remote) {
		return nil, false
	}
	return o.Remote, true
}

// HasRemote returns a boolean if a field has been set.
func (o *AuthnContextMapping) HasRemote() bool {
	if o != nil && !IsNil(o.Remote) {
		return true
	}

	return false
}

// SetRemote gets a reference to the given string and assigns it to the Remote field.
func (o *AuthnContextMapping) SetRemote(v string) {
	o.Remote = &v
}

func (o AuthnContextMapping) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthnContextMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Local) {
		toSerialize["local"] = o.Local
	}
	if !IsNil(o.Remote) {
		toSerialize["remote"] = o.Remote
	}
	return toSerialize, nil
}

type NullableAuthnContextMapping struct {
	value *AuthnContextMapping
	isSet bool
}

func (v NullableAuthnContextMapping) Get() *AuthnContextMapping {
	return v.value
}

func (v *NullableAuthnContextMapping) Set(val *AuthnContextMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthnContextMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthnContextMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthnContextMapping(val *AuthnContextMapping) *NullableAuthnContextMapping {
	return &NullableAuthnContextMapping{value: val, isSet: true}
}

func (v NullableAuthnContextMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthnContextMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
