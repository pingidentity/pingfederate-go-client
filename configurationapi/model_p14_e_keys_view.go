/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the P14EKeysView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &P14EKeysView{}

// P14EKeysView The collection of PingOne for Enterprise connection key pair details.
type P14EKeysView struct {
	// The key pairs used to authenticate to PingOne for Enterprise
	KeyPairs []P14EKeyPairView `json:"keyPairs,omitempty" tfsdk:"key_pairs"`
}

// NewP14EKeysView instantiates a new P14EKeysView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewP14EKeysView() *P14EKeysView {
	this := P14EKeysView{}
	return &this
}

// NewP14EKeysViewWithDefaults instantiates a new P14EKeysView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewP14EKeysViewWithDefaults() *P14EKeysView {
	this := P14EKeysView{}
	return &this
}

// GetKeyPairs returns the KeyPairs field value if set, zero value otherwise.
func (o *P14EKeysView) GetKeyPairs() []P14EKeyPairView {
	if o == nil || IsNil(o.KeyPairs) {
		var ret []P14EKeyPairView
		return ret
	}
	return o.KeyPairs
}

// GetKeyPairsOk returns a tuple with the KeyPairs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *P14EKeysView) GetKeyPairsOk() ([]P14EKeyPairView, bool) {
	if o == nil || IsNil(o.KeyPairs) {
		return nil, false
	}
	return o.KeyPairs, true
}

// HasKeyPairs returns a boolean if a field has been set.
func (o *P14EKeysView) HasKeyPairs() bool {
	if o != nil && !IsNil(o.KeyPairs) {
		return true
	}

	return false
}

// SetKeyPairs gets a reference to the given []P14EKeyPairView and assigns it to the KeyPairs field.
func (o *P14EKeysView) SetKeyPairs(v []P14EKeyPairView) {
	o.KeyPairs = v
}

func (o P14EKeysView) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o P14EKeysView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KeyPairs) {
		toSerialize["keyPairs"] = o.KeyPairs
	}
	return toSerialize, nil
}

type NullableP14EKeysView struct {
	value *P14EKeysView
	isSet bool
}

func (v NullableP14EKeysView) Get() *P14EKeysView {
	return v.value
}

func (v *NullableP14EKeysView) Set(val *P14EKeysView) {
	v.value = val
	v.isSet = true
}

func (v NullableP14EKeysView) IsSet() bool {
	return v.isSet
}

func (v *NullableP14EKeysView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableP14EKeysView(val *P14EKeysView) *NullableP14EKeysView {
	return &NullableP14EKeysView{value: val, isSet: true}
}

func (v NullableP14EKeysView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableP14EKeysView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
