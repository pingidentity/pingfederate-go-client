/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the SpAttributeQueryPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpAttributeQueryPolicy{}

// SpAttributeQueryPolicy The attribute query profile's security policy.
type SpAttributeQueryPolicy struct {
	// Sign the response.
	SignResponse *bool `json:"signResponse,omitempty"`
	// Sign the assertion.
	SignAssertion *bool `json:"signAssertion,omitempty"`
	// Encrypt the assertion.
	EncryptAssertion *bool `json:"encryptAssertion,omitempty"`
	// Require signed attribute query.
	RequireSignedAttributeQuery *bool `json:"requireSignedAttributeQuery,omitempty"`
	// Require an encrypted name identifier.
	RequireEncryptedNameId *bool `json:"requireEncryptedNameId,omitempty"`
}

// NewSpAttributeQueryPolicy instantiates a new SpAttributeQueryPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpAttributeQueryPolicy() *SpAttributeQueryPolicy {
	this := SpAttributeQueryPolicy{}
	return &this
}

// NewSpAttributeQueryPolicyWithDefaults instantiates a new SpAttributeQueryPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpAttributeQueryPolicyWithDefaults() *SpAttributeQueryPolicy {
	this := SpAttributeQueryPolicy{}
	return &this
}

// GetSignResponse returns the SignResponse field value if set, zero value otherwise.
func (o *SpAttributeQueryPolicy) GetSignResponse() bool {
	if o == nil || IsNil(o.SignResponse) {
		var ret bool
		return ret
	}
	return *o.SignResponse
}

// GetSignResponseOk returns a tuple with the SignResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpAttributeQueryPolicy) GetSignResponseOk() (*bool, bool) {
	if o == nil || IsNil(o.SignResponse) {
		return nil, false
	}
	return o.SignResponse, true
}

// HasSignResponse returns a boolean if a field has been set.
func (o *SpAttributeQueryPolicy) HasSignResponse() bool {
	if o != nil && !IsNil(o.SignResponse) {
		return true
	}

	return false
}

// SetSignResponse gets a reference to the given bool and assigns it to the SignResponse field.
func (o *SpAttributeQueryPolicy) SetSignResponse(v bool) {
	o.SignResponse = &v
}

// GetSignAssertion returns the SignAssertion field value if set, zero value otherwise.
func (o *SpAttributeQueryPolicy) GetSignAssertion() bool {
	if o == nil || IsNil(o.SignAssertion) {
		var ret bool
		return ret
	}
	return *o.SignAssertion
}

// GetSignAssertionOk returns a tuple with the SignAssertion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpAttributeQueryPolicy) GetSignAssertionOk() (*bool, bool) {
	if o == nil || IsNil(o.SignAssertion) {
		return nil, false
	}
	return o.SignAssertion, true
}

// HasSignAssertion returns a boolean if a field has been set.
func (o *SpAttributeQueryPolicy) HasSignAssertion() bool {
	if o != nil && !IsNil(o.SignAssertion) {
		return true
	}

	return false
}

// SetSignAssertion gets a reference to the given bool and assigns it to the SignAssertion field.
func (o *SpAttributeQueryPolicy) SetSignAssertion(v bool) {
	o.SignAssertion = &v
}

// GetEncryptAssertion returns the EncryptAssertion field value if set, zero value otherwise.
func (o *SpAttributeQueryPolicy) GetEncryptAssertion() bool {
	if o == nil || IsNil(o.EncryptAssertion) {
		var ret bool
		return ret
	}
	return *o.EncryptAssertion
}

// GetEncryptAssertionOk returns a tuple with the EncryptAssertion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpAttributeQueryPolicy) GetEncryptAssertionOk() (*bool, bool) {
	if o == nil || IsNil(o.EncryptAssertion) {
		return nil, false
	}
	return o.EncryptAssertion, true
}

// HasEncryptAssertion returns a boolean if a field has been set.
func (o *SpAttributeQueryPolicy) HasEncryptAssertion() bool {
	if o != nil && !IsNil(o.EncryptAssertion) {
		return true
	}

	return false
}

// SetEncryptAssertion gets a reference to the given bool and assigns it to the EncryptAssertion field.
func (o *SpAttributeQueryPolicy) SetEncryptAssertion(v bool) {
	o.EncryptAssertion = &v
}

// GetRequireSignedAttributeQuery returns the RequireSignedAttributeQuery field value if set, zero value otherwise.
func (o *SpAttributeQueryPolicy) GetRequireSignedAttributeQuery() bool {
	if o == nil || IsNil(o.RequireSignedAttributeQuery) {
		var ret bool
		return ret
	}
	return *o.RequireSignedAttributeQuery
}

// GetRequireSignedAttributeQueryOk returns a tuple with the RequireSignedAttributeQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpAttributeQueryPolicy) GetRequireSignedAttributeQueryOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireSignedAttributeQuery) {
		return nil, false
	}
	return o.RequireSignedAttributeQuery, true
}

// HasRequireSignedAttributeQuery returns a boolean if a field has been set.
func (o *SpAttributeQueryPolicy) HasRequireSignedAttributeQuery() bool {
	if o != nil && !IsNil(o.RequireSignedAttributeQuery) {
		return true
	}

	return false
}

// SetRequireSignedAttributeQuery gets a reference to the given bool and assigns it to the RequireSignedAttributeQuery field.
func (o *SpAttributeQueryPolicy) SetRequireSignedAttributeQuery(v bool) {
	o.RequireSignedAttributeQuery = &v
}

// GetRequireEncryptedNameId returns the RequireEncryptedNameId field value if set, zero value otherwise.
func (o *SpAttributeQueryPolicy) GetRequireEncryptedNameId() bool {
	if o == nil || IsNil(o.RequireEncryptedNameId) {
		var ret bool
		return ret
	}
	return *o.RequireEncryptedNameId
}

// GetRequireEncryptedNameIdOk returns a tuple with the RequireEncryptedNameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpAttributeQueryPolicy) GetRequireEncryptedNameIdOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireEncryptedNameId) {
		return nil, false
	}
	return o.RequireEncryptedNameId, true
}

// HasRequireEncryptedNameId returns a boolean if a field has been set.
func (o *SpAttributeQueryPolicy) HasRequireEncryptedNameId() bool {
	if o != nil && !IsNil(o.RequireEncryptedNameId) {
		return true
	}

	return false
}

// SetRequireEncryptedNameId gets a reference to the given bool and assigns it to the RequireEncryptedNameId field.
func (o *SpAttributeQueryPolicy) SetRequireEncryptedNameId(v bool) {
	o.RequireEncryptedNameId = &v
}

func (o SpAttributeQueryPolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpAttributeQueryPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SignResponse) {
		toSerialize["signResponse"] = o.SignResponse
	}
	if !IsNil(o.SignAssertion) {
		toSerialize["signAssertion"] = o.SignAssertion
	}
	if !IsNil(o.EncryptAssertion) {
		toSerialize["encryptAssertion"] = o.EncryptAssertion
	}
	if !IsNil(o.RequireSignedAttributeQuery) {
		toSerialize["requireSignedAttributeQuery"] = o.RequireSignedAttributeQuery
	}
	if !IsNil(o.RequireEncryptedNameId) {
		toSerialize["requireEncryptedNameId"] = o.RequireEncryptedNameId
	}
	return toSerialize, nil
}

type NullableSpAttributeQueryPolicy struct {
	value *SpAttributeQueryPolicy
	isSet bool
}

func (v NullableSpAttributeQueryPolicy) Get() *SpAttributeQueryPolicy {
	return v.value
}

func (v *NullableSpAttributeQueryPolicy) Set(val *SpAttributeQueryPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableSpAttributeQueryPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableSpAttributeQueryPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpAttributeQueryPolicy(val *SpAttributeQueryPolicy) *NullableSpAttributeQueryPolicy {
	return &NullableSpAttributeQueryPolicy{value: val, isSet: true}
}

func (v NullableSpAttributeQueryPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpAttributeQueryPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
