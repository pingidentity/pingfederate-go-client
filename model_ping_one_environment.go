/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the PingOneEnvironment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PingOneEnvironment{}

// PingOneEnvironment struct for PingOneEnvironment
type PingOneEnvironment struct {
	// The name of the environment
	Name *string `json:"name,omitempty"`
	// The ID of the environment
	Id *string `json:"id,omitempty"`
	// The type of the environment
	Type *string `json:"type,omitempty"`
}

// NewPingOneEnvironment instantiates a new PingOneEnvironment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPingOneEnvironment() *PingOneEnvironment {
	this := PingOneEnvironment{}
	return &this
}

// NewPingOneEnvironmentWithDefaults instantiates a new PingOneEnvironment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPingOneEnvironmentWithDefaults() *PingOneEnvironment {
	this := PingOneEnvironment{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PingOneEnvironment) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneEnvironment) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PingOneEnvironment) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PingOneEnvironment) SetName(v string) {
	o.Name = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PingOneEnvironment) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneEnvironment) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PingOneEnvironment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PingOneEnvironment) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PingOneEnvironment) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneEnvironment) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PingOneEnvironment) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PingOneEnvironment) SetType(v string) {
	o.Type = &v
}

func (o PingOneEnvironment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PingOneEnvironment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullablePingOneEnvironment struct {
	value *PingOneEnvironment
	isSet bool
}

func (v NullablePingOneEnvironment) Get() *PingOneEnvironment {
	return v.value
}

func (v *NullablePingOneEnvironment) Set(val *PingOneEnvironment) {
	v.value = val
	v.isSet = true
}

func (v NullablePingOneEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullablePingOneEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePingOneEnvironment(val *PingOneEnvironment) *NullablePingOneEnvironment {
	return &NullablePingOneEnvironment{value: val, isSet: true}
}

func (v NullablePingOneEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePingOneEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
