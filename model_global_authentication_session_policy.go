/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the GlobalAuthenticationSessionPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalAuthenticationSessionPolicy{}

// GlobalAuthenticationSessionPolicy The global policy for authentication sessions.
type GlobalAuthenticationSessionPolicy struct {
	// Determines whether authentication sessions are enabled globally.
	EnableSessions bool `json:"enableSessions" tfsdk:"enable_sessions"`
	// Determines whether authentication sessions are persistent by default. Persistent sessions are linked to a persistent cookie and stored in a data store. This field is ignored if enableSessions is false.
	PersistentSessions *bool `json:"persistentSessions,omitempty" tfsdk:"persistent_sessions"`
	// Determines whether to hash the value of the unique user key attribute.
	HashUniqueUserKeyAttribute *bool `json:"hashUniqueUserKeyAttribute,omitempty" tfsdk:"hash_unique_user_key_attribute"`
	// The idle timeout period, in minutes. If set to -1, the idle timeout will be set to the maximum timeout. The default is 60.
	IdleTimeoutMins *int64 `json:"idleTimeoutMins,omitempty" tfsdk:"idle_timeout_mins"`
	// The display unit for the idle timeout period in the PingFederate administrative console. When the display unit is HOURS or DAYS, the timeout value in minutes must correspond to a whole number value for the specified unit.
	IdleTimeoutDisplayUnit *string `json:"idleTimeoutDisplayUnit,omitempty" tfsdk:"idle_timeout_display_unit"`
	// The maximum timeout period, in minutes. If set to -1, sessions do not expire. The default is 480.
	MaxTimeoutMins *int64 `json:"maxTimeoutMins,omitempty" tfsdk:"max_timeout_mins"`
	// The display unit for the maximum timeout period in the PingFederate administrative console. When the display unit is HOURS or DAYS, the timeout value in minutes must correspond to a whole number value for the specified unit.
	MaxTimeoutDisplayUnit *string `json:"maxTimeoutDisplayUnit,omitempty" tfsdk:"max_timeout_display_unit"`
}

// NewGlobalAuthenticationSessionPolicy instantiates a new GlobalAuthenticationSessionPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalAuthenticationSessionPolicy(enableSessions bool) *GlobalAuthenticationSessionPolicy {
	this := GlobalAuthenticationSessionPolicy{}
	this.EnableSessions = enableSessions
	return &this
}

// NewGlobalAuthenticationSessionPolicyWithDefaults instantiates a new GlobalAuthenticationSessionPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalAuthenticationSessionPolicyWithDefaults() *GlobalAuthenticationSessionPolicy {
	this := GlobalAuthenticationSessionPolicy{}
	return &this
}

// GetEnableSessions returns the EnableSessions field value
func (o *GlobalAuthenticationSessionPolicy) GetEnableSessions() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnableSessions
}

// GetEnableSessionsOk returns a tuple with the EnableSessions field value
// and a boolean to check if the value has been set.
func (o *GlobalAuthenticationSessionPolicy) GetEnableSessionsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnableSessions, true
}

// SetEnableSessions sets field value
func (o *GlobalAuthenticationSessionPolicy) SetEnableSessions(v bool) {
	o.EnableSessions = v
}

// GetPersistentSessions returns the PersistentSessions field value if set, zero value otherwise.
func (o *GlobalAuthenticationSessionPolicy) GetPersistentSessions() bool {
	if o == nil || IsNil(o.PersistentSessions) {
		var ret bool
		return ret
	}
	return *o.PersistentSessions
}

// GetPersistentSessionsOk returns a tuple with the PersistentSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAuthenticationSessionPolicy) GetPersistentSessionsOk() (*bool, bool) {
	if o == nil || IsNil(o.PersistentSessions) {
		return nil, false
	}
	return o.PersistentSessions, true
}

// HasPersistentSessions returns a boolean if a field has been set.
func (o *GlobalAuthenticationSessionPolicy) HasPersistentSessions() bool {
	if o != nil && !IsNil(o.PersistentSessions) {
		return true
	}

	return false
}

// SetPersistentSessions gets a reference to the given bool and assigns it to the PersistentSessions field.
func (o *GlobalAuthenticationSessionPolicy) SetPersistentSessions(v bool) {
	o.PersistentSessions = &v
}

// GetHashUniqueUserKeyAttribute returns the HashUniqueUserKeyAttribute field value if set, zero value otherwise.
func (o *GlobalAuthenticationSessionPolicy) GetHashUniqueUserKeyAttribute() bool {
	if o == nil || IsNil(o.HashUniqueUserKeyAttribute) {
		var ret bool
		return ret
	}
	return *o.HashUniqueUserKeyAttribute
}

// GetHashUniqueUserKeyAttributeOk returns a tuple with the HashUniqueUserKeyAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAuthenticationSessionPolicy) GetHashUniqueUserKeyAttributeOk() (*bool, bool) {
	if o == nil || IsNil(o.HashUniqueUserKeyAttribute) {
		return nil, false
	}
	return o.HashUniqueUserKeyAttribute, true
}

// HasHashUniqueUserKeyAttribute returns a boolean if a field has been set.
func (o *GlobalAuthenticationSessionPolicy) HasHashUniqueUserKeyAttribute() bool {
	if o != nil && !IsNil(o.HashUniqueUserKeyAttribute) {
		return true
	}

	return false
}

// SetHashUniqueUserKeyAttribute gets a reference to the given bool and assigns it to the HashUniqueUserKeyAttribute field.
func (o *GlobalAuthenticationSessionPolicy) SetHashUniqueUserKeyAttribute(v bool) {
	o.HashUniqueUserKeyAttribute = &v
}

// GetIdleTimeoutMins returns the IdleTimeoutMins field value if set, zero value otherwise.
func (o *GlobalAuthenticationSessionPolicy) GetIdleTimeoutMins() int64 {
	if o == nil || IsNil(o.IdleTimeoutMins) {
		var ret int64
		return ret
	}
	return *o.IdleTimeoutMins
}

// GetIdleTimeoutMinsOk returns a tuple with the IdleTimeoutMins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAuthenticationSessionPolicy) GetIdleTimeoutMinsOk() (*int64, bool) {
	if o == nil || IsNil(o.IdleTimeoutMins) {
		return nil, false
	}
	return o.IdleTimeoutMins, true
}

// HasIdleTimeoutMins returns a boolean if a field has been set.
func (o *GlobalAuthenticationSessionPolicy) HasIdleTimeoutMins() bool {
	if o != nil && !IsNil(o.IdleTimeoutMins) {
		return true
	}

	return false
}

// SetIdleTimeoutMins gets a reference to the given int64 and assigns it to the IdleTimeoutMins field.
func (o *GlobalAuthenticationSessionPolicy) SetIdleTimeoutMins(v int64) {
	o.IdleTimeoutMins = &v
}

// GetIdleTimeoutDisplayUnit returns the IdleTimeoutDisplayUnit field value if set, zero value otherwise.
func (o *GlobalAuthenticationSessionPolicy) GetIdleTimeoutDisplayUnit() string {
	if o == nil || IsNil(o.IdleTimeoutDisplayUnit) {
		var ret string
		return ret
	}
	return *o.IdleTimeoutDisplayUnit
}

// GetIdleTimeoutDisplayUnitOk returns a tuple with the IdleTimeoutDisplayUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAuthenticationSessionPolicy) GetIdleTimeoutDisplayUnitOk() (*string, bool) {
	if o == nil || IsNil(o.IdleTimeoutDisplayUnit) {
		return nil, false
	}
	return o.IdleTimeoutDisplayUnit, true
}

// HasIdleTimeoutDisplayUnit returns a boolean if a field has been set.
func (o *GlobalAuthenticationSessionPolicy) HasIdleTimeoutDisplayUnit() bool {
	if o != nil && !IsNil(o.IdleTimeoutDisplayUnit) {
		return true
	}

	return false
}

// SetIdleTimeoutDisplayUnit gets a reference to the given string and assigns it to the IdleTimeoutDisplayUnit field.
func (o *GlobalAuthenticationSessionPolicy) SetIdleTimeoutDisplayUnit(v string) {
	o.IdleTimeoutDisplayUnit = &v
}

// GetMaxTimeoutMins returns the MaxTimeoutMins field value if set, zero value otherwise.
func (o *GlobalAuthenticationSessionPolicy) GetMaxTimeoutMins() int64 {
	if o == nil || IsNil(o.MaxTimeoutMins) {
		var ret int64
		return ret
	}
	return *o.MaxTimeoutMins
}

// GetMaxTimeoutMinsOk returns a tuple with the MaxTimeoutMins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAuthenticationSessionPolicy) GetMaxTimeoutMinsOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxTimeoutMins) {
		return nil, false
	}
	return o.MaxTimeoutMins, true
}

// HasMaxTimeoutMins returns a boolean if a field has been set.
func (o *GlobalAuthenticationSessionPolicy) HasMaxTimeoutMins() bool {
	if o != nil && !IsNil(o.MaxTimeoutMins) {
		return true
	}

	return false
}

// SetMaxTimeoutMins gets a reference to the given int64 and assigns it to the MaxTimeoutMins field.
func (o *GlobalAuthenticationSessionPolicy) SetMaxTimeoutMins(v int64) {
	o.MaxTimeoutMins = &v
}

// GetMaxTimeoutDisplayUnit returns the MaxTimeoutDisplayUnit field value if set, zero value otherwise.
func (o *GlobalAuthenticationSessionPolicy) GetMaxTimeoutDisplayUnit() string {
	if o == nil || IsNil(o.MaxTimeoutDisplayUnit) {
		var ret string
		return ret
	}
	return *o.MaxTimeoutDisplayUnit
}

// GetMaxTimeoutDisplayUnitOk returns a tuple with the MaxTimeoutDisplayUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAuthenticationSessionPolicy) GetMaxTimeoutDisplayUnitOk() (*string, bool) {
	if o == nil || IsNil(o.MaxTimeoutDisplayUnit) {
		return nil, false
	}
	return o.MaxTimeoutDisplayUnit, true
}

// HasMaxTimeoutDisplayUnit returns a boolean if a field has been set.
func (o *GlobalAuthenticationSessionPolicy) HasMaxTimeoutDisplayUnit() bool {
	if o != nil && !IsNil(o.MaxTimeoutDisplayUnit) {
		return true
	}

	return false
}

// SetMaxTimeoutDisplayUnit gets a reference to the given string and assigns it to the MaxTimeoutDisplayUnit field.
func (o *GlobalAuthenticationSessionPolicy) SetMaxTimeoutDisplayUnit(v string) {
	o.MaxTimeoutDisplayUnit = &v
}

func (o GlobalAuthenticationSessionPolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalAuthenticationSessionPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enableSessions"] = o.EnableSessions
	if !IsNil(o.PersistentSessions) {
		toSerialize["persistentSessions"] = o.PersistentSessions
	}
	if !IsNil(o.HashUniqueUserKeyAttribute) {
		toSerialize["hashUniqueUserKeyAttribute"] = o.HashUniqueUserKeyAttribute
	}
	if !IsNil(o.IdleTimeoutMins) {
		toSerialize["idleTimeoutMins"] = o.IdleTimeoutMins
	}
	if !IsNil(o.IdleTimeoutDisplayUnit) {
		toSerialize["idleTimeoutDisplayUnit"] = o.IdleTimeoutDisplayUnit
	}
	if !IsNil(o.MaxTimeoutMins) {
		toSerialize["maxTimeoutMins"] = o.MaxTimeoutMins
	}
	if !IsNil(o.MaxTimeoutDisplayUnit) {
		toSerialize["maxTimeoutDisplayUnit"] = o.MaxTimeoutDisplayUnit
	}
	return toSerialize, nil
}

type NullableGlobalAuthenticationSessionPolicy struct {
	value *GlobalAuthenticationSessionPolicy
	isSet bool
}

func (v NullableGlobalAuthenticationSessionPolicy) Get() *GlobalAuthenticationSessionPolicy {
	return v.value
}

func (v *NullableGlobalAuthenticationSessionPolicy) Set(val *GlobalAuthenticationSessionPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalAuthenticationSessionPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalAuthenticationSessionPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalAuthenticationSessionPolicy(val *GlobalAuthenticationSessionPolicy) *NullableGlobalAuthenticationSessionPolicy {
	return &NullableGlobalAuthenticationSessionPolicy{value: val, isSet: true}
}

func (v NullableGlobalAuthenticationSessionPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalAuthenticationSessionPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
