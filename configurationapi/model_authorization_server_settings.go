/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// checks if the AuthorizationServerSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizationServerSettings{}

// AuthorizationServerSettings Authorization Server Settings attributes.
type AuthorizationServerSettings struct {
	// The default scope description.
	DefaultScopeDescription string `json:"defaultScopeDescription" tfsdk:"default_scope_description"`
	// The list of common scopes.
	Scopes []ScopeEntry `json:"scopes,omitempty" tfsdk:"scopes"`
	// The list of common scope groups.
	ScopeGroups []ScopeGroupEntry `json:"scopeGroups,omitempty" tfsdk:"scope_groups"`
	// The list of exclusive scopes.
	ExclusiveScopes []ScopeEntry `json:"exclusiveScopes,omitempty" tfsdk:"exclusive_scopes"`
	// The list of exclusive scope groups.
	ExclusiveScopeGroups []ScopeGroupEntry `json:"exclusiveScopeGroups,omitempty" tfsdk:"exclusive_scope_groups"`
	// The authorization code timeout, in seconds.
	AuthorizationCodeTimeout int64 `json:"authorizationCodeTimeout" tfsdk:"authorization_code_timeout"`
	// The authorization code entropy, in bytes.
	AuthorizationCodeEntropy int64 `json:"authorizationCodeEntropy" tfsdk:"authorization_code_entropy"`
	// Determines whether PKCE's 'plain' code challenge method will be disallowed. The default value is false.
	DisallowPlainPKCE *bool `json:"disallowPlainPKCE,omitempty" tfsdk:"disallow_plain_pkce"`
	// Determines whether the authorization server's issuer value is added to the authorization response or not. The default value is false.
	IncludeIssuerInAuthorizationResponse *bool `json:"includeIssuerInAuthorizationResponse,omitempty" tfsdk:"include_issuer_in_authorization_response"`
	// Determines whether user sessions are tracked for logout. If this property is not provided on a PUT, the setting is left unchanged.
	TrackUserSessionsForLogout *bool `json:"trackUserSessionsForLogout,omitempty" tfsdk:"track_user_sessions_for_logout"`
	// The token endpoint base URL used to validate the 'aud' claim during Private Key JWT Client Authentication.
	TokenEndpointBaseUrl *string `json:"tokenEndpointBaseUrl,omitempty" tfsdk:"token_endpoint_base_url"`
	// The persistent grant lifetime. The default value is indefinite. -1 indicates an indefinite amount of time.
	PersistentGrantLifetime *int64 `json:"persistentGrantLifetime,omitempty" tfsdk:"persistent_grant_lifetime"`
	// The persistent grant lifetime unit.
	PersistentGrantLifetimeUnit *string `json:"persistentGrantLifetimeUnit,omitempty" tfsdk:"persistent_grant_lifetime_unit"`
	// The persistent grant idle timeout. The default value is 30 (days). -1 indicates an indefinite amount of time.
	PersistentGrantIdleTimeout *int64 `json:"persistentGrantIdleTimeout,omitempty" tfsdk:"persistent_grant_idle_timeout"`
	// The persistent grant idle timeout time unit.
	PersistentGrantIdleTimeoutTimeUnit *string `json:"persistentGrantIdleTimeoutTimeUnit,omitempty" tfsdk:"persistent_grant_idle_timeout_time_unit"`
	// The refresh token length in number of characters.
	RefreshTokenLength int64 `json:"refreshTokenLength" tfsdk:"refresh_token_length"`
	// The roll refresh token values default policy. The default value is true.
	RollRefreshTokenValues *bool `json:"rollRefreshTokenValues,omitempty" tfsdk:"roll_refresh_token_values"`
	// The grace period that a rolled refresh token remains valid in seconds. The default value is 60.
	RefreshTokenRollingGracePeriod *int64 `json:"refreshTokenRollingGracePeriod,omitempty" tfsdk:"refresh_token_rolling_grace_period"`
	// The minimum interval to roll refresh tokens, in hours.
	RefreshRollingInterval int64 `json:"refreshRollingInterval" tfsdk:"refresh_rolling_interval"`
	// The grant types that the OAuth AS can reuse rather than creating a new grant for each request. Only 'IMPLICIT' or 'AUTHORIZATION_CODE' or 'RESOURCE_OWNER_CREDENTIALS' are valid grant types.
	PersistentGrantReuseGrantTypes []string                 `json:"persistentGrantReuseGrantTypes,omitempty" tfsdk:"persistent_grant_reuse_grant_types"`
	PersistentGrantContract        *PersistentGrantContract `json:"persistentGrantContract,omitempty" tfsdk:"persistent_grant_contract"`
	// Bypass authorization for previously approved persistent grants. The default value is false.
	BypassAuthorizationForApprovedGrants *bool `json:"bypassAuthorizationForApprovedGrants,omitempty" tfsdk:"bypass_authorization_for_approved_grants"`
	// Bypass authorization for previously approved consents. The default value is false.
	BypassAuthorizationForApprovedConsents *bool `json:"bypassAuthorizationForApprovedConsents,omitempty" tfsdk:"bypass_authorization_for_approved_consents"`
	// The consent lifetime in days. The default value is indefinite. -1 indicates an indefinite amount of time.
	ConsentLifetimeDays *int64 `json:"consentLifetimeDays,omitempty" tfsdk:"consent_lifetime_days"`
	// Allow unidentified clients to request resource owner password credentials grants. The default value is false.
	AllowUnidentifiedClientROCreds *bool `json:"allowUnidentifiedClientROCreds,omitempty" tfsdk:"allow_unidentified_client_roc_reds"`
	// Allow unidentified clients to request extension grants. The default value is false.
	AllowUnidentifiedClientExtensionGrants *bool         `json:"allowUnidentifiedClientExtensionGrants,omitempty" tfsdk:"allow_unidentified_client_extension_grants"`
	AdminWebServicePcvRef                  *ResourceLink `json:"adminWebServicePcvRef,omitempty" tfsdk:"admin_web_service_pcv_ref"`
	// The ID of the Access Token Manager used for OAuth enabled grant management.
	AtmIdForOAuthGrantManagement *string `json:"atmIdForOAuthGrantManagement,omitempty" tfsdk:"atm_id_for_oauth_grant_management"`
	// The OAuth scope to validate when accessing grant management service.
	ScopeForOAuthGrantManagement *string `json:"scopeForOAuthGrantManagement,omitempty" tfsdk:"scope_for_oauth_grant_management"`
	// The list of allowed origins.
	AllowedOrigins []string `json:"allowedOrigins,omitempty" tfsdk:"allowed_origins"`
	// The URL used to generate 'verification_url' and 'verification_url_complete' values in a Device Authorization request
	UserAuthorizationUrl *string `json:"userAuthorizationUrl,omitempty" tfsdk:"user_authorization_url"`
	// The Registered Authorization Path is concatenated to PingFederate base URL to generate 'verification_url' and 'verification_url_complete' values in a Device Authorization request. PingFederate listens to this path if specified
	RegisteredAuthorizationPath string `json:"registeredAuthorizationPath" tfsdk:"registered_authorization_path"`
	// The 'device_code' and 'user_code' timeout, in seconds.
	PendingAuthorizationTimeout int64 `json:"pendingAuthorizationTimeout" tfsdk:"pending_authorization_timeout"`
	// The amount of time client should wait between polling requests, in seconds.
	DevicePollingInterval int64 `json:"devicePollingInterval" tfsdk:"device_polling_interval"`
	// Determines whether the user is prompted to enter or confirm the activation code after authenticating or before. The default is AFTER_AUTHENTICATION.
	ActivationCodeCheckMode *string `json:"activationCodeCheckMode,omitempty" tfsdk:"activation_code_check_mode"`
	// Indicates if the Activation Code Confirmation page should be bypassed if 'verification_url_complete' is used by the end user to authorize a device.
	BypassActivationCodeConfirmation bool `json:"bypassActivationCodeConfirmation" tfsdk:"bypass_activation_code_confirmation"`
	// User Authorization Consent Page setting to use PingFederate's internal consent page or an external system
	UserAuthorizationConsentPageSetting *string `json:"userAuthorizationConsentPageSetting,omitempty" tfsdk:"user_authorization_consent_page_setting"`
	// Adapter ID of the external consent adapter to be used for the consent page user interface.
	UserAuthorizationConsentAdapter *string `json:"userAuthorizationConsentAdapter,omitempty" tfsdk:"user_authorization_consent_adapter"`
	// Attribute from the external consent adapter's contract, intended for storing approved scopes returned by the external consent page.
	ApprovedScopesAttribute *string `json:"approvedScopesAttribute,omitempty" tfsdk:"approved_scopes_attribute"`
	// Attribute from the external consent adapter's contract, intended for storing approved authorization details returned by the external consent page.
	ApprovedAuthorizationDetailAttribute *string `json:"approvedAuthorizationDetailAttribute,omitempty" tfsdk:"approved_authorization_detail_attribute"`
	// The timeout, in seconds, of the pushed authorization request reference. The default value is 60.
	ParReferenceTimeout *int64 `json:"parReferenceTimeout,omitempty" tfsdk:"par_reference_timeout"`
	// The entropy of pushed authorization request references, in bytes. The default value is 24.
	ParReferenceLength *int64 `json:"parReferenceLength,omitempty" tfsdk:"par_reference_length"`
	// The status of pushed authorization request support. The default value is ENABLED.
	ParStatus *string `json:"parStatus,omitempty" tfsdk:"par_status"`
	// The length of time in minutes that client secrets will be retained as secondary secrets after secret change. The default value is 0, which will disable secondary client secret retention.
	ClientSecretRetentionPeriod *int64 `json:"clientSecretRetentionPeriod,omitempty" tfsdk:"client_secret_retention_period"`
	// The lifetime, in seconds, of the JWT Secured authorization response. The default value is 600.
	JwtSecuredAuthorizationResponseModeLifetime *int64 `json:"jwtSecuredAuthorizationResponseModeLifetime,omitempty" tfsdk:"jwt_secured_authorization_response_mode_lifetime"`
	// Determines whether nonce is required in the Demonstrating Proof-of-Possession (DPoP) proof JWT. The default value is false.
	DpopProofRequireNonce *bool `json:"dpopProofRequireNonce,omitempty" tfsdk:"dpop_proof_require_nonce"`
	// The lifetime, in seconds, of the Demonstrating Proof-of-Possession (DPoP) proof JWT. The default value is 120.
	DpopProofLifetimeSeconds *int64 `json:"dpopProofLifetimeSeconds,omitempty" tfsdk:"dpop_proof_lifetime_seconds"`
	// Determines whether Demonstrating Proof-of-Possession (DPoP) proof JWT replay prevention is enforced. The default value is false.
	DpopProofEnforceReplayPrevention *bool `json:"dpopProofEnforceReplayPrevention,omitempty" tfsdk:"dpop_proof_enforce_replay_prevention"`
}

type _AuthorizationServerSettings AuthorizationServerSettings

// NewAuthorizationServerSettings instantiates a new AuthorizationServerSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizationServerSettings(defaultScopeDescription string, authorizationCodeTimeout int64, authorizationCodeEntropy int64, refreshTokenLength int64, refreshRollingInterval int64, registeredAuthorizationPath string, pendingAuthorizationTimeout int64, devicePollingInterval int64, bypassActivationCodeConfirmation bool) *AuthorizationServerSettings {
	this := AuthorizationServerSettings{}
	this.DefaultScopeDescription = defaultScopeDescription
	this.AuthorizationCodeTimeout = authorizationCodeTimeout
	this.AuthorizationCodeEntropy = authorizationCodeEntropy
	this.RefreshTokenLength = refreshTokenLength
	this.RefreshRollingInterval = refreshRollingInterval
	this.RegisteredAuthorizationPath = registeredAuthorizationPath
	this.PendingAuthorizationTimeout = pendingAuthorizationTimeout
	this.DevicePollingInterval = devicePollingInterval
	this.BypassActivationCodeConfirmation = bypassActivationCodeConfirmation
	return &this
}

// NewAuthorizationServerSettingsWithDefaults instantiates a new AuthorizationServerSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizationServerSettingsWithDefaults() *AuthorizationServerSettings {
	this := AuthorizationServerSettings{}
	return &this
}

// GetDefaultScopeDescription returns the DefaultScopeDescription field value
func (o *AuthorizationServerSettings) GetDefaultScopeDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultScopeDescription
}

// GetDefaultScopeDescriptionOk returns a tuple with the DefaultScopeDescription field value
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetDefaultScopeDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultScopeDescription, true
}

// SetDefaultScopeDescription sets field value
func (o *AuthorizationServerSettings) SetDefaultScopeDescription(v string) {
	o.DefaultScopeDescription = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetScopes() []ScopeEntry {
	if o == nil || IsNil(o.Scopes) {
		var ret []ScopeEntry
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetScopesOk() ([]ScopeEntry, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []ScopeEntry and assigns it to the Scopes field.
func (o *AuthorizationServerSettings) SetScopes(v []ScopeEntry) {
	o.Scopes = v
}

// GetScopeGroups returns the ScopeGroups field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetScopeGroups() []ScopeGroupEntry {
	if o == nil || IsNil(o.ScopeGroups) {
		var ret []ScopeGroupEntry
		return ret
	}
	return o.ScopeGroups
}

// GetScopeGroupsOk returns a tuple with the ScopeGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetScopeGroupsOk() ([]ScopeGroupEntry, bool) {
	if o == nil || IsNil(o.ScopeGroups) {
		return nil, false
	}
	return o.ScopeGroups, true
}

// HasScopeGroups returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasScopeGroups() bool {
	if o != nil && !IsNil(o.ScopeGroups) {
		return true
	}

	return false
}

// SetScopeGroups gets a reference to the given []ScopeGroupEntry and assigns it to the ScopeGroups field.
func (o *AuthorizationServerSettings) SetScopeGroups(v []ScopeGroupEntry) {
	o.ScopeGroups = v
}

// GetExclusiveScopes returns the ExclusiveScopes field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetExclusiveScopes() []ScopeEntry {
	if o == nil || IsNil(o.ExclusiveScopes) {
		var ret []ScopeEntry
		return ret
	}
	return o.ExclusiveScopes
}

// GetExclusiveScopesOk returns a tuple with the ExclusiveScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetExclusiveScopesOk() ([]ScopeEntry, bool) {
	if o == nil || IsNil(o.ExclusiveScopes) {
		return nil, false
	}
	return o.ExclusiveScopes, true
}

// HasExclusiveScopes returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasExclusiveScopes() bool {
	if o != nil && !IsNil(o.ExclusiveScopes) {
		return true
	}

	return false
}

// SetExclusiveScopes gets a reference to the given []ScopeEntry and assigns it to the ExclusiveScopes field.
func (o *AuthorizationServerSettings) SetExclusiveScopes(v []ScopeEntry) {
	o.ExclusiveScopes = v
}

// GetExclusiveScopeGroups returns the ExclusiveScopeGroups field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetExclusiveScopeGroups() []ScopeGroupEntry {
	if o == nil || IsNil(o.ExclusiveScopeGroups) {
		var ret []ScopeGroupEntry
		return ret
	}
	return o.ExclusiveScopeGroups
}

// GetExclusiveScopeGroupsOk returns a tuple with the ExclusiveScopeGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetExclusiveScopeGroupsOk() ([]ScopeGroupEntry, bool) {
	if o == nil || IsNil(o.ExclusiveScopeGroups) {
		return nil, false
	}
	return o.ExclusiveScopeGroups, true
}

// HasExclusiveScopeGroups returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasExclusiveScopeGroups() bool {
	if o != nil && !IsNil(o.ExclusiveScopeGroups) {
		return true
	}

	return false
}

// SetExclusiveScopeGroups gets a reference to the given []ScopeGroupEntry and assigns it to the ExclusiveScopeGroups field.
func (o *AuthorizationServerSettings) SetExclusiveScopeGroups(v []ScopeGroupEntry) {
	o.ExclusiveScopeGroups = v
}

// GetAuthorizationCodeTimeout returns the AuthorizationCodeTimeout field value
func (o *AuthorizationServerSettings) GetAuthorizationCodeTimeout() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AuthorizationCodeTimeout
}

// GetAuthorizationCodeTimeoutOk returns a tuple with the AuthorizationCodeTimeout field value
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetAuthorizationCodeTimeoutOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorizationCodeTimeout, true
}

// SetAuthorizationCodeTimeout sets field value
func (o *AuthorizationServerSettings) SetAuthorizationCodeTimeout(v int64) {
	o.AuthorizationCodeTimeout = v
}

// GetAuthorizationCodeEntropy returns the AuthorizationCodeEntropy field value
func (o *AuthorizationServerSettings) GetAuthorizationCodeEntropy() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AuthorizationCodeEntropy
}

// GetAuthorizationCodeEntropyOk returns a tuple with the AuthorizationCodeEntropy field value
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetAuthorizationCodeEntropyOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorizationCodeEntropy, true
}

// SetAuthorizationCodeEntropy sets field value
func (o *AuthorizationServerSettings) SetAuthorizationCodeEntropy(v int64) {
	o.AuthorizationCodeEntropy = v
}

// GetDisallowPlainPKCE returns the DisallowPlainPKCE field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetDisallowPlainPKCE() bool {
	if o == nil || IsNil(o.DisallowPlainPKCE) {
		var ret bool
		return ret
	}
	return *o.DisallowPlainPKCE
}

// GetDisallowPlainPKCEOk returns a tuple with the DisallowPlainPKCE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetDisallowPlainPKCEOk() (*bool, bool) {
	if o == nil || IsNil(o.DisallowPlainPKCE) {
		return nil, false
	}
	return o.DisallowPlainPKCE, true
}

// HasDisallowPlainPKCE returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasDisallowPlainPKCE() bool {
	if o != nil && !IsNil(o.DisallowPlainPKCE) {
		return true
	}

	return false
}

// SetDisallowPlainPKCE gets a reference to the given bool and assigns it to the DisallowPlainPKCE field.
func (o *AuthorizationServerSettings) SetDisallowPlainPKCE(v bool) {
	o.DisallowPlainPKCE = &v
}

// GetIncludeIssuerInAuthorizationResponse returns the IncludeIssuerInAuthorizationResponse field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetIncludeIssuerInAuthorizationResponse() bool {
	if o == nil || IsNil(o.IncludeIssuerInAuthorizationResponse) {
		var ret bool
		return ret
	}
	return *o.IncludeIssuerInAuthorizationResponse
}

// GetIncludeIssuerInAuthorizationResponseOk returns a tuple with the IncludeIssuerInAuthorizationResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetIncludeIssuerInAuthorizationResponseOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeIssuerInAuthorizationResponse) {
		return nil, false
	}
	return o.IncludeIssuerInAuthorizationResponse, true
}

// HasIncludeIssuerInAuthorizationResponse returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasIncludeIssuerInAuthorizationResponse() bool {
	if o != nil && !IsNil(o.IncludeIssuerInAuthorizationResponse) {
		return true
	}

	return false
}

// SetIncludeIssuerInAuthorizationResponse gets a reference to the given bool and assigns it to the IncludeIssuerInAuthorizationResponse field.
func (o *AuthorizationServerSettings) SetIncludeIssuerInAuthorizationResponse(v bool) {
	o.IncludeIssuerInAuthorizationResponse = &v
}

// GetTrackUserSessionsForLogout returns the TrackUserSessionsForLogout field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetTrackUserSessionsForLogout() bool {
	if o == nil || IsNil(o.TrackUserSessionsForLogout) {
		var ret bool
		return ret
	}
	return *o.TrackUserSessionsForLogout
}

// GetTrackUserSessionsForLogoutOk returns a tuple with the TrackUserSessionsForLogout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetTrackUserSessionsForLogoutOk() (*bool, bool) {
	if o == nil || IsNil(o.TrackUserSessionsForLogout) {
		return nil, false
	}
	return o.TrackUserSessionsForLogout, true
}

// HasTrackUserSessionsForLogout returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasTrackUserSessionsForLogout() bool {
	if o != nil && !IsNil(o.TrackUserSessionsForLogout) {
		return true
	}

	return false
}

// SetTrackUserSessionsForLogout gets a reference to the given bool and assigns it to the TrackUserSessionsForLogout field.
func (o *AuthorizationServerSettings) SetTrackUserSessionsForLogout(v bool) {
	o.TrackUserSessionsForLogout = &v
}

// GetTokenEndpointBaseUrl returns the TokenEndpointBaseUrl field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetTokenEndpointBaseUrl() string {
	if o == nil || IsNil(o.TokenEndpointBaseUrl) {
		var ret string
		return ret
	}
	return *o.TokenEndpointBaseUrl
}

// GetTokenEndpointBaseUrlOk returns a tuple with the TokenEndpointBaseUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetTokenEndpointBaseUrlOk() (*string, bool) {
	if o == nil || IsNil(o.TokenEndpointBaseUrl) {
		return nil, false
	}
	return o.TokenEndpointBaseUrl, true
}

// HasTokenEndpointBaseUrl returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasTokenEndpointBaseUrl() bool {
	if o != nil && !IsNil(o.TokenEndpointBaseUrl) {
		return true
	}

	return false
}

// SetTokenEndpointBaseUrl gets a reference to the given string and assigns it to the TokenEndpointBaseUrl field.
func (o *AuthorizationServerSettings) SetTokenEndpointBaseUrl(v string) {
	o.TokenEndpointBaseUrl = &v
}

// GetPersistentGrantLifetime returns the PersistentGrantLifetime field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetPersistentGrantLifetime() int64 {
	if o == nil || IsNil(o.PersistentGrantLifetime) {
		var ret int64
		return ret
	}
	return *o.PersistentGrantLifetime
}

// GetPersistentGrantLifetimeOk returns a tuple with the PersistentGrantLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetPersistentGrantLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PersistentGrantLifetime) {
		return nil, false
	}
	return o.PersistentGrantLifetime, true
}

// HasPersistentGrantLifetime returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasPersistentGrantLifetime() bool {
	if o != nil && !IsNil(o.PersistentGrantLifetime) {
		return true
	}

	return false
}

// SetPersistentGrantLifetime gets a reference to the given int64 and assigns it to the PersistentGrantLifetime field.
func (o *AuthorizationServerSettings) SetPersistentGrantLifetime(v int64) {
	o.PersistentGrantLifetime = &v
}

// GetPersistentGrantLifetimeUnit returns the PersistentGrantLifetimeUnit field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetPersistentGrantLifetimeUnit() string {
	if o == nil || IsNil(o.PersistentGrantLifetimeUnit) {
		var ret string
		return ret
	}
	return *o.PersistentGrantLifetimeUnit
}

// GetPersistentGrantLifetimeUnitOk returns a tuple with the PersistentGrantLifetimeUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetPersistentGrantLifetimeUnitOk() (*string, bool) {
	if o == nil || IsNil(o.PersistentGrantLifetimeUnit) {
		return nil, false
	}
	return o.PersistentGrantLifetimeUnit, true
}

// HasPersistentGrantLifetimeUnit returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasPersistentGrantLifetimeUnit() bool {
	if o != nil && !IsNil(o.PersistentGrantLifetimeUnit) {
		return true
	}

	return false
}

// SetPersistentGrantLifetimeUnit gets a reference to the given string and assigns it to the PersistentGrantLifetimeUnit field.
func (o *AuthorizationServerSettings) SetPersistentGrantLifetimeUnit(v string) {
	o.PersistentGrantLifetimeUnit = &v
}

// GetPersistentGrantIdleTimeout returns the PersistentGrantIdleTimeout field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetPersistentGrantIdleTimeout() int64 {
	if o == nil || IsNil(o.PersistentGrantIdleTimeout) {
		var ret int64
		return ret
	}
	return *o.PersistentGrantIdleTimeout
}

// GetPersistentGrantIdleTimeoutOk returns a tuple with the PersistentGrantIdleTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetPersistentGrantIdleTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.PersistentGrantIdleTimeout) {
		return nil, false
	}
	return o.PersistentGrantIdleTimeout, true
}

// HasPersistentGrantIdleTimeout returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasPersistentGrantIdleTimeout() bool {
	if o != nil && !IsNil(o.PersistentGrantIdleTimeout) {
		return true
	}

	return false
}

// SetPersistentGrantIdleTimeout gets a reference to the given int64 and assigns it to the PersistentGrantIdleTimeout field.
func (o *AuthorizationServerSettings) SetPersistentGrantIdleTimeout(v int64) {
	o.PersistentGrantIdleTimeout = &v
}

// GetPersistentGrantIdleTimeoutTimeUnit returns the PersistentGrantIdleTimeoutTimeUnit field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetPersistentGrantIdleTimeoutTimeUnit() string {
	if o == nil || IsNil(o.PersistentGrantIdleTimeoutTimeUnit) {
		var ret string
		return ret
	}
	return *o.PersistentGrantIdleTimeoutTimeUnit
}

// GetPersistentGrantIdleTimeoutTimeUnitOk returns a tuple with the PersistentGrantIdleTimeoutTimeUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetPersistentGrantIdleTimeoutTimeUnitOk() (*string, bool) {
	if o == nil || IsNil(o.PersistentGrantIdleTimeoutTimeUnit) {
		return nil, false
	}
	return o.PersistentGrantIdleTimeoutTimeUnit, true
}

// HasPersistentGrantIdleTimeoutTimeUnit returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasPersistentGrantIdleTimeoutTimeUnit() bool {
	if o != nil && !IsNil(o.PersistentGrantIdleTimeoutTimeUnit) {
		return true
	}

	return false
}

// SetPersistentGrantIdleTimeoutTimeUnit gets a reference to the given string and assigns it to the PersistentGrantIdleTimeoutTimeUnit field.
func (o *AuthorizationServerSettings) SetPersistentGrantIdleTimeoutTimeUnit(v string) {
	o.PersistentGrantIdleTimeoutTimeUnit = &v
}

// GetRefreshTokenLength returns the RefreshTokenLength field value
func (o *AuthorizationServerSettings) GetRefreshTokenLength() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RefreshTokenLength
}

// GetRefreshTokenLengthOk returns a tuple with the RefreshTokenLength field value
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetRefreshTokenLengthOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefreshTokenLength, true
}

// SetRefreshTokenLength sets field value
func (o *AuthorizationServerSettings) SetRefreshTokenLength(v int64) {
	o.RefreshTokenLength = v
}

// GetRollRefreshTokenValues returns the RollRefreshTokenValues field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetRollRefreshTokenValues() bool {
	if o == nil || IsNil(o.RollRefreshTokenValues) {
		var ret bool
		return ret
	}
	return *o.RollRefreshTokenValues
}

// GetRollRefreshTokenValuesOk returns a tuple with the RollRefreshTokenValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetRollRefreshTokenValuesOk() (*bool, bool) {
	if o == nil || IsNil(o.RollRefreshTokenValues) {
		return nil, false
	}
	return o.RollRefreshTokenValues, true
}

// HasRollRefreshTokenValues returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasRollRefreshTokenValues() bool {
	if o != nil && !IsNil(o.RollRefreshTokenValues) {
		return true
	}

	return false
}

// SetRollRefreshTokenValues gets a reference to the given bool and assigns it to the RollRefreshTokenValues field.
func (o *AuthorizationServerSettings) SetRollRefreshTokenValues(v bool) {
	o.RollRefreshTokenValues = &v
}

// GetRefreshTokenRollingGracePeriod returns the RefreshTokenRollingGracePeriod field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetRefreshTokenRollingGracePeriod() int64 {
	if o == nil || IsNil(o.RefreshTokenRollingGracePeriod) {
		var ret int64
		return ret
	}
	return *o.RefreshTokenRollingGracePeriod
}

// GetRefreshTokenRollingGracePeriodOk returns a tuple with the RefreshTokenRollingGracePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetRefreshTokenRollingGracePeriodOk() (*int64, bool) {
	if o == nil || IsNil(o.RefreshTokenRollingGracePeriod) {
		return nil, false
	}
	return o.RefreshTokenRollingGracePeriod, true
}

// HasRefreshTokenRollingGracePeriod returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasRefreshTokenRollingGracePeriod() bool {
	if o != nil && !IsNil(o.RefreshTokenRollingGracePeriod) {
		return true
	}

	return false
}

// SetRefreshTokenRollingGracePeriod gets a reference to the given int64 and assigns it to the RefreshTokenRollingGracePeriod field.
func (o *AuthorizationServerSettings) SetRefreshTokenRollingGracePeriod(v int64) {
	o.RefreshTokenRollingGracePeriod = &v
}

// GetRefreshRollingInterval returns the RefreshRollingInterval field value
func (o *AuthorizationServerSettings) GetRefreshRollingInterval() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RefreshRollingInterval
}

// GetRefreshRollingIntervalOk returns a tuple with the RefreshRollingInterval field value
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetRefreshRollingIntervalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefreshRollingInterval, true
}

// SetRefreshRollingInterval sets field value
func (o *AuthorizationServerSettings) SetRefreshRollingInterval(v int64) {
	o.RefreshRollingInterval = v
}

// GetPersistentGrantReuseGrantTypes returns the PersistentGrantReuseGrantTypes field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetPersistentGrantReuseGrantTypes() []string {
	if o == nil || IsNil(o.PersistentGrantReuseGrantTypes) {
		var ret []string
		return ret
	}
	return o.PersistentGrantReuseGrantTypes
}

// GetPersistentGrantReuseGrantTypesOk returns a tuple with the PersistentGrantReuseGrantTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetPersistentGrantReuseGrantTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.PersistentGrantReuseGrantTypes) {
		return nil, false
	}
	return o.PersistentGrantReuseGrantTypes, true
}

// HasPersistentGrantReuseGrantTypes returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasPersistentGrantReuseGrantTypes() bool {
	if o != nil && !IsNil(o.PersistentGrantReuseGrantTypes) {
		return true
	}

	return false
}

// SetPersistentGrantReuseGrantTypes gets a reference to the given []string and assigns it to the PersistentGrantReuseGrantTypes field.
func (o *AuthorizationServerSettings) SetPersistentGrantReuseGrantTypes(v []string) {
	o.PersistentGrantReuseGrantTypes = v
}

// GetPersistentGrantContract returns the PersistentGrantContract field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetPersistentGrantContract() PersistentGrantContract {
	if o == nil || IsNil(o.PersistentGrantContract) {
		var ret PersistentGrantContract
		return ret
	}
	return *o.PersistentGrantContract
}

// GetPersistentGrantContractOk returns a tuple with the PersistentGrantContract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetPersistentGrantContractOk() (*PersistentGrantContract, bool) {
	if o == nil || IsNil(o.PersistentGrantContract) {
		return nil, false
	}
	return o.PersistentGrantContract, true
}

// HasPersistentGrantContract returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasPersistentGrantContract() bool {
	if o != nil && !IsNil(o.PersistentGrantContract) {
		return true
	}

	return false
}

// SetPersistentGrantContract gets a reference to the given PersistentGrantContract and assigns it to the PersistentGrantContract field.
func (o *AuthorizationServerSettings) SetPersistentGrantContract(v PersistentGrantContract) {
	o.PersistentGrantContract = &v
}

// GetBypassAuthorizationForApprovedGrants returns the BypassAuthorizationForApprovedGrants field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetBypassAuthorizationForApprovedGrants() bool {
	if o == nil || IsNil(o.BypassAuthorizationForApprovedGrants) {
		var ret bool
		return ret
	}
	return *o.BypassAuthorizationForApprovedGrants
}

// GetBypassAuthorizationForApprovedGrantsOk returns a tuple with the BypassAuthorizationForApprovedGrants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetBypassAuthorizationForApprovedGrantsOk() (*bool, bool) {
	if o == nil || IsNil(o.BypassAuthorizationForApprovedGrants) {
		return nil, false
	}
	return o.BypassAuthorizationForApprovedGrants, true
}

// HasBypassAuthorizationForApprovedGrants returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasBypassAuthorizationForApprovedGrants() bool {
	if o != nil && !IsNil(o.BypassAuthorizationForApprovedGrants) {
		return true
	}

	return false
}

// SetBypassAuthorizationForApprovedGrants gets a reference to the given bool and assigns it to the BypassAuthorizationForApprovedGrants field.
func (o *AuthorizationServerSettings) SetBypassAuthorizationForApprovedGrants(v bool) {
	o.BypassAuthorizationForApprovedGrants = &v
}

// GetBypassAuthorizationForApprovedConsents returns the BypassAuthorizationForApprovedConsents field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetBypassAuthorizationForApprovedConsents() bool {
	if o == nil || IsNil(o.BypassAuthorizationForApprovedConsents) {
		var ret bool
		return ret
	}
	return *o.BypassAuthorizationForApprovedConsents
}

// GetBypassAuthorizationForApprovedConsentsOk returns a tuple with the BypassAuthorizationForApprovedConsents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetBypassAuthorizationForApprovedConsentsOk() (*bool, bool) {
	if o == nil || IsNil(o.BypassAuthorizationForApprovedConsents) {
		return nil, false
	}
	return o.BypassAuthorizationForApprovedConsents, true
}

// HasBypassAuthorizationForApprovedConsents returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasBypassAuthorizationForApprovedConsents() bool {
	if o != nil && !IsNil(o.BypassAuthorizationForApprovedConsents) {
		return true
	}

	return false
}

// SetBypassAuthorizationForApprovedConsents gets a reference to the given bool and assigns it to the BypassAuthorizationForApprovedConsents field.
func (o *AuthorizationServerSettings) SetBypassAuthorizationForApprovedConsents(v bool) {
	o.BypassAuthorizationForApprovedConsents = &v
}

// GetConsentLifetimeDays returns the ConsentLifetimeDays field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetConsentLifetimeDays() int64 {
	if o == nil || IsNil(o.ConsentLifetimeDays) {
		var ret int64
		return ret
	}
	return *o.ConsentLifetimeDays
}

// GetConsentLifetimeDaysOk returns a tuple with the ConsentLifetimeDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetConsentLifetimeDaysOk() (*int64, bool) {
	if o == nil || IsNil(o.ConsentLifetimeDays) {
		return nil, false
	}
	return o.ConsentLifetimeDays, true
}

// HasConsentLifetimeDays returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasConsentLifetimeDays() bool {
	if o != nil && !IsNil(o.ConsentLifetimeDays) {
		return true
	}

	return false
}

// SetConsentLifetimeDays gets a reference to the given int64 and assigns it to the ConsentLifetimeDays field.
func (o *AuthorizationServerSettings) SetConsentLifetimeDays(v int64) {
	o.ConsentLifetimeDays = &v
}

// GetAllowUnidentifiedClientROCreds returns the AllowUnidentifiedClientROCreds field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetAllowUnidentifiedClientROCreds() bool {
	if o == nil || IsNil(o.AllowUnidentifiedClientROCreds) {
		var ret bool
		return ret
	}
	return *o.AllowUnidentifiedClientROCreds
}

// GetAllowUnidentifiedClientROCredsOk returns a tuple with the AllowUnidentifiedClientROCreds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetAllowUnidentifiedClientROCredsOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowUnidentifiedClientROCreds) {
		return nil, false
	}
	return o.AllowUnidentifiedClientROCreds, true
}

// HasAllowUnidentifiedClientROCreds returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasAllowUnidentifiedClientROCreds() bool {
	if o != nil && !IsNil(o.AllowUnidentifiedClientROCreds) {
		return true
	}

	return false
}

// SetAllowUnidentifiedClientROCreds gets a reference to the given bool and assigns it to the AllowUnidentifiedClientROCreds field.
func (o *AuthorizationServerSettings) SetAllowUnidentifiedClientROCreds(v bool) {
	o.AllowUnidentifiedClientROCreds = &v
}

// GetAllowUnidentifiedClientExtensionGrants returns the AllowUnidentifiedClientExtensionGrants field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetAllowUnidentifiedClientExtensionGrants() bool {
	if o == nil || IsNil(o.AllowUnidentifiedClientExtensionGrants) {
		var ret bool
		return ret
	}
	return *o.AllowUnidentifiedClientExtensionGrants
}

// GetAllowUnidentifiedClientExtensionGrantsOk returns a tuple with the AllowUnidentifiedClientExtensionGrants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetAllowUnidentifiedClientExtensionGrantsOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowUnidentifiedClientExtensionGrants) {
		return nil, false
	}
	return o.AllowUnidentifiedClientExtensionGrants, true
}

// HasAllowUnidentifiedClientExtensionGrants returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasAllowUnidentifiedClientExtensionGrants() bool {
	if o != nil && !IsNil(o.AllowUnidentifiedClientExtensionGrants) {
		return true
	}

	return false
}

// SetAllowUnidentifiedClientExtensionGrants gets a reference to the given bool and assigns it to the AllowUnidentifiedClientExtensionGrants field.
func (o *AuthorizationServerSettings) SetAllowUnidentifiedClientExtensionGrants(v bool) {
	o.AllowUnidentifiedClientExtensionGrants = &v
}

// GetAdminWebServicePcvRef returns the AdminWebServicePcvRef field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetAdminWebServicePcvRef() ResourceLink {
	if o == nil || IsNil(o.AdminWebServicePcvRef) {
		var ret ResourceLink
		return ret
	}
	return *o.AdminWebServicePcvRef
}

// GetAdminWebServicePcvRefOk returns a tuple with the AdminWebServicePcvRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetAdminWebServicePcvRefOk() (*ResourceLink, bool) {
	if o == nil || IsNil(o.AdminWebServicePcvRef) {
		return nil, false
	}
	return o.AdminWebServicePcvRef, true
}

// HasAdminWebServicePcvRef returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasAdminWebServicePcvRef() bool {
	if o != nil && !IsNil(o.AdminWebServicePcvRef) {
		return true
	}

	return false
}

// SetAdminWebServicePcvRef gets a reference to the given ResourceLink and assigns it to the AdminWebServicePcvRef field.
func (o *AuthorizationServerSettings) SetAdminWebServicePcvRef(v ResourceLink) {
	o.AdminWebServicePcvRef = &v
}

// GetAtmIdForOAuthGrantManagement returns the AtmIdForOAuthGrantManagement field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetAtmIdForOAuthGrantManagement() string {
	if o == nil || IsNil(o.AtmIdForOAuthGrantManagement) {
		var ret string
		return ret
	}
	return *o.AtmIdForOAuthGrantManagement
}

// GetAtmIdForOAuthGrantManagementOk returns a tuple with the AtmIdForOAuthGrantManagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetAtmIdForOAuthGrantManagementOk() (*string, bool) {
	if o == nil || IsNil(o.AtmIdForOAuthGrantManagement) {
		return nil, false
	}
	return o.AtmIdForOAuthGrantManagement, true
}

// HasAtmIdForOAuthGrantManagement returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasAtmIdForOAuthGrantManagement() bool {
	if o != nil && !IsNil(o.AtmIdForOAuthGrantManagement) {
		return true
	}

	return false
}

// SetAtmIdForOAuthGrantManagement gets a reference to the given string and assigns it to the AtmIdForOAuthGrantManagement field.
func (o *AuthorizationServerSettings) SetAtmIdForOAuthGrantManagement(v string) {
	o.AtmIdForOAuthGrantManagement = &v
}

// GetScopeForOAuthGrantManagement returns the ScopeForOAuthGrantManagement field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetScopeForOAuthGrantManagement() string {
	if o == nil || IsNil(o.ScopeForOAuthGrantManagement) {
		var ret string
		return ret
	}
	return *o.ScopeForOAuthGrantManagement
}

// GetScopeForOAuthGrantManagementOk returns a tuple with the ScopeForOAuthGrantManagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetScopeForOAuthGrantManagementOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeForOAuthGrantManagement) {
		return nil, false
	}
	return o.ScopeForOAuthGrantManagement, true
}

// HasScopeForOAuthGrantManagement returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasScopeForOAuthGrantManagement() bool {
	if o != nil && !IsNil(o.ScopeForOAuthGrantManagement) {
		return true
	}

	return false
}

// SetScopeForOAuthGrantManagement gets a reference to the given string and assigns it to the ScopeForOAuthGrantManagement field.
func (o *AuthorizationServerSettings) SetScopeForOAuthGrantManagement(v string) {
	o.ScopeForOAuthGrantManagement = &v
}

// GetAllowedOrigins returns the AllowedOrigins field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetAllowedOrigins() []string {
	if o == nil || IsNil(o.AllowedOrigins) {
		var ret []string
		return ret
	}
	return o.AllowedOrigins
}

// GetAllowedOriginsOk returns a tuple with the AllowedOrigins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetAllowedOriginsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedOrigins) {
		return nil, false
	}
	return o.AllowedOrigins, true
}

// HasAllowedOrigins returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasAllowedOrigins() bool {
	if o != nil && !IsNil(o.AllowedOrigins) {
		return true
	}

	return false
}

// SetAllowedOrigins gets a reference to the given []string and assigns it to the AllowedOrigins field.
func (o *AuthorizationServerSettings) SetAllowedOrigins(v []string) {
	o.AllowedOrigins = v
}

// GetUserAuthorizationUrl returns the UserAuthorizationUrl field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetUserAuthorizationUrl() string {
	if o == nil || IsNil(o.UserAuthorizationUrl) {
		var ret string
		return ret
	}
	return *o.UserAuthorizationUrl
}

// GetUserAuthorizationUrlOk returns a tuple with the UserAuthorizationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetUserAuthorizationUrlOk() (*string, bool) {
	if o == nil || IsNil(o.UserAuthorizationUrl) {
		return nil, false
	}
	return o.UserAuthorizationUrl, true
}

// HasUserAuthorizationUrl returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasUserAuthorizationUrl() bool {
	if o != nil && !IsNil(o.UserAuthorizationUrl) {
		return true
	}

	return false
}

// SetUserAuthorizationUrl gets a reference to the given string and assigns it to the UserAuthorizationUrl field.
func (o *AuthorizationServerSettings) SetUserAuthorizationUrl(v string) {
	o.UserAuthorizationUrl = &v
}

// GetRegisteredAuthorizationPath returns the RegisteredAuthorizationPath field value
func (o *AuthorizationServerSettings) GetRegisteredAuthorizationPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegisteredAuthorizationPath
}

// GetRegisteredAuthorizationPathOk returns a tuple with the RegisteredAuthorizationPath field value
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetRegisteredAuthorizationPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegisteredAuthorizationPath, true
}

// SetRegisteredAuthorizationPath sets field value
func (o *AuthorizationServerSettings) SetRegisteredAuthorizationPath(v string) {
	o.RegisteredAuthorizationPath = v
}

// GetPendingAuthorizationTimeout returns the PendingAuthorizationTimeout field value
func (o *AuthorizationServerSettings) GetPendingAuthorizationTimeout() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PendingAuthorizationTimeout
}

// GetPendingAuthorizationTimeoutOk returns a tuple with the PendingAuthorizationTimeout field value
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetPendingAuthorizationTimeoutOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PendingAuthorizationTimeout, true
}

// SetPendingAuthorizationTimeout sets field value
func (o *AuthorizationServerSettings) SetPendingAuthorizationTimeout(v int64) {
	o.PendingAuthorizationTimeout = v
}

// GetDevicePollingInterval returns the DevicePollingInterval field value
func (o *AuthorizationServerSettings) GetDevicePollingInterval() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DevicePollingInterval
}

// GetDevicePollingIntervalOk returns a tuple with the DevicePollingInterval field value
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetDevicePollingIntervalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DevicePollingInterval, true
}

// SetDevicePollingInterval sets field value
func (o *AuthorizationServerSettings) SetDevicePollingInterval(v int64) {
	o.DevicePollingInterval = v
}

// GetActivationCodeCheckMode returns the ActivationCodeCheckMode field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetActivationCodeCheckMode() string {
	if o == nil || IsNil(o.ActivationCodeCheckMode) {
		var ret string
		return ret
	}
	return *o.ActivationCodeCheckMode
}

// GetActivationCodeCheckModeOk returns a tuple with the ActivationCodeCheckMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetActivationCodeCheckModeOk() (*string, bool) {
	if o == nil || IsNil(o.ActivationCodeCheckMode) {
		return nil, false
	}
	return o.ActivationCodeCheckMode, true
}

// HasActivationCodeCheckMode returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasActivationCodeCheckMode() bool {
	if o != nil && !IsNil(o.ActivationCodeCheckMode) {
		return true
	}

	return false
}

// SetActivationCodeCheckMode gets a reference to the given string and assigns it to the ActivationCodeCheckMode field.
func (o *AuthorizationServerSettings) SetActivationCodeCheckMode(v string) {
	o.ActivationCodeCheckMode = &v
}

// GetBypassActivationCodeConfirmation returns the BypassActivationCodeConfirmation field value
func (o *AuthorizationServerSettings) GetBypassActivationCodeConfirmation() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BypassActivationCodeConfirmation
}

// GetBypassActivationCodeConfirmationOk returns a tuple with the BypassActivationCodeConfirmation field value
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetBypassActivationCodeConfirmationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BypassActivationCodeConfirmation, true
}

// SetBypassActivationCodeConfirmation sets field value
func (o *AuthorizationServerSettings) SetBypassActivationCodeConfirmation(v bool) {
	o.BypassActivationCodeConfirmation = v
}

// GetUserAuthorizationConsentPageSetting returns the UserAuthorizationConsentPageSetting field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetUserAuthorizationConsentPageSetting() string {
	if o == nil || IsNil(o.UserAuthorizationConsentPageSetting) {
		var ret string
		return ret
	}
	return *o.UserAuthorizationConsentPageSetting
}

// GetUserAuthorizationConsentPageSettingOk returns a tuple with the UserAuthorizationConsentPageSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetUserAuthorizationConsentPageSettingOk() (*string, bool) {
	if o == nil || IsNil(o.UserAuthorizationConsentPageSetting) {
		return nil, false
	}
	return o.UserAuthorizationConsentPageSetting, true
}

// HasUserAuthorizationConsentPageSetting returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasUserAuthorizationConsentPageSetting() bool {
	if o != nil && !IsNil(o.UserAuthorizationConsentPageSetting) {
		return true
	}

	return false
}

// SetUserAuthorizationConsentPageSetting gets a reference to the given string and assigns it to the UserAuthorizationConsentPageSetting field.
func (o *AuthorizationServerSettings) SetUserAuthorizationConsentPageSetting(v string) {
	o.UserAuthorizationConsentPageSetting = &v
}

// GetUserAuthorizationConsentAdapter returns the UserAuthorizationConsentAdapter field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetUserAuthorizationConsentAdapter() string {
	if o == nil || IsNil(o.UserAuthorizationConsentAdapter) {
		var ret string
		return ret
	}
	return *o.UserAuthorizationConsentAdapter
}

// GetUserAuthorizationConsentAdapterOk returns a tuple with the UserAuthorizationConsentAdapter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetUserAuthorizationConsentAdapterOk() (*string, bool) {
	if o == nil || IsNil(o.UserAuthorizationConsentAdapter) {
		return nil, false
	}
	return o.UserAuthorizationConsentAdapter, true
}

// HasUserAuthorizationConsentAdapter returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasUserAuthorizationConsentAdapter() bool {
	if o != nil && !IsNil(o.UserAuthorizationConsentAdapter) {
		return true
	}

	return false
}

// SetUserAuthorizationConsentAdapter gets a reference to the given string and assigns it to the UserAuthorizationConsentAdapter field.
func (o *AuthorizationServerSettings) SetUserAuthorizationConsentAdapter(v string) {
	o.UserAuthorizationConsentAdapter = &v
}

// GetApprovedScopesAttribute returns the ApprovedScopesAttribute field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetApprovedScopesAttribute() string {
	if o == nil || IsNil(o.ApprovedScopesAttribute) {
		var ret string
		return ret
	}
	return *o.ApprovedScopesAttribute
}

// GetApprovedScopesAttributeOk returns a tuple with the ApprovedScopesAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetApprovedScopesAttributeOk() (*string, bool) {
	if o == nil || IsNil(o.ApprovedScopesAttribute) {
		return nil, false
	}
	return o.ApprovedScopesAttribute, true
}

// HasApprovedScopesAttribute returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasApprovedScopesAttribute() bool {
	if o != nil && !IsNil(o.ApprovedScopesAttribute) {
		return true
	}

	return false
}

// SetApprovedScopesAttribute gets a reference to the given string and assigns it to the ApprovedScopesAttribute field.
func (o *AuthorizationServerSettings) SetApprovedScopesAttribute(v string) {
	o.ApprovedScopesAttribute = &v
}

// GetApprovedAuthorizationDetailAttribute returns the ApprovedAuthorizationDetailAttribute field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetApprovedAuthorizationDetailAttribute() string {
	if o == nil || IsNil(o.ApprovedAuthorizationDetailAttribute) {
		var ret string
		return ret
	}
	return *o.ApprovedAuthorizationDetailAttribute
}

// GetApprovedAuthorizationDetailAttributeOk returns a tuple with the ApprovedAuthorizationDetailAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetApprovedAuthorizationDetailAttributeOk() (*string, bool) {
	if o == nil || IsNil(o.ApprovedAuthorizationDetailAttribute) {
		return nil, false
	}
	return o.ApprovedAuthorizationDetailAttribute, true
}

// HasApprovedAuthorizationDetailAttribute returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasApprovedAuthorizationDetailAttribute() bool {
	if o != nil && !IsNil(o.ApprovedAuthorizationDetailAttribute) {
		return true
	}

	return false
}

// SetApprovedAuthorizationDetailAttribute gets a reference to the given string and assigns it to the ApprovedAuthorizationDetailAttribute field.
func (o *AuthorizationServerSettings) SetApprovedAuthorizationDetailAttribute(v string) {
	o.ApprovedAuthorizationDetailAttribute = &v
}

// GetParReferenceTimeout returns the ParReferenceTimeout field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetParReferenceTimeout() int64 {
	if o == nil || IsNil(o.ParReferenceTimeout) {
		var ret int64
		return ret
	}
	return *o.ParReferenceTimeout
}

// GetParReferenceTimeoutOk returns a tuple with the ParReferenceTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetParReferenceTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.ParReferenceTimeout) {
		return nil, false
	}
	return o.ParReferenceTimeout, true
}

// HasParReferenceTimeout returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasParReferenceTimeout() bool {
	if o != nil && !IsNil(o.ParReferenceTimeout) {
		return true
	}

	return false
}

// SetParReferenceTimeout gets a reference to the given int64 and assigns it to the ParReferenceTimeout field.
func (o *AuthorizationServerSettings) SetParReferenceTimeout(v int64) {
	o.ParReferenceTimeout = &v
}

// GetParReferenceLength returns the ParReferenceLength field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetParReferenceLength() int64 {
	if o == nil || IsNil(o.ParReferenceLength) {
		var ret int64
		return ret
	}
	return *o.ParReferenceLength
}

// GetParReferenceLengthOk returns a tuple with the ParReferenceLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetParReferenceLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.ParReferenceLength) {
		return nil, false
	}
	return o.ParReferenceLength, true
}

// HasParReferenceLength returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasParReferenceLength() bool {
	if o != nil && !IsNil(o.ParReferenceLength) {
		return true
	}

	return false
}

// SetParReferenceLength gets a reference to the given int64 and assigns it to the ParReferenceLength field.
func (o *AuthorizationServerSettings) SetParReferenceLength(v int64) {
	o.ParReferenceLength = &v
}

// GetParStatus returns the ParStatus field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetParStatus() string {
	if o == nil || IsNil(o.ParStatus) {
		var ret string
		return ret
	}
	return *o.ParStatus
}

// GetParStatusOk returns a tuple with the ParStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetParStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ParStatus) {
		return nil, false
	}
	return o.ParStatus, true
}

// HasParStatus returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasParStatus() bool {
	if o != nil && !IsNil(o.ParStatus) {
		return true
	}

	return false
}

// SetParStatus gets a reference to the given string and assigns it to the ParStatus field.
func (o *AuthorizationServerSettings) SetParStatus(v string) {
	o.ParStatus = &v
}

// GetClientSecretRetentionPeriod returns the ClientSecretRetentionPeriod field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetClientSecretRetentionPeriod() int64 {
	if o == nil || IsNil(o.ClientSecretRetentionPeriod) {
		var ret int64
		return ret
	}
	return *o.ClientSecretRetentionPeriod
}

// GetClientSecretRetentionPeriodOk returns a tuple with the ClientSecretRetentionPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetClientSecretRetentionPeriodOk() (*int64, bool) {
	if o == nil || IsNil(o.ClientSecretRetentionPeriod) {
		return nil, false
	}
	return o.ClientSecretRetentionPeriod, true
}

// HasClientSecretRetentionPeriod returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasClientSecretRetentionPeriod() bool {
	if o != nil && !IsNil(o.ClientSecretRetentionPeriod) {
		return true
	}

	return false
}

// SetClientSecretRetentionPeriod gets a reference to the given int64 and assigns it to the ClientSecretRetentionPeriod field.
func (o *AuthorizationServerSettings) SetClientSecretRetentionPeriod(v int64) {
	o.ClientSecretRetentionPeriod = &v
}

// GetJwtSecuredAuthorizationResponseModeLifetime returns the JwtSecuredAuthorizationResponseModeLifetime field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetJwtSecuredAuthorizationResponseModeLifetime() int64 {
	if o == nil || IsNil(o.JwtSecuredAuthorizationResponseModeLifetime) {
		var ret int64
		return ret
	}
	return *o.JwtSecuredAuthorizationResponseModeLifetime
}

// GetJwtSecuredAuthorizationResponseModeLifetimeOk returns a tuple with the JwtSecuredAuthorizationResponseModeLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetJwtSecuredAuthorizationResponseModeLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.JwtSecuredAuthorizationResponseModeLifetime) {
		return nil, false
	}
	return o.JwtSecuredAuthorizationResponseModeLifetime, true
}

// HasJwtSecuredAuthorizationResponseModeLifetime returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasJwtSecuredAuthorizationResponseModeLifetime() bool {
	if o != nil && !IsNil(o.JwtSecuredAuthorizationResponseModeLifetime) {
		return true
	}

	return false
}

// SetJwtSecuredAuthorizationResponseModeLifetime gets a reference to the given int64 and assigns it to the JwtSecuredAuthorizationResponseModeLifetime field.
func (o *AuthorizationServerSettings) SetJwtSecuredAuthorizationResponseModeLifetime(v int64) {
	o.JwtSecuredAuthorizationResponseModeLifetime = &v
}

// GetDpopProofRequireNonce returns the DpopProofRequireNonce field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetDpopProofRequireNonce() bool {
	if o == nil || IsNil(o.DpopProofRequireNonce) {
		var ret bool
		return ret
	}
	return *o.DpopProofRequireNonce
}

// GetDpopProofRequireNonceOk returns a tuple with the DpopProofRequireNonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetDpopProofRequireNonceOk() (*bool, bool) {
	if o == nil || IsNil(o.DpopProofRequireNonce) {
		return nil, false
	}
	return o.DpopProofRequireNonce, true
}

// HasDpopProofRequireNonce returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasDpopProofRequireNonce() bool {
	if o != nil && !IsNil(o.DpopProofRequireNonce) {
		return true
	}

	return false
}

// SetDpopProofRequireNonce gets a reference to the given bool and assigns it to the DpopProofRequireNonce field.
func (o *AuthorizationServerSettings) SetDpopProofRequireNonce(v bool) {
	o.DpopProofRequireNonce = &v
}

// GetDpopProofLifetimeSeconds returns the DpopProofLifetimeSeconds field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetDpopProofLifetimeSeconds() int64 {
	if o == nil || IsNil(o.DpopProofLifetimeSeconds) {
		var ret int64
		return ret
	}
	return *o.DpopProofLifetimeSeconds
}

// GetDpopProofLifetimeSecondsOk returns a tuple with the DpopProofLifetimeSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetDpopProofLifetimeSecondsOk() (*int64, bool) {
	if o == nil || IsNil(o.DpopProofLifetimeSeconds) {
		return nil, false
	}
	return o.DpopProofLifetimeSeconds, true
}

// HasDpopProofLifetimeSeconds returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasDpopProofLifetimeSeconds() bool {
	if o != nil && !IsNil(o.DpopProofLifetimeSeconds) {
		return true
	}

	return false
}

// SetDpopProofLifetimeSeconds gets a reference to the given int64 and assigns it to the DpopProofLifetimeSeconds field.
func (o *AuthorizationServerSettings) SetDpopProofLifetimeSeconds(v int64) {
	o.DpopProofLifetimeSeconds = &v
}

// GetDpopProofEnforceReplayPrevention returns the DpopProofEnforceReplayPrevention field value if set, zero value otherwise.
func (o *AuthorizationServerSettings) GetDpopProofEnforceReplayPrevention() bool {
	if o == nil || IsNil(o.DpopProofEnforceReplayPrevention) {
		var ret bool
		return ret
	}
	return *o.DpopProofEnforceReplayPrevention
}

// GetDpopProofEnforceReplayPreventionOk returns a tuple with the DpopProofEnforceReplayPrevention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationServerSettings) GetDpopProofEnforceReplayPreventionOk() (*bool, bool) {
	if o == nil || IsNil(o.DpopProofEnforceReplayPrevention) {
		return nil, false
	}
	return o.DpopProofEnforceReplayPrevention, true
}

// HasDpopProofEnforceReplayPrevention returns a boolean if a field has been set.
func (o *AuthorizationServerSettings) HasDpopProofEnforceReplayPrevention() bool {
	if o != nil && !IsNil(o.DpopProofEnforceReplayPrevention) {
		return true
	}

	return false
}

// SetDpopProofEnforceReplayPrevention gets a reference to the given bool and assigns it to the DpopProofEnforceReplayPrevention field.
func (o *AuthorizationServerSettings) SetDpopProofEnforceReplayPrevention(v bool) {
	o.DpopProofEnforceReplayPrevention = &v
}

func (o AuthorizationServerSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizationServerSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["defaultScopeDescription"] = o.DefaultScopeDescription
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.ScopeGroups) {
		toSerialize["scopeGroups"] = o.ScopeGroups
	}
	if !IsNil(o.ExclusiveScopes) {
		toSerialize["exclusiveScopes"] = o.ExclusiveScopes
	}
	if !IsNil(o.ExclusiveScopeGroups) {
		toSerialize["exclusiveScopeGroups"] = o.ExclusiveScopeGroups
	}
	toSerialize["authorizationCodeTimeout"] = o.AuthorizationCodeTimeout
	toSerialize["authorizationCodeEntropy"] = o.AuthorizationCodeEntropy
	if !IsNil(o.DisallowPlainPKCE) {
		toSerialize["disallowPlainPKCE"] = o.DisallowPlainPKCE
	}
	if !IsNil(o.IncludeIssuerInAuthorizationResponse) {
		toSerialize["includeIssuerInAuthorizationResponse"] = o.IncludeIssuerInAuthorizationResponse
	}
	if !IsNil(o.TrackUserSessionsForLogout) {
		toSerialize["trackUserSessionsForLogout"] = o.TrackUserSessionsForLogout
	}
	if !IsNil(o.TokenEndpointBaseUrl) {
		toSerialize["tokenEndpointBaseUrl"] = o.TokenEndpointBaseUrl
	}
	if !IsNil(o.PersistentGrantLifetime) {
		toSerialize["persistentGrantLifetime"] = o.PersistentGrantLifetime
	}
	if !IsNil(o.PersistentGrantLifetimeUnit) {
		toSerialize["persistentGrantLifetimeUnit"] = o.PersistentGrantLifetimeUnit
	}
	if !IsNil(o.PersistentGrantIdleTimeout) {
		toSerialize["persistentGrantIdleTimeout"] = o.PersistentGrantIdleTimeout
	}
	if !IsNil(o.PersistentGrantIdleTimeoutTimeUnit) {
		toSerialize["persistentGrantIdleTimeoutTimeUnit"] = o.PersistentGrantIdleTimeoutTimeUnit
	}
	toSerialize["refreshTokenLength"] = o.RefreshTokenLength
	if !IsNil(o.RollRefreshTokenValues) {
		toSerialize["rollRefreshTokenValues"] = o.RollRefreshTokenValues
	}
	if !IsNil(o.RefreshTokenRollingGracePeriod) {
		toSerialize["refreshTokenRollingGracePeriod"] = o.RefreshTokenRollingGracePeriod
	}
	toSerialize["refreshRollingInterval"] = o.RefreshRollingInterval
	if !IsNil(o.PersistentGrantReuseGrantTypes) {
		toSerialize["persistentGrantReuseGrantTypes"] = o.PersistentGrantReuseGrantTypes
	}
	if !IsNil(o.PersistentGrantContract) {
		toSerialize["persistentGrantContract"] = o.PersistentGrantContract
	}
	if !IsNil(o.BypassAuthorizationForApprovedGrants) {
		toSerialize["bypassAuthorizationForApprovedGrants"] = o.BypassAuthorizationForApprovedGrants
	}
	if !IsNil(o.BypassAuthorizationForApprovedConsents) {
		toSerialize["bypassAuthorizationForApprovedConsents"] = o.BypassAuthorizationForApprovedConsents
	}
	if !IsNil(o.ConsentLifetimeDays) {
		toSerialize["consentLifetimeDays"] = o.ConsentLifetimeDays
	}
	if !IsNil(o.AllowUnidentifiedClientROCreds) {
		toSerialize["allowUnidentifiedClientROCreds"] = o.AllowUnidentifiedClientROCreds
	}
	if !IsNil(o.AllowUnidentifiedClientExtensionGrants) {
		toSerialize["allowUnidentifiedClientExtensionGrants"] = o.AllowUnidentifiedClientExtensionGrants
	}
	if !IsNil(o.AdminWebServicePcvRef) {
		toSerialize["adminWebServicePcvRef"] = o.AdminWebServicePcvRef
	}
	if !IsNil(o.AtmIdForOAuthGrantManagement) {
		toSerialize["atmIdForOAuthGrantManagement"] = o.AtmIdForOAuthGrantManagement
	}
	if !IsNil(o.ScopeForOAuthGrantManagement) {
		toSerialize["scopeForOAuthGrantManagement"] = o.ScopeForOAuthGrantManagement
	}
	if !IsNil(o.AllowedOrigins) {
		toSerialize["allowedOrigins"] = o.AllowedOrigins
	}
	if !IsNil(o.UserAuthorizationUrl) {
		toSerialize["userAuthorizationUrl"] = o.UserAuthorizationUrl
	}
	toSerialize["registeredAuthorizationPath"] = o.RegisteredAuthorizationPath
	toSerialize["pendingAuthorizationTimeout"] = o.PendingAuthorizationTimeout
	toSerialize["devicePollingInterval"] = o.DevicePollingInterval
	if !IsNil(o.ActivationCodeCheckMode) {
		toSerialize["activationCodeCheckMode"] = o.ActivationCodeCheckMode
	}
	toSerialize["bypassActivationCodeConfirmation"] = o.BypassActivationCodeConfirmation
	if !IsNil(o.UserAuthorizationConsentPageSetting) {
		toSerialize["userAuthorizationConsentPageSetting"] = o.UserAuthorizationConsentPageSetting
	}
	if !IsNil(o.UserAuthorizationConsentAdapter) {
		toSerialize["userAuthorizationConsentAdapter"] = o.UserAuthorizationConsentAdapter
	}
	if !IsNil(o.ApprovedScopesAttribute) {
		toSerialize["approvedScopesAttribute"] = o.ApprovedScopesAttribute
	}
	if !IsNil(o.ApprovedAuthorizationDetailAttribute) {
		toSerialize["approvedAuthorizationDetailAttribute"] = o.ApprovedAuthorizationDetailAttribute
	}
	if !IsNil(o.ParReferenceTimeout) {
		toSerialize["parReferenceTimeout"] = o.ParReferenceTimeout
	}
	if !IsNil(o.ParReferenceLength) {
		toSerialize["parReferenceLength"] = o.ParReferenceLength
	}
	if !IsNil(o.ParStatus) {
		toSerialize["parStatus"] = o.ParStatus
	}
	if !IsNil(o.ClientSecretRetentionPeriod) {
		toSerialize["clientSecretRetentionPeriod"] = o.ClientSecretRetentionPeriod
	}
	if !IsNil(o.JwtSecuredAuthorizationResponseModeLifetime) {
		toSerialize["jwtSecuredAuthorizationResponseModeLifetime"] = o.JwtSecuredAuthorizationResponseModeLifetime
	}
	if !IsNil(o.DpopProofRequireNonce) {
		toSerialize["dpopProofRequireNonce"] = o.DpopProofRequireNonce
	}
	if !IsNil(o.DpopProofLifetimeSeconds) {
		toSerialize["dpopProofLifetimeSeconds"] = o.DpopProofLifetimeSeconds
	}
	if !IsNil(o.DpopProofEnforceReplayPrevention) {
		toSerialize["dpopProofEnforceReplayPrevention"] = o.DpopProofEnforceReplayPrevention
	}
	return toSerialize, nil
}

func (o *AuthorizationServerSettings) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"defaultScopeDescription",
		"authorizationCodeTimeout",
		"authorizationCodeEntropy",
		"refreshTokenLength",
		"refreshRollingInterval",
		"registeredAuthorizationPath",
		"pendingAuthorizationTimeout",
		"devicePollingInterval",
		"bypassActivationCodeConfirmation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthorizationServerSettings := _AuthorizationServerSettings{}

	err = json.Unmarshal(bytes, &varAuthorizationServerSettings)

	if err != nil {
		return err
	}

	*o = AuthorizationServerSettings(varAuthorizationServerSettings)

	return err
}

type NullableAuthorizationServerSettings struct {
	value *AuthorizationServerSettings
	isSet bool
}

func (v NullableAuthorizationServerSettings) Get() *AuthorizationServerSettings {
	return v.value
}

func (v *NullableAuthorizationServerSettings) Set(val *AuthorizationServerSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationServerSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationServerSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationServerSettings(val *AuthorizationServerSettings) *NullableAuthorizationServerSettings {
	return &NullableAuthorizationServerSettings{value: val, isSet: true}
}

func (v NullableAuthorizationServerSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationServerSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
