/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the IdpRoleAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdpRoleAllOf{}

// IdpRoleAllOf This property has been deprecated and is no longer used. All Roles and protocols are always enabled.
type IdpRoleAllOf struct {
	// Enable Identity Provider Role.
	Enable        *bool          `json:"enable,omitempty" tfsdk:"enable"`
	Saml20Profile *SAML20Profile `json:"saml20Profile,omitempty" tfsdk:"saml20_profile"`
	// Enable Outbound Provisioning.
	EnableOutboundProvisioning *bool `json:"enableOutboundProvisioning,omitempty" tfsdk:"enable_outbound_provisioning"`
}

// NewIdpRoleAllOf instantiates a new IdpRoleAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdpRoleAllOf() *IdpRoleAllOf {
	this := IdpRoleAllOf{}
	return &this
}

// NewIdpRoleAllOfWithDefaults instantiates a new IdpRoleAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdpRoleAllOfWithDefaults() *IdpRoleAllOf {
	this := IdpRoleAllOf{}
	return &this
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *IdpRoleAllOf) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpRoleAllOf) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *IdpRoleAllOf) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *IdpRoleAllOf) SetEnable(v bool) {
	o.Enable = &v
}

// GetSaml20Profile returns the Saml20Profile field value if set, zero value otherwise.
func (o *IdpRoleAllOf) GetSaml20Profile() SAML20Profile {
	if o == nil || IsNil(o.Saml20Profile) {
		var ret SAML20Profile
		return ret
	}
	return *o.Saml20Profile
}

// GetSaml20ProfileOk returns a tuple with the Saml20Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpRoleAllOf) GetSaml20ProfileOk() (*SAML20Profile, bool) {
	if o == nil || IsNil(o.Saml20Profile) {
		return nil, false
	}
	return o.Saml20Profile, true
}

// HasSaml20Profile returns a boolean if a field has been set.
func (o *IdpRoleAllOf) HasSaml20Profile() bool {
	if o != nil && !IsNil(o.Saml20Profile) {
		return true
	}

	return false
}

// SetSaml20Profile gets a reference to the given SAML20Profile and assigns it to the Saml20Profile field.
func (o *IdpRoleAllOf) SetSaml20Profile(v SAML20Profile) {
	o.Saml20Profile = &v
}

// GetEnableOutboundProvisioning returns the EnableOutboundProvisioning field value if set, zero value otherwise.
func (o *IdpRoleAllOf) GetEnableOutboundProvisioning() bool {
	if o == nil || IsNil(o.EnableOutboundProvisioning) {
		var ret bool
		return ret
	}
	return *o.EnableOutboundProvisioning
}

// GetEnableOutboundProvisioningOk returns a tuple with the EnableOutboundProvisioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpRoleAllOf) GetEnableOutboundProvisioningOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableOutboundProvisioning) {
		return nil, false
	}
	return o.EnableOutboundProvisioning, true
}

// HasEnableOutboundProvisioning returns a boolean if a field has been set.
func (o *IdpRoleAllOf) HasEnableOutboundProvisioning() bool {
	if o != nil && !IsNil(o.EnableOutboundProvisioning) {
		return true
	}

	return false
}

// SetEnableOutboundProvisioning gets a reference to the given bool and assigns it to the EnableOutboundProvisioning field.
func (o *IdpRoleAllOf) SetEnableOutboundProvisioning(v bool) {
	o.EnableOutboundProvisioning = &v
}

func (o IdpRoleAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdpRoleAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.Saml20Profile) {
		toSerialize["saml20Profile"] = o.Saml20Profile
	}
	if !IsNil(o.EnableOutboundProvisioning) {
		toSerialize["enableOutboundProvisioning"] = o.EnableOutboundProvisioning
	}
	return toSerialize, nil
}

type NullableIdpRoleAllOf struct {
	value *IdpRoleAllOf
	isSet bool
}

func (v NullableIdpRoleAllOf) Get() *IdpRoleAllOf {
	return v.value
}

func (v *NullableIdpRoleAllOf) Set(val *IdpRoleAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableIdpRoleAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableIdpRoleAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdpRoleAllOf(val *IdpRoleAllOf) *NullableIdpRoleAllOf {
	return &NullableIdpRoleAllOf{value: val, isSet: true}
}

func (v NullableIdpRoleAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdpRoleAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
