/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the CertificateRevocationSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateRevocationSettings{}

// CertificateRevocationSettings Certificate revocation settings.
type CertificateRevocationSettings struct {
	OcspSettings  *OcspSettings  `json:"ocspSettings,omitempty" tfsdk:"ocsp_settings"`
	CrlSettings   *CrlSettings   `json:"crlSettings,omitempty" tfsdk:"crl_settings"`
	ProxySettings *ProxySettings `json:"proxySettings,omitempty" tfsdk:"proxy_settings"`
}

// NewCertificateRevocationSettings instantiates a new CertificateRevocationSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateRevocationSettings() *CertificateRevocationSettings {
	this := CertificateRevocationSettings{}
	return &this
}

// NewCertificateRevocationSettingsWithDefaults instantiates a new CertificateRevocationSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateRevocationSettingsWithDefaults() *CertificateRevocationSettings {
	this := CertificateRevocationSettings{}
	return &this
}

// GetOcspSettings returns the OcspSettings field value if set, zero value otherwise.
func (o *CertificateRevocationSettings) GetOcspSettings() OcspSettings {
	if o == nil || IsNil(o.OcspSettings) {
		var ret OcspSettings
		return ret
	}
	return *o.OcspSettings
}

// GetOcspSettingsOk returns a tuple with the OcspSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRevocationSettings) GetOcspSettingsOk() (*OcspSettings, bool) {
	if o == nil || IsNil(o.OcspSettings) {
		return nil, false
	}
	return o.OcspSettings, true
}

// HasOcspSettings returns a boolean if a field has been set.
func (o *CertificateRevocationSettings) HasOcspSettings() bool {
	if o != nil && !IsNil(o.OcspSettings) {
		return true
	}

	return false
}

// SetOcspSettings gets a reference to the given OcspSettings and assigns it to the OcspSettings field.
func (o *CertificateRevocationSettings) SetOcspSettings(v OcspSettings) {
	o.OcspSettings = &v
}

// GetCrlSettings returns the CrlSettings field value if set, zero value otherwise.
func (o *CertificateRevocationSettings) GetCrlSettings() CrlSettings {
	if o == nil || IsNil(o.CrlSettings) {
		var ret CrlSettings
		return ret
	}
	return *o.CrlSettings
}

// GetCrlSettingsOk returns a tuple with the CrlSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRevocationSettings) GetCrlSettingsOk() (*CrlSettings, bool) {
	if o == nil || IsNil(o.CrlSettings) {
		return nil, false
	}
	return o.CrlSettings, true
}

// HasCrlSettings returns a boolean if a field has been set.
func (o *CertificateRevocationSettings) HasCrlSettings() bool {
	if o != nil && !IsNil(o.CrlSettings) {
		return true
	}

	return false
}

// SetCrlSettings gets a reference to the given CrlSettings and assigns it to the CrlSettings field.
func (o *CertificateRevocationSettings) SetCrlSettings(v CrlSettings) {
	o.CrlSettings = &v
}

// GetProxySettings returns the ProxySettings field value if set, zero value otherwise.
func (o *CertificateRevocationSettings) GetProxySettings() ProxySettings {
	if o == nil || IsNil(o.ProxySettings) {
		var ret ProxySettings
		return ret
	}
	return *o.ProxySettings
}

// GetProxySettingsOk returns a tuple with the ProxySettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRevocationSettings) GetProxySettingsOk() (*ProxySettings, bool) {
	if o == nil || IsNil(o.ProxySettings) {
		return nil, false
	}
	return o.ProxySettings, true
}

// HasProxySettings returns a boolean if a field has been set.
func (o *CertificateRevocationSettings) HasProxySettings() bool {
	if o != nil && !IsNil(o.ProxySettings) {
		return true
	}

	return false
}

// SetProxySettings gets a reference to the given ProxySettings and assigns it to the ProxySettings field.
func (o *CertificateRevocationSettings) SetProxySettings(v ProxySettings) {
	o.ProxySettings = &v
}

func (o CertificateRevocationSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateRevocationSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OcspSettings) {
		toSerialize["ocspSettings"] = o.OcspSettings
	}
	if !IsNil(o.CrlSettings) {
		toSerialize["crlSettings"] = o.CrlSettings
	}
	if !IsNil(o.ProxySettings) {
		toSerialize["proxySettings"] = o.ProxySettings
	}
	return toSerialize, nil
}

type NullableCertificateRevocationSettings struct {
	value *CertificateRevocationSettings
	isSet bool
}

func (v NullableCertificateRevocationSettings) Get() *CertificateRevocationSettings {
	return v.value
}

func (v *NullableCertificateRevocationSettings) Set(val *CertificateRevocationSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateRevocationSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateRevocationSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateRevocationSettings(val *CertificateRevocationSettings) *NullableCertificateRevocationSettings {
	return &NullableCertificateRevocationSettings{value: val, isSet: true}
}

func (v NullableCertificateRevocationSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateRevocationSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
