/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// IdpAdapterContractMappingAttributeSourcesInner - struct for IdpAdapterContractMappingAttributeSourcesInner
type IdpAdapterContractMappingAttributeSourcesInner struct {
	CustomAttributeSource *CustomAttributeSource
	JdbcAttributeSource   *JdbcAttributeSource
	LdapAttributeSource   *LdapAttributeSource
}

// CustomAttributeSourceAsIdpAdapterContractMappingAttributeSourcesInner is a convenience function that returns CustomAttributeSource wrapped in IdpAdapterContractMappingAttributeSourcesInner
func CustomAttributeSourceAsIdpAdapterContractMappingAttributeSourcesInner(v *CustomAttributeSource) IdpAdapterContractMappingAttributeSourcesInner {
	return IdpAdapterContractMappingAttributeSourcesInner{
		CustomAttributeSource: v,
	}
}

// JdbcAttributeSourceAsIdpAdapterContractMappingAttributeSourcesInner is a convenience function that returns JdbcAttributeSource wrapped in IdpAdapterContractMappingAttributeSourcesInner
func JdbcAttributeSourceAsIdpAdapterContractMappingAttributeSourcesInner(v *JdbcAttributeSource) IdpAdapterContractMappingAttributeSourcesInner {
	return IdpAdapterContractMappingAttributeSourcesInner{
		JdbcAttributeSource: v,
	}
}

// LdapAttributeSourceAsIdpAdapterContractMappingAttributeSourcesInner is a convenience function that returns LdapAttributeSource wrapped in IdpAdapterContractMappingAttributeSourcesInner
func LdapAttributeSourceAsIdpAdapterContractMappingAttributeSourcesInner(v *LdapAttributeSource) IdpAdapterContractMappingAttributeSourcesInner {
	return IdpAdapterContractMappingAttributeSourcesInner{
		LdapAttributeSource: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *IdpAdapterContractMappingAttributeSourcesInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CustomAttributeSource
	err = newStrictDecoder(data).Decode(&dst.CustomAttributeSource)
	if err == nil {
		jsonCustomAttributeSource, _ := json.Marshal(dst.CustomAttributeSource)
		if string(jsonCustomAttributeSource) == "{}" { // empty struct
			dst.CustomAttributeSource = nil
		} else {
			match++
		}
	} else {
		dst.CustomAttributeSource = nil
	}

	// try to unmarshal data into JdbcAttributeSource
	err = newStrictDecoder(data).Decode(&dst.JdbcAttributeSource)
	if err == nil {
		jsonJdbcAttributeSource, _ := json.Marshal(dst.JdbcAttributeSource)
		if string(jsonJdbcAttributeSource) == "{}" { // empty struct
			dst.JdbcAttributeSource = nil
		} else {
			match++
		}
	} else {
		dst.JdbcAttributeSource = nil
	}

	// try to unmarshal data into LdapAttributeSource
	err = newStrictDecoder(data).Decode(&dst.LdapAttributeSource)
	if err == nil {
		jsonLdapAttributeSource, _ := json.Marshal(dst.LdapAttributeSource)
		if string(jsonLdapAttributeSource) == "{}" { // empty struct
			dst.LdapAttributeSource = nil
		} else {
			match++
		}
	} else {
		dst.LdapAttributeSource = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CustomAttributeSource = nil
		dst.JdbcAttributeSource = nil
		dst.LdapAttributeSource = nil

		return fmt.Errorf("data matches more than one schema in oneOf(IdpAdapterContractMappingAttributeSourcesInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(IdpAdapterContractMappingAttributeSourcesInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IdpAdapterContractMappingAttributeSourcesInner) MarshalJSON() ([]byte, error) {
	if src.CustomAttributeSource != nil {
		return json.Marshal(&src.CustomAttributeSource)
	}

	if src.JdbcAttributeSource != nil {
		return json.Marshal(&src.JdbcAttributeSource)
	}

	if src.LdapAttributeSource != nil {
		return json.Marshal(&src.LdapAttributeSource)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IdpAdapterContractMappingAttributeSourcesInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CustomAttributeSource != nil {
		return obj.CustomAttributeSource
	}

	if obj.JdbcAttributeSource != nil {
		return obj.JdbcAttributeSource
	}

	if obj.LdapAttributeSource != nil {
		return obj.LdapAttributeSource
	}

	// all schemas are nil
	return nil
}

type NullableIdpAdapterContractMappingAttributeSourcesInner struct {
	value *IdpAdapterContractMappingAttributeSourcesInner
	isSet bool
}

func (v NullableIdpAdapterContractMappingAttributeSourcesInner) Get() *IdpAdapterContractMappingAttributeSourcesInner {
	return v.value
}

func (v *NullableIdpAdapterContractMappingAttributeSourcesInner) Set(val *IdpAdapterContractMappingAttributeSourcesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableIdpAdapterContractMappingAttributeSourcesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableIdpAdapterContractMappingAttributeSourcesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdpAdapterContractMappingAttributeSourcesInner(val *IdpAdapterContractMappingAttributeSourcesInner) *NullableIdpAdapterContractMappingAttributeSourcesInner {
	return &NullableIdpAdapterContractMappingAttributeSourcesInner{value: val, isSet: true}
}

func (v NullableIdpAdapterContractMappingAttributeSourcesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdpAdapterContractMappingAttributeSourcesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
