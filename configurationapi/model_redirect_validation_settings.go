/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the RedirectValidationSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RedirectValidationSettings{}

// RedirectValidationSettings Settings for redirect validation for SSO, SLO and IdP discovery.
type RedirectValidationSettings struct {
	RedirectValidationLocalSettings   *RedirectValidationLocalSettings   `json:"redirectValidationLocalSettings,omitempty" tfsdk:"redirect_validation_local_settings"`
	RedirectValidationPartnerSettings *RedirectValidationPartnerSettings `json:"redirectValidationPartnerSettings,omitempty" tfsdk:"redirect_validation_partner_settings"`
}

// NewRedirectValidationSettings instantiates a new RedirectValidationSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedirectValidationSettings() *RedirectValidationSettings {
	this := RedirectValidationSettings{}
	return &this
}

// NewRedirectValidationSettingsWithDefaults instantiates a new RedirectValidationSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedirectValidationSettingsWithDefaults() *RedirectValidationSettings {
	this := RedirectValidationSettings{}
	return &this
}

// GetRedirectValidationLocalSettings returns the RedirectValidationLocalSettings field value if set, zero value otherwise.
func (o *RedirectValidationSettings) GetRedirectValidationLocalSettings() RedirectValidationLocalSettings {
	if o == nil || IsNil(o.RedirectValidationLocalSettings) {
		var ret RedirectValidationLocalSettings
		return ret
	}
	return *o.RedirectValidationLocalSettings
}

// GetRedirectValidationLocalSettingsOk returns a tuple with the RedirectValidationLocalSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectValidationSettings) GetRedirectValidationLocalSettingsOk() (*RedirectValidationLocalSettings, bool) {
	if o == nil || IsNil(o.RedirectValidationLocalSettings) {
		return nil, false
	}
	return o.RedirectValidationLocalSettings, true
}

// HasRedirectValidationLocalSettings returns a boolean if a field has been set.
func (o *RedirectValidationSettings) HasRedirectValidationLocalSettings() bool {
	if o != nil && !IsNil(o.RedirectValidationLocalSettings) {
		return true
	}

	return false
}

// SetRedirectValidationLocalSettings gets a reference to the given RedirectValidationLocalSettings and assigns it to the RedirectValidationLocalSettings field.
func (o *RedirectValidationSettings) SetRedirectValidationLocalSettings(v RedirectValidationLocalSettings) {
	o.RedirectValidationLocalSettings = &v
}

// GetRedirectValidationPartnerSettings returns the RedirectValidationPartnerSettings field value if set, zero value otherwise.
func (o *RedirectValidationSettings) GetRedirectValidationPartnerSettings() RedirectValidationPartnerSettings {
	if o == nil || IsNil(o.RedirectValidationPartnerSettings) {
		var ret RedirectValidationPartnerSettings
		return ret
	}
	return *o.RedirectValidationPartnerSettings
}

// GetRedirectValidationPartnerSettingsOk returns a tuple with the RedirectValidationPartnerSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectValidationSettings) GetRedirectValidationPartnerSettingsOk() (*RedirectValidationPartnerSettings, bool) {
	if o == nil || IsNil(o.RedirectValidationPartnerSettings) {
		return nil, false
	}
	return o.RedirectValidationPartnerSettings, true
}

// HasRedirectValidationPartnerSettings returns a boolean if a field has been set.
func (o *RedirectValidationSettings) HasRedirectValidationPartnerSettings() bool {
	if o != nil && !IsNil(o.RedirectValidationPartnerSettings) {
		return true
	}

	return false
}

// SetRedirectValidationPartnerSettings gets a reference to the given RedirectValidationPartnerSettings and assigns it to the RedirectValidationPartnerSettings field.
func (o *RedirectValidationSettings) SetRedirectValidationPartnerSettings(v RedirectValidationPartnerSettings) {
	o.RedirectValidationPartnerSettings = &v
}

func (o RedirectValidationSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RedirectValidationSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RedirectValidationLocalSettings) {
		toSerialize["redirectValidationLocalSettings"] = o.RedirectValidationLocalSettings
	}
	if !IsNil(o.RedirectValidationPartnerSettings) {
		toSerialize["redirectValidationPartnerSettings"] = o.RedirectValidationPartnerSettings
	}
	return toSerialize, nil
}

type NullableRedirectValidationSettings struct {
	value *RedirectValidationSettings
	isSet bool
}

func (v NullableRedirectValidationSettings) Get() *RedirectValidationSettings {
	return v.value
}

func (v *NullableRedirectValidationSettings) Set(val *RedirectValidationSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableRedirectValidationSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableRedirectValidationSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedirectValidationSettings(val *RedirectValidationSettings) *NullableRedirectValidationSettings {
	return &NullableRedirectValidationSettings{value: val, isSet: true}
}

func (v NullableRedirectValidationSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedirectValidationSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
