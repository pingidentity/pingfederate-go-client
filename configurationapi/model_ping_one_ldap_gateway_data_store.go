/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"time"
)

// checks if the PingOneLdapGatewayDataStore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PingOneLdapGatewayDataStore{}

// PingOneLdapGatewayDataStore struct for PingOneLdapGatewayDataStore
type PingOneLdapGatewayDataStore struct {
	DataStore
	// The data store name with a unique value across all data sources. Omitting this attribute will set the value to a combination of the hostname(s) and the principal.
	Name *string `json:"name,omitempty" tfsdk:"name"`
	// A type that allows PingFederate to configure many provisioning settings automatically. The value is validated against the LDAP gateway configuration in PingOne unless the header 'X-BypassExternalValidation' is set to true.
	LdapType             string       `json:"ldapType" tfsdk:"ldap_type"`
	PingOneConnectionRef ResourceLink `json:"pingOneConnectionRef" tfsdk:"ping_one_connection_ref"`
	// The environment ID that the gateway belongs to.
	PingOneEnvironmentId string `json:"pingOneEnvironmentId" tfsdk:"ping_one_environment_id"`
	// The ID of the PingOne LDAP Gateway this data store uses.
	PingOneLdapGatewayId string `json:"pingOneLdapGatewayId" tfsdk:"ping_one_ldap_gateway_id"`
	// Connects to the LDAP data store using secure SSL/TLS encryption (LDAPS). The default value is false. The value is validated against the LDAP gateway configuration in PingOne unless the header 'X-BypassExternalValidation' is set to true.
	UseSsl *bool `json:"useSsl,omitempty" tfsdk:"use_ssl"`
	// The list of LDAP attributes to be handled as binary data.
	BinaryAttributes []string `json:"binaryAttributes,omitempty" tfsdk:"binary_attributes"`
	// The time at which the datastore instance was last changed. This property is read only and is ignored on PUT and POST requests.
	LastModified *time.Time `json:"lastModified,omitempty" tfsdk:"last_modified"`
}

// NewPingOneLdapGatewayDataStore instantiates a new PingOneLdapGatewayDataStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPingOneLdapGatewayDataStore(ldapType string, pingOneConnectionRef ResourceLink, pingOneEnvironmentId string, pingOneLdapGatewayId string, type_ string) *PingOneLdapGatewayDataStore {
	this := PingOneLdapGatewayDataStore{}
	this.Type = type_
	this.LdapType = ldapType
	this.PingOneConnectionRef = pingOneConnectionRef
	this.PingOneEnvironmentId = pingOneEnvironmentId
	this.PingOneLdapGatewayId = pingOneLdapGatewayId
	return &this
}

// NewPingOneLdapGatewayDataStoreWithDefaults instantiates a new PingOneLdapGatewayDataStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPingOneLdapGatewayDataStoreWithDefaults() *PingOneLdapGatewayDataStore {
	this := PingOneLdapGatewayDataStore{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PingOneLdapGatewayDataStore) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneLdapGatewayDataStore) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PingOneLdapGatewayDataStore) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PingOneLdapGatewayDataStore) SetName(v string) {
	o.Name = &v
}

// GetLdapType returns the LdapType field value
func (o *PingOneLdapGatewayDataStore) GetLdapType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LdapType
}

// GetLdapTypeOk returns a tuple with the LdapType field value
// and a boolean to check if the value has been set.
func (o *PingOneLdapGatewayDataStore) GetLdapTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LdapType, true
}

// SetLdapType sets field value
func (o *PingOneLdapGatewayDataStore) SetLdapType(v string) {
	o.LdapType = v
}

// GetPingOneConnectionRef returns the PingOneConnectionRef field value
func (o *PingOneLdapGatewayDataStore) GetPingOneConnectionRef() ResourceLink {
	if o == nil {
		var ret ResourceLink
		return ret
	}

	return o.PingOneConnectionRef
}

// GetPingOneConnectionRefOk returns a tuple with the PingOneConnectionRef field value
// and a boolean to check if the value has been set.
func (o *PingOneLdapGatewayDataStore) GetPingOneConnectionRefOk() (*ResourceLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PingOneConnectionRef, true
}

// SetPingOneConnectionRef sets field value
func (o *PingOneLdapGatewayDataStore) SetPingOneConnectionRef(v ResourceLink) {
	o.PingOneConnectionRef = v
}

// GetPingOneEnvironmentId returns the PingOneEnvironmentId field value
func (o *PingOneLdapGatewayDataStore) GetPingOneEnvironmentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PingOneEnvironmentId
}

// GetPingOneEnvironmentIdOk returns a tuple with the PingOneEnvironmentId field value
// and a boolean to check if the value has been set.
func (o *PingOneLdapGatewayDataStore) GetPingOneEnvironmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PingOneEnvironmentId, true
}

// SetPingOneEnvironmentId sets field value
func (o *PingOneLdapGatewayDataStore) SetPingOneEnvironmentId(v string) {
	o.PingOneEnvironmentId = v
}

// GetPingOneLdapGatewayId returns the PingOneLdapGatewayId field value
func (o *PingOneLdapGatewayDataStore) GetPingOneLdapGatewayId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PingOneLdapGatewayId
}

// GetPingOneLdapGatewayIdOk returns a tuple with the PingOneLdapGatewayId field value
// and a boolean to check if the value has been set.
func (o *PingOneLdapGatewayDataStore) GetPingOneLdapGatewayIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PingOneLdapGatewayId, true
}

// SetPingOneLdapGatewayId sets field value
func (o *PingOneLdapGatewayDataStore) SetPingOneLdapGatewayId(v string) {
	o.PingOneLdapGatewayId = v
}

// GetUseSsl returns the UseSsl field value if set, zero value otherwise.
func (o *PingOneLdapGatewayDataStore) GetUseSsl() bool {
	if o == nil || IsNil(o.UseSsl) {
		var ret bool
		return ret
	}
	return *o.UseSsl
}

// GetUseSslOk returns a tuple with the UseSsl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneLdapGatewayDataStore) GetUseSslOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSsl) {
		return nil, false
	}
	return o.UseSsl, true
}

// HasUseSsl returns a boolean if a field has been set.
func (o *PingOneLdapGatewayDataStore) HasUseSsl() bool {
	if o != nil && !IsNil(o.UseSsl) {
		return true
	}

	return false
}

// SetUseSsl gets a reference to the given bool and assigns it to the UseSsl field.
func (o *PingOneLdapGatewayDataStore) SetUseSsl(v bool) {
	o.UseSsl = &v
}

// GetBinaryAttributes returns the BinaryAttributes field value if set, zero value otherwise.
func (o *PingOneLdapGatewayDataStore) GetBinaryAttributes() []string {
	if o == nil || IsNil(o.BinaryAttributes) {
		var ret []string
		return ret
	}
	return o.BinaryAttributes
}

// GetBinaryAttributesOk returns a tuple with the BinaryAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneLdapGatewayDataStore) GetBinaryAttributesOk() ([]string, bool) {
	if o == nil || IsNil(o.BinaryAttributes) {
		return nil, false
	}
	return o.BinaryAttributes, true
}

// HasBinaryAttributes returns a boolean if a field has been set.
func (o *PingOneLdapGatewayDataStore) HasBinaryAttributes() bool {
	if o != nil && !IsNil(o.BinaryAttributes) {
		return true
	}

	return false
}

// SetBinaryAttributes gets a reference to the given []string and assigns it to the BinaryAttributes field.
func (o *PingOneLdapGatewayDataStore) SetBinaryAttributes(v []string) {
	o.BinaryAttributes = v
}

// GetLastModified returns the LastModified field value if set, zero value otherwise.
func (o *PingOneLdapGatewayDataStore) GetLastModified() time.Time {
	if o == nil || IsNil(o.LastModified) {
		var ret time.Time
		return ret
	}
	return *o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PingOneLdapGatewayDataStore) GetLastModifiedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastModified) {
		return nil, false
	}
	return o.LastModified, true
}

// HasLastModified returns a boolean if a field has been set.
func (o *PingOneLdapGatewayDataStore) HasLastModified() bool {
	if o != nil && !IsNil(o.LastModified) {
		return true
	}

	return false
}

// SetLastModified gets a reference to the given time.Time and assigns it to the LastModified field.
func (o *PingOneLdapGatewayDataStore) SetLastModified(v time.Time) {
	o.LastModified = &v
}

func (o PingOneLdapGatewayDataStore) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PingOneLdapGatewayDataStore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedDataStore, errDataStore := json.Marshal(o.DataStore)
	if errDataStore != nil {
		return map[string]interface{}{}, errDataStore
	}
	errDataStore = json.Unmarshal([]byte(serializedDataStore), &toSerialize)
	if errDataStore != nil {
		return map[string]interface{}{}, errDataStore
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["ldapType"] = o.LdapType
	toSerialize["pingOneConnectionRef"] = o.PingOneConnectionRef
	toSerialize["pingOneEnvironmentId"] = o.PingOneEnvironmentId
	toSerialize["pingOneLdapGatewayId"] = o.PingOneLdapGatewayId
	if !IsNil(o.UseSsl) {
		toSerialize["useSsl"] = o.UseSsl
	}
	if !IsNil(o.BinaryAttributes) {
		toSerialize["binaryAttributes"] = o.BinaryAttributes
	}
	if !IsNil(o.LastModified) {
		toSerialize["lastModified"] = o.LastModified
	}
	return toSerialize, nil
}

type NullablePingOneLdapGatewayDataStore struct {
	value *PingOneLdapGatewayDataStore
	isSet bool
}

func (v NullablePingOneLdapGatewayDataStore) Get() *PingOneLdapGatewayDataStore {
	return v.value
}

func (v *NullablePingOneLdapGatewayDataStore) Set(val *PingOneLdapGatewayDataStore) {
	v.value = val
	v.isSet = true
}

func (v NullablePingOneLdapGatewayDataStore) IsSet() bool {
	return v.isSet
}

func (v *NullablePingOneLdapGatewayDataStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePingOneLdapGatewayDataStore(val *PingOneLdapGatewayDataStore) *NullablePingOneLdapGatewayDataStore {
	return &NullablePingOneLdapGatewayDataStore{value: val, isSet: true}
}

func (v NullablePingOneLdapGatewayDataStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePingOneLdapGatewayDataStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
