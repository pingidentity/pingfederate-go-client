/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the SpAdapterUrlMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpAdapterUrlMapping{}

// SpAdapterUrlMapping SP Adapter URL Mapping
type SpAdapterUrlMapping struct {
	// The URL that will be compared against the target URL. Use a wildcard (*) to match multiple URLs to the same adapter instance.
	Url        *string       `json:"url,omitempty"`
	AdapterRef *ResourceLink `json:"adapterRef,omitempty"`
}

// NewSpAdapterUrlMapping instantiates a new SpAdapterUrlMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpAdapterUrlMapping() *SpAdapterUrlMapping {
	this := SpAdapterUrlMapping{}
	return &this
}

// NewSpAdapterUrlMappingWithDefaults instantiates a new SpAdapterUrlMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpAdapterUrlMappingWithDefaults() *SpAdapterUrlMapping {
	this := SpAdapterUrlMapping{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *SpAdapterUrlMapping) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpAdapterUrlMapping) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *SpAdapterUrlMapping) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *SpAdapterUrlMapping) SetUrl(v string) {
	o.Url = &v
}

// GetAdapterRef returns the AdapterRef field value if set, zero value otherwise.
func (o *SpAdapterUrlMapping) GetAdapterRef() ResourceLink {
	if o == nil || IsNil(o.AdapterRef) {
		var ret ResourceLink
		return ret
	}
	return *o.AdapterRef
}

// GetAdapterRefOk returns a tuple with the AdapterRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpAdapterUrlMapping) GetAdapterRefOk() (*ResourceLink, bool) {
	if o == nil || IsNil(o.AdapterRef) {
		return nil, false
	}
	return o.AdapterRef, true
}

// HasAdapterRef returns a boolean if a field has been set.
func (o *SpAdapterUrlMapping) HasAdapterRef() bool {
	if o != nil && !IsNil(o.AdapterRef) {
		return true
	}

	return false
}

// SetAdapterRef gets a reference to the given ResourceLink and assigns it to the AdapterRef field.
func (o *SpAdapterUrlMapping) SetAdapterRef(v ResourceLink) {
	o.AdapterRef = &v
}

func (o SpAdapterUrlMapping) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpAdapterUrlMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.AdapterRef) {
		toSerialize["adapterRef"] = o.AdapterRef
	}
	return toSerialize, nil
}

type NullableSpAdapterUrlMapping struct {
	value *SpAdapterUrlMapping
	isSet bool
}

func (v NullableSpAdapterUrlMapping) Get() *SpAdapterUrlMapping {
	return v.value
}

func (v *NullableSpAdapterUrlMapping) Set(val *SpAdapterUrlMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableSpAdapterUrlMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableSpAdapterUrlMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpAdapterUrlMapping(val *SpAdapterUrlMapping) *NullableSpAdapterUrlMapping {
	return &NullableSpAdapterUrlMapping{value: val, isSet: true}
}

func (v NullableSpAdapterUrlMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpAdapterUrlMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
