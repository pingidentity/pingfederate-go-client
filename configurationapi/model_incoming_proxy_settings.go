/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the IncomingProxySettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncomingProxySettings{}

// IncomingProxySettings Incoming Proxy Settings.
type IncomingProxySettings struct {
	// Globally specify the header name (for example, X-Forwarded-For) where PingFederate should attempt to retrieve the client IP address in all HTTP requests.
	ForwardedIpAddressHeaderName *string `json:"forwardedIpAddressHeaderName,omitempty" tfsdk:"forwarded_ip_address_header_name"`
	// PingFederate combines multiple comma-separated header values into the same order that they are received. Define which IP address you want to use. Default is to use the last address.
	ForwardedIpAddressHeaderIndex *string `json:"forwardedIpAddressHeaderIndex,omitempty" tfsdk:"forwarded_ip_address_header_index"`
	// Globally specify the header name (for example, X-Forwarded-Host) where PingFederate should attempt to retrieve the hostname and port in all HTTP requests.
	ForwardedHostHeaderName *string `json:"forwardedHostHeaderName,omitempty" tfsdk:"forwarded_host_header_name"`
	// PingFederate combines multiple comma-separated header values into the same order that they are received. Define which hostname you want to use. Default is to use the last hostname.
	ForwardedHostHeaderIndex *string `json:"forwardedHostHeaderIndex,omitempty" tfsdk:"forwarded_host_header_index"`
	// While the proxy server is configured to pass client certificates as HTTP request headers, specify the header name here.
	ClientCertSSLHeaderName *string `json:"clientCertSSLHeaderName,omitempty" tfsdk:"client_cert_sslh_eader_name"`
	// While the proxy server is configured to pass client certificates as HTTP request headers, specify the chain header name here.
	ClientCertChainSSLHeaderName *string `json:"clientCertChainSSLHeaderName,omitempty" tfsdk:"client_cert_chain_sslh_eader_name"`
	// Allows you to globally specify that connections to the reverse proxy are made over HTTPS even when HTTP is used between the reverse proxy and PingFederate.
	ProxyTerminatesHttpsConns *bool `json:"proxyTerminatesHttpsConns,omitempty" tfsdk:"proxy_terminates_https_conns"`
}

// NewIncomingProxySettings instantiates a new IncomingProxySettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncomingProxySettings() *IncomingProxySettings {
	this := IncomingProxySettings{}
	return &this
}

// NewIncomingProxySettingsWithDefaults instantiates a new IncomingProxySettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncomingProxySettingsWithDefaults() *IncomingProxySettings {
	this := IncomingProxySettings{}
	return &this
}

// GetForwardedIpAddressHeaderName returns the ForwardedIpAddressHeaderName field value if set, zero value otherwise.
func (o *IncomingProxySettings) GetForwardedIpAddressHeaderName() string {
	if o == nil || IsNil(o.ForwardedIpAddressHeaderName) {
		var ret string
		return ret
	}
	return *o.ForwardedIpAddressHeaderName
}

// GetForwardedIpAddressHeaderNameOk returns a tuple with the ForwardedIpAddressHeaderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingProxySettings) GetForwardedIpAddressHeaderNameOk() (*string, bool) {
	if o == nil || IsNil(o.ForwardedIpAddressHeaderName) {
		return nil, false
	}
	return o.ForwardedIpAddressHeaderName, true
}

// HasForwardedIpAddressHeaderName returns a boolean if a field has been set.
func (o *IncomingProxySettings) HasForwardedIpAddressHeaderName() bool {
	if o != nil && !IsNil(o.ForwardedIpAddressHeaderName) {
		return true
	}

	return false
}

// SetForwardedIpAddressHeaderName gets a reference to the given string and assigns it to the ForwardedIpAddressHeaderName field.
func (o *IncomingProxySettings) SetForwardedIpAddressHeaderName(v string) {
	o.ForwardedIpAddressHeaderName = &v
}

// GetForwardedIpAddressHeaderIndex returns the ForwardedIpAddressHeaderIndex field value if set, zero value otherwise.
func (o *IncomingProxySettings) GetForwardedIpAddressHeaderIndex() string {
	if o == nil || IsNil(o.ForwardedIpAddressHeaderIndex) {
		var ret string
		return ret
	}
	return *o.ForwardedIpAddressHeaderIndex
}

// GetForwardedIpAddressHeaderIndexOk returns a tuple with the ForwardedIpAddressHeaderIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingProxySettings) GetForwardedIpAddressHeaderIndexOk() (*string, bool) {
	if o == nil || IsNil(o.ForwardedIpAddressHeaderIndex) {
		return nil, false
	}
	return o.ForwardedIpAddressHeaderIndex, true
}

// HasForwardedIpAddressHeaderIndex returns a boolean if a field has been set.
func (o *IncomingProxySettings) HasForwardedIpAddressHeaderIndex() bool {
	if o != nil && !IsNil(o.ForwardedIpAddressHeaderIndex) {
		return true
	}

	return false
}

// SetForwardedIpAddressHeaderIndex gets a reference to the given string and assigns it to the ForwardedIpAddressHeaderIndex field.
func (o *IncomingProxySettings) SetForwardedIpAddressHeaderIndex(v string) {
	o.ForwardedIpAddressHeaderIndex = &v
}

// GetForwardedHostHeaderName returns the ForwardedHostHeaderName field value if set, zero value otherwise.
func (o *IncomingProxySettings) GetForwardedHostHeaderName() string {
	if o == nil || IsNil(o.ForwardedHostHeaderName) {
		var ret string
		return ret
	}
	return *o.ForwardedHostHeaderName
}

// GetForwardedHostHeaderNameOk returns a tuple with the ForwardedHostHeaderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingProxySettings) GetForwardedHostHeaderNameOk() (*string, bool) {
	if o == nil || IsNil(o.ForwardedHostHeaderName) {
		return nil, false
	}
	return o.ForwardedHostHeaderName, true
}

// HasForwardedHostHeaderName returns a boolean if a field has been set.
func (o *IncomingProxySettings) HasForwardedHostHeaderName() bool {
	if o != nil && !IsNil(o.ForwardedHostHeaderName) {
		return true
	}

	return false
}

// SetForwardedHostHeaderName gets a reference to the given string and assigns it to the ForwardedHostHeaderName field.
func (o *IncomingProxySettings) SetForwardedHostHeaderName(v string) {
	o.ForwardedHostHeaderName = &v
}

// GetForwardedHostHeaderIndex returns the ForwardedHostHeaderIndex field value if set, zero value otherwise.
func (o *IncomingProxySettings) GetForwardedHostHeaderIndex() string {
	if o == nil || IsNil(o.ForwardedHostHeaderIndex) {
		var ret string
		return ret
	}
	return *o.ForwardedHostHeaderIndex
}

// GetForwardedHostHeaderIndexOk returns a tuple with the ForwardedHostHeaderIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingProxySettings) GetForwardedHostHeaderIndexOk() (*string, bool) {
	if o == nil || IsNil(o.ForwardedHostHeaderIndex) {
		return nil, false
	}
	return o.ForwardedHostHeaderIndex, true
}

// HasForwardedHostHeaderIndex returns a boolean if a field has been set.
func (o *IncomingProxySettings) HasForwardedHostHeaderIndex() bool {
	if o != nil && !IsNil(o.ForwardedHostHeaderIndex) {
		return true
	}

	return false
}

// SetForwardedHostHeaderIndex gets a reference to the given string and assigns it to the ForwardedHostHeaderIndex field.
func (o *IncomingProxySettings) SetForwardedHostHeaderIndex(v string) {
	o.ForwardedHostHeaderIndex = &v
}

// GetClientCertSSLHeaderName returns the ClientCertSSLHeaderName field value if set, zero value otherwise.
func (o *IncomingProxySettings) GetClientCertSSLHeaderName() string {
	if o == nil || IsNil(o.ClientCertSSLHeaderName) {
		var ret string
		return ret
	}
	return *o.ClientCertSSLHeaderName
}

// GetClientCertSSLHeaderNameOk returns a tuple with the ClientCertSSLHeaderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingProxySettings) GetClientCertSSLHeaderNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClientCertSSLHeaderName) {
		return nil, false
	}
	return o.ClientCertSSLHeaderName, true
}

// HasClientCertSSLHeaderName returns a boolean if a field has been set.
func (o *IncomingProxySettings) HasClientCertSSLHeaderName() bool {
	if o != nil && !IsNil(o.ClientCertSSLHeaderName) {
		return true
	}

	return false
}

// SetClientCertSSLHeaderName gets a reference to the given string and assigns it to the ClientCertSSLHeaderName field.
func (o *IncomingProxySettings) SetClientCertSSLHeaderName(v string) {
	o.ClientCertSSLHeaderName = &v
}

// GetClientCertChainSSLHeaderName returns the ClientCertChainSSLHeaderName field value if set, zero value otherwise.
func (o *IncomingProxySettings) GetClientCertChainSSLHeaderName() string {
	if o == nil || IsNil(o.ClientCertChainSSLHeaderName) {
		var ret string
		return ret
	}
	return *o.ClientCertChainSSLHeaderName
}

// GetClientCertChainSSLHeaderNameOk returns a tuple with the ClientCertChainSSLHeaderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingProxySettings) GetClientCertChainSSLHeaderNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClientCertChainSSLHeaderName) {
		return nil, false
	}
	return o.ClientCertChainSSLHeaderName, true
}

// HasClientCertChainSSLHeaderName returns a boolean if a field has been set.
func (o *IncomingProxySettings) HasClientCertChainSSLHeaderName() bool {
	if o != nil && !IsNil(o.ClientCertChainSSLHeaderName) {
		return true
	}

	return false
}

// SetClientCertChainSSLHeaderName gets a reference to the given string and assigns it to the ClientCertChainSSLHeaderName field.
func (o *IncomingProxySettings) SetClientCertChainSSLHeaderName(v string) {
	o.ClientCertChainSSLHeaderName = &v
}

// GetProxyTerminatesHttpsConns returns the ProxyTerminatesHttpsConns field value if set, zero value otherwise.
func (o *IncomingProxySettings) GetProxyTerminatesHttpsConns() bool {
	if o == nil || IsNil(o.ProxyTerminatesHttpsConns) {
		var ret bool
		return ret
	}
	return *o.ProxyTerminatesHttpsConns
}

// GetProxyTerminatesHttpsConnsOk returns a tuple with the ProxyTerminatesHttpsConns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingProxySettings) GetProxyTerminatesHttpsConnsOk() (*bool, bool) {
	if o == nil || IsNil(o.ProxyTerminatesHttpsConns) {
		return nil, false
	}
	return o.ProxyTerminatesHttpsConns, true
}

// HasProxyTerminatesHttpsConns returns a boolean if a field has been set.
func (o *IncomingProxySettings) HasProxyTerminatesHttpsConns() bool {
	if o != nil && !IsNil(o.ProxyTerminatesHttpsConns) {
		return true
	}

	return false
}

// SetProxyTerminatesHttpsConns gets a reference to the given bool and assigns it to the ProxyTerminatesHttpsConns field.
func (o *IncomingProxySettings) SetProxyTerminatesHttpsConns(v bool) {
	o.ProxyTerminatesHttpsConns = &v
}

func (o IncomingProxySettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncomingProxySettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ForwardedIpAddressHeaderName) {
		toSerialize["forwardedIpAddressHeaderName"] = o.ForwardedIpAddressHeaderName
	}
	if !IsNil(o.ForwardedIpAddressHeaderIndex) {
		toSerialize["forwardedIpAddressHeaderIndex"] = o.ForwardedIpAddressHeaderIndex
	}
	if !IsNil(o.ForwardedHostHeaderName) {
		toSerialize["forwardedHostHeaderName"] = o.ForwardedHostHeaderName
	}
	if !IsNil(o.ForwardedHostHeaderIndex) {
		toSerialize["forwardedHostHeaderIndex"] = o.ForwardedHostHeaderIndex
	}
	if !IsNil(o.ClientCertSSLHeaderName) {
		toSerialize["clientCertSSLHeaderName"] = o.ClientCertSSLHeaderName
	}
	if !IsNil(o.ClientCertChainSSLHeaderName) {
		toSerialize["clientCertChainSSLHeaderName"] = o.ClientCertChainSSLHeaderName
	}
	if !IsNil(o.ProxyTerminatesHttpsConns) {
		toSerialize["proxyTerminatesHttpsConns"] = o.ProxyTerminatesHttpsConns
	}
	return toSerialize, nil
}

type NullableIncomingProxySettings struct {
	value *IncomingProxySettings
	isSet bool
}

func (v NullableIncomingProxySettings) Get() *IncomingProxySettings {
	return v.value
}

func (v *NullableIncomingProxySettings) Set(val *IncomingProxySettings) {
	v.value = val
	v.isSet = true
}

func (v NullableIncomingProxySettings) IsSet() bool {
	return v.isSet
}

func (v *NullableIncomingProxySettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncomingProxySettings(val *IncomingProxySettings) *NullableIncomingProxySettings {
	return &NullableIncomingProxySettings{value: val, isSet: true}
}

func (v NullableIncomingProxySettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncomingProxySettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
