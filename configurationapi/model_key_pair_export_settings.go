/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the KeyPairExportSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyPairExportSettings{}

// KeyPairExportSettings Settings for exporting a key pair file from the system.
type KeyPairExportSettings struct {
	// The password for the key pair file that is created.
	Password string `json:"password" tfsdk:"password"`
}

// NewKeyPairExportSettings instantiates a new KeyPairExportSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyPairExportSettings(password string) *KeyPairExportSettings {
	this := KeyPairExportSettings{}
	this.Password = password
	return &this
}

// NewKeyPairExportSettingsWithDefaults instantiates a new KeyPairExportSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyPairExportSettingsWithDefaults() *KeyPairExportSettings {
	this := KeyPairExportSettings{}
	return &this
}

// GetPassword returns the Password field value
func (o *KeyPairExportSettings) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *KeyPairExportSettings) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *KeyPairExportSettings) SetPassword(v string) {
	o.Password = v
}

func (o KeyPairExportSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyPairExportSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["password"] = o.Password
	return toSerialize, nil
}

type NullableKeyPairExportSettings struct {
	value *KeyPairExportSettings
	isSet bool
}

func (v NullableKeyPairExportSettings) Get() *KeyPairExportSettings {
	return v.value
}

func (v *NullableKeyPairExportSettings) Set(val *KeyPairExportSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyPairExportSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyPairExportSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyPairExportSettings(val *KeyPairExportSettings) *NullableKeyPairExportSettings {
	return &NullableKeyPairExportSettings{value: val, isSet: true}
}

func (v NullableKeyPairExportSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyPairExportSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
