/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the Entity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Entity{}

// Entity struct for Entity
type Entity struct {
	// Unique entity identifier.
	EntityId *string `json:"entityId,omitempty" tfsdk:"entity_id"`
	// Entity description.
	EntityDescription *string `json:"entityDescription,omitempty" tfsdk:"entity_description"`
}

// NewEntity instantiates a new Entity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntity() *Entity {
	this := Entity{}
	return &this
}

// NewEntityWithDefaults instantiates a new Entity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityWithDefaults() *Entity {
	this := Entity{}
	return &this
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *Entity) GetEntityId() string {
	if o == nil || IsNil(o.EntityId) {
		var ret string
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetEntityIdOk() (*string, bool) {
	if o == nil || IsNil(o.EntityId) {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *Entity) HasEntityId() bool {
	if o != nil && !IsNil(o.EntityId) {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given string and assigns it to the EntityId field.
func (o *Entity) SetEntityId(v string) {
	o.EntityId = &v
}

// GetEntityDescription returns the EntityDescription field value if set, zero value otherwise.
func (o *Entity) GetEntityDescription() string {
	if o == nil || IsNil(o.EntityDescription) {
		var ret string
		return ret
	}
	return *o.EntityDescription
}

// GetEntityDescriptionOk returns a tuple with the EntityDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetEntityDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.EntityDescription) {
		return nil, false
	}
	return o.EntityDescription, true
}

// HasEntityDescription returns a boolean if a field has been set.
func (o *Entity) HasEntityDescription() bool {
	if o != nil && !IsNil(o.EntityDescription) {
		return true
	}

	return false
}

// SetEntityDescription gets a reference to the given string and assigns it to the EntityDescription field.
func (o *Entity) SetEntityDescription(v string) {
	o.EntityDescription = &v
}

func (o Entity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Entity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntityId) {
		toSerialize["entityId"] = o.EntityId
	}
	if !IsNil(o.EntityDescription) {
		toSerialize["entityDescription"] = o.EntityDescription
	}
	return toSerialize, nil
}

type NullableEntity struct {
	value *Entity
	isSet bool
}

func (v NullableEntity) Get() *Entity {
	return v.value
}

func (v *NullableEntity) Set(val *Entity) {
	v.value = val
	v.isSet = true
}

func (v NullableEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntity(val *Entity) *NullableEntity {
	return &NullableEntity{value: val, isSet: true}
}

func (v NullableEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
