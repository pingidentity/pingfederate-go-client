/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ServiceAssociation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceAssociation{}

// ServiceAssociation A model representing an association between a PingFederate component (typically a plugin) and a list of PingOne services.
type ServiceAssociation struct {
	// The display name for the component.
	ComponentName *string `json:"componentName,omitempty" tfsdk:"component_name"`
	// The list of PingOne services consumed by the plugin. The first service represents the primary service consumed by the plugin.
	ServiceNames []string `json:"serviceNames,omitempty" tfsdk:"service_names"`
	// Indicates whether one or more instances of the plugin are configured for a given PingOne connection.
	Configured *bool `json:"configured,omitempty" tfsdk:"configured"`
}

// NewServiceAssociation instantiates a new ServiceAssociation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceAssociation() *ServiceAssociation {
	this := ServiceAssociation{}
	return &this
}

// NewServiceAssociationWithDefaults instantiates a new ServiceAssociation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceAssociationWithDefaults() *ServiceAssociation {
	this := ServiceAssociation{}
	return &this
}

// GetComponentName returns the ComponentName field value if set, zero value otherwise.
func (o *ServiceAssociation) GetComponentName() string {
	if o == nil || IsNil(o.ComponentName) {
		var ret string
		return ret
	}
	return *o.ComponentName
}

// GetComponentNameOk returns a tuple with the ComponentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceAssociation) GetComponentNameOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentName) {
		return nil, false
	}
	return o.ComponentName, true
}

// HasComponentName returns a boolean if a field has been set.
func (o *ServiceAssociation) HasComponentName() bool {
	if o != nil && !IsNil(o.ComponentName) {
		return true
	}

	return false
}

// SetComponentName gets a reference to the given string and assigns it to the ComponentName field.
func (o *ServiceAssociation) SetComponentName(v string) {
	o.ComponentName = &v
}

// GetServiceNames returns the ServiceNames field value if set, zero value otherwise.
func (o *ServiceAssociation) GetServiceNames() []string {
	if o == nil || IsNil(o.ServiceNames) {
		var ret []string
		return ret
	}
	return o.ServiceNames
}

// GetServiceNamesOk returns a tuple with the ServiceNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceAssociation) GetServiceNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ServiceNames) {
		return nil, false
	}
	return o.ServiceNames, true
}

// HasServiceNames returns a boolean if a field has been set.
func (o *ServiceAssociation) HasServiceNames() bool {
	if o != nil && !IsNil(o.ServiceNames) {
		return true
	}

	return false
}

// SetServiceNames gets a reference to the given []string and assigns it to the ServiceNames field.
func (o *ServiceAssociation) SetServiceNames(v []string) {
	o.ServiceNames = v
}

// GetConfigured returns the Configured field value if set, zero value otherwise.
func (o *ServiceAssociation) GetConfigured() bool {
	if o == nil || IsNil(o.Configured) {
		var ret bool
		return ret
	}
	return *o.Configured
}

// GetConfiguredOk returns a tuple with the Configured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceAssociation) GetConfiguredOk() (*bool, bool) {
	if o == nil || IsNil(o.Configured) {
		return nil, false
	}
	return o.Configured, true
}

// HasConfigured returns a boolean if a field has been set.
func (o *ServiceAssociation) HasConfigured() bool {
	if o != nil && !IsNil(o.Configured) {
		return true
	}

	return false
}

// SetConfigured gets a reference to the given bool and assigns it to the Configured field.
func (o *ServiceAssociation) SetConfigured(v bool) {
	o.Configured = &v
}

func (o ServiceAssociation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceAssociation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ComponentName) {
		toSerialize["componentName"] = o.ComponentName
	}
	if !IsNil(o.ServiceNames) {
		toSerialize["serviceNames"] = o.ServiceNames
	}
	if !IsNil(o.Configured) {
		toSerialize["configured"] = o.Configured
	}
	return toSerialize, nil
}

type NullableServiceAssociation struct {
	value *ServiceAssociation
	isSet bool
}

func (v NullableServiceAssociation) Get() *ServiceAssociation {
	return v.value
}

func (v *NullableServiceAssociation) Set(val *ServiceAssociation) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceAssociation) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceAssociation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceAssociation(val *ServiceAssociation) *NullableServiceAssociation {
	return &NullableServiceAssociation{value: val, isSet: true}
}

func (v NullableServiceAssociation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceAssociation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
