/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ConvertMetadataRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConvertMetadataRequest{}

// ConvertMetadataRequest A request for converting SAML connection metadata into a JSON connection.
type ConvertMetadataRequest struct {
	// The expected connection type to convert.
	ConnectionType string `json:"connectionType" tfsdk:"connection_type"`
	// The expected browser-based SSO protocol to convert. In this case the protocol is restricted to SAML.
	ExpectedProtocol string `json:"expectedProtocol" tfsdk:"expected_protocol"`
	// The entity ID of the connection to be obtained from the input SAML Metadata. Required if the SAML Metadata has more than one connection defined.
	ExpectedEntityId *string `json:"expectedEntityId,omitempty" tfsdk:"expected_entity_id"`
	// The base-64 encoded XML SAML metadata.
	SamlMetadata string `json:"samlMetadata" tfsdk:"saml_metadata"`
	// The certificate to validate the metadata signature against. The certificate can be in PEM format or base-64 encoded DER format.
	VerificationCertificate *string     `json:"verificationCertificate,omitempty" tfsdk:"verification_certificate"`
	TemplateConnection      *Connection `json:"templateConnection,omitempty" tfsdk:"template_connection"`
}

type _ConvertMetadataRequest ConvertMetadataRequest

// NewConvertMetadataRequest instantiates a new ConvertMetadataRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConvertMetadataRequest(connectionType string, expectedProtocol string, samlMetadata string) *ConvertMetadataRequest {
	this := ConvertMetadataRequest{}
	this.ConnectionType = connectionType
	this.ExpectedProtocol = expectedProtocol
	this.SamlMetadata = samlMetadata
	return &this
}

// NewConvertMetadataRequestWithDefaults instantiates a new ConvertMetadataRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConvertMetadataRequestWithDefaults() *ConvertMetadataRequest {
	this := ConvertMetadataRequest{}
	return &this
}

// GetConnectionType returns the ConnectionType field value
func (o *ConvertMetadataRequest) GetConnectionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value
// and a boolean to check if the value has been set.
func (o *ConvertMetadataRequest) GetConnectionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionType, true
}

// SetConnectionType sets field value
func (o *ConvertMetadataRequest) SetConnectionType(v string) {
	o.ConnectionType = v
}

// GetExpectedProtocol returns the ExpectedProtocol field value
func (o *ConvertMetadataRequest) GetExpectedProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpectedProtocol
}

// GetExpectedProtocolOk returns a tuple with the ExpectedProtocol field value
// and a boolean to check if the value has been set.
func (o *ConvertMetadataRequest) GetExpectedProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpectedProtocol, true
}

// SetExpectedProtocol sets field value
func (o *ConvertMetadataRequest) SetExpectedProtocol(v string) {
	o.ExpectedProtocol = v
}

// GetExpectedEntityId returns the ExpectedEntityId field value if set, zero value otherwise.
func (o *ConvertMetadataRequest) GetExpectedEntityId() string {
	if o == nil || IsNil(o.ExpectedEntityId) {
		var ret string
		return ret
	}
	return *o.ExpectedEntityId
}

// GetExpectedEntityIdOk returns a tuple with the ExpectedEntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvertMetadataRequest) GetExpectedEntityIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExpectedEntityId) {
		return nil, false
	}
	return o.ExpectedEntityId, true
}

// HasExpectedEntityId returns a boolean if a field has been set.
func (o *ConvertMetadataRequest) HasExpectedEntityId() bool {
	if o != nil && !IsNil(o.ExpectedEntityId) {
		return true
	}

	return false
}

// SetExpectedEntityId gets a reference to the given string and assigns it to the ExpectedEntityId field.
func (o *ConvertMetadataRequest) SetExpectedEntityId(v string) {
	o.ExpectedEntityId = &v
}

// GetSamlMetadata returns the SamlMetadata field value
func (o *ConvertMetadataRequest) GetSamlMetadata() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SamlMetadata
}

// GetSamlMetadataOk returns a tuple with the SamlMetadata field value
// and a boolean to check if the value has been set.
func (o *ConvertMetadataRequest) GetSamlMetadataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SamlMetadata, true
}

// SetSamlMetadata sets field value
func (o *ConvertMetadataRequest) SetSamlMetadata(v string) {
	o.SamlMetadata = v
}

// GetVerificationCertificate returns the VerificationCertificate field value if set, zero value otherwise.
func (o *ConvertMetadataRequest) GetVerificationCertificate() string {
	if o == nil || IsNil(o.VerificationCertificate) {
		var ret string
		return ret
	}
	return *o.VerificationCertificate
}

// GetVerificationCertificateOk returns a tuple with the VerificationCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvertMetadataRequest) GetVerificationCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.VerificationCertificate) {
		return nil, false
	}
	return o.VerificationCertificate, true
}

// HasVerificationCertificate returns a boolean if a field has been set.
func (o *ConvertMetadataRequest) HasVerificationCertificate() bool {
	if o != nil && !IsNil(o.VerificationCertificate) {
		return true
	}

	return false
}

// SetVerificationCertificate gets a reference to the given string and assigns it to the VerificationCertificate field.
func (o *ConvertMetadataRequest) SetVerificationCertificate(v string) {
	o.VerificationCertificate = &v
}

// GetTemplateConnection returns the TemplateConnection field value if set, zero value otherwise.
func (o *ConvertMetadataRequest) GetTemplateConnection() Connection {
	if o == nil || IsNil(o.TemplateConnection) {
		var ret Connection
		return ret
	}
	return *o.TemplateConnection
}

// GetTemplateConnectionOk returns a tuple with the TemplateConnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvertMetadataRequest) GetTemplateConnectionOk() (*Connection, bool) {
	if o == nil || IsNil(o.TemplateConnection) {
		return nil, false
	}
	return o.TemplateConnection, true
}

// HasTemplateConnection returns a boolean if a field has been set.
func (o *ConvertMetadataRequest) HasTemplateConnection() bool {
	if o != nil && !IsNil(o.TemplateConnection) {
		return true
	}

	return false
}

// SetTemplateConnection gets a reference to the given Connection and assigns it to the TemplateConnection field.
func (o *ConvertMetadataRequest) SetTemplateConnection(v Connection) {
	o.TemplateConnection = &v
}

func (o ConvertMetadataRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConvertMetadataRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connectionType"] = o.ConnectionType
	toSerialize["expectedProtocol"] = o.ExpectedProtocol
	if !IsNil(o.ExpectedEntityId) {
		toSerialize["expectedEntityId"] = o.ExpectedEntityId
	}
	toSerialize["samlMetadata"] = o.SamlMetadata
	if !IsNil(o.VerificationCertificate) {
		toSerialize["verificationCertificate"] = o.VerificationCertificate
	}
	if !IsNil(o.TemplateConnection) {
		toSerialize["templateConnection"] = o.TemplateConnection
	}
	return toSerialize, nil
}

func (o *ConvertMetadataRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connectionType",
		"expectedProtocol",
		"samlMetadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConvertMetadataRequest := _ConvertMetadataRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varConvertMetadataRequest)

	if err != nil {
		return err
	}

	*o = ConvertMetadataRequest(varConvertMetadataRequest)

	return err
}

type NullableConvertMetadataRequest struct {
	value *ConvertMetadataRequest
	isSet bool
}

func (v NullableConvertMetadataRequest) Get() *ConvertMetadataRequest {
	return v.value
}

func (v *NullableConvertMetadataRequest) Set(val *ConvertMetadataRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConvertMetadataRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConvertMetadataRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConvertMetadataRequest(val *ConvertMetadataRequest) *NullableConvertMetadataRequest {
	return &NullableConvertMetadataRequest{value: val, isSet: true}
}

func (v NullableConvertMetadataRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConvertMetadataRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
