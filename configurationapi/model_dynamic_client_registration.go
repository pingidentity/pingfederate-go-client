/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the DynamicClientRegistration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DynamicClientRegistration{}

// DynamicClientRegistration Dynamic client registration settings.
type DynamicClientRegistration struct {
	// The initial access token to prevent unwanted client registrations.
	InitialAccessTokenScope *string `json:"initialAccessTokenScope,omitempty" tfsdk:"initial_access_token_scope"`
	// Restrict common scopes.
	RestrictCommonScopes *bool `json:"restrictCommonScopes,omitempty" tfsdk:"restrict_common_scopes"`
	// The common scopes to restrict.
	RestrictedCommonScopes []string `json:"restrictedCommonScopes,omitempty" tfsdk:"restricted_common_scopes"`
	// The exclusive scopes to allow.
	AllowedExclusiveScopes []string `json:"allowedExclusiveScopes,omitempty" tfsdk:"allowed_exclusive_scopes"`
	// The authorization detail types to allow.
	AllowedAuthorizationDetailTypes []string `json:"allowedAuthorizationDetailTypes,omitempty" tfsdk:"allowed_authorization_detail_types"`
	// Enforce replay prevention.
	EnforceReplayPrevention *bool `json:"enforceReplayPrevention,omitempty" tfsdk:"enforce_replay_prevention"`
	// Require signed requests.
	RequireSignedRequests        *bool         `json:"requireSignedRequests,omitempty" tfsdk:"require_signed_requests"`
	DefaultAccessTokenManagerRef *ResourceLink `json:"defaultAccessTokenManagerRef,omitempty" tfsdk:"default_access_token_manager_ref"`
	// Determines whether the client is restricted to using only its default access token manager. The default is false.
	RestrictToDefaultAccessTokenManager *bool `json:"restrictToDefaultAccessTokenManager,omitempty" tfsdk:"restrict_to_default_access_token_manager"`
	// Allows an administrator to override the Persistent Grant Lifetime set globally for the OAuth AS. Defaults to SERVER_DEFAULT.
	PersistentGrantExpirationType *string `json:"persistentGrantExpirationType,omitempty" tfsdk:"persistent_grant_expiration_type"`
	// The persistent grant expiration time.
	PersistentGrantExpirationTime *int64 `json:"persistentGrantExpirationTime,omitempty" tfsdk:"persistent_grant_expiration_time"`
	// The persistent grant expiration time unit.
	PersistentGrantExpirationTimeUnit *string `json:"persistentGrantExpirationTimeUnit,omitempty" tfsdk:"persistent_grant_expiration_time_unit"`
	// Allows an administrator to override the Persistent Grant Idle Timeout set globally for the OAuth AS. Defaults to SERVER_DEFAULT.
	PersistentGrantIdleTimeoutType *string `json:"persistentGrantIdleTimeoutType,omitempty" tfsdk:"persistent_grant_idle_timeout_type"`
	// The persistent grant idle timeout.
	PersistentGrantIdleTimeout *int64 `json:"persistentGrantIdleTimeout,omitempty" tfsdk:"persistent_grant_idle_timeout"`
	// The persistent grant idle timeout time unit.
	PersistentGrantIdleTimeoutTimeUnit *string `json:"persistentGrantIdleTimeoutTimeUnit,omitempty" tfsdk:"persistent_grant_idle_timeout_time_unit"`
	// Client TLS Certificate Issuer Type.
	ClientCertIssuerType *string       `json:"clientCertIssuerType,omitempty" tfsdk:"client_cert_issuer_type"`
	ClientCertIssuerRef  *ResourceLink `json:"clientCertIssuerRef,omitempty" tfsdk:"client_cert_issuer_ref"`
	// Use ROLL or DONT_ROLL to override the Roll Refresh Token Values setting on the Authorization Server Settings. SERVER_DEFAULT will default to the Roll Refresh Token Values setting on the Authorization Server Setting screen. Defaults to SERVER_DEFAULT.
	RefreshRolling *string `json:"refreshRolling,omitempty" tfsdk:"refresh_rolling"`
	// Use OVERRIDE_SERVER_DEFAULT to override the Refresh Token Rolling Interval value on the Authorization Server Settings. SERVER_DEFAULT will default to the Refresh Token Rolling Interval value on the Authorization Server Setting. Defaults to SERVER_DEFAULT.
	RefreshTokenRollingIntervalType *string `json:"refreshTokenRollingIntervalType,omitempty" tfsdk:"refresh_token_rolling_interval_type"`
	// The minimum interval to roll refresh tokens. This value will override the Refresh Token Rolling Interval Value on the Authorization Server Settings.
	RefreshTokenRollingInterval *int64 `json:"refreshTokenRollingInterval,omitempty" tfsdk:"refresh_token_rolling_interval"`
	// The refresh token rolling interval time unit. Defaults to HOURS.
	RefreshTokenRollingIntervalTimeUnit *string                       `json:"refreshTokenRollingIntervalTimeUnit,omitempty" tfsdk:"refresh_token_rolling_interval_time_unit"`
	OidcPolicy                          *ClientRegistrationOIDCPolicy `json:"oidcPolicy,omitempty" tfsdk:"oidc_policy"`
	// The client registration policies.
	PolicyRefs []ResourceLink `json:"policyRefs,omitempty" tfsdk:"policy_refs"`
	// Allows an administrator to override the Device Authorization Settings set globally for the OAuth AS. Defaults to SERVER_DEFAULT.
	DeviceFlowSettingType *string `json:"deviceFlowSettingType,omitempty" tfsdk:"device_flow_setting_type"`
	// The URL is used as 'verification_url' and 'verification_url_complete' values in a Device Authorization request.
	UserAuthorizationUrlOverride *string `json:"userAuthorizationUrlOverride,omitempty" tfsdk:"user_authorization_url_override"`
	// The 'device_code' and 'user_code' timeout, in seconds.
	PendingAuthorizationTimeoutOverride *int64 `json:"pendingAuthorizationTimeoutOverride,omitempty" tfsdk:"pending_authorization_timeout_override"`
	// The amount of time client should wait between polling requests, in seconds.
	DevicePollingIntervalOverride *int64 `json:"devicePollingIntervalOverride,omitempty" tfsdk:"device_polling_interval_override"`
	// Indicates if the Activation Code Confirmation page should be bypassed if 'verification_url_complete' is used by the end user to authorize a device.
	BypassActivationCodeConfirmationOverride *bool `json:"bypassActivationCodeConfirmationOverride,omitempty" tfsdk:"bypass_activation_code_confirmation_override"`
	// Determines whether Proof Key for Code Exchange (PKCE) is required for the dynamically created client.
	RequireProofKeyForCodeExchange *bool `json:"requireProofKeyForCodeExchange,omitempty" tfsdk:"require_proof_key_for_code_exchange"`
	// The minimum amount of time in seconds that the Client must wait between polling requests to the token endpoint. The default is 3 seconds.
	CibaPollingInterval *int64 `json:"cibaPollingInterval,omitempty" tfsdk:"ciba_polling_interval"`
	// Determines whether CIBA signed requests are required for this client.
	CibaRequireSignedRequests       *bool         `json:"cibaRequireSignedRequests,omitempty" tfsdk:"ciba_require_signed_requests"`
	RequestPolicyRef                *ResourceLink `json:"requestPolicyRef,omitempty" tfsdk:"request_policy_ref"`
	TokenExchangeProcessorPolicyRef *ResourceLink `json:"tokenExchangeProcessorPolicyRef,omitempty" tfsdk:"token_exchange_processor_policy_ref"`
	// Rotate registration access token on dynamic client management requests.
	RotateClientSecret *bool `json:"rotateClientSecret,omitempty" tfsdk:"rotate_client_secret"`
	// Rotate client secret on dynamic client management requests.
	RotateRegistrationAccessToken *bool `json:"rotateRegistrationAccessToken,omitempty" tfsdk:"rotate_registration_access_token"`
	// Allow client deletion from dynamic client management.
	AllowClientDelete *bool `json:"allowClientDelete,omitempty" tfsdk:"allow_client_delete"`
	// Disable registration access tokens. Local standards may mandate different registration access token requirements. If applicable, implement custom validation and enforcement rules using the DynamicClientRegistrationPlugin interface from the PingFederate SDK, configure the client registration policies (policyRefs), and set this property (disableRegistrationAccessTokens) to true. CAUTION: When the disableRegistrationAccessTokens property is set to true, all clients, not just the ones created using the Dynamic Client Registration protocol, are vulnerable to unrestricted retrievals, updates (including modifications to the client authentication scheme and redirect URIs), and deletes at the /as/clients.oauth2 endpoint unless one or more client registration policies are in place to protect against unauthorized attempts.
	DisableRegistrationAccessTokens *bool `json:"disableRegistrationAccessTokens,omitempty" tfsdk:"disable_registration_access_tokens"`
	// When specified, it overrides the global Refresh Token Grace Period defined in the Authorization Server Settings. The default value is SERVER_DEFAULT
	RefreshTokenRollingGracePeriodType *string `json:"refreshTokenRollingGracePeriodType,omitempty" tfsdk:"refresh_token_rolling_grace_period_type"`
	// The grace period that a rolled refresh token remains valid in seconds.
	RefreshTokenRollingGracePeriod *int64 `json:"refreshTokenRollingGracePeriod,omitempty" tfsdk:"refresh_token_rolling_grace_period"`
	// Temporarily retain the old client secret on client secret change.
	RetainClientSecret *bool `json:"retainClientSecret,omitempty" tfsdk:"retain_client_secret"`
	// Use OVERRIDE_SERVER_DEFAULT to override the Client Secret Retention Period value on the Authorization Server Settings. SERVER_DEFAULT will default to the Client Secret Retention Period value on the Authorization Server Setting. Defaults to SERVER_DEFAULT.
	ClientSecretRetentionPeriodType *string `json:"clientSecretRetentionPeriodType,omitempty" tfsdk:"client_secret_retention_period_type"`
	// The length of time in minutes that client secrets will be retained as secondary secrets after secret change. The default value is 0, which will disable secondary client secret retention. This value will override the Client Secret Retention Period value on the Authorization Server Settings.
	ClientSecretRetentionPeriodOverride *int64 `json:"clientSecretRetentionPeriodOverride,omitempty" tfsdk:"client_secret_retention_period_override"`
	// Determines whether JWT Secured authorization response mode is required when initiating an authorization request. The default is false.
	RequireJwtSecuredAuthorizationResponseMode *bool `json:"requireJwtSecuredAuthorizationResponseMode,omitempty" tfsdk:"require_jwt_secured_authorization_response_mode"`
	// Determines whether offline_access scope is required to issue refresh tokens or not. 'SERVER_DEFAULT' is the default value.
	RequireOfflineAccessScopeToIssueRefreshTokens *string `json:"requireOfflineAccessScopeToIssueRefreshTokens,omitempty" tfsdk:"require_offline_access_scope_to_issue_refresh_tokens"`
	// Determines whether offline_access requires the prompt parameter value to be set to 'consent' or not. The value will be reset to default if the 'requireOfflineAccessScopeToIssueRefreshTokens' attribute is set to 'SERVER_DEFAULT' or 'false'. 'SERVER_DEFAULT' is the default value.
	OfflineAccessRequireConsentPrompt *string `json:"offlineAccessRequireConsentPrompt,omitempty" tfsdk:"offline_access_require_consent_prompt"`
}

// NewDynamicClientRegistration instantiates a new DynamicClientRegistration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDynamicClientRegistration() *DynamicClientRegistration {
	this := DynamicClientRegistration{}
	return &this
}

// NewDynamicClientRegistrationWithDefaults instantiates a new DynamicClientRegistration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDynamicClientRegistrationWithDefaults() *DynamicClientRegistration {
	this := DynamicClientRegistration{}
	return &this
}

// GetInitialAccessTokenScope returns the InitialAccessTokenScope field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetInitialAccessTokenScope() string {
	if o == nil || IsNil(o.InitialAccessTokenScope) {
		var ret string
		return ret
	}
	return *o.InitialAccessTokenScope
}

// GetInitialAccessTokenScopeOk returns a tuple with the InitialAccessTokenScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetInitialAccessTokenScopeOk() (*string, bool) {
	if o == nil || IsNil(o.InitialAccessTokenScope) {
		return nil, false
	}
	return o.InitialAccessTokenScope, true
}

// HasInitialAccessTokenScope returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasInitialAccessTokenScope() bool {
	if o != nil && !IsNil(o.InitialAccessTokenScope) {
		return true
	}

	return false
}

// SetInitialAccessTokenScope gets a reference to the given string and assigns it to the InitialAccessTokenScope field.
func (o *DynamicClientRegistration) SetInitialAccessTokenScope(v string) {
	o.InitialAccessTokenScope = &v
}

// GetRestrictCommonScopes returns the RestrictCommonScopes field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetRestrictCommonScopes() bool {
	if o == nil || IsNil(o.RestrictCommonScopes) {
		var ret bool
		return ret
	}
	return *o.RestrictCommonScopes
}

// GetRestrictCommonScopesOk returns a tuple with the RestrictCommonScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetRestrictCommonScopesOk() (*bool, bool) {
	if o == nil || IsNil(o.RestrictCommonScopes) {
		return nil, false
	}
	return o.RestrictCommonScopes, true
}

// HasRestrictCommonScopes returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasRestrictCommonScopes() bool {
	if o != nil && !IsNil(o.RestrictCommonScopes) {
		return true
	}

	return false
}

// SetRestrictCommonScopes gets a reference to the given bool and assigns it to the RestrictCommonScopes field.
func (o *DynamicClientRegistration) SetRestrictCommonScopes(v bool) {
	o.RestrictCommonScopes = &v
}

// GetRestrictedCommonScopes returns the RestrictedCommonScopes field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetRestrictedCommonScopes() []string {
	if o == nil || IsNil(o.RestrictedCommonScopes) {
		var ret []string
		return ret
	}
	return o.RestrictedCommonScopes
}

// GetRestrictedCommonScopesOk returns a tuple with the RestrictedCommonScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetRestrictedCommonScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.RestrictedCommonScopes) {
		return nil, false
	}
	return o.RestrictedCommonScopes, true
}

// HasRestrictedCommonScopes returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasRestrictedCommonScopes() bool {
	if o != nil && !IsNil(o.RestrictedCommonScopes) {
		return true
	}

	return false
}

// SetRestrictedCommonScopes gets a reference to the given []string and assigns it to the RestrictedCommonScopes field.
func (o *DynamicClientRegistration) SetRestrictedCommonScopes(v []string) {
	o.RestrictedCommonScopes = v
}

// GetAllowedExclusiveScopes returns the AllowedExclusiveScopes field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetAllowedExclusiveScopes() []string {
	if o == nil || IsNil(o.AllowedExclusiveScopes) {
		var ret []string
		return ret
	}
	return o.AllowedExclusiveScopes
}

// GetAllowedExclusiveScopesOk returns a tuple with the AllowedExclusiveScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetAllowedExclusiveScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedExclusiveScopes) {
		return nil, false
	}
	return o.AllowedExclusiveScopes, true
}

// HasAllowedExclusiveScopes returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasAllowedExclusiveScopes() bool {
	if o != nil && !IsNil(o.AllowedExclusiveScopes) {
		return true
	}

	return false
}

// SetAllowedExclusiveScopes gets a reference to the given []string and assigns it to the AllowedExclusiveScopes field.
func (o *DynamicClientRegistration) SetAllowedExclusiveScopes(v []string) {
	o.AllowedExclusiveScopes = v
}

// GetAllowedAuthorizationDetailTypes returns the AllowedAuthorizationDetailTypes field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetAllowedAuthorizationDetailTypes() []string {
	if o == nil || IsNil(o.AllowedAuthorizationDetailTypes) {
		var ret []string
		return ret
	}
	return o.AllowedAuthorizationDetailTypes
}

// GetAllowedAuthorizationDetailTypesOk returns a tuple with the AllowedAuthorizationDetailTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetAllowedAuthorizationDetailTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedAuthorizationDetailTypes) {
		return nil, false
	}
	return o.AllowedAuthorizationDetailTypes, true
}

// HasAllowedAuthorizationDetailTypes returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasAllowedAuthorizationDetailTypes() bool {
	if o != nil && !IsNil(o.AllowedAuthorizationDetailTypes) {
		return true
	}

	return false
}

// SetAllowedAuthorizationDetailTypes gets a reference to the given []string and assigns it to the AllowedAuthorizationDetailTypes field.
func (o *DynamicClientRegistration) SetAllowedAuthorizationDetailTypes(v []string) {
	o.AllowedAuthorizationDetailTypes = v
}

// GetEnforceReplayPrevention returns the EnforceReplayPrevention field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetEnforceReplayPrevention() bool {
	if o == nil || IsNil(o.EnforceReplayPrevention) {
		var ret bool
		return ret
	}
	return *o.EnforceReplayPrevention
}

// GetEnforceReplayPreventionOk returns a tuple with the EnforceReplayPrevention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetEnforceReplayPreventionOk() (*bool, bool) {
	if o == nil || IsNil(o.EnforceReplayPrevention) {
		return nil, false
	}
	return o.EnforceReplayPrevention, true
}

// HasEnforceReplayPrevention returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasEnforceReplayPrevention() bool {
	if o != nil && !IsNil(o.EnforceReplayPrevention) {
		return true
	}

	return false
}

// SetEnforceReplayPrevention gets a reference to the given bool and assigns it to the EnforceReplayPrevention field.
func (o *DynamicClientRegistration) SetEnforceReplayPrevention(v bool) {
	o.EnforceReplayPrevention = &v
}

// GetRequireSignedRequests returns the RequireSignedRequests field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetRequireSignedRequests() bool {
	if o == nil || IsNil(o.RequireSignedRequests) {
		var ret bool
		return ret
	}
	return *o.RequireSignedRequests
}

// GetRequireSignedRequestsOk returns a tuple with the RequireSignedRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetRequireSignedRequestsOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireSignedRequests) {
		return nil, false
	}
	return o.RequireSignedRequests, true
}

// HasRequireSignedRequests returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasRequireSignedRequests() bool {
	if o != nil && !IsNil(o.RequireSignedRequests) {
		return true
	}

	return false
}

// SetRequireSignedRequests gets a reference to the given bool and assigns it to the RequireSignedRequests field.
func (o *DynamicClientRegistration) SetRequireSignedRequests(v bool) {
	o.RequireSignedRequests = &v
}

// GetDefaultAccessTokenManagerRef returns the DefaultAccessTokenManagerRef field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetDefaultAccessTokenManagerRef() ResourceLink {
	if o == nil || IsNil(o.DefaultAccessTokenManagerRef) {
		var ret ResourceLink
		return ret
	}
	return *o.DefaultAccessTokenManagerRef
}

// GetDefaultAccessTokenManagerRefOk returns a tuple with the DefaultAccessTokenManagerRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetDefaultAccessTokenManagerRefOk() (*ResourceLink, bool) {
	if o == nil || IsNil(o.DefaultAccessTokenManagerRef) {
		return nil, false
	}
	return o.DefaultAccessTokenManagerRef, true
}

// HasDefaultAccessTokenManagerRef returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasDefaultAccessTokenManagerRef() bool {
	if o != nil && !IsNil(o.DefaultAccessTokenManagerRef) {
		return true
	}

	return false
}

// SetDefaultAccessTokenManagerRef gets a reference to the given ResourceLink and assigns it to the DefaultAccessTokenManagerRef field.
func (o *DynamicClientRegistration) SetDefaultAccessTokenManagerRef(v ResourceLink) {
	o.DefaultAccessTokenManagerRef = &v
}

// GetRestrictToDefaultAccessTokenManager returns the RestrictToDefaultAccessTokenManager field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetRestrictToDefaultAccessTokenManager() bool {
	if o == nil || IsNil(o.RestrictToDefaultAccessTokenManager) {
		var ret bool
		return ret
	}
	return *o.RestrictToDefaultAccessTokenManager
}

// GetRestrictToDefaultAccessTokenManagerOk returns a tuple with the RestrictToDefaultAccessTokenManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetRestrictToDefaultAccessTokenManagerOk() (*bool, bool) {
	if o == nil || IsNil(o.RestrictToDefaultAccessTokenManager) {
		return nil, false
	}
	return o.RestrictToDefaultAccessTokenManager, true
}

// HasRestrictToDefaultAccessTokenManager returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasRestrictToDefaultAccessTokenManager() bool {
	if o != nil && !IsNil(o.RestrictToDefaultAccessTokenManager) {
		return true
	}

	return false
}

// SetRestrictToDefaultAccessTokenManager gets a reference to the given bool and assigns it to the RestrictToDefaultAccessTokenManager field.
func (o *DynamicClientRegistration) SetRestrictToDefaultAccessTokenManager(v bool) {
	o.RestrictToDefaultAccessTokenManager = &v
}

// GetPersistentGrantExpirationType returns the PersistentGrantExpirationType field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetPersistentGrantExpirationType() string {
	if o == nil || IsNil(o.PersistentGrantExpirationType) {
		var ret string
		return ret
	}
	return *o.PersistentGrantExpirationType
}

// GetPersistentGrantExpirationTypeOk returns a tuple with the PersistentGrantExpirationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetPersistentGrantExpirationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PersistentGrantExpirationType) {
		return nil, false
	}
	return o.PersistentGrantExpirationType, true
}

// HasPersistentGrantExpirationType returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasPersistentGrantExpirationType() bool {
	if o != nil && !IsNil(o.PersistentGrantExpirationType) {
		return true
	}

	return false
}

// SetPersistentGrantExpirationType gets a reference to the given string and assigns it to the PersistentGrantExpirationType field.
func (o *DynamicClientRegistration) SetPersistentGrantExpirationType(v string) {
	o.PersistentGrantExpirationType = &v
}

// GetPersistentGrantExpirationTime returns the PersistentGrantExpirationTime field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetPersistentGrantExpirationTime() int64 {
	if o == nil || IsNil(o.PersistentGrantExpirationTime) {
		var ret int64
		return ret
	}
	return *o.PersistentGrantExpirationTime
}

// GetPersistentGrantExpirationTimeOk returns a tuple with the PersistentGrantExpirationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetPersistentGrantExpirationTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PersistentGrantExpirationTime) {
		return nil, false
	}
	return o.PersistentGrantExpirationTime, true
}

// HasPersistentGrantExpirationTime returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasPersistentGrantExpirationTime() bool {
	if o != nil && !IsNil(o.PersistentGrantExpirationTime) {
		return true
	}

	return false
}

// SetPersistentGrantExpirationTime gets a reference to the given int64 and assigns it to the PersistentGrantExpirationTime field.
func (o *DynamicClientRegistration) SetPersistentGrantExpirationTime(v int64) {
	o.PersistentGrantExpirationTime = &v
}

// GetPersistentGrantExpirationTimeUnit returns the PersistentGrantExpirationTimeUnit field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetPersistentGrantExpirationTimeUnit() string {
	if o == nil || IsNil(o.PersistentGrantExpirationTimeUnit) {
		var ret string
		return ret
	}
	return *o.PersistentGrantExpirationTimeUnit
}

// GetPersistentGrantExpirationTimeUnitOk returns a tuple with the PersistentGrantExpirationTimeUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetPersistentGrantExpirationTimeUnitOk() (*string, bool) {
	if o == nil || IsNil(o.PersistentGrantExpirationTimeUnit) {
		return nil, false
	}
	return o.PersistentGrantExpirationTimeUnit, true
}

// HasPersistentGrantExpirationTimeUnit returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasPersistentGrantExpirationTimeUnit() bool {
	if o != nil && !IsNil(o.PersistentGrantExpirationTimeUnit) {
		return true
	}

	return false
}

// SetPersistentGrantExpirationTimeUnit gets a reference to the given string and assigns it to the PersistentGrantExpirationTimeUnit field.
func (o *DynamicClientRegistration) SetPersistentGrantExpirationTimeUnit(v string) {
	o.PersistentGrantExpirationTimeUnit = &v
}

// GetPersistentGrantIdleTimeoutType returns the PersistentGrantIdleTimeoutType field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetPersistentGrantIdleTimeoutType() string {
	if o == nil || IsNil(o.PersistentGrantIdleTimeoutType) {
		var ret string
		return ret
	}
	return *o.PersistentGrantIdleTimeoutType
}

// GetPersistentGrantIdleTimeoutTypeOk returns a tuple with the PersistentGrantIdleTimeoutType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetPersistentGrantIdleTimeoutTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PersistentGrantIdleTimeoutType) {
		return nil, false
	}
	return o.PersistentGrantIdleTimeoutType, true
}

// HasPersistentGrantIdleTimeoutType returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasPersistentGrantIdleTimeoutType() bool {
	if o != nil && !IsNil(o.PersistentGrantIdleTimeoutType) {
		return true
	}

	return false
}

// SetPersistentGrantIdleTimeoutType gets a reference to the given string and assigns it to the PersistentGrantIdleTimeoutType field.
func (o *DynamicClientRegistration) SetPersistentGrantIdleTimeoutType(v string) {
	o.PersistentGrantIdleTimeoutType = &v
}

// GetPersistentGrantIdleTimeout returns the PersistentGrantIdleTimeout field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetPersistentGrantIdleTimeout() int64 {
	if o == nil || IsNil(o.PersistentGrantIdleTimeout) {
		var ret int64
		return ret
	}
	return *o.PersistentGrantIdleTimeout
}

// GetPersistentGrantIdleTimeoutOk returns a tuple with the PersistentGrantIdleTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetPersistentGrantIdleTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.PersistentGrantIdleTimeout) {
		return nil, false
	}
	return o.PersistentGrantIdleTimeout, true
}

// HasPersistentGrantIdleTimeout returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasPersistentGrantIdleTimeout() bool {
	if o != nil && !IsNil(o.PersistentGrantIdleTimeout) {
		return true
	}

	return false
}

// SetPersistentGrantIdleTimeout gets a reference to the given int64 and assigns it to the PersistentGrantIdleTimeout field.
func (o *DynamicClientRegistration) SetPersistentGrantIdleTimeout(v int64) {
	o.PersistentGrantIdleTimeout = &v
}

// GetPersistentGrantIdleTimeoutTimeUnit returns the PersistentGrantIdleTimeoutTimeUnit field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetPersistentGrantIdleTimeoutTimeUnit() string {
	if o == nil || IsNil(o.PersistentGrantIdleTimeoutTimeUnit) {
		var ret string
		return ret
	}
	return *o.PersistentGrantIdleTimeoutTimeUnit
}

// GetPersistentGrantIdleTimeoutTimeUnitOk returns a tuple with the PersistentGrantIdleTimeoutTimeUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetPersistentGrantIdleTimeoutTimeUnitOk() (*string, bool) {
	if o == nil || IsNil(o.PersistentGrantIdleTimeoutTimeUnit) {
		return nil, false
	}
	return o.PersistentGrantIdleTimeoutTimeUnit, true
}

// HasPersistentGrantIdleTimeoutTimeUnit returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasPersistentGrantIdleTimeoutTimeUnit() bool {
	if o != nil && !IsNil(o.PersistentGrantIdleTimeoutTimeUnit) {
		return true
	}

	return false
}

// SetPersistentGrantIdleTimeoutTimeUnit gets a reference to the given string and assigns it to the PersistentGrantIdleTimeoutTimeUnit field.
func (o *DynamicClientRegistration) SetPersistentGrantIdleTimeoutTimeUnit(v string) {
	o.PersistentGrantIdleTimeoutTimeUnit = &v
}

// GetClientCertIssuerType returns the ClientCertIssuerType field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetClientCertIssuerType() string {
	if o == nil || IsNil(o.ClientCertIssuerType) {
		var ret string
		return ret
	}
	return *o.ClientCertIssuerType
}

// GetClientCertIssuerTypeOk returns a tuple with the ClientCertIssuerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetClientCertIssuerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ClientCertIssuerType) {
		return nil, false
	}
	return o.ClientCertIssuerType, true
}

// HasClientCertIssuerType returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasClientCertIssuerType() bool {
	if o != nil && !IsNil(o.ClientCertIssuerType) {
		return true
	}

	return false
}

// SetClientCertIssuerType gets a reference to the given string and assigns it to the ClientCertIssuerType field.
func (o *DynamicClientRegistration) SetClientCertIssuerType(v string) {
	o.ClientCertIssuerType = &v
}

// GetClientCertIssuerRef returns the ClientCertIssuerRef field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetClientCertIssuerRef() ResourceLink {
	if o == nil || IsNil(o.ClientCertIssuerRef) {
		var ret ResourceLink
		return ret
	}
	return *o.ClientCertIssuerRef
}

// GetClientCertIssuerRefOk returns a tuple with the ClientCertIssuerRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetClientCertIssuerRefOk() (*ResourceLink, bool) {
	if o == nil || IsNil(o.ClientCertIssuerRef) {
		return nil, false
	}
	return o.ClientCertIssuerRef, true
}

// HasClientCertIssuerRef returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasClientCertIssuerRef() bool {
	if o != nil && !IsNil(o.ClientCertIssuerRef) {
		return true
	}

	return false
}

// SetClientCertIssuerRef gets a reference to the given ResourceLink and assigns it to the ClientCertIssuerRef field.
func (o *DynamicClientRegistration) SetClientCertIssuerRef(v ResourceLink) {
	o.ClientCertIssuerRef = &v
}

// GetRefreshRolling returns the RefreshRolling field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetRefreshRolling() string {
	if o == nil || IsNil(o.RefreshRolling) {
		var ret string
		return ret
	}
	return *o.RefreshRolling
}

// GetRefreshRollingOk returns a tuple with the RefreshRolling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetRefreshRollingOk() (*string, bool) {
	if o == nil || IsNil(o.RefreshRolling) {
		return nil, false
	}
	return o.RefreshRolling, true
}

// HasRefreshRolling returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasRefreshRolling() bool {
	if o != nil && !IsNil(o.RefreshRolling) {
		return true
	}

	return false
}

// SetRefreshRolling gets a reference to the given string and assigns it to the RefreshRolling field.
func (o *DynamicClientRegistration) SetRefreshRolling(v string) {
	o.RefreshRolling = &v
}

// GetRefreshTokenRollingIntervalType returns the RefreshTokenRollingIntervalType field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetRefreshTokenRollingIntervalType() string {
	if o == nil || IsNil(o.RefreshTokenRollingIntervalType) {
		var ret string
		return ret
	}
	return *o.RefreshTokenRollingIntervalType
}

// GetRefreshTokenRollingIntervalTypeOk returns a tuple with the RefreshTokenRollingIntervalType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetRefreshTokenRollingIntervalTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RefreshTokenRollingIntervalType) {
		return nil, false
	}
	return o.RefreshTokenRollingIntervalType, true
}

// HasRefreshTokenRollingIntervalType returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasRefreshTokenRollingIntervalType() bool {
	if o != nil && !IsNil(o.RefreshTokenRollingIntervalType) {
		return true
	}

	return false
}

// SetRefreshTokenRollingIntervalType gets a reference to the given string and assigns it to the RefreshTokenRollingIntervalType field.
func (o *DynamicClientRegistration) SetRefreshTokenRollingIntervalType(v string) {
	o.RefreshTokenRollingIntervalType = &v
}

// GetRefreshTokenRollingInterval returns the RefreshTokenRollingInterval field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetRefreshTokenRollingInterval() int64 {
	if o == nil || IsNil(o.RefreshTokenRollingInterval) {
		var ret int64
		return ret
	}
	return *o.RefreshTokenRollingInterval
}

// GetRefreshTokenRollingIntervalOk returns a tuple with the RefreshTokenRollingInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetRefreshTokenRollingIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.RefreshTokenRollingInterval) {
		return nil, false
	}
	return o.RefreshTokenRollingInterval, true
}

// HasRefreshTokenRollingInterval returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasRefreshTokenRollingInterval() bool {
	if o != nil && !IsNil(o.RefreshTokenRollingInterval) {
		return true
	}

	return false
}

// SetRefreshTokenRollingInterval gets a reference to the given int64 and assigns it to the RefreshTokenRollingInterval field.
func (o *DynamicClientRegistration) SetRefreshTokenRollingInterval(v int64) {
	o.RefreshTokenRollingInterval = &v
}

// GetRefreshTokenRollingIntervalTimeUnit returns the RefreshTokenRollingIntervalTimeUnit field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetRefreshTokenRollingIntervalTimeUnit() string {
	if o == nil || IsNil(o.RefreshTokenRollingIntervalTimeUnit) {
		var ret string
		return ret
	}
	return *o.RefreshTokenRollingIntervalTimeUnit
}

// GetRefreshTokenRollingIntervalTimeUnitOk returns a tuple with the RefreshTokenRollingIntervalTimeUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetRefreshTokenRollingIntervalTimeUnitOk() (*string, bool) {
	if o == nil || IsNil(o.RefreshTokenRollingIntervalTimeUnit) {
		return nil, false
	}
	return o.RefreshTokenRollingIntervalTimeUnit, true
}

// HasRefreshTokenRollingIntervalTimeUnit returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasRefreshTokenRollingIntervalTimeUnit() bool {
	if o != nil && !IsNil(o.RefreshTokenRollingIntervalTimeUnit) {
		return true
	}

	return false
}

// SetRefreshTokenRollingIntervalTimeUnit gets a reference to the given string and assigns it to the RefreshTokenRollingIntervalTimeUnit field.
func (o *DynamicClientRegistration) SetRefreshTokenRollingIntervalTimeUnit(v string) {
	o.RefreshTokenRollingIntervalTimeUnit = &v
}

// GetOidcPolicy returns the OidcPolicy field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetOidcPolicy() ClientRegistrationOIDCPolicy {
	if o == nil || IsNil(o.OidcPolicy) {
		var ret ClientRegistrationOIDCPolicy
		return ret
	}
	return *o.OidcPolicy
}

// GetOidcPolicyOk returns a tuple with the OidcPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetOidcPolicyOk() (*ClientRegistrationOIDCPolicy, bool) {
	if o == nil || IsNil(o.OidcPolicy) {
		return nil, false
	}
	return o.OidcPolicy, true
}

// HasOidcPolicy returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasOidcPolicy() bool {
	if o != nil && !IsNil(o.OidcPolicy) {
		return true
	}

	return false
}

// SetOidcPolicy gets a reference to the given ClientRegistrationOIDCPolicy and assigns it to the OidcPolicy field.
func (o *DynamicClientRegistration) SetOidcPolicy(v ClientRegistrationOIDCPolicy) {
	o.OidcPolicy = &v
}

// GetPolicyRefs returns the PolicyRefs field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetPolicyRefs() []ResourceLink {
	if o == nil || IsNil(o.PolicyRefs) {
		var ret []ResourceLink
		return ret
	}
	return o.PolicyRefs
}

// GetPolicyRefsOk returns a tuple with the PolicyRefs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetPolicyRefsOk() ([]ResourceLink, bool) {
	if o == nil || IsNil(o.PolicyRefs) {
		return nil, false
	}
	return o.PolicyRefs, true
}

// HasPolicyRefs returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasPolicyRefs() bool {
	if o != nil && !IsNil(o.PolicyRefs) {
		return true
	}

	return false
}

// SetPolicyRefs gets a reference to the given []ResourceLink and assigns it to the PolicyRefs field.
func (o *DynamicClientRegistration) SetPolicyRefs(v []ResourceLink) {
	o.PolicyRefs = v
}

// GetDeviceFlowSettingType returns the DeviceFlowSettingType field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetDeviceFlowSettingType() string {
	if o == nil || IsNil(o.DeviceFlowSettingType) {
		var ret string
		return ret
	}
	return *o.DeviceFlowSettingType
}

// GetDeviceFlowSettingTypeOk returns a tuple with the DeviceFlowSettingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetDeviceFlowSettingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceFlowSettingType) {
		return nil, false
	}
	return o.DeviceFlowSettingType, true
}

// HasDeviceFlowSettingType returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasDeviceFlowSettingType() bool {
	if o != nil && !IsNil(o.DeviceFlowSettingType) {
		return true
	}

	return false
}

// SetDeviceFlowSettingType gets a reference to the given string and assigns it to the DeviceFlowSettingType field.
func (o *DynamicClientRegistration) SetDeviceFlowSettingType(v string) {
	o.DeviceFlowSettingType = &v
}

// GetUserAuthorizationUrlOverride returns the UserAuthorizationUrlOverride field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetUserAuthorizationUrlOverride() string {
	if o == nil || IsNil(o.UserAuthorizationUrlOverride) {
		var ret string
		return ret
	}
	return *o.UserAuthorizationUrlOverride
}

// GetUserAuthorizationUrlOverrideOk returns a tuple with the UserAuthorizationUrlOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetUserAuthorizationUrlOverrideOk() (*string, bool) {
	if o == nil || IsNil(o.UserAuthorizationUrlOverride) {
		return nil, false
	}
	return o.UserAuthorizationUrlOverride, true
}

// HasUserAuthorizationUrlOverride returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasUserAuthorizationUrlOverride() bool {
	if o != nil && !IsNil(o.UserAuthorizationUrlOverride) {
		return true
	}

	return false
}

// SetUserAuthorizationUrlOverride gets a reference to the given string and assigns it to the UserAuthorizationUrlOverride field.
func (o *DynamicClientRegistration) SetUserAuthorizationUrlOverride(v string) {
	o.UserAuthorizationUrlOverride = &v
}

// GetPendingAuthorizationTimeoutOverride returns the PendingAuthorizationTimeoutOverride field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetPendingAuthorizationTimeoutOverride() int64 {
	if o == nil || IsNil(o.PendingAuthorizationTimeoutOverride) {
		var ret int64
		return ret
	}
	return *o.PendingAuthorizationTimeoutOverride
}

// GetPendingAuthorizationTimeoutOverrideOk returns a tuple with the PendingAuthorizationTimeoutOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetPendingAuthorizationTimeoutOverrideOk() (*int64, bool) {
	if o == nil || IsNil(o.PendingAuthorizationTimeoutOverride) {
		return nil, false
	}
	return o.PendingAuthorizationTimeoutOverride, true
}

// HasPendingAuthorizationTimeoutOverride returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasPendingAuthorizationTimeoutOverride() bool {
	if o != nil && !IsNil(o.PendingAuthorizationTimeoutOverride) {
		return true
	}

	return false
}

// SetPendingAuthorizationTimeoutOverride gets a reference to the given int64 and assigns it to the PendingAuthorizationTimeoutOverride field.
func (o *DynamicClientRegistration) SetPendingAuthorizationTimeoutOverride(v int64) {
	o.PendingAuthorizationTimeoutOverride = &v
}

// GetDevicePollingIntervalOverride returns the DevicePollingIntervalOverride field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetDevicePollingIntervalOverride() int64 {
	if o == nil || IsNil(o.DevicePollingIntervalOverride) {
		var ret int64
		return ret
	}
	return *o.DevicePollingIntervalOverride
}

// GetDevicePollingIntervalOverrideOk returns a tuple with the DevicePollingIntervalOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetDevicePollingIntervalOverrideOk() (*int64, bool) {
	if o == nil || IsNil(o.DevicePollingIntervalOverride) {
		return nil, false
	}
	return o.DevicePollingIntervalOverride, true
}

// HasDevicePollingIntervalOverride returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasDevicePollingIntervalOverride() bool {
	if o != nil && !IsNil(o.DevicePollingIntervalOverride) {
		return true
	}

	return false
}

// SetDevicePollingIntervalOverride gets a reference to the given int64 and assigns it to the DevicePollingIntervalOverride field.
func (o *DynamicClientRegistration) SetDevicePollingIntervalOverride(v int64) {
	o.DevicePollingIntervalOverride = &v
}

// GetBypassActivationCodeConfirmationOverride returns the BypassActivationCodeConfirmationOverride field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetBypassActivationCodeConfirmationOverride() bool {
	if o == nil || IsNil(o.BypassActivationCodeConfirmationOverride) {
		var ret bool
		return ret
	}
	return *o.BypassActivationCodeConfirmationOverride
}

// GetBypassActivationCodeConfirmationOverrideOk returns a tuple with the BypassActivationCodeConfirmationOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetBypassActivationCodeConfirmationOverrideOk() (*bool, bool) {
	if o == nil || IsNil(o.BypassActivationCodeConfirmationOverride) {
		return nil, false
	}
	return o.BypassActivationCodeConfirmationOverride, true
}

// HasBypassActivationCodeConfirmationOverride returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasBypassActivationCodeConfirmationOverride() bool {
	if o != nil && !IsNil(o.BypassActivationCodeConfirmationOverride) {
		return true
	}

	return false
}

// SetBypassActivationCodeConfirmationOverride gets a reference to the given bool and assigns it to the BypassActivationCodeConfirmationOverride field.
func (o *DynamicClientRegistration) SetBypassActivationCodeConfirmationOverride(v bool) {
	o.BypassActivationCodeConfirmationOverride = &v
}

// GetRequireProofKeyForCodeExchange returns the RequireProofKeyForCodeExchange field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetRequireProofKeyForCodeExchange() bool {
	if o == nil || IsNil(o.RequireProofKeyForCodeExchange) {
		var ret bool
		return ret
	}
	return *o.RequireProofKeyForCodeExchange
}

// GetRequireProofKeyForCodeExchangeOk returns a tuple with the RequireProofKeyForCodeExchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetRequireProofKeyForCodeExchangeOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireProofKeyForCodeExchange) {
		return nil, false
	}
	return o.RequireProofKeyForCodeExchange, true
}

// HasRequireProofKeyForCodeExchange returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasRequireProofKeyForCodeExchange() bool {
	if o != nil && !IsNil(o.RequireProofKeyForCodeExchange) {
		return true
	}

	return false
}

// SetRequireProofKeyForCodeExchange gets a reference to the given bool and assigns it to the RequireProofKeyForCodeExchange field.
func (o *DynamicClientRegistration) SetRequireProofKeyForCodeExchange(v bool) {
	o.RequireProofKeyForCodeExchange = &v
}

// GetCibaPollingInterval returns the CibaPollingInterval field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetCibaPollingInterval() int64 {
	if o == nil || IsNil(o.CibaPollingInterval) {
		var ret int64
		return ret
	}
	return *o.CibaPollingInterval
}

// GetCibaPollingIntervalOk returns a tuple with the CibaPollingInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetCibaPollingIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.CibaPollingInterval) {
		return nil, false
	}
	return o.CibaPollingInterval, true
}

// HasCibaPollingInterval returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasCibaPollingInterval() bool {
	if o != nil && !IsNil(o.CibaPollingInterval) {
		return true
	}

	return false
}

// SetCibaPollingInterval gets a reference to the given int64 and assigns it to the CibaPollingInterval field.
func (o *DynamicClientRegistration) SetCibaPollingInterval(v int64) {
	o.CibaPollingInterval = &v
}

// GetCibaRequireSignedRequests returns the CibaRequireSignedRequests field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetCibaRequireSignedRequests() bool {
	if o == nil || IsNil(o.CibaRequireSignedRequests) {
		var ret bool
		return ret
	}
	return *o.CibaRequireSignedRequests
}

// GetCibaRequireSignedRequestsOk returns a tuple with the CibaRequireSignedRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetCibaRequireSignedRequestsOk() (*bool, bool) {
	if o == nil || IsNil(o.CibaRequireSignedRequests) {
		return nil, false
	}
	return o.CibaRequireSignedRequests, true
}

// HasCibaRequireSignedRequests returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasCibaRequireSignedRequests() bool {
	if o != nil && !IsNil(o.CibaRequireSignedRequests) {
		return true
	}

	return false
}

// SetCibaRequireSignedRequests gets a reference to the given bool and assigns it to the CibaRequireSignedRequests field.
func (o *DynamicClientRegistration) SetCibaRequireSignedRequests(v bool) {
	o.CibaRequireSignedRequests = &v
}

// GetRequestPolicyRef returns the RequestPolicyRef field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetRequestPolicyRef() ResourceLink {
	if o == nil || IsNil(o.RequestPolicyRef) {
		var ret ResourceLink
		return ret
	}
	return *o.RequestPolicyRef
}

// GetRequestPolicyRefOk returns a tuple with the RequestPolicyRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetRequestPolicyRefOk() (*ResourceLink, bool) {
	if o == nil || IsNil(o.RequestPolicyRef) {
		return nil, false
	}
	return o.RequestPolicyRef, true
}

// HasRequestPolicyRef returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasRequestPolicyRef() bool {
	if o != nil && !IsNil(o.RequestPolicyRef) {
		return true
	}

	return false
}

// SetRequestPolicyRef gets a reference to the given ResourceLink and assigns it to the RequestPolicyRef field.
func (o *DynamicClientRegistration) SetRequestPolicyRef(v ResourceLink) {
	o.RequestPolicyRef = &v
}

// GetTokenExchangeProcessorPolicyRef returns the TokenExchangeProcessorPolicyRef field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetTokenExchangeProcessorPolicyRef() ResourceLink {
	if o == nil || IsNil(o.TokenExchangeProcessorPolicyRef) {
		var ret ResourceLink
		return ret
	}
	return *o.TokenExchangeProcessorPolicyRef
}

// GetTokenExchangeProcessorPolicyRefOk returns a tuple with the TokenExchangeProcessorPolicyRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetTokenExchangeProcessorPolicyRefOk() (*ResourceLink, bool) {
	if o == nil || IsNil(o.TokenExchangeProcessorPolicyRef) {
		return nil, false
	}
	return o.TokenExchangeProcessorPolicyRef, true
}

// HasTokenExchangeProcessorPolicyRef returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasTokenExchangeProcessorPolicyRef() bool {
	if o != nil && !IsNil(o.TokenExchangeProcessorPolicyRef) {
		return true
	}

	return false
}

// SetTokenExchangeProcessorPolicyRef gets a reference to the given ResourceLink and assigns it to the TokenExchangeProcessorPolicyRef field.
func (o *DynamicClientRegistration) SetTokenExchangeProcessorPolicyRef(v ResourceLink) {
	o.TokenExchangeProcessorPolicyRef = &v
}

// GetRotateClientSecret returns the RotateClientSecret field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetRotateClientSecret() bool {
	if o == nil || IsNil(o.RotateClientSecret) {
		var ret bool
		return ret
	}
	return *o.RotateClientSecret
}

// GetRotateClientSecretOk returns a tuple with the RotateClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetRotateClientSecretOk() (*bool, bool) {
	if o == nil || IsNil(o.RotateClientSecret) {
		return nil, false
	}
	return o.RotateClientSecret, true
}

// HasRotateClientSecret returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasRotateClientSecret() bool {
	if o != nil && !IsNil(o.RotateClientSecret) {
		return true
	}

	return false
}

// SetRotateClientSecret gets a reference to the given bool and assigns it to the RotateClientSecret field.
func (o *DynamicClientRegistration) SetRotateClientSecret(v bool) {
	o.RotateClientSecret = &v
}

// GetRotateRegistrationAccessToken returns the RotateRegistrationAccessToken field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetRotateRegistrationAccessToken() bool {
	if o == nil || IsNil(o.RotateRegistrationAccessToken) {
		var ret bool
		return ret
	}
	return *o.RotateRegistrationAccessToken
}

// GetRotateRegistrationAccessTokenOk returns a tuple with the RotateRegistrationAccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetRotateRegistrationAccessTokenOk() (*bool, bool) {
	if o == nil || IsNil(o.RotateRegistrationAccessToken) {
		return nil, false
	}
	return o.RotateRegistrationAccessToken, true
}

// HasRotateRegistrationAccessToken returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasRotateRegistrationAccessToken() bool {
	if o != nil && !IsNil(o.RotateRegistrationAccessToken) {
		return true
	}

	return false
}

// SetRotateRegistrationAccessToken gets a reference to the given bool and assigns it to the RotateRegistrationAccessToken field.
func (o *DynamicClientRegistration) SetRotateRegistrationAccessToken(v bool) {
	o.RotateRegistrationAccessToken = &v
}

// GetAllowClientDelete returns the AllowClientDelete field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetAllowClientDelete() bool {
	if o == nil || IsNil(o.AllowClientDelete) {
		var ret bool
		return ret
	}
	return *o.AllowClientDelete
}

// GetAllowClientDeleteOk returns a tuple with the AllowClientDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetAllowClientDeleteOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowClientDelete) {
		return nil, false
	}
	return o.AllowClientDelete, true
}

// HasAllowClientDelete returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasAllowClientDelete() bool {
	if o != nil && !IsNil(o.AllowClientDelete) {
		return true
	}

	return false
}

// SetAllowClientDelete gets a reference to the given bool and assigns it to the AllowClientDelete field.
func (o *DynamicClientRegistration) SetAllowClientDelete(v bool) {
	o.AllowClientDelete = &v
}

// GetDisableRegistrationAccessTokens returns the DisableRegistrationAccessTokens field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetDisableRegistrationAccessTokens() bool {
	if o == nil || IsNil(o.DisableRegistrationAccessTokens) {
		var ret bool
		return ret
	}
	return *o.DisableRegistrationAccessTokens
}

// GetDisableRegistrationAccessTokensOk returns a tuple with the DisableRegistrationAccessTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetDisableRegistrationAccessTokensOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableRegistrationAccessTokens) {
		return nil, false
	}
	return o.DisableRegistrationAccessTokens, true
}

// HasDisableRegistrationAccessTokens returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasDisableRegistrationAccessTokens() bool {
	if o != nil && !IsNil(o.DisableRegistrationAccessTokens) {
		return true
	}

	return false
}

// SetDisableRegistrationAccessTokens gets a reference to the given bool and assigns it to the DisableRegistrationAccessTokens field.
func (o *DynamicClientRegistration) SetDisableRegistrationAccessTokens(v bool) {
	o.DisableRegistrationAccessTokens = &v
}

// GetRefreshTokenRollingGracePeriodType returns the RefreshTokenRollingGracePeriodType field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetRefreshTokenRollingGracePeriodType() string {
	if o == nil || IsNil(o.RefreshTokenRollingGracePeriodType) {
		var ret string
		return ret
	}
	return *o.RefreshTokenRollingGracePeriodType
}

// GetRefreshTokenRollingGracePeriodTypeOk returns a tuple with the RefreshTokenRollingGracePeriodType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetRefreshTokenRollingGracePeriodTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RefreshTokenRollingGracePeriodType) {
		return nil, false
	}
	return o.RefreshTokenRollingGracePeriodType, true
}

// HasRefreshTokenRollingGracePeriodType returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasRefreshTokenRollingGracePeriodType() bool {
	if o != nil && !IsNil(o.RefreshTokenRollingGracePeriodType) {
		return true
	}

	return false
}

// SetRefreshTokenRollingGracePeriodType gets a reference to the given string and assigns it to the RefreshTokenRollingGracePeriodType field.
func (o *DynamicClientRegistration) SetRefreshTokenRollingGracePeriodType(v string) {
	o.RefreshTokenRollingGracePeriodType = &v
}

// GetRefreshTokenRollingGracePeriod returns the RefreshTokenRollingGracePeriod field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetRefreshTokenRollingGracePeriod() int64 {
	if o == nil || IsNil(o.RefreshTokenRollingGracePeriod) {
		var ret int64
		return ret
	}
	return *o.RefreshTokenRollingGracePeriod
}

// GetRefreshTokenRollingGracePeriodOk returns a tuple with the RefreshTokenRollingGracePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetRefreshTokenRollingGracePeriodOk() (*int64, bool) {
	if o == nil || IsNil(o.RefreshTokenRollingGracePeriod) {
		return nil, false
	}
	return o.RefreshTokenRollingGracePeriod, true
}

// HasRefreshTokenRollingGracePeriod returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasRefreshTokenRollingGracePeriod() bool {
	if o != nil && !IsNil(o.RefreshTokenRollingGracePeriod) {
		return true
	}

	return false
}

// SetRefreshTokenRollingGracePeriod gets a reference to the given int64 and assigns it to the RefreshTokenRollingGracePeriod field.
func (o *DynamicClientRegistration) SetRefreshTokenRollingGracePeriod(v int64) {
	o.RefreshTokenRollingGracePeriod = &v
}

// GetRetainClientSecret returns the RetainClientSecret field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetRetainClientSecret() bool {
	if o == nil || IsNil(o.RetainClientSecret) {
		var ret bool
		return ret
	}
	return *o.RetainClientSecret
}

// GetRetainClientSecretOk returns a tuple with the RetainClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetRetainClientSecretOk() (*bool, bool) {
	if o == nil || IsNil(o.RetainClientSecret) {
		return nil, false
	}
	return o.RetainClientSecret, true
}

// HasRetainClientSecret returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasRetainClientSecret() bool {
	if o != nil && !IsNil(o.RetainClientSecret) {
		return true
	}

	return false
}

// SetRetainClientSecret gets a reference to the given bool and assigns it to the RetainClientSecret field.
func (o *DynamicClientRegistration) SetRetainClientSecret(v bool) {
	o.RetainClientSecret = &v
}

// GetClientSecretRetentionPeriodType returns the ClientSecretRetentionPeriodType field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetClientSecretRetentionPeriodType() string {
	if o == nil || IsNil(o.ClientSecretRetentionPeriodType) {
		var ret string
		return ret
	}
	return *o.ClientSecretRetentionPeriodType
}

// GetClientSecretRetentionPeriodTypeOk returns a tuple with the ClientSecretRetentionPeriodType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetClientSecretRetentionPeriodTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ClientSecretRetentionPeriodType) {
		return nil, false
	}
	return o.ClientSecretRetentionPeriodType, true
}

// HasClientSecretRetentionPeriodType returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasClientSecretRetentionPeriodType() bool {
	if o != nil && !IsNil(o.ClientSecretRetentionPeriodType) {
		return true
	}

	return false
}

// SetClientSecretRetentionPeriodType gets a reference to the given string and assigns it to the ClientSecretRetentionPeriodType field.
func (o *DynamicClientRegistration) SetClientSecretRetentionPeriodType(v string) {
	o.ClientSecretRetentionPeriodType = &v
}

// GetClientSecretRetentionPeriodOverride returns the ClientSecretRetentionPeriodOverride field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetClientSecretRetentionPeriodOverride() int64 {
	if o == nil || IsNil(o.ClientSecretRetentionPeriodOverride) {
		var ret int64
		return ret
	}
	return *o.ClientSecretRetentionPeriodOverride
}

// GetClientSecretRetentionPeriodOverrideOk returns a tuple with the ClientSecretRetentionPeriodOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetClientSecretRetentionPeriodOverrideOk() (*int64, bool) {
	if o == nil || IsNil(o.ClientSecretRetentionPeriodOverride) {
		return nil, false
	}
	return o.ClientSecretRetentionPeriodOverride, true
}

// HasClientSecretRetentionPeriodOverride returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasClientSecretRetentionPeriodOverride() bool {
	if o != nil && !IsNil(o.ClientSecretRetentionPeriodOverride) {
		return true
	}

	return false
}

// SetClientSecretRetentionPeriodOverride gets a reference to the given int64 and assigns it to the ClientSecretRetentionPeriodOverride field.
func (o *DynamicClientRegistration) SetClientSecretRetentionPeriodOverride(v int64) {
	o.ClientSecretRetentionPeriodOverride = &v
}

// GetRequireJwtSecuredAuthorizationResponseMode returns the RequireJwtSecuredAuthorizationResponseMode field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetRequireJwtSecuredAuthorizationResponseMode() bool {
	if o == nil || IsNil(o.RequireJwtSecuredAuthorizationResponseMode) {
		var ret bool
		return ret
	}
	return *o.RequireJwtSecuredAuthorizationResponseMode
}

// GetRequireJwtSecuredAuthorizationResponseModeOk returns a tuple with the RequireJwtSecuredAuthorizationResponseMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetRequireJwtSecuredAuthorizationResponseModeOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireJwtSecuredAuthorizationResponseMode) {
		return nil, false
	}
	return o.RequireJwtSecuredAuthorizationResponseMode, true
}

// HasRequireJwtSecuredAuthorizationResponseMode returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasRequireJwtSecuredAuthorizationResponseMode() bool {
	if o != nil && !IsNil(o.RequireJwtSecuredAuthorizationResponseMode) {
		return true
	}

	return false
}

// SetRequireJwtSecuredAuthorizationResponseMode gets a reference to the given bool and assigns it to the RequireJwtSecuredAuthorizationResponseMode field.
func (o *DynamicClientRegistration) SetRequireJwtSecuredAuthorizationResponseMode(v bool) {
	o.RequireJwtSecuredAuthorizationResponseMode = &v
}

// GetRequireOfflineAccessScopeToIssueRefreshTokens returns the RequireOfflineAccessScopeToIssueRefreshTokens field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetRequireOfflineAccessScopeToIssueRefreshTokens() string {
	if o == nil || IsNil(o.RequireOfflineAccessScopeToIssueRefreshTokens) {
		var ret string
		return ret
	}
	return *o.RequireOfflineAccessScopeToIssueRefreshTokens
}

// GetRequireOfflineAccessScopeToIssueRefreshTokensOk returns a tuple with the RequireOfflineAccessScopeToIssueRefreshTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetRequireOfflineAccessScopeToIssueRefreshTokensOk() (*string, bool) {
	if o == nil || IsNil(o.RequireOfflineAccessScopeToIssueRefreshTokens) {
		return nil, false
	}
	return o.RequireOfflineAccessScopeToIssueRefreshTokens, true
}

// HasRequireOfflineAccessScopeToIssueRefreshTokens returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasRequireOfflineAccessScopeToIssueRefreshTokens() bool {
	if o != nil && !IsNil(o.RequireOfflineAccessScopeToIssueRefreshTokens) {
		return true
	}

	return false
}

// SetRequireOfflineAccessScopeToIssueRefreshTokens gets a reference to the given string and assigns it to the RequireOfflineAccessScopeToIssueRefreshTokens field.
func (o *DynamicClientRegistration) SetRequireOfflineAccessScopeToIssueRefreshTokens(v string) {
	o.RequireOfflineAccessScopeToIssueRefreshTokens = &v
}

// GetOfflineAccessRequireConsentPrompt returns the OfflineAccessRequireConsentPrompt field value if set, zero value otherwise.
func (o *DynamicClientRegistration) GetOfflineAccessRequireConsentPrompt() string {
	if o == nil || IsNil(o.OfflineAccessRequireConsentPrompt) {
		var ret string
		return ret
	}
	return *o.OfflineAccessRequireConsentPrompt
}

// GetOfflineAccessRequireConsentPromptOk returns a tuple with the OfflineAccessRequireConsentPrompt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicClientRegistration) GetOfflineAccessRequireConsentPromptOk() (*string, bool) {
	if o == nil || IsNil(o.OfflineAccessRequireConsentPrompt) {
		return nil, false
	}
	return o.OfflineAccessRequireConsentPrompt, true
}

// HasOfflineAccessRequireConsentPrompt returns a boolean if a field has been set.
func (o *DynamicClientRegistration) HasOfflineAccessRequireConsentPrompt() bool {
	if o != nil && !IsNil(o.OfflineAccessRequireConsentPrompt) {
		return true
	}

	return false
}

// SetOfflineAccessRequireConsentPrompt gets a reference to the given string and assigns it to the OfflineAccessRequireConsentPrompt field.
func (o *DynamicClientRegistration) SetOfflineAccessRequireConsentPrompt(v string) {
	o.OfflineAccessRequireConsentPrompt = &v
}

func (o DynamicClientRegistration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DynamicClientRegistration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InitialAccessTokenScope) {
		toSerialize["initialAccessTokenScope"] = o.InitialAccessTokenScope
	}
	if !IsNil(o.RestrictCommonScopes) {
		toSerialize["restrictCommonScopes"] = o.RestrictCommonScopes
	}
	if !IsNil(o.RestrictedCommonScopes) {
		toSerialize["restrictedCommonScopes"] = o.RestrictedCommonScopes
	}
	if !IsNil(o.AllowedExclusiveScopes) {
		toSerialize["allowedExclusiveScopes"] = o.AllowedExclusiveScopes
	}
	if !IsNil(o.AllowedAuthorizationDetailTypes) {
		toSerialize["allowedAuthorizationDetailTypes"] = o.AllowedAuthorizationDetailTypes
	}
	if !IsNil(o.EnforceReplayPrevention) {
		toSerialize["enforceReplayPrevention"] = o.EnforceReplayPrevention
	}
	if !IsNil(o.RequireSignedRequests) {
		toSerialize["requireSignedRequests"] = o.RequireSignedRequests
	}
	if !IsNil(o.DefaultAccessTokenManagerRef) {
		toSerialize["defaultAccessTokenManagerRef"] = o.DefaultAccessTokenManagerRef
	}
	if !IsNil(o.RestrictToDefaultAccessTokenManager) {
		toSerialize["restrictToDefaultAccessTokenManager"] = o.RestrictToDefaultAccessTokenManager
	}
	if !IsNil(o.PersistentGrantExpirationType) {
		toSerialize["persistentGrantExpirationType"] = o.PersistentGrantExpirationType
	}
	if !IsNil(o.PersistentGrantExpirationTime) {
		toSerialize["persistentGrantExpirationTime"] = o.PersistentGrantExpirationTime
	}
	if !IsNil(o.PersistentGrantExpirationTimeUnit) {
		toSerialize["persistentGrantExpirationTimeUnit"] = o.PersistentGrantExpirationTimeUnit
	}
	if !IsNil(o.PersistentGrantIdleTimeoutType) {
		toSerialize["persistentGrantIdleTimeoutType"] = o.PersistentGrantIdleTimeoutType
	}
	if !IsNil(o.PersistentGrantIdleTimeout) {
		toSerialize["persistentGrantIdleTimeout"] = o.PersistentGrantIdleTimeout
	}
	if !IsNil(o.PersistentGrantIdleTimeoutTimeUnit) {
		toSerialize["persistentGrantIdleTimeoutTimeUnit"] = o.PersistentGrantIdleTimeoutTimeUnit
	}
	if !IsNil(o.ClientCertIssuerType) {
		toSerialize["clientCertIssuerType"] = o.ClientCertIssuerType
	}
	if !IsNil(o.ClientCertIssuerRef) {
		toSerialize["clientCertIssuerRef"] = o.ClientCertIssuerRef
	}
	if !IsNil(o.RefreshRolling) {
		toSerialize["refreshRolling"] = o.RefreshRolling
	}
	if !IsNil(o.RefreshTokenRollingIntervalType) {
		toSerialize["refreshTokenRollingIntervalType"] = o.RefreshTokenRollingIntervalType
	}
	if !IsNil(o.RefreshTokenRollingInterval) {
		toSerialize["refreshTokenRollingInterval"] = o.RefreshTokenRollingInterval
	}
	if !IsNil(o.RefreshTokenRollingIntervalTimeUnit) {
		toSerialize["refreshTokenRollingIntervalTimeUnit"] = o.RefreshTokenRollingIntervalTimeUnit
	}
	if !IsNil(o.OidcPolicy) {
		toSerialize["oidcPolicy"] = o.OidcPolicy
	}
	if !IsNil(o.PolicyRefs) {
		toSerialize["policyRefs"] = o.PolicyRefs
	}
	if !IsNil(o.DeviceFlowSettingType) {
		toSerialize["deviceFlowSettingType"] = o.DeviceFlowSettingType
	}
	if !IsNil(o.UserAuthorizationUrlOverride) {
		toSerialize["userAuthorizationUrlOverride"] = o.UserAuthorizationUrlOverride
	}
	if !IsNil(o.PendingAuthorizationTimeoutOverride) {
		toSerialize["pendingAuthorizationTimeoutOverride"] = o.PendingAuthorizationTimeoutOverride
	}
	if !IsNil(o.DevicePollingIntervalOverride) {
		toSerialize["devicePollingIntervalOverride"] = o.DevicePollingIntervalOverride
	}
	if !IsNil(o.BypassActivationCodeConfirmationOverride) {
		toSerialize["bypassActivationCodeConfirmationOverride"] = o.BypassActivationCodeConfirmationOverride
	}
	if !IsNil(o.RequireProofKeyForCodeExchange) {
		toSerialize["requireProofKeyForCodeExchange"] = o.RequireProofKeyForCodeExchange
	}
	if !IsNil(o.CibaPollingInterval) {
		toSerialize["cibaPollingInterval"] = o.CibaPollingInterval
	}
	if !IsNil(o.CibaRequireSignedRequests) {
		toSerialize["cibaRequireSignedRequests"] = o.CibaRequireSignedRequests
	}
	if !IsNil(o.RequestPolicyRef) {
		toSerialize["requestPolicyRef"] = o.RequestPolicyRef
	}
	if !IsNil(o.TokenExchangeProcessorPolicyRef) {
		toSerialize["tokenExchangeProcessorPolicyRef"] = o.TokenExchangeProcessorPolicyRef
	}
	if !IsNil(o.RotateClientSecret) {
		toSerialize["rotateClientSecret"] = o.RotateClientSecret
	}
	if !IsNil(o.RotateRegistrationAccessToken) {
		toSerialize["rotateRegistrationAccessToken"] = o.RotateRegistrationAccessToken
	}
	if !IsNil(o.AllowClientDelete) {
		toSerialize["allowClientDelete"] = o.AllowClientDelete
	}
	if !IsNil(o.DisableRegistrationAccessTokens) {
		toSerialize["disableRegistrationAccessTokens"] = o.DisableRegistrationAccessTokens
	}
	if !IsNil(o.RefreshTokenRollingGracePeriodType) {
		toSerialize["refreshTokenRollingGracePeriodType"] = o.RefreshTokenRollingGracePeriodType
	}
	if !IsNil(o.RefreshTokenRollingGracePeriod) {
		toSerialize["refreshTokenRollingGracePeriod"] = o.RefreshTokenRollingGracePeriod
	}
	if !IsNil(o.RetainClientSecret) {
		toSerialize["retainClientSecret"] = o.RetainClientSecret
	}
	if !IsNil(o.ClientSecretRetentionPeriodType) {
		toSerialize["clientSecretRetentionPeriodType"] = o.ClientSecretRetentionPeriodType
	}
	if !IsNil(o.ClientSecretRetentionPeriodOverride) {
		toSerialize["clientSecretRetentionPeriodOverride"] = o.ClientSecretRetentionPeriodOverride
	}
	if !IsNil(o.RequireJwtSecuredAuthorizationResponseMode) {
		toSerialize["requireJwtSecuredAuthorizationResponseMode"] = o.RequireJwtSecuredAuthorizationResponseMode
	}
	if !IsNil(o.RequireOfflineAccessScopeToIssueRefreshTokens) {
		toSerialize["requireOfflineAccessScopeToIssueRefreshTokens"] = o.RequireOfflineAccessScopeToIssueRefreshTokens
	}
	if !IsNil(o.OfflineAccessRequireConsentPrompt) {
		toSerialize["offlineAccessRequireConsentPrompt"] = o.OfflineAccessRequireConsentPrompt
	}
	return toSerialize, nil
}

type NullableDynamicClientRegistration struct {
	value *DynamicClientRegistration
	isSet bool
}

func (v NullableDynamicClientRegistration) Get() *DynamicClientRegistration {
	return v.value
}

func (v *NullableDynamicClientRegistration) Set(val *DynamicClientRegistration) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamicClientRegistration) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamicClientRegistration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamicClientRegistration(val *DynamicClientRegistration) *NullableDynamicClientRegistration {
	return &NullableDynamicClientRegistration{value: val, isSet: true}
}

func (v NullableDynamicClientRegistration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamicClientRegistration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
