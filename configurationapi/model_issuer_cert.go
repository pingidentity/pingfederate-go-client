/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the IssuerCert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssuerCert{}

// IssuerCert A certificate used to validate certificates for access to the WS-Trust STS endpoints.
type IssuerCert struct {
	CertView *CertView `json:"certView,omitempty" tfsdk:"cert_view"`
	X509File X509File  `json:"x509File" tfsdk:"x509_file"`
	// Indicates whether this an active certificate or not.
	Active *bool `json:"active,omitempty" tfsdk:"active"`
}

// NewIssuerCert instantiates a new IssuerCert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuerCert(x509File X509File) *IssuerCert {
	this := IssuerCert{}
	this.X509File = x509File
	return &this
}

// NewIssuerCertWithDefaults instantiates a new IssuerCert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuerCertWithDefaults() *IssuerCert {
	this := IssuerCert{}
	return &this
}

// GetCertView returns the CertView field value if set, zero value otherwise.
func (o *IssuerCert) GetCertView() CertView {
	if o == nil || IsNil(o.CertView) {
		var ret CertView
		return ret
	}
	return *o.CertView
}

// GetCertViewOk returns a tuple with the CertView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuerCert) GetCertViewOk() (*CertView, bool) {
	if o == nil || IsNil(o.CertView) {
		return nil, false
	}
	return o.CertView, true
}

// HasCertView returns a boolean if a field has been set.
func (o *IssuerCert) HasCertView() bool {
	if o != nil && !IsNil(o.CertView) {
		return true
	}

	return false
}

// SetCertView gets a reference to the given CertView and assigns it to the CertView field.
func (o *IssuerCert) SetCertView(v CertView) {
	o.CertView = &v
}

// GetX509File returns the X509File field value
func (o *IssuerCert) GetX509File() X509File {
	if o == nil {
		var ret X509File
		return ret
	}

	return o.X509File
}

// GetX509FileOk returns a tuple with the X509File field value
// and a boolean to check if the value has been set.
func (o *IssuerCert) GetX509FileOk() (*X509File, bool) {
	if o == nil {
		return nil, false
	}
	return &o.X509File, true
}

// SetX509File sets field value
func (o *IssuerCert) SetX509File(v X509File) {
	o.X509File = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *IssuerCert) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuerCert) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *IssuerCert) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *IssuerCert) SetActive(v bool) {
	o.Active = &v
}

func (o IssuerCert) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssuerCert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CertView) {
		toSerialize["certView"] = o.CertView
	}
	toSerialize["x509File"] = o.X509File
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	return toSerialize, nil
}

type NullableIssuerCert struct {
	value *IssuerCert
	isSet bool
}

func (v NullableIssuerCert) Get() *IssuerCert {
	return v.value
}

func (v *NullableIssuerCert) Set(val *IssuerCert) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuerCert) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuerCert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuerCert(val *IssuerCert) *NullableIssuerCert {
	return &NullableIssuerCert{value: val, isSet: true}
}

func (v NullableIssuerCert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuerCert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
