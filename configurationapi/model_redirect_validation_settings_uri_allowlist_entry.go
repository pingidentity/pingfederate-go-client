/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the RedirectValidationSettingsUriAllowlistEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RedirectValidationSettingsUriAllowlistEntry{}

// RedirectValidationSettingsUriAllowlistEntry struct for RedirectValidationSettingsUriAllowlistEntry
type RedirectValidationSettingsUriAllowlistEntry struct {
	// Enable this target resource for SSO redirect validation.
	TargetResourceSSO *bool `json:"targetResourceSSO,omitempty" tfsdk:"target_resource_sso"`
	// Enable this target resource for SLO redirect validation.
	TargetResourceSLO *bool `json:"targetResourceSLO,omitempty" tfsdk:"target_resource_slo"`
	// Enable this target resource for in error resource validation.
	InErrorResource *bool `json:"inErrorResource,omitempty" tfsdk:"in_error_resource"`
	// Enable this target resource for IdP discovery validation.
	IdpDiscovery *bool `json:"idpDiscovery,omitempty" tfsdk:"idp_discovery"`
	// Allow any query parameters and fragment in the resource.
	AllowQueryAndFragment *bool `json:"allowQueryAndFragment,omitempty" tfsdk:"allow_query_and_fragment"`
	// URI of a valid resource.
	ValidUri string `json:"validUri" tfsdk:"valid_uri"`
}

// NewRedirectValidationSettingsUriAllowlistEntry instantiates a new RedirectValidationSettingsUriAllowlistEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedirectValidationSettingsUriAllowlistEntry(validUri string) *RedirectValidationSettingsUriAllowlistEntry {
	this := RedirectValidationSettingsUriAllowlistEntry{}
	this.ValidUri = validUri
	return &this
}

// NewRedirectValidationSettingsUriAllowlistEntryWithDefaults instantiates a new RedirectValidationSettingsUriAllowlistEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedirectValidationSettingsUriAllowlistEntryWithDefaults() *RedirectValidationSettingsUriAllowlistEntry {
	this := RedirectValidationSettingsUriAllowlistEntry{}
	return &this
}

// GetTargetResourceSSO returns the TargetResourceSSO field value if set, zero value otherwise.
func (o *RedirectValidationSettingsUriAllowlistEntry) GetTargetResourceSSO() bool {
	if o == nil || IsNil(o.TargetResourceSSO) {
		var ret bool
		return ret
	}
	return *o.TargetResourceSSO
}

// GetTargetResourceSSOOk returns a tuple with the TargetResourceSSO field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectValidationSettingsUriAllowlistEntry) GetTargetResourceSSOOk() (*bool, bool) {
	if o == nil || IsNil(o.TargetResourceSSO) {
		return nil, false
	}
	return o.TargetResourceSSO, true
}

// HasTargetResourceSSO returns a boolean if a field has been set.
func (o *RedirectValidationSettingsUriAllowlistEntry) HasTargetResourceSSO() bool {
	if o != nil && !IsNil(o.TargetResourceSSO) {
		return true
	}

	return false
}

// SetTargetResourceSSO gets a reference to the given bool and assigns it to the TargetResourceSSO field.
func (o *RedirectValidationSettingsUriAllowlistEntry) SetTargetResourceSSO(v bool) {
	o.TargetResourceSSO = &v
}

// GetTargetResourceSLO returns the TargetResourceSLO field value if set, zero value otherwise.
func (o *RedirectValidationSettingsUriAllowlistEntry) GetTargetResourceSLO() bool {
	if o == nil || IsNil(o.TargetResourceSLO) {
		var ret bool
		return ret
	}
	return *o.TargetResourceSLO
}

// GetTargetResourceSLOOk returns a tuple with the TargetResourceSLO field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectValidationSettingsUriAllowlistEntry) GetTargetResourceSLOOk() (*bool, bool) {
	if o == nil || IsNil(o.TargetResourceSLO) {
		return nil, false
	}
	return o.TargetResourceSLO, true
}

// HasTargetResourceSLO returns a boolean if a field has been set.
func (o *RedirectValidationSettingsUriAllowlistEntry) HasTargetResourceSLO() bool {
	if o != nil && !IsNil(o.TargetResourceSLO) {
		return true
	}

	return false
}

// SetTargetResourceSLO gets a reference to the given bool and assigns it to the TargetResourceSLO field.
func (o *RedirectValidationSettingsUriAllowlistEntry) SetTargetResourceSLO(v bool) {
	o.TargetResourceSLO = &v
}

// GetInErrorResource returns the InErrorResource field value if set, zero value otherwise.
func (o *RedirectValidationSettingsUriAllowlistEntry) GetInErrorResource() bool {
	if o == nil || IsNil(o.InErrorResource) {
		var ret bool
		return ret
	}
	return *o.InErrorResource
}

// GetInErrorResourceOk returns a tuple with the InErrorResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectValidationSettingsUriAllowlistEntry) GetInErrorResourceOk() (*bool, bool) {
	if o == nil || IsNil(o.InErrorResource) {
		return nil, false
	}
	return o.InErrorResource, true
}

// HasInErrorResource returns a boolean if a field has been set.
func (o *RedirectValidationSettingsUriAllowlistEntry) HasInErrorResource() bool {
	if o != nil && !IsNil(o.InErrorResource) {
		return true
	}

	return false
}

// SetInErrorResource gets a reference to the given bool and assigns it to the InErrorResource field.
func (o *RedirectValidationSettingsUriAllowlistEntry) SetInErrorResource(v bool) {
	o.InErrorResource = &v
}

// GetIdpDiscovery returns the IdpDiscovery field value if set, zero value otherwise.
func (o *RedirectValidationSettingsUriAllowlistEntry) GetIdpDiscovery() bool {
	if o == nil || IsNil(o.IdpDiscovery) {
		var ret bool
		return ret
	}
	return *o.IdpDiscovery
}

// GetIdpDiscoveryOk returns a tuple with the IdpDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectValidationSettingsUriAllowlistEntry) GetIdpDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.IdpDiscovery) {
		return nil, false
	}
	return o.IdpDiscovery, true
}

// HasIdpDiscovery returns a boolean if a field has been set.
func (o *RedirectValidationSettingsUriAllowlistEntry) HasIdpDiscovery() bool {
	if o != nil && !IsNil(o.IdpDiscovery) {
		return true
	}

	return false
}

// SetIdpDiscovery gets a reference to the given bool and assigns it to the IdpDiscovery field.
func (o *RedirectValidationSettingsUriAllowlistEntry) SetIdpDiscovery(v bool) {
	o.IdpDiscovery = &v
}

// GetAllowQueryAndFragment returns the AllowQueryAndFragment field value if set, zero value otherwise.
func (o *RedirectValidationSettingsUriAllowlistEntry) GetAllowQueryAndFragment() bool {
	if o == nil || IsNil(o.AllowQueryAndFragment) {
		var ret bool
		return ret
	}
	return *o.AllowQueryAndFragment
}

// GetAllowQueryAndFragmentOk returns a tuple with the AllowQueryAndFragment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectValidationSettingsUriAllowlistEntry) GetAllowQueryAndFragmentOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowQueryAndFragment) {
		return nil, false
	}
	return o.AllowQueryAndFragment, true
}

// HasAllowQueryAndFragment returns a boolean if a field has been set.
func (o *RedirectValidationSettingsUriAllowlistEntry) HasAllowQueryAndFragment() bool {
	if o != nil && !IsNil(o.AllowQueryAndFragment) {
		return true
	}

	return false
}

// SetAllowQueryAndFragment gets a reference to the given bool and assigns it to the AllowQueryAndFragment field.
func (o *RedirectValidationSettingsUriAllowlistEntry) SetAllowQueryAndFragment(v bool) {
	o.AllowQueryAndFragment = &v
}

// GetValidUri returns the ValidUri field value
func (o *RedirectValidationSettingsUriAllowlistEntry) GetValidUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValidUri
}

// GetValidUriOk returns a tuple with the ValidUri field value
// and a boolean to check if the value has been set.
func (o *RedirectValidationSettingsUriAllowlistEntry) GetValidUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidUri, true
}

// SetValidUri sets field value
func (o *RedirectValidationSettingsUriAllowlistEntry) SetValidUri(v string) {
	o.ValidUri = v
}

func (o RedirectValidationSettingsUriAllowlistEntry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RedirectValidationSettingsUriAllowlistEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TargetResourceSSO) {
		toSerialize["targetResourceSSO"] = o.TargetResourceSSO
	}
	if !IsNil(o.TargetResourceSLO) {
		toSerialize["targetResourceSLO"] = o.TargetResourceSLO
	}
	if !IsNil(o.InErrorResource) {
		toSerialize["inErrorResource"] = o.InErrorResource
	}
	if !IsNil(o.IdpDiscovery) {
		toSerialize["idpDiscovery"] = o.IdpDiscovery
	}
	if !IsNil(o.AllowQueryAndFragment) {
		toSerialize["allowQueryAndFragment"] = o.AllowQueryAndFragment
	}
	toSerialize["validUri"] = o.ValidUri
	return toSerialize, nil
}

type NullableRedirectValidationSettingsUriAllowlistEntry struct {
	value *RedirectValidationSettingsUriAllowlistEntry
	isSet bool
}

func (v NullableRedirectValidationSettingsUriAllowlistEntry) Get() *RedirectValidationSettingsUriAllowlistEntry {
	return v.value
}

func (v *NullableRedirectValidationSettingsUriAllowlistEntry) Set(val *RedirectValidationSettingsUriAllowlistEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableRedirectValidationSettingsUriAllowlistEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableRedirectValidationSettingsUriAllowlistEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedirectValidationSettingsUriAllowlistEntry(val *RedirectValidationSettingsUriAllowlistEntry) *NullableRedirectValidationSettingsUriAllowlistEntry {
	return &NullableRedirectValidationSettingsUriAllowlistEntry{value: val, isSet: true}
}

func (v NullableRedirectValidationSettingsUriAllowlistEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedirectValidationSettingsUriAllowlistEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
