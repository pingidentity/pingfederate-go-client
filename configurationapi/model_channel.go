/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// checks if the Channel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Channel{}

// Channel A channel is a combination of a source data store and a provisioning target. It include settings of a source data store, managing provisioning threads and mapping of attributes.
type Channel struct {
	// Indicates whether the channel is the active channel for this connection.
	Active        bool          `json:"active" tfsdk:"active"`
	ChannelSource ChannelSource `json:"channelSource" tfsdk:"channel_source"`
	// The mapping of attributes from the local data store into Fields specified by the service provider.
	AttributeMapping []SaasAttributeMapping `json:"attributeMapping" tfsdk:"attribute_mapping"`
	// The name of the channel.
	Name string `json:"name" tfsdk:"name"`
	// The number of processing threads. The default value is 1.
	MaxThreads int64 `json:"maxThreads" tfsdk:"max_threads"`
	// Timeout, in seconds, for individual user and group provisioning operations on the target service provider. The default value is 60.
	Timeout int64 `json:"timeout" tfsdk:"timeout"`
}

type _Channel Channel

// NewChannel instantiates a new Channel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannel(active bool, channelSource ChannelSource, attributeMapping []SaasAttributeMapping, name string, maxThreads int64, timeout int64) *Channel {
	this := Channel{}
	this.Active = active
	this.ChannelSource = channelSource
	this.AttributeMapping = attributeMapping
	this.Name = name
	this.MaxThreads = maxThreads
	this.Timeout = timeout
	return &this
}

// NewChannelWithDefaults instantiates a new Channel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelWithDefaults() *Channel {
	this := Channel{}
	return &this
}

// GetActive returns the Active field value
func (o *Channel) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *Channel) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *Channel) SetActive(v bool) {
	o.Active = v
}

// GetChannelSource returns the ChannelSource field value
func (o *Channel) GetChannelSource() ChannelSource {
	if o == nil {
		var ret ChannelSource
		return ret
	}

	return o.ChannelSource
}

// GetChannelSourceOk returns a tuple with the ChannelSource field value
// and a boolean to check if the value has been set.
func (o *Channel) GetChannelSourceOk() (*ChannelSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChannelSource, true
}

// SetChannelSource sets field value
func (o *Channel) SetChannelSource(v ChannelSource) {
	o.ChannelSource = v
}

// GetAttributeMapping returns the AttributeMapping field value
func (o *Channel) GetAttributeMapping() []SaasAttributeMapping {
	if o == nil {
		var ret []SaasAttributeMapping
		return ret
	}

	return o.AttributeMapping
}

// GetAttributeMappingOk returns a tuple with the AttributeMapping field value
// and a boolean to check if the value has been set.
func (o *Channel) GetAttributeMappingOk() ([]SaasAttributeMapping, bool) {
	if o == nil {
		return nil, false
	}
	return o.AttributeMapping, true
}

// SetAttributeMapping sets field value
func (o *Channel) SetAttributeMapping(v []SaasAttributeMapping) {
	o.AttributeMapping = v
}

// GetName returns the Name field value
func (o *Channel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Channel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Channel) SetName(v string) {
	o.Name = v
}

// GetMaxThreads returns the MaxThreads field value
func (o *Channel) GetMaxThreads() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxThreads
}

// GetMaxThreadsOk returns a tuple with the MaxThreads field value
// and a boolean to check if the value has been set.
func (o *Channel) GetMaxThreadsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxThreads, true
}

// SetMaxThreads sets field value
func (o *Channel) SetMaxThreads(v int64) {
	o.MaxThreads = v
}

// GetTimeout returns the Timeout field value
func (o *Channel) GetTimeout() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value
// and a boolean to check if the value has been set.
func (o *Channel) GetTimeoutOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timeout, true
}

// SetTimeout sets field value
func (o *Channel) SetTimeout(v int64) {
	o.Timeout = v
}

func (o Channel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Channel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["active"] = o.Active
	toSerialize["channelSource"] = o.ChannelSource
	toSerialize["attributeMapping"] = o.AttributeMapping
	toSerialize["name"] = o.Name
	toSerialize["maxThreads"] = o.MaxThreads
	toSerialize["timeout"] = o.Timeout
	return toSerialize, nil
}

func (o *Channel) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"active",
		"channelSource",
		"attributeMapping",
		"name",
		"maxThreads",
		"timeout",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChannel := _Channel{}

	err = json.Unmarshal(bytes, &varChannel)

	if err != nil {
		return err
	}

	*o = Channel(varChannel)

	return err
}

type NullableChannel struct {
	value *Channel
	isSet bool
}

func (v NullableChannel) Get() *Channel {
	return v.value
}

func (v *NullableChannel) Set(val *Channel) {
	v.value = val
	v.isSet = true
}

func (v NullableChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannel(val *Channel) *NullableChannel {
	return &NullableChannel{value: val, isSet: true}
}

func (v NullableChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
