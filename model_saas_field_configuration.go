/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the SaasFieldConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SaasFieldConfiguration{}

// SaasFieldConfiguration The settings that represent how attribute values from source data store will be mapped into Fields specified by the service provider.
type SaasFieldConfiguration struct {
	// The list of source attribute names used to generate or map to a target field
	AttributeNames []string `json:"attributeNames,omitempty"`
	// The default value for the target field
	DefaultValue *string `json:"defaultValue,omitempty"`
	// An OGNL expression to obtain a value.
	Expression *string `json:"expression,omitempty"`
	// Indicates whether this field is a create only field and cannot be updated.
	CreateOnly *bool `json:"createOnly,omitempty"`
	// Indicates whether field should be trimmed before provisioning.
	Trim *bool `json:"trim,omitempty"`
	// The character case of the field value.
	CharacterCase *string `json:"characterCase,omitempty"`
	// Indicates how the field shall be parsed.
	Parser *string `json:"parser,omitempty"`
	// Indicates whether the attribute should be masked in server logs.
	Masked *bool `json:"masked,omitempty"`
}

// NewSaasFieldConfiguration instantiates a new SaasFieldConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSaasFieldConfiguration() *SaasFieldConfiguration {
	this := SaasFieldConfiguration{}
	return &this
}

// NewSaasFieldConfigurationWithDefaults instantiates a new SaasFieldConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSaasFieldConfigurationWithDefaults() *SaasFieldConfiguration {
	this := SaasFieldConfiguration{}
	return &this
}

// GetAttributeNames returns the AttributeNames field value if set, zero value otherwise.
func (o *SaasFieldConfiguration) GetAttributeNames() []string {
	if o == nil || IsNil(o.AttributeNames) {
		var ret []string
		return ret
	}
	return o.AttributeNames
}

// GetAttributeNamesOk returns a tuple with the AttributeNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasFieldConfiguration) GetAttributeNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.AttributeNames) {
		return nil, false
	}
	return o.AttributeNames, true
}

// HasAttributeNames returns a boolean if a field has been set.
func (o *SaasFieldConfiguration) HasAttributeNames() bool {
	if o != nil && !IsNil(o.AttributeNames) {
		return true
	}

	return false
}

// SetAttributeNames gets a reference to the given []string and assigns it to the AttributeNames field.
func (o *SaasFieldConfiguration) SetAttributeNames(v []string) {
	o.AttributeNames = v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *SaasFieldConfiguration) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue) {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasFieldConfiguration) GetDefaultValueOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *SaasFieldConfiguration) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *SaasFieldConfiguration) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *SaasFieldConfiguration) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasFieldConfiguration) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *SaasFieldConfiguration) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *SaasFieldConfiguration) SetExpression(v string) {
	o.Expression = &v
}

// GetCreateOnly returns the CreateOnly field value if set, zero value otherwise.
func (o *SaasFieldConfiguration) GetCreateOnly() bool {
	if o == nil || IsNil(o.CreateOnly) {
		var ret bool
		return ret
	}
	return *o.CreateOnly
}

// GetCreateOnlyOk returns a tuple with the CreateOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasFieldConfiguration) GetCreateOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateOnly) {
		return nil, false
	}
	return o.CreateOnly, true
}

// HasCreateOnly returns a boolean if a field has been set.
func (o *SaasFieldConfiguration) HasCreateOnly() bool {
	if o != nil && !IsNil(o.CreateOnly) {
		return true
	}

	return false
}

// SetCreateOnly gets a reference to the given bool and assigns it to the CreateOnly field.
func (o *SaasFieldConfiguration) SetCreateOnly(v bool) {
	o.CreateOnly = &v
}

// GetTrim returns the Trim field value if set, zero value otherwise.
func (o *SaasFieldConfiguration) GetTrim() bool {
	if o == nil || IsNil(o.Trim) {
		var ret bool
		return ret
	}
	return *o.Trim
}

// GetTrimOk returns a tuple with the Trim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasFieldConfiguration) GetTrimOk() (*bool, bool) {
	if o == nil || IsNil(o.Trim) {
		return nil, false
	}
	return o.Trim, true
}

// HasTrim returns a boolean if a field has been set.
func (o *SaasFieldConfiguration) HasTrim() bool {
	if o != nil && !IsNil(o.Trim) {
		return true
	}

	return false
}

// SetTrim gets a reference to the given bool and assigns it to the Trim field.
func (o *SaasFieldConfiguration) SetTrim(v bool) {
	o.Trim = &v
}

// GetCharacterCase returns the CharacterCase field value if set, zero value otherwise.
func (o *SaasFieldConfiguration) GetCharacterCase() string {
	if o == nil || IsNil(o.CharacterCase) {
		var ret string
		return ret
	}
	return *o.CharacterCase
}

// GetCharacterCaseOk returns a tuple with the CharacterCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasFieldConfiguration) GetCharacterCaseOk() (*string, bool) {
	if o == nil || IsNil(o.CharacterCase) {
		return nil, false
	}
	return o.CharacterCase, true
}

// HasCharacterCase returns a boolean if a field has been set.
func (o *SaasFieldConfiguration) HasCharacterCase() bool {
	if o != nil && !IsNil(o.CharacterCase) {
		return true
	}

	return false
}

// SetCharacterCase gets a reference to the given string and assigns it to the CharacterCase field.
func (o *SaasFieldConfiguration) SetCharacterCase(v string) {
	o.CharacterCase = &v
}

// GetParser returns the Parser field value if set, zero value otherwise.
func (o *SaasFieldConfiguration) GetParser() string {
	if o == nil || IsNil(o.Parser) {
		var ret string
		return ret
	}
	return *o.Parser
}

// GetParserOk returns a tuple with the Parser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasFieldConfiguration) GetParserOk() (*string, bool) {
	if o == nil || IsNil(o.Parser) {
		return nil, false
	}
	return o.Parser, true
}

// HasParser returns a boolean if a field has been set.
func (o *SaasFieldConfiguration) HasParser() bool {
	if o != nil && !IsNil(o.Parser) {
		return true
	}

	return false
}

// SetParser gets a reference to the given string and assigns it to the Parser field.
func (o *SaasFieldConfiguration) SetParser(v string) {
	o.Parser = &v
}

// GetMasked returns the Masked field value if set, zero value otherwise.
func (o *SaasFieldConfiguration) GetMasked() bool {
	if o == nil || IsNil(o.Masked) {
		var ret bool
		return ret
	}
	return *o.Masked
}

// GetMaskedOk returns a tuple with the Masked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasFieldConfiguration) GetMaskedOk() (*bool, bool) {
	if o == nil || IsNil(o.Masked) {
		return nil, false
	}
	return o.Masked, true
}

// HasMasked returns a boolean if a field has been set.
func (o *SaasFieldConfiguration) HasMasked() bool {
	if o != nil && !IsNil(o.Masked) {
		return true
	}

	return false
}

// SetMasked gets a reference to the given bool and assigns it to the Masked field.
func (o *SaasFieldConfiguration) SetMasked(v bool) {
	o.Masked = &v
}

func (o SaasFieldConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SaasFieldConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttributeNames) {
		toSerialize["attributeNames"] = o.AttributeNames
	}
	if !IsNil(o.DefaultValue) {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	if !IsNil(o.CreateOnly) {
		toSerialize["createOnly"] = o.CreateOnly
	}
	if !IsNil(o.Trim) {
		toSerialize["trim"] = o.Trim
	}
	if !IsNil(o.CharacterCase) {
		toSerialize["characterCase"] = o.CharacterCase
	}
	if !IsNil(o.Parser) {
		toSerialize["parser"] = o.Parser
	}
	if !IsNil(o.Masked) {
		toSerialize["masked"] = o.Masked
	}
	return toSerialize, nil
}

type NullableSaasFieldConfiguration struct {
	value *SaasFieldConfiguration
	isSet bool
}

func (v NullableSaasFieldConfiguration) Get() *SaasFieldConfiguration {
	return v.value
}

func (v *NullableSaasFieldConfiguration) Set(val *SaasFieldConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableSaasFieldConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableSaasFieldConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSaasFieldConfiguration(val *SaasFieldConfiguration) *NullableSaasFieldConfiguration {
	return &NullableSaasFieldConfiguration{value: val, isSet: true}
}

func (v NullableSaasFieldConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSaasFieldConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
