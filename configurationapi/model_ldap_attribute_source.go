/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// checks if the LdapAttributeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LdapAttributeSource{}

// LdapAttributeSource struct for LdapAttributeSource
type LdapAttributeSource struct {
	AttributeSource
	// The base DN to search from. If not specified, the search will start at the LDAP's root.
	BaseDn *string `json:"baseDn,omitempty" tfsdk:"base_dn"`
	// Determines the node depth of the query.
	SearchScope string `json:"searchScope" tfsdk:"search_scope"`
	// The LDAP filter that will be used to lookup the objects from the directory.
	SearchFilter string `json:"searchFilter" tfsdk:"search_filter"`
	// A list of LDAP attributes returned from search and available for mapping.
	SearchAttributes []string `json:"searchAttributes,omitempty" tfsdk:"search_attributes"`
	// The advanced settings for binary LDAP attributes.
	BinaryAttributeSettings *map[string]BinaryLdapAttributeSettings `json:"binaryAttributeSettings,omitempty" tfsdk:"binary_attribute_settings"`
	// Set this to true to return transitive group memberships for the 'memberOf' attribute.  This only applies for Active Directory data sources.  All other data sources will be set to false.
	MemberOfNestedGroup *bool `json:"memberOfNestedGroup,omitempty" tfsdk:"member_of_nested_group"`
}

type _LdapAttributeSource LdapAttributeSource

// NewLdapAttributeSource instantiates a new LdapAttributeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLdapAttributeSource(searchScope string, searchFilter string, type_ string, dataStoreRef ResourceLink) *LdapAttributeSource {
	this := LdapAttributeSource{}
	this.Type = type_
	this.DataStoreRef = dataStoreRef
	this.SearchScope = searchScope
	this.SearchFilter = searchFilter
	return &this
}

// NewLdapAttributeSourceWithDefaults instantiates a new LdapAttributeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLdapAttributeSourceWithDefaults() *LdapAttributeSource {
	this := LdapAttributeSource{}
	return &this
}

// GetBaseDn returns the BaseDn field value if set, zero value otherwise.
func (o *LdapAttributeSource) GetBaseDn() string {
	if o == nil || IsNil(o.BaseDn) {
		var ret string
		return ret
	}
	return *o.BaseDn
}

// GetBaseDnOk returns a tuple with the BaseDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapAttributeSource) GetBaseDnOk() (*string, bool) {
	if o == nil || IsNil(o.BaseDn) {
		return nil, false
	}
	return o.BaseDn, true
}

// HasBaseDn returns a boolean if a field has been set.
func (o *LdapAttributeSource) HasBaseDn() bool {
	if o != nil && !IsNil(o.BaseDn) {
		return true
	}

	return false
}

// SetBaseDn gets a reference to the given string and assigns it to the BaseDn field.
func (o *LdapAttributeSource) SetBaseDn(v string) {
	o.BaseDn = &v
}

// GetSearchScope returns the SearchScope field value
func (o *LdapAttributeSource) GetSearchScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SearchScope
}

// GetSearchScopeOk returns a tuple with the SearchScope field value
// and a boolean to check if the value has been set.
func (o *LdapAttributeSource) GetSearchScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SearchScope, true
}

// SetSearchScope sets field value
func (o *LdapAttributeSource) SetSearchScope(v string) {
	o.SearchScope = v
}

// GetSearchFilter returns the SearchFilter field value
func (o *LdapAttributeSource) GetSearchFilter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SearchFilter
}

// GetSearchFilterOk returns a tuple with the SearchFilter field value
// and a boolean to check if the value has been set.
func (o *LdapAttributeSource) GetSearchFilterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SearchFilter, true
}

// SetSearchFilter sets field value
func (o *LdapAttributeSource) SetSearchFilter(v string) {
	o.SearchFilter = v
}

// GetSearchAttributes returns the SearchAttributes field value if set, zero value otherwise.
func (o *LdapAttributeSource) GetSearchAttributes() []string {
	if o == nil || IsNil(o.SearchAttributes) {
		var ret []string
		return ret
	}
	return o.SearchAttributes
}

// GetSearchAttributesOk returns a tuple with the SearchAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapAttributeSource) GetSearchAttributesOk() ([]string, bool) {
	if o == nil || IsNil(o.SearchAttributes) {
		return nil, false
	}
	return o.SearchAttributes, true
}

// HasSearchAttributes returns a boolean if a field has been set.
func (o *LdapAttributeSource) HasSearchAttributes() bool {
	if o != nil && !IsNil(o.SearchAttributes) {
		return true
	}

	return false
}

// SetSearchAttributes gets a reference to the given []string and assigns it to the SearchAttributes field.
func (o *LdapAttributeSource) SetSearchAttributes(v []string) {
	o.SearchAttributes = v
}

// GetBinaryAttributeSettings returns the BinaryAttributeSettings field value if set, zero value otherwise.
func (o *LdapAttributeSource) GetBinaryAttributeSettings() map[string]BinaryLdapAttributeSettings {
	if o == nil || IsNil(o.BinaryAttributeSettings) {
		var ret map[string]BinaryLdapAttributeSettings
		return ret
	}
	return *o.BinaryAttributeSettings
}

// GetBinaryAttributeSettingsOk returns a tuple with the BinaryAttributeSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapAttributeSource) GetBinaryAttributeSettingsOk() (*map[string]BinaryLdapAttributeSettings, bool) {
	if o == nil || IsNil(o.BinaryAttributeSettings) {
		return nil, false
	}
	return o.BinaryAttributeSettings, true
}

// HasBinaryAttributeSettings returns a boolean if a field has been set.
func (o *LdapAttributeSource) HasBinaryAttributeSettings() bool {
	if o != nil && !IsNil(o.BinaryAttributeSettings) {
		return true
	}

	return false
}

// SetBinaryAttributeSettings gets a reference to the given map[string]BinaryLdapAttributeSettings and assigns it to the BinaryAttributeSettings field.
func (o *LdapAttributeSource) SetBinaryAttributeSettings(v map[string]BinaryLdapAttributeSettings) {
	o.BinaryAttributeSettings = &v
}

// GetMemberOfNestedGroup returns the MemberOfNestedGroup field value if set, zero value otherwise.
func (o *LdapAttributeSource) GetMemberOfNestedGroup() bool {
	if o == nil || IsNil(o.MemberOfNestedGroup) {
		var ret bool
		return ret
	}
	return *o.MemberOfNestedGroup
}

// GetMemberOfNestedGroupOk returns a tuple with the MemberOfNestedGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapAttributeSource) GetMemberOfNestedGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.MemberOfNestedGroup) {
		return nil, false
	}
	return o.MemberOfNestedGroup, true
}

// HasMemberOfNestedGroup returns a boolean if a field has been set.
func (o *LdapAttributeSource) HasMemberOfNestedGroup() bool {
	if o != nil && !IsNil(o.MemberOfNestedGroup) {
		return true
	}

	return false
}

// SetMemberOfNestedGroup gets a reference to the given bool and assigns it to the MemberOfNestedGroup field.
func (o *LdapAttributeSource) SetMemberOfNestedGroup(v bool) {
	o.MemberOfNestedGroup = &v
}

func (o LdapAttributeSource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LdapAttributeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedAttributeSource, errAttributeSource := json.Marshal(o.AttributeSource)
	if errAttributeSource != nil {
		return map[string]interface{}{}, errAttributeSource
	}
	errAttributeSource = json.Unmarshal([]byte(serializedAttributeSource), &toSerialize)
	if errAttributeSource != nil {
		return map[string]interface{}{}, errAttributeSource
	}
	if !IsNil(o.BaseDn) {
		toSerialize["baseDn"] = o.BaseDn
	}
	toSerialize["searchScope"] = o.SearchScope
	toSerialize["searchFilter"] = o.SearchFilter
	if !IsNil(o.SearchAttributes) {
		toSerialize["searchAttributes"] = o.SearchAttributes
	}
	if !IsNil(o.BinaryAttributeSettings) {
		toSerialize["binaryAttributeSettings"] = o.BinaryAttributeSettings
	}
	if !IsNil(o.MemberOfNestedGroup) {
		toSerialize["memberOfNestedGroup"] = o.MemberOfNestedGroup
	}
	return toSerialize, nil
}

func (o *LdapAttributeSource) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"searchScope",
		"searchFilter",
		"type",
		"dataStoreRef",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLdapAttributeSource := _LdapAttributeSource{}

	err = json.Unmarshal(bytes, &varLdapAttributeSource)

	if err != nil {
		return err
	}

	*o = LdapAttributeSource(varLdapAttributeSource)

	return err
}

type NullableLdapAttributeSource struct {
	value *LdapAttributeSource
	isSet bool
}

func (v NullableLdapAttributeSource) Get() *LdapAttributeSource {
	return v.value
}

func (v *NullableLdapAttributeSource) Set(val *LdapAttributeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableLdapAttributeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableLdapAttributeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLdapAttributeSource(val *LdapAttributeSource) *NullableLdapAttributeSource {
	return &NullableLdapAttributeSource{value: val, isSet: true}
}

func (v NullableLdapAttributeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLdapAttributeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
