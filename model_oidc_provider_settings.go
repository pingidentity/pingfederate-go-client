/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the OIDCProviderSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OIDCProviderSettings{}

// OIDCProviderSettings The OpenID Provider settings.
type OIDCProviderSettings struct {
	// Space separated scope values that the OpenID Provider supports.
	Scopes string `json:"scopes"`
	// URL of the OpenID Provider's OAuth 2.0 Authorization Endpoint.
	AuthorizationEndpoint string `json:"authorizationEndpoint"`
	// The OpenID Connect login type. These values maps to: <br>  CODE: Authentication using Code Flow <br> POST: Authentication using Form Post <br> POST_AT: Authentication using Form Post with Access Token
	LoginType string `json:"loginType"`
	// The OpenID Connect Authentication Scheme. This is required for Authentication using Code Flow.
	AuthenticationScheme *string `json:"authenticationScheme,omitempty"`
	// The authentication signing algorithm for token endpoint PRIVATE_KEY_JWT authentication. Only asymmetric algorithms are allowed. For RSASSA-PSS signing algorithm, PingFederate must be integrated with a hardware security module (HSM) or Java 11.
	AuthenticationSigningAlgorithm *string `json:"authenticationSigningAlgorithm,omitempty"`
	// The request signing algorithm. Required only if you wish to use signed requests. Only asymmetric algorithms are allowed. For RSASSA-PSS signing algorithm, PingFederate must be integrated with a hardware security module (HSM) or Java 11.
	RequestSigningAlgorithm *string `json:"requestSigningAlgorithm,omitempty"`
	// Enable Proof Key for Code Exchange (PKCE). When enabled, the client sends an SHA-256 code challenge and corresponding code verifier to the OpenID Provider during the authorization code flow.
	EnablePKCE *bool `json:"enablePKCE,omitempty"`
	// URL of the OpenID Provider's OAuth 2.0 Token Endpoint.
	TokenEndpoint *string `json:"tokenEndpoint,omitempty"`
	// URL of the OpenID Provider's UserInfo Endpoint.
	UserInfoEndpoint *string `json:"userInfoEndpoint,omitempty"`
	// URL of the OpenID Provider's JSON Web Key Set [JWK] document.
	JwksURL string `json:"jwksURL"`
	// A list of request parameters. Request parameters with same name but different attribute values are treated as a multi-valued request parameter.
	RequestParameters []OIDCRequestParameter `json:"requestParameters,omitempty"`
}

// NewOIDCProviderSettings instantiates a new OIDCProviderSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOIDCProviderSettings(scopes string, authorizationEndpoint string, loginType string, jwksURL string) *OIDCProviderSettings {
	this := OIDCProviderSettings{}
	this.Scopes = scopes
	this.AuthorizationEndpoint = authorizationEndpoint
	this.LoginType = loginType
	this.JwksURL = jwksURL
	return &this
}

// NewOIDCProviderSettingsWithDefaults instantiates a new OIDCProviderSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOIDCProviderSettingsWithDefaults() *OIDCProviderSettings {
	this := OIDCProviderSettings{}
	return &this
}

// GetScopes returns the Scopes field value
func (o *OIDCProviderSettings) GetScopes() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value
// and a boolean to check if the value has been set.
func (o *OIDCProviderSettings) GetScopesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scopes, true
}

// SetScopes sets field value
func (o *OIDCProviderSettings) SetScopes(v string) {
	o.Scopes = v
}

// GetAuthorizationEndpoint returns the AuthorizationEndpoint field value
func (o *OIDCProviderSettings) GetAuthorizationEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthorizationEndpoint
}

// GetAuthorizationEndpointOk returns a tuple with the AuthorizationEndpoint field value
// and a boolean to check if the value has been set.
func (o *OIDCProviderSettings) GetAuthorizationEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorizationEndpoint, true
}

// SetAuthorizationEndpoint sets field value
func (o *OIDCProviderSettings) SetAuthorizationEndpoint(v string) {
	o.AuthorizationEndpoint = v
}

// GetLoginType returns the LoginType field value
func (o *OIDCProviderSettings) GetLoginType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LoginType
}

// GetLoginTypeOk returns a tuple with the LoginType field value
// and a boolean to check if the value has been set.
func (o *OIDCProviderSettings) GetLoginTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LoginType, true
}

// SetLoginType sets field value
func (o *OIDCProviderSettings) SetLoginType(v string) {
	o.LoginType = v
}

// GetAuthenticationScheme returns the AuthenticationScheme field value if set, zero value otherwise.
func (o *OIDCProviderSettings) GetAuthenticationScheme() string {
	if o == nil || IsNil(o.AuthenticationScheme) {
		var ret string
		return ret
	}
	return *o.AuthenticationScheme
}

// GetAuthenticationSchemeOk returns a tuple with the AuthenticationScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OIDCProviderSettings) GetAuthenticationSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthenticationScheme) {
		return nil, false
	}
	return o.AuthenticationScheme, true
}

// HasAuthenticationScheme returns a boolean if a field has been set.
func (o *OIDCProviderSettings) HasAuthenticationScheme() bool {
	if o != nil && !IsNil(o.AuthenticationScheme) {
		return true
	}

	return false
}

// SetAuthenticationScheme gets a reference to the given string and assigns it to the AuthenticationScheme field.
func (o *OIDCProviderSettings) SetAuthenticationScheme(v string) {
	o.AuthenticationScheme = &v
}

// GetAuthenticationSigningAlgorithm returns the AuthenticationSigningAlgorithm field value if set, zero value otherwise.
func (o *OIDCProviderSettings) GetAuthenticationSigningAlgorithm() string {
	if o == nil || IsNil(o.AuthenticationSigningAlgorithm) {
		var ret string
		return ret
	}
	return *o.AuthenticationSigningAlgorithm
}

// GetAuthenticationSigningAlgorithmOk returns a tuple with the AuthenticationSigningAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OIDCProviderSettings) GetAuthenticationSigningAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.AuthenticationSigningAlgorithm) {
		return nil, false
	}
	return o.AuthenticationSigningAlgorithm, true
}

// HasAuthenticationSigningAlgorithm returns a boolean if a field has been set.
func (o *OIDCProviderSettings) HasAuthenticationSigningAlgorithm() bool {
	if o != nil && !IsNil(o.AuthenticationSigningAlgorithm) {
		return true
	}

	return false
}

// SetAuthenticationSigningAlgorithm gets a reference to the given string and assigns it to the AuthenticationSigningAlgorithm field.
func (o *OIDCProviderSettings) SetAuthenticationSigningAlgorithm(v string) {
	o.AuthenticationSigningAlgorithm = &v
}

// GetRequestSigningAlgorithm returns the RequestSigningAlgorithm field value if set, zero value otherwise.
func (o *OIDCProviderSettings) GetRequestSigningAlgorithm() string {
	if o == nil || IsNil(o.RequestSigningAlgorithm) {
		var ret string
		return ret
	}
	return *o.RequestSigningAlgorithm
}

// GetRequestSigningAlgorithmOk returns a tuple with the RequestSigningAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OIDCProviderSettings) GetRequestSigningAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.RequestSigningAlgorithm) {
		return nil, false
	}
	return o.RequestSigningAlgorithm, true
}

// HasRequestSigningAlgorithm returns a boolean if a field has been set.
func (o *OIDCProviderSettings) HasRequestSigningAlgorithm() bool {
	if o != nil && !IsNil(o.RequestSigningAlgorithm) {
		return true
	}

	return false
}

// SetRequestSigningAlgorithm gets a reference to the given string and assigns it to the RequestSigningAlgorithm field.
func (o *OIDCProviderSettings) SetRequestSigningAlgorithm(v string) {
	o.RequestSigningAlgorithm = &v
}

// GetEnablePKCE returns the EnablePKCE field value if set, zero value otherwise.
func (o *OIDCProviderSettings) GetEnablePKCE() bool {
	if o == nil || IsNil(o.EnablePKCE) {
		var ret bool
		return ret
	}
	return *o.EnablePKCE
}

// GetEnablePKCEOk returns a tuple with the EnablePKCE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OIDCProviderSettings) GetEnablePKCEOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePKCE) {
		return nil, false
	}
	return o.EnablePKCE, true
}

// HasEnablePKCE returns a boolean if a field has been set.
func (o *OIDCProviderSettings) HasEnablePKCE() bool {
	if o != nil && !IsNil(o.EnablePKCE) {
		return true
	}

	return false
}

// SetEnablePKCE gets a reference to the given bool and assigns it to the EnablePKCE field.
func (o *OIDCProviderSettings) SetEnablePKCE(v bool) {
	o.EnablePKCE = &v
}

// GetTokenEndpoint returns the TokenEndpoint field value if set, zero value otherwise.
func (o *OIDCProviderSettings) GetTokenEndpoint() string {
	if o == nil || IsNil(o.TokenEndpoint) {
		var ret string
		return ret
	}
	return *o.TokenEndpoint
}

// GetTokenEndpointOk returns a tuple with the TokenEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OIDCProviderSettings) GetTokenEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.TokenEndpoint) {
		return nil, false
	}
	return o.TokenEndpoint, true
}

// HasTokenEndpoint returns a boolean if a field has been set.
func (o *OIDCProviderSettings) HasTokenEndpoint() bool {
	if o != nil && !IsNil(o.TokenEndpoint) {
		return true
	}

	return false
}

// SetTokenEndpoint gets a reference to the given string and assigns it to the TokenEndpoint field.
func (o *OIDCProviderSettings) SetTokenEndpoint(v string) {
	o.TokenEndpoint = &v
}

// GetUserInfoEndpoint returns the UserInfoEndpoint field value if set, zero value otherwise.
func (o *OIDCProviderSettings) GetUserInfoEndpoint() string {
	if o == nil || IsNil(o.UserInfoEndpoint) {
		var ret string
		return ret
	}
	return *o.UserInfoEndpoint
}

// GetUserInfoEndpointOk returns a tuple with the UserInfoEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OIDCProviderSettings) GetUserInfoEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.UserInfoEndpoint) {
		return nil, false
	}
	return o.UserInfoEndpoint, true
}

// HasUserInfoEndpoint returns a boolean if a field has been set.
func (o *OIDCProviderSettings) HasUserInfoEndpoint() bool {
	if o != nil && !IsNil(o.UserInfoEndpoint) {
		return true
	}

	return false
}

// SetUserInfoEndpoint gets a reference to the given string and assigns it to the UserInfoEndpoint field.
func (o *OIDCProviderSettings) SetUserInfoEndpoint(v string) {
	o.UserInfoEndpoint = &v
}

// GetJwksURL returns the JwksURL field value
func (o *OIDCProviderSettings) GetJwksURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JwksURL
}

// GetJwksURLOk returns a tuple with the JwksURL field value
// and a boolean to check if the value has been set.
func (o *OIDCProviderSettings) GetJwksURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JwksURL, true
}

// SetJwksURL sets field value
func (o *OIDCProviderSettings) SetJwksURL(v string) {
	o.JwksURL = v
}

// GetRequestParameters returns the RequestParameters field value if set, zero value otherwise.
func (o *OIDCProviderSettings) GetRequestParameters() []OIDCRequestParameter {
	if o == nil || IsNil(o.RequestParameters) {
		var ret []OIDCRequestParameter
		return ret
	}
	return o.RequestParameters
}

// GetRequestParametersOk returns a tuple with the RequestParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OIDCProviderSettings) GetRequestParametersOk() ([]OIDCRequestParameter, bool) {
	if o == nil || IsNil(o.RequestParameters) {
		return nil, false
	}
	return o.RequestParameters, true
}

// HasRequestParameters returns a boolean if a field has been set.
func (o *OIDCProviderSettings) HasRequestParameters() bool {
	if o != nil && !IsNil(o.RequestParameters) {
		return true
	}

	return false
}

// SetRequestParameters gets a reference to the given []OIDCRequestParameter and assigns it to the RequestParameters field.
func (o *OIDCProviderSettings) SetRequestParameters(v []OIDCRequestParameter) {
	o.RequestParameters = v
}

func (o OIDCProviderSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OIDCProviderSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["scopes"] = o.Scopes
	toSerialize["authorizationEndpoint"] = o.AuthorizationEndpoint
	toSerialize["loginType"] = o.LoginType
	if !IsNil(o.AuthenticationScheme) {
		toSerialize["authenticationScheme"] = o.AuthenticationScheme
	}
	if !IsNil(o.AuthenticationSigningAlgorithm) {
		toSerialize["authenticationSigningAlgorithm"] = o.AuthenticationSigningAlgorithm
	}
	if !IsNil(o.RequestSigningAlgorithm) {
		toSerialize["requestSigningAlgorithm"] = o.RequestSigningAlgorithm
	}
	if !IsNil(o.EnablePKCE) {
		toSerialize["enablePKCE"] = o.EnablePKCE
	}
	if !IsNil(o.TokenEndpoint) {
		toSerialize["tokenEndpoint"] = o.TokenEndpoint
	}
	if !IsNil(o.UserInfoEndpoint) {
		toSerialize["userInfoEndpoint"] = o.UserInfoEndpoint
	}
	toSerialize["jwksURL"] = o.JwksURL
	if !IsNil(o.RequestParameters) {
		toSerialize["requestParameters"] = o.RequestParameters
	}
	return toSerialize, nil
}

type NullableOIDCProviderSettings struct {
	value *OIDCProviderSettings
	isSet bool
}

func (v NullableOIDCProviderSettings) Get() *OIDCProviderSettings {
	return v.value
}

func (v *NullableOIDCProviderSettings) Set(val *OIDCProviderSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableOIDCProviderSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableOIDCProviderSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOIDCProviderSettings(val *OIDCProviderSettings) *NullableOIDCProviderSettings {
	return &NullableOIDCProviderSettings{value: val, isSet: true}
}

func (v NullableOIDCProviderSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOIDCProviderSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
