/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AuthenticationSessionPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthenticationSessionPolicy{}

// AuthenticationSessionPolicy The session policy for a specified authentication source.
type AuthenticationSessionPolicy struct {
	// The persistent, unique ID for the session policy. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified.
	Id                   *string              `json:"id,omitempty" tfsdk:"id"`
	AuthenticationSource AuthenticationSource `json:"authenticationSource" tfsdk:"authentication_source"`
	// Determines whether sessions are enabled for the authentication source. This value overrides the enableSessions value from the global authentication session policy.
	EnableSessions bool `json:"enableSessions" tfsdk:"enable_sessions"`
	// Determines whether sessions for the authentication source are persistent. This value overrides the persistentSessions value from the global authentication session policy. This field is ignored if enableSessions is false.
	Persistent *bool `json:"persistent,omitempty" tfsdk:"persistent"`
	// The idle timeout period, in minutes. If omitted, the value from the global authentication session policy will be used. If set to -1, the idle timeout will be set to the maximum timeout. If a value is provided for this property, a value must also be provided for maxTimeoutMins.
	IdleTimeoutMins *int64 `json:"idleTimeoutMins,omitempty" tfsdk:"idle_timeout_mins"`
	// The maximum timeout period, in minutes. If omitted, the value from the global authentication session policy will be used. If set to -1, sessions do not expire. If a value is provided for this property, a value must also be provided for idleTimeoutMins.
	MaxTimeoutMins *int64 `json:"maxTimeoutMins,omitempty" tfsdk:"max_timeout_mins"`
	// The display unit for session timeout periods in the PingFederate administrative console. When the display unit is HOURS or DAYS, the timeout values in minutes must correspond to a whole number value for the specified unit.
	TimeoutDisplayUnit *string `json:"timeoutDisplayUnit,omitempty" tfsdk:"timeout_display_unit"`
	// Determines whether the requested authentication context is considered when deciding whether an existing session is valid for a given request. The default is false.
	AuthnContextSensitive *bool `json:"authnContextSensitive,omitempty" tfsdk:"authn_context_sensitive"`
}

// NewAuthenticationSessionPolicy instantiates a new AuthenticationSessionPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticationSessionPolicy(authenticationSource AuthenticationSource, enableSessions bool) *AuthenticationSessionPolicy {
	this := AuthenticationSessionPolicy{}
	this.AuthenticationSource = authenticationSource
	this.EnableSessions = enableSessions
	return &this
}

// NewAuthenticationSessionPolicyWithDefaults instantiates a new AuthenticationSessionPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticationSessionPolicyWithDefaults() *AuthenticationSessionPolicy {
	this := AuthenticationSessionPolicy{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuthenticationSessionPolicy) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationSessionPolicy) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuthenticationSessionPolicy) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AuthenticationSessionPolicy) SetId(v string) {
	o.Id = &v
}

// GetAuthenticationSource returns the AuthenticationSource field value
func (o *AuthenticationSessionPolicy) GetAuthenticationSource() AuthenticationSource {
	if o == nil {
		var ret AuthenticationSource
		return ret
	}

	return o.AuthenticationSource
}

// GetAuthenticationSourceOk returns a tuple with the AuthenticationSource field value
// and a boolean to check if the value has been set.
func (o *AuthenticationSessionPolicy) GetAuthenticationSourceOk() (*AuthenticationSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthenticationSource, true
}

// SetAuthenticationSource sets field value
func (o *AuthenticationSessionPolicy) SetAuthenticationSource(v AuthenticationSource) {
	o.AuthenticationSource = v
}

// GetEnableSessions returns the EnableSessions field value
func (o *AuthenticationSessionPolicy) GetEnableSessions() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnableSessions
}

// GetEnableSessionsOk returns a tuple with the EnableSessions field value
// and a boolean to check if the value has been set.
func (o *AuthenticationSessionPolicy) GetEnableSessionsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnableSessions, true
}

// SetEnableSessions sets field value
func (o *AuthenticationSessionPolicy) SetEnableSessions(v bool) {
	o.EnableSessions = v
}

// GetPersistent returns the Persistent field value if set, zero value otherwise.
func (o *AuthenticationSessionPolicy) GetPersistent() bool {
	if o == nil || IsNil(o.Persistent) {
		var ret bool
		return ret
	}
	return *o.Persistent
}

// GetPersistentOk returns a tuple with the Persistent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationSessionPolicy) GetPersistentOk() (*bool, bool) {
	if o == nil || IsNil(o.Persistent) {
		return nil, false
	}
	return o.Persistent, true
}

// HasPersistent returns a boolean if a field has been set.
func (o *AuthenticationSessionPolicy) HasPersistent() bool {
	if o != nil && !IsNil(o.Persistent) {
		return true
	}

	return false
}

// SetPersistent gets a reference to the given bool and assigns it to the Persistent field.
func (o *AuthenticationSessionPolicy) SetPersistent(v bool) {
	o.Persistent = &v
}

// GetIdleTimeoutMins returns the IdleTimeoutMins field value if set, zero value otherwise.
func (o *AuthenticationSessionPolicy) GetIdleTimeoutMins() int64 {
	if o == nil || IsNil(o.IdleTimeoutMins) {
		var ret int64
		return ret
	}
	return *o.IdleTimeoutMins
}

// GetIdleTimeoutMinsOk returns a tuple with the IdleTimeoutMins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationSessionPolicy) GetIdleTimeoutMinsOk() (*int64, bool) {
	if o == nil || IsNil(o.IdleTimeoutMins) {
		return nil, false
	}
	return o.IdleTimeoutMins, true
}

// HasIdleTimeoutMins returns a boolean if a field has been set.
func (o *AuthenticationSessionPolicy) HasIdleTimeoutMins() bool {
	if o != nil && !IsNil(o.IdleTimeoutMins) {
		return true
	}

	return false
}

// SetIdleTimeoutMins gets a reference to the given int64 and assigns it to the IdleTimeoutMins field.
func (o *AuthenticationSessionPolicy) SetIdleTimeoutMins(v int64) {
	o.IdleTimeoutMins = &v
}

// GetMaxTimeoutMins returns the MaxTimeoutMins field value if set, zero value otherwise.
func (o *AuthenticationSessionPolicy) GetMaxTimeoutMins() int64 {
	if o == nil || IsNil(o.MaxTimeoutMins) {
		var ret int64
		return ret
	}
	return *o.MaxTimeoutMins
}

// GetMaxTimeoutMinsOk returns a tuple with the MaxTimeoutMins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationSessionPolicy) GetMaxTimeoutMinsOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxTimeoutMins) {
		return nil, false
	}
	return o.MaxTimeoutMins, true
}

// HasMaxTimeoutMins returns a boolean if a field has been set.
func (o *AuthenticationSessionPolicy) HasMaxTimeoutMins() bool {
	if o != nil && !IsNil(o.MaxTimeoutMins) {
		return true
	}

	return false
}

// SetMaxTimeoutMins gets a reference to the given int64 and assigns it to the MaxTimeoutMins field.
func (o *AuthenticationSessionPolicy) SetMaxTimeoutMins(v int64) {
	o.MaxTimeoutMins = &v
}

// GetTimeoutDisplayUnit returns the TimeoutDisplayUnit field value if set, zero value otherwise.
func (o *AuthenticationSessionPolicy) GetTimeoutDisplayUnit() string {
	if o == nil || IsNil(o.TimeoutDisplayUnit) {
		var ret string
		return ret
	}
	return *o.TimeoutDisplayUnit
}

// GetTimeoutDisplayUnitOk returns a tuple with the TimeoutDisplayUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationSessionPolicy) GetTimeoutDisplayUnitOk() (*string, bool) {
	if o == nil || IsNil(o.TimeoutDisplayUnit) {
		return nil, false
	}
	return o.TimeoutDisplayUnit, true
}

// HasTimeoutDisplayUnit returns a boolean if a field has been set.
func (o *AuthenticationSessionPolicy) HasTimeoutDisplayUnit() bool {
	if o != nil && !IsNil(o.TimeoutDisplayUnit) {
		return true
	}

	return false
}

// SetTimeoutDisplayUnit gets a reference to the given string and assigns it to the TimeoutDisplayUnit field.
func (o *AuthenticationSessionPolicy) SetTimeoutDisplayUnit(v string) {
	o.TimeoutDisplayUnit = &v
}

// GetAuthnContextSensitive returns the AuthnContextSensitive field value if set, zero value otherwise.
func (o *AuthenticationSessionPolicy) GetAuthnContextSensitive() bool {
	if o == nil || IsNil(o.AuthnContextSensitive) {
		var ret bool
		return ret
	}
	return *o.AuthnContextSensitive
}

// GetAuthnContextSensitiveOk returns a tuple with the AuthnContextSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationSessionPolicy) GetAuthnContextSensitiveOk() (*bool, bool) {
	if o == nil || IsNil(o.AuthnContextSensitive) {
		return nil, false
	}
	return o.AuthnContextSensitive, true
}

// HasAuthnContextSensitive returns a boolean if a field has been set.
func (o *AuthenticationSessionPolicy) HasAuthnContextSensitive() bool {
	if o != nil && !IsNil(o.AuthnContextSensitive) {
		return true
	}

	return false
}

// SetAuthnContextSensitive gets a reference to the given bool and assigns it to the AuthnContextSensitive field.
func (o *AuthenticationSessionPolicy) SetAuthnContextSensitive(v bool) {
	o.AuthnContextSensitive = &v
}

func (o AuthenticationSessionPolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthenticationSessionPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["authenticationSource"] = o.AuthenticationSource
	toSerialize["enableSessions"] = o.EnableSessions
	if !IsNil(o.Persistent) {
		toSerialize["persistent"] = o.Persistent
	}
	if !IsNil(o.IdleTimeoutMins) {
		toSerialize["idleTimeoutMins"] = o.IdleTimeoutMins
	}
	if !IsNil(o.MaxTimeoutMins) {
		toSerialize["maxTimeoutMins"] = o.MaxTimeoutMins
	}
	if !IsNil(o.TimeoutDisplayUnit) {
		toSerialize["timeoutDisplayUnit"] = o.TimeoutDisplayUnit
	}
	if !IsNil(o.AuthnContextSensitive) {
		toSerialize["authnContextSensitive"] = o.AuthnContextSensitive
	}
	return toSerialize, nil
}

type NullableAuthenticationSessionPolicy struct {
	value *AuthenticationSessionPolicy
	isSet bool
}

func (v NullableAuthenticationSessionPolicy) Get() *AuthenticationSessionPolicy {
	return v.value
}

func (v *NullableAuthenticationSessionPolicy) Set(val *AuthenticationSessionPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationSessionPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationSessionPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationSessionPolicy(val *AuthenticationSessionPolicy) *NullableAuthenticationSessionPolicy {
	return &NullableAuthenticationSessionPolicy{value: val, isSet: true}
}

func (v NullableAuthenticationSessionPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationSessionPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
