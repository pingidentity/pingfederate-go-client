/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ClientSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientSettings{}

// ClientSettings The client settings.
type ClientSettings struct {
	// The client metadata.
	ClientMetadata            []ClientMetadata           `json:"clientMetadata,omitempty" tfsdk:"client_metadata"`
	DynamicClientRegistration *DynamicClientRegistration `json:"dynamicClientRegistration,omitempty" tfsdk:"dynamic_client_registration"`
}

// NewClientSettings instantiates a new ClientSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientSettings() *ClientSettings {
	this := ClientSettings{}
	return &this
}

// NewClientSettingsWithDefaults instantiates a new ClientSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientSettingsWithDefaults() *ClientSettings {
	this := ClientSettings{}
	return &this
}

// GetClientMetadata returns the ClientMetadata field value if set, zero value otherwise.
func (o *ClientSettings) GetClientMetadata() []ClientMetadata {
	if o == nil || IsNil(o.ClientMetadata) {
		var ret []ClientMetadata
		return ret
	}
	return o.ClientMetadata
}

// GetClientMetadataOk returns a tuple with the ClientMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientSettings) GetClientMetadataOk() ([]ClientMetadata, bool) {
	if o == nil || IsNil(o.ClientMetadata) {
		return nil, false
	}
	return o.ClientMetadata, true
}

// HasClientMetadata returns a boolean if a field has been set.
func (o *ClientSettings) HasClientMetadata() bool {
	if o != nil && !IsNil(o.ClientMetadata) {
		return true
	}

	return false
}

// SetClientMetadata gets a reference to the given []ClientMetadata and assigns it to the ClientMetadata field.
func (o *ClientSettings) SetClientMetadata(v []ClientMetadata) {
	o.ClientMetadata = v
}

// GetDynamicClientRegistration returns the DynamicClientRegistration field value if set, zero value otherwise.
func (o *ClientSettings) GetDynamicClientRegistration() DynamicClientRegistration {
	if o == nil || IsNil(o.DynamicClientRegistration) {
		var ret DynamicClientRegistration
		return ret
	}
	return *o.DynamicClientRegistration
}

// GetDynamicClientRegistrationOk returns a tuple with the DynamicClientRegistration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientSettings) GetDynamicClientRegistrationOk() (*DynamicClientRegistration, bool) {
	if o == nil || IsNil(o.DynamicClientRegistration) {
		return nil, false
	}
	return o.DynamicClientRegistration, true
}

// HasDynamicClientRegistration returns a boolean if a field has been set.
func (o *ClientSettings) HasDynamicClientRegistration() bool {
	if o != nil && !IsNil(o.DynamicClientRegistration) {
		return true
	}

	return false
}

// SetDynamicClientRegistration gets a reference to the given DynamicClientRegistration and assigns it to the DynamicClientRegistration field.
func (o *ClientSettings) SetDynamicClientRegistration(v DynamicClientRegistration) {
	o.DynamicClientRegistration = &v
}

func (o ClientSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClientMetadata) {
		toSerialize["clientMetadata"] = o.ClientMetadata
	}
	if !IsNil(o.DynamicClientRegistration) {
		toSerialize["dynamicClientRegistration"] = o.DynamicClientRegistration
	}
	return toSerialize, nil
}

type NullableClientSettings struct {
	value *ClientSettings
	isSet bool
}

func (v NullableClientSettings) Get() *ClientSettings {
	return v.value
}

func (v *NullableClientSettings) Set(val *ClientSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableClientSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableClientSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientSettings(val *ClientSettings) *NullableClientSettings {
	return &NullableClientSettings{value: val, isSet: true}
}

func (v NullableClientSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
