/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ApcMappingPolicyAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApcMappingPolicyAction{}

// ApcMappingPolicyAction struct for ApcMappingPolicyAction
type ApcMappingPolicyAction struct {
	PolicyAction
	AuthenticationPolicyContractRef ResourceLink     `json:"authenticationPolicyContractRef" tfsdk:"authentication_policy_contract_ref"`
	AttributeMapping                AttributeMapping `json:"attributeMapping" tfsdk:"attribute_mapping"`
}

// NewApcMappingPolicyAction instantiates a new ApcMappingPolicyAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApcMappingPolicyAction(authenticationPolicyContractRef ResourceLink, attributeMapping AttributeMapping, type_ string) *ApcMappingPolicyAction {
	this := ApcMappingPolicyAction{}
	this.Type = type_
	this.AuthenticationPolicyContractRef = authenticationPolicyContractRef
	this.AttributeMapping = attributeMapping
	return &this
}

// NewApcMappingPolicyActionWithDefaults instantiates a new ApcMappingPolicyAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApcMappingPolicyActionWithDefaults() *ApcMappingPolicyAction {
	this := ApcMappingPolicyAction{}
	return &this
}

// GetAuthenticationPolicyContractRef returns the AuthenticationPolicyContractRef field value
func (o *ApcMappingPolicyAction) GetAuthenticationPolicyContractRef() ResourceLink {
	if o == nil {
		var ret ResourceLink
		return ret
	}

	return o.AuthenticationPolicyContractRef
}

// GetAuthenticationPolicyContractRefOk returns a tuple with the AuthenticationPolicyContractRef field value
// and a boolean to check if the value has been set.
func (o *ApcMappingPolicyAction) GetAuthenticationPolicyContractRefOk() (*ResourceLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthenticationPolicyContractRef, true
}

// SetAuthenticationPolicyContractRef sets field value
func (o *ApcMappingPolicyAction) SetAuthenticationPolicyContractRef(v ResourceLink) {
	o.AuthenticationPolicyContractRef = v
}

// GetAttributeMapping returns the AttributeMapping field value
func (o *ApcMappingPolicyAction) GetAttributeMapping() AttributeMapping {
	if o == nil {
		var ret AttributeMapping
		return ret
	}

	return o.AttributeMapping
}

// GetAttributeMappingOk returns a tuple with the AttributeMapping field value
// and a boolean to check if the value has been set.
func (o *ApcMappingPolicyAction) GetAttributeMappingOk() (*AttributeMapping, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttributeMapping, true
}

// SetAttributeMapping sets field value
func (o *ApcMappingPolicyAction) SetAttributeMapping(v AttributeMapping) {
	o.AttributeMapping = v
}

func (o ApcMappingPolicyAction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApcMappingPolicyAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedPolicyAction, errPolicyAction := json.Marshal(o.PolicyAction)
	if errPolicyAction != nil {
		return map[string]interface{}{}, errPolicyAction
	}
	errPolicyAction = json.Unmarshal([]byte(serializedPolicyAction), &toSerialize)
	if errPolicyAction != nil {
		return map[string]interface{}{}, errPolicyAction
	}
	toSerialize["authenticationPolicyContractRef"] = o.AuthenticationPolicyContractRef
	toSerialize["attributeMapping"] = o.AttributeMapping
	return toSerialize, nil
}

type NullableApcMappingPolicyAction struct {
	value *ApcMappingPolicyAction
	isSet bool
}

func (v NullableApcMappingPolicyAction) Get() *ApcMappingPolicyAction {
	return v.value
}

func (v *NullableApcMappingPolicyAction) Set(val *ApcMappingPolicyAction) {
	v.value = val
	v.isSet = true
}

func (v NullableApcMappingPolicyAction) IsSet() bool {
	return v.isSet
}

func (v *NullableApcMappingPolicyAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApcMappingPolicyAction(val *ApcMappingPolicyAction) *NullableApcMappingPolicyAction {
	return &NullableApcMappingPolicyAction{value: val, isSet: true}
}

func (v NullableApcMappingPolicyAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApcMappingPolicyAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
