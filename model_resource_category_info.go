/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ResourceCategoryInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceCategoryInfo{}

// ResourceCategoryInfo A model containing information on a category of resource in the administrative API.
type ResourceCategoryInfo struct {
	// The ID of the resource category.
	Id *string `json:"id,omitempty" tfsdk:"id"`
	// The name of the resource category.
	Name *string `json:"name,omitempty" tfsdk:"name"`
}

// NewResourceCategoryInfo instantiates a new ResourceCategoryInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceCategoryInfo() *ResourceCategoryInfo {
	this := ResourceCategoryInfo{}
	return &this
}

// NewResourceCategoryInfoWithDefaults instantiates a new ResourceCategoryInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceCategoryInfoWithDefaults() *ResourceCategoryInfo {
	this := ResourceCategoryInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResourceCategoryInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceCategoryInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResourceCategoryInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ResourceCategoryInfo) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResourceCategoryInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceCategoryInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResourceCategoryInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResourceCategoryInfo) SetName(v string) {
	o.Name = &v
}

func (o ResourceCategoryInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceCategoryInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableResourceCategoryInfo struct {
	value *ResourceCategoryInfo
	isSet bool
}

func (v NullableResourceCategoryInfo) Get() *ResourceCategoryInfo {
	return v.value
}

func (v *NullableResourceCategoryInfo) Set(val *ResourceCategoryInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceCategoryInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceCategoryInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceCategoryInfo(val *ResourceCategoryInfo) *NullableResourceCategoryInfo {
	return &NullableResourceCategoryInfo{value: val, isSet: true}
}

func (v NullableResourceCategoryInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceCategoryInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
