/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ServiceAuthentication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceAuthentication{}

// ServiceAuthentication Service Authentication Settings.
type ServiceAuthentication struct {
	AttributeQuery       *ServiceModel `json:"attributeQuery,omitempty" tfsdk:"attribute_query"`
	Jmx                  *ServiceModel `json:"jmx,omitempty" tfsdk:"jmx"`
	ConnectionManagement *ServiceModel `json:"connectionManagement,omitempty" tfsdk:"connection_management"`
	SsoDirectoryService  *ServiceModel `json:"ssoDirectoryService,omitempty" tfsdk:"sso_directory_service"`
}

// NewServiceAuthentication instantiates a new ServiceAuthentication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceAuthentication() *ServiceAuthentication {
	this := ServiceAuthentication{}
	return &this
}

// NewServiceAuthenticationWithDefaults instantiates a new ServiceAuthentication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceAuthenticationWithDefaults() *ServiceAuthentication {
	this := ServiceAuthentication{}
	return &this
}

// GetAttributeQuery returns the AttributeQuery field value if set, zero value otherwise.
func (o *ServiceAuthentication) GetAttributeQuery() ServiceModel {
	if o == nil || IsNil(o.AttributeQuery) {
		var ret ServiceModel
		return ret
	}
	return *o.AttributeQuery
}

// GetAttributeQueryOk returns a tuple with the AttributeQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceAuthentication) GetAttributeQueryOk() (*ServiceModel, bool) {
	if o == nil || IsNil(o.AttributeQuery) {
		return nil, false
	}
	return o.AttributeQuery, true
}

// HasAttributeQuery returns a boolean if a field has been set.
func (o *ServiceAuthentication) HasAttributeQuery() bool {
	if o != nil && !IsNil(o.AttributeQuery) {
		return true
	}

	return false
}

// SetAttributeQuery gets a reference to the given ServiceModel and assigns it to the AttributeQuery field.
func (o *ServiceAuthentication) SetAttributeQuery(v ServiceModel) {
	o.AttributeQuery = &v
}

// GetJmx returns the Jmx field value if set, zero value otherwise.
func (o *ServiceAuthentication) GetJmx() ServiceModel {
	if o == nil || IsNil(o.Jmx) {
		var ret ServiceModel
		return ret
	}
	return *o.Jmx
}

// GetJmxOk returns a tuple with the Jmx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceAuthentication) GetJmxOk() (*ServiceModel, bool) {
	if o == nil || IsNil(o.Jmx) {
		return nil, false
	}
	return o.Jmx, true
}

// HasJmx returns a boolean if a field has been set.
func (o *ServiceAuthentication) HasJmx() bool {
	if o != nil && !IsNil(o.Jmx) {
		return true
	}

	return false
}

// SetJmx gets a reference to the given ServiceModel and assigns it to the Jmx field.
func (o *ServiceAuthentication) SetJmx(v ServiceModel) {
	o.Jmx = &v
}

// GetConnectionManagement returns the ConnectionManagement field value if set, zero value otherwise.
func (o *ServiceAuthentication) GetConnectionManagement() ServiceModel {
	if o == nil || IsNil(o.ConnectionManagement) {
		var ret ServiceModel
		return ret
	}
	return *o.ConnectionManagement
}

// GetConnectionManagementOk returns a tuple with the ConnectionManagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceAuthentication) GetConnectionManagementOk() (*ServiceModel, bool) {
	if o == nil || IsNil(o.ConnectionManagement) {
		return nil, false
	}
	return o.ConnectionManagement, true
}

// HasConnectionManagement returns a boolean if a field has been set.
func (o *ServiceAuthentication) HasConnectionManagement() bool {
	if o != nil && !IsNil(o.ConnectionManagement) {
		return true
	}

	return false
}

// SetConnectionManagement gets a reference to the given ServiceModel and assigns it to the ConnectionManagement field.
func (o *ServiceAuthentication) SetConnectionManagement(v ServiceModel) {
	o.ConnectionManagement = &v
}

// GetSsoDirectoryService returns the SsoDirectoryService field value if set, zero value otherwise.
func (o *ServiceAuthentication) GetSsoDirectoryService() ServiceModel {
	if o == nil || IsNil(o.SsoDirectoryService) {
		var ret ServiceModel
		return ret
	}
	return *o.SsoDirectoryService
}

// GetSsoDirectoryServiceOk returns a tuple with the SsoDirectoryService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceAuthentication) GetSsoDirectoryServiceOk() (*ServiceModel, bool) {
	if o == nil || IsNil(o.SsoDirectoryService) {
		return nil, false
	}
	return o.SsoDirectoryService, true
}

// HasSsoDirectoryService returns a boolean if a field has been set.
func (o *ServiceAuthentication) HasSsoDirectoryService() bool {
	if o != nil && !IsNil(o.SsoDirectoryService) {
		return true
	}

	return false
}

// SetSsoDirectoryService gets a reference to the given ServiceModel and assigns it to the SsoDirectoryService field.
func (o *ServiceAuthentication) SetSsoDirectoryService(v ServiceModel) {
	o.SsoDirectoryService = &v
}

func (o ServiceAuthentication) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceAuthentication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttributeQuery) {
		toSerialize["attributeQuery"] = o.AttributeQuery
	}
	if !IsNil(o.Jmx) {
		toSerialize["jmx"] = o.Jmx
	}
	if !IsNil(o.ConnectionManagement) {
		toSerialize["connectionManagement"] = o.ConnectionManagement
	}
	if !IsNil(o.SsoDirectoryService) {
		toSerialize["ssoDirectoryService"] = o.SsoDirectoryService
	}
	return toSerialize, nil
}

type NullableServiceAuthentication struct {
	value *ServiceAuthentication
	isSet bool
}

func (v NullableServiceAuthentication) Get() *ServiceAuthentication {
	return v.value
}

func (v *NullableServiceAuthentication) Set(val *ServiceAuthentication) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceAuthentication) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceAuthentication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceAuthentication(val *ServiceAuthentication) *NullableServiceAuthentication {
	return &NullableServiceAuthentication{value: val, isSet: true}
}

func (v NullableServiceAuthentication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceAuthentication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
