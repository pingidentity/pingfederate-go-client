/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the HashedTextFieldDescriptor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HashedTextFieldDescriptor{}

// HashedTextFieldDescriptor struct for HashedTextFieldDescriptor
type HashedTextFieldDescriptor struct {
	FieldDescriptor
	// The size of the text field.
	Size *int64 `json:"size,omitempty" tfsdk:"size"`
}

// NewHashedTextFieldDescriptor instantiates a new HashedTextFieldDescriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHashedTextFieldDescriptor() *HashedTextFieldDescriptor {
	this := HashedTextFieldDescriptor{}
	return &this
}

// NewHashedTextFieldDescriptorWithDefaults instantiates a new HashedTextFieldDescriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHashedTextFieldDescriptorWithDefaults() *HashedTextFieldDescriptor {
	this := HashedTextFieldDescriptor{}
	return &this
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *HashedTextFieldDescriptor) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HashedTextFieldDescriptor) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *HashedTextFieldDescriptor) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *HashedTextFieldDescriptor) SetSize(v int64) {
	o.Size = &v
}

func (o HashedTextFieldDescriptor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HashedTextFieldDescriptor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedFieldDescriptor, errFieldDescriptor := json.Marshal(o.FieldDescriptor)
	if errFieldDescriptor != nil {
		return map[string]interface{}{}, errFieldDescriptor
	}
	errFieldDescriptor = json.Unmarshal([]byte(serializedFieldDescriptor), &toSerialize)
	if errFieldDescriptor != nil {
		return map[string]interface{}{}, errFieldDescriptor
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	return toSerialize, nil
}

type NullableHashedTextFieldDescriptor struct {
	value *HashedTextFieldDescriptor
	isSet bool
}

func (v NullableHashedTextFieldDescriptor) Get() *HashedTextFieldDescriptor {
	return v.value
}

func (v *NullableHashedTextFieldDescriptor) Set(val *HashedTextFieldDescriptor) {
	v.value = val
	v.isSet = true
}

func (v NullableHashedTextFieldDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullableHashedTextFieldDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHashedTextFieldDescriptor(val *HashedTextFieldDescriptor) *NullableHashedTextFieldDescriptor {
	return &NullableHashedTextFieldDescriptor{value: val, isSet: true}
}

func (v NullableHashedTextFieldDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHashedTextFieldDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
