openapi: 3.0.1
info:
  title: Administrative API Documentation
  description:
    "The PingFederate Administrative API is a REST-based interface that\
    \ provides a programmatic way to make configuration changes to PingFederate as\
    \ an alternative to using the administrative console.<br/><br/>Expand the resources\
    \ below to display implementation details on that resource such as the available\
    \ endpoints, the parameter and response models for the operation, and the model\
    \ structure of the resources themselves. Each resource operation comes with the\
    \ ability to interact with the API. You are prompted for proper administration\
    \ credentials when you try to perform an API operation."
  version: 12.0.0.9
servers:
  - url: https://localhost:9999/pf-admin-api/v1
tags:
  - name: /oauth/accessTokenManagers
  - name: /oauth/accessTokenMappings
  - name: /administrativeAccounts
  - name: /sp/authenticationPolicyContractMappings
  - name: /authenticationApi
  - name: /authenticationPolicies
  - name: /authenticationPolicyContracts
  - name: /authenticationSelectors
  - name: /session
  - name: /oauth/authorizationDetailProcessors
  - name: /oauth/authServerSettings
  - name: /bulk
  - name: /captchaProviders
  - name: /certificates/groups
  - name: /certificates/revocation
  - name: /cluster
  - name: /configArchive
  - name: /configStore
  - name: /configurationEncryptionKeys
  - name: /connectionMetadata
  - name: /idp/connectors
  - name: /dataStores
  - name: /extendedProperties
  - name: /identityStoreProvisioners
  - name: /idp/adapters
  - name: /sp/idpConnections
  - name: /idp/defaultUrls
  - name: /idpToSpAdapterMapping
  - name: /incomingProxySettings
  - name: /kerberos/realms
  - name: /license
  - name: /localIdentity/identityProfiles
  - name: /metadataUrls
  - name: /notificationPublishers
  - name: /oauth/authenticationPolicyContractMappings
  - name: /oauth/cibaServerPolicy
  - name: /oauth/clients
  - name: /oauth/clientSettings
  - name: /oauth/clientRegistrationPolicies
  - name: /oauth/idpAdapterMappings
  - name: /oauth/outOfBandAuthPlugins
  - name: /keyPairs/oauthOpenIdConnect
  - name: /oauth/resourceOwnerCredentialsMappings
  - name: /oauth/openIdConnect
  - name: /passwordCredentialValidators
  - name: /pingOneConnections
  - name: /pingOneForEnterprise
  - name: /protocolMetadata
  - name: /redirectValidation
  - name: /keyPairs
  - name: /secretManagers
  - name: /serverSettings
  - name: /serviceAuthentication
  - name: /keyPairs/signing
  - name: /sp/adapters
  - name: /idp/spConnections
  - name: /sp/defaultUrls
  - name: /sp/targetUrlMappings
  - name: /keyPairs/sslClient
  - name: /keyPairs/sslServer
  - name: /idp/stsRequestParametersContracts
  - name: /sp/tokenGenerators
  - name: /idp/tokenProcessors
  - name: /tokenProcessorToTokenGeneratorMappings
  - name: /certificates/ca
  - name: /version
  - name: /virtualHostNames
  - name: /oauth/authorizationDetailTypes
  - name: /oauth/issuers
  - name: /oauth/tokenExchange/tokenGeneratorMappings
  - name: /oauth/tokenExchange/generator
  - name: /oauth/tokenExchange/processor
security:
  - basicAuth: []
  - bearer: []
  - oauth2: []
paths:
  /oauth/accessTokenManagers/settings:
    get:
      tags:
        - /oauth/accessTokenManagers
      summary: Get general access token management settings.
      operationId: getOauthAccessTokenManagersSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessTokenManagementSettings"
    put:
      tags:
        - /oauth/accessTokenManagers
      summary: Update general access token management settings.
      operationId: updateOauthAccessTokenManagersSettings
      requestBody:
        description: Access token management settings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccessTokenManagementSettings"
        required: true
      responses:
        "200":
          description: Settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessTokenManagementSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/accessTokenManagers/descriptors:
    get:
      tags:
        - /oauth/accessTokenManagers
      summary: Get the list of available token management plugin descriptors.
      operationId: getTokenManagerDescriptors
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessTokenManagerDescriptors"
  /oauth/accessTokenManagers/descriptors/{id}:
    get:
      tags:
        - /oauth/accessTokenManagers
      summary: Get the description of a token management plugin descriptor.
      operationId: getTokenManagerDescriptor
      parameters:
        - name: id
          in: path
          description: ID of token management plugin descriptor.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessTokenManagerDescriptor"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/accessTokenManagers:
    get:
      tags:
        - /oauth/accessTokenManagers
      summary: Get a list of all token management plugin instances.
      operationId: getTokenManagers
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessTokenManagers"
    post:
      tags:
        - /oauth/accessTokenManagers
      summary: Create a token management plugin instance.
      operationId: createTokenManager
      requestBody:
        description: Configuration for plugin instance.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccessTokenManager"
        required: true
      responses:
        "201":
          description: Access Token Management instance created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessTokenManager"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/accessTokenManagers/{id}:
    get:
      tags:
        - /oauth/accessTokenManagers
      summary: Get a specific token management plugin instance.
      operationId: getTokenManager
      parameters:
        - name: id
          in: path
          description: ID of token management plugin instance.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessTokenManager"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /oauth/accessTokenManagers
      summary: Update a token management plugin instance.
      operationId: updateTokenManager
      parameters:
        - name: id
          in: path
          description: ID of token management plugin instance.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for token management plugin instance.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccessTokenManager"
        required: true
      responses:
        "200":
          description: Access Token Management instance updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessTokenManager"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /oauth/accessTokenManagers
      summary: Delete a token management plugin instance.
      operationId: deleteTokenManager
      parameters:
        - name: id
          in: path
          description: ID of token management plugin instance.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Access token management instance deleted.
          content: {}
        "403":
          description:
            "The operation is not permitted, based on the current configuration\
            \ of the server."
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/accessTokenMappings:
    get:
      tags:
        - /oauth/accessTokenMappings
      summary: Get the list of Access Token Mappings.
      operationId: getMappings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccessTokenMapping"
    post:
      tags:
        - /oauth/accessTokenMappings
      summary: Create a new Access Token Mapping.
      description:
        "Create a new Access Token Mapping. If the mapping is not properly\
        \ configured, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: createMapping
      parameters:
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for the new Access Token Mapping.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccessTokenMapping"
        required: true
      responses:
        "201":
          description: Access token attribute mapping created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessTokenMapping"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/accessTokenMappings/{id}:
    get:
      tags:
        - /oauth/accessTokenMappings
      summary: Find the Access Token Mapping by its ID.
      operationId: getMapping
      parameters:
        - name: id
          in: path
          description: ID of the Access Token Mapping.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessTokenMapping"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /oauth/accessTokenMappings
      summary: Update an Access Token Mapping.
      description:
        "Update an Access Token Mapping with the matching ID. If the mapping\
        \ is not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected. Note: A 404 status code is\
        \ returned for nonexistent mapping ID."
      operationId: updateMapping
      parameters:
        - name: id
          in: path
          description: ID of the Access Token Mapping to update.
          required: true
          schema:
            type: string
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for updated mapping.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccessTokenMapping"
        required: true
      responses:
        "200":
          description: Access token attribute mapping updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessTokenMapping"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /oauth/accessTokenMappings
      summary: Delete an Access Token Mapping.
      operationId: deleteMapping
      parameters:
        - name: id
          in: path
          description: ID of the Access Token Mapping.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Access token attribute mapping deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /administrativeAccounts:
    get:
      tags:
        - /administrativeAccounts
      summary: Get all the PingFederate native Administrative Accounts.
      operationId: getAccounts
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdministrativeAccounts"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    post:
      tags:
        - /administrativeAccounts
      summary: Add a new PingFederate native Administrative Account.
      operationId: addAccount
      requestBody:
        description: Administrative account information.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdministrativeAccount"
        required: true
      responses:
        "200":
          description: New Administrative Account created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdministrativeAccount"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /administrativeAccounts/{username}:
    get:
      tags:
        - /administrativeAccounts
      summary: Get a PingFederate native Administrative Account.
      operationId: getAccount
      parameters:
        - name: username
          in: path
          description: Username of the administrative account.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdministrativeAccount"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /administrativeAccounts
      summary: Update the information for a native Administrative Account.
      operationId: updateAccount
      parameters:
        - name: username
          in: path
          description: Username of the account to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: Administrative account information.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdministrativeAccount"
        required: true
      responses:
        "200":
          description: Administrator Account updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdministrativeAccount"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /administrativeAccounts
      summary: Delete a PingFederate native Administrative Account information.
      operationId: deleteAccount
      parameters:
        - name: username
          in: path
          description: Username of the account to be deleted.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Administrator Account Deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /administrativeAccounts/{username}/resetPassword:
    post:
      tags:
        - /administrativeAccounts
      summary:
        Reset the Password of an existing PingFederate native Administrative
        Account.
      operationId: resetPassword
      parameters:
        - name: username
          in: path
          description: Username of the administrative account.
          required: true
          schema:
            type: string
      requestBody:
        description: New password.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCredentials"
        required: true
      responses:
        "200":
          description: Administrator password reset.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCredentials"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /administrativeAccounts/changePassword:
    post:
      tags:
        - /administrativeAccounts
      summary: Change the Password of current PingFederate native Account.
      operationId: changePassword
      requestBody:
        description: User Account credential.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCredentials"
        required: true
      responses:
        "200":
          description: Administrator password changed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCredentials"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /sp/authenticationPolicyContractMappings:
    get:
      tags:
        - /sp/authenticationPolicyContractMappings
      summary: Get the list of APC-to-SP Adapter Mappings.
      operationId: getApcToSpAdapterMappings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApcToSpAdapterMappings"
    post:
      tags:
        - /sp/authenticationPolicyContractMappings
      summary: Create a new APC-to-SP Adapter Mapping.
      operationId: createApcToSpAdapterMapping
      parameters:
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for a new APC-to-SP Adapter Mapping.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApcToSpAdapterMapping"
        required: true
      responses:
        "201":
          description: Authentication policy contract-to-SP adapter mapping created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApcToSpAdapterMapping"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /sp/authenticationPolicyContractMappings/{id}:
    get:
      tags:
        - /sp/authenticationPolicyContractMappings
      summary: Get an APC-to-SP Adapter Mapping.
      operationId: getApcToSpAdapterMappingById
      parameters:
        - name: id
          in: path
          description: ID of APC-to-SP Adapter Mapping to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApcToSpAdapterMapping"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /sp/authenticationPolicyContractMappings
      summary: Update an APC-to-SP Adapter Mapping.
      operationId: updateApcToSpAdapterMappingById
      parameters:
        - name: id
          in: path
          description: ID of APC-to-SP Adapter Mapping to update.
          required: true
          schema:
            type: string
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for updated APC-to-SP Adapter Mapping.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/ApcToSpAdapterMapping"
        required: true
      responses:
        "200":
          description: Authentication policy contract-to-SP adapter mapping updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApcToSpAdapterMapping"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /sp/authenticationPolicyContractMappings
      summary: Delete an APC-to-SP Adapter Mapping.
      operationId: deleteApcToSpAdapterMappingById
      parameters:
        - name: id
          in: path
          description: ID of APC-to-SP Adapter Mapping to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Authentication policy contract-to-SP adapter mapping deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /authenticationApi/applications:
    get:
      tags:
        - /authenticationApi
      summary: Get the collection of Authentication API Applications.
      operationId: getAuthenticationApiApplications
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthnApiApplications"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    post:
      tags:
        - /authenticationApi
      summary: Create a new Authentication API Application.
      operationId: createApplication
      requestBody:
        description: Configuration for new Authentication API Application.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthnApiApplication"
        required: true
      responses:
        "201":
          description: Authentication API Application created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthnApiApplication"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /authenticationApi/applications/{id}:
    get:
      tags:
        - /authenticationApi
      summary: Find Authentication API Application by ID.
      description:
        Get an Authentication API Application with the specified ID. A
        404 status code is returned for nonexistent IDs.
      operationId: getApplication
      parameters:
        - name: id
          in: path
          description: ID of the Authentication API Application to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthnApiApplication"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /authenticationApi
      summary: Update an Authentication API Application.
      description:
        "Update an Authentication API Application with the matching ID.\
        \ If the application is not properly configured, a 422 status code is returned\
        \ along with a list of validation errors that must be corrected. Note: A 404\
        \ status code is returned for nonexistent IDs."
      operationId: updateApplication
      parameters:
        - name: id
          in: path
          description: ID of the Authentication API Application to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for updated application.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthnApiApplication"
        required: true
      responses:
        "200":
          description: Authentication API Application updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthnApiApplication"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /authenticationApi
      summary: Delete an Authentication API Application.
      description:
        "Delete an Authentication API Application with the specified ID.\
        \ A 404 status code is returned for nonexistent IDs. Note: If the request\
        \ succeeds, the response body is empty. If the request fails, an ApiResult\
        \ is returned with details of the error."
      operationId: deleteApplication
      parameters:
        - name: id
          in: path
          description: ID of Authentication API Application to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Authentication API Application deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /authenticationApi/settings:
    get:
      tags:
        - /authenticationApi
      summary: Get the Authentication API settings.
      operationId: getAuthenticationApiSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthnApiSettings"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /authenticationApi
      summary: Set the Authentication API settings.
      operationId: updateAuthenticationApiSettings
      requestBody:
        description: Authentication API Settings
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthnApiSettings"
        required: true
      responses:
        "200":
          description: Settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthnApiSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /authenticationPolicies/settings:
    get:
      tags:
        - /authenticationPolicies
      summary: Get the authentication policies settings.
      operationId: getAuthenticationPolicySettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationPoliciesSettings"
    put:
      tags:
        - /authenticationPolicies
      summary: Set the authentication policies settings.
      operationId: updateAuthenticationPolicySettings
      requestBody:
        description: Authentication policies settings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationPoliciesSettings"
        required: true
      responses:
        "200":
          description: Settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationPoliciesSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
      x-codegen-request-body-name: body
  /authenticationPolicies/policy/{id}:
    get:
      tags:
        - /authenticationPolicies
      summary: Get an authentication policy by ID.
      operationId: getPolicy
      parameters:
        - name: id
          in: path
          description: Authentication policy Id.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationPolicyTree"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /authenticationPolicies
      summary: Update an authentication policy.
      operationId: updatePolicy
      parameters:
        - name: id
          in: path
          description: Authentication policy Id.
          required: true
          schema:
            type: string
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration of the authentication policy.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/AuthenticationPolicyTree"
        required: true
      responses:
        "200":
          description: Authentication policy updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationPolicyTree"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /authenticationPolicies
      summary: Delete an authentication policy.
      operationId: deletePolicy
      parameters:
        - name: id
          in: path
          description: Authentication policy Id.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Authentication policy deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /authenticationPolicies/fragments/{id}:
    get:
      tags:
        - /authenticationPolicies
      summary: Get an authentication policy fragment by ID.
      operationId: getFragment
      parameters:
        - name: id
          in: path
          description: ID of the policy fragment to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationPolicyFragment"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /authenticationPolicies
      summary: Update an authentication policy fragment.
      operationId: updateFragment
      parameters:
        - name: id
          in: path
          description: ID of the policy fragment to  update.
          required: true
          schema:
            type: string
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration of the authentication policy fragment.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/AuthenticationPolicyFragment"
        required: true
      responses:
        "200":
          description: Authentication policy fragment updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationPolicyFragment"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /authenticationPolicies
      summary: Delete an authentication policy fragment.
      operationId: deleteFragment
      parameters:
        - name: id
          in: path
          description: ID of the policy fragment to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Authentication policy fragment deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /authenticationPolicies/fragments:
    get:
      tags:
        - /authenticationPolicies
      summary: Get all of the authentication policies fragments.
      operationId: getFragments
      parameters:
        - name: page
          in: query
          description: Page number to retrieve.
          schema:
            type: integer
            format: int32
        - name: numberPerPage
          in: query
          description: Number of fragments per page.
          schema:
            type: integer
            format: int32
        - name: filter
          in: query
          description:
            Filter criteria limits the fragments that are returned to only
            those that match it. The filter criteria is compared to the fragment instance
            name and ID fields. The comparison is a case-insensitive partial match.
            No additional pattern based matching is supported.
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationPolicyFragments"
    post:
      tags:
        - /authenticationPolicies
      summary: Create an authentication policy fragment.
      operationId: createFragment
      parameters:
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration of the authentication policy fragment.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/AuthenticationPolicyFragment"
        required: true
      responses:
        "201":
          description: Authentication policy fragment created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationPolicyFragment"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /authenticationPolicies/policy/{id}/move:
    post:
      tags:
        - /authenticationPolicies
      summary: Move an authentication policy to a location within the policy tree.
      operationId: movePolicy
      parameters:
        - name: id
          in: path
          description: Authentication policy Id.
          required: true
          schema:
            type: string
      requestBody:
        description: Metadata about where to move the policy
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/MoveItemRequest"
        required: true
      responses:
        "200":
          description: Success.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /authenticationPolicies/default:
    get:
      tags:
        - /authenticationPolicies
      summary: Get the default configured authentication policy.
      operationId: getDefaultAuthenticationPolicy
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationPolicy"
    put:
      tags:
        - /authenticationPolicies
      summary: Set the default authentication policy.
      operationId: updateDefaultAuthenticationPolicy
      parameters:
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Default authentication policy.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/AuthenticationPolicy"
        required: true
      responses:
        "200":
          description: Default authentication policy updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationPolicy"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /authenticationPolicies/policy:
    post:
      tags:
        - /authenticationPolicies
      summary: Create a new authentication policy.
      operationId: createPolicy
      parameters:
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration of the authentication policy.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/AuthenticationPolicyTree"
        required: true
      responses:
        "201":
          description: Authentication policy created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationPolicyTree"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /authenticationPolicyContracts:
    get:
      tags:
        - /authenticationPolicyContracts
      summary: Gets the Authentication Policy Contracts.
      operationId: getAuthenticationPolicyContracts
      parameters:
        - name: page
          in: query
          description: Page number to retrieve.
          schema:
            type: integer
            format: int32
        - name: numberPerPage
          in: query
          description: Number of contracts per page.
          schema:
            type: integer
            format: int32
        - name: filter
          in: query
          description:
            Filter criteria limits the authentication policy contracts that
            are returned to only those that match it. The filter criteria is compared
            to the authentication policy contract name and ID fields. The comparison
            is a case-insensitive partial match. No additional pattern based matching
            is supported.
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationPolicyContracts"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    post:
      tags:
        - /authenticationPolicyContracts
      summary: Create a new Authentication Policy Contract.
      description:
        "Create a new Authentication Policy Contract. If the Authentication\
        \ Policy Contract is not properly configured, a 422 status code is returned\
        \ along with a list of validation errors that must be corrected."
      operationId: createAuthenticationPolicyContract
      requestBody:
        description: Configuration for a new contract.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationPolicyContract"
        required: true
      responses:
        "201":
          description: Authentication policy contract created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationPolicyContract"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /authenticationPolicyContracts/{id}:
    get:
      tags:
        - /authenticationPolicyContracts
      summary: Gets the Authentication Policy Contract by ID.
      description:
        Get an Authentication Policy Contract with the specified ID. A
        404 status code is returned for nonexistent IDs
      operationId: getAuthenticationPolicyContract
      parameters:
        - name: id
          in: path
          description: ID of contract to fetch
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationPolicyContract"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /authenticationPolicyContracts
      summary: Update an Authentication Policy Contract by ID.
      description:
        Update an Authentication Policy Contract with the specified ID.
        A 404 status code is returned for nonexistent IDs.
      operationId: updateAuthenticationPolicyContract
      parameters:
        - name: id
          in: path
          description: ID of the Authentication Policy Contract to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for updated Authentication Policy Contract.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/AuthenticationPolicyContract"
        required: true
      responses:
        "200":
          description: Authentication policy contract updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationPolicyContract"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /authenticationPolicyContracts
      summary: Delete an Authentication Policy Contract.
      description:
        "Delete an Authentication Policy Contract with the specified ID.\
        \ A 404 status code is returned for nonexistent IDs. Note: If the request\
        \ succeeds, the response body is empty. If the request fails, an ApiResult\
        \ is returned with details of the error."
      operationId: deleteAuthenticationPolicyContract
      parameters:
        - name: id
          in: path
          description: ID of Authentication Policy Contract to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Authentication policy contract deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Resource is in use and cannot be deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /authenticationSelectors:
    get:
      tags:
        - /authenticationSelectors
      summary: Get the list of configured Authentication Selector instances.
      operationId: getAuthenticationSelectors
      parameters:
        - name: page
          in: query
          description: Page number to retrieve.
          schema:
            type: integer
            format: int32
        - name: numberPerPage
          in: query
          description: Number of selectors per page.
          schema:
            type: integer
            format: int32
        - name: filter
          in: query
          description:
            Filter criteria limits the authentication selector instances
            that are returned to only those that match it. The filter criteria is compared
            to the authentication selector instance name and ID fields. The comparison
            is a case-insensitive partial match. No additional pattern based matching
            is supported.
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationSelectors"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    post:
      tags:
        - /authenticationSelectors
      summary: Create a new authentication selector instance.
      description:
        "Create a new authentication selector instance. If the authentication\
        \ selector is not properly configured, a 422 status code is returned along\
        \ with a list of validation errors that must be corrected."
      operationId: createAuthenticationSelector
      requestBody:
        description: Configuration for a new authentication selector instance.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/AuthenticationSelector"
        required: true
      responses:
        "201":
          description: Authentication selector created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationSelector"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /authenticationSelectors/{id}:
    get:
      tags:
        - /authenticationSelectors
      summary: Get an Authentication Selector instance by ID.
      description:
        Get the configured Authentication Selector instance with the specified
        ID. A 404 status code is returned for nonexistent IDs.
      operationId: getAuthenticationSelector
      parameters:
        - name: id
          in: path
          description: ID of Authentication Selector instance to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationSelector"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /authenticationSelectors
      summary: Update an authentication selector instance.
      description:
        "Update an authentication selector instance. If the authentication\
        \ selector is not properly configured, a 422 status code is returned along\
        \ with a list of validation errors that must be corrected."
      operationId: updateAuthenticationSelector
      parameters:
        - name: id
          in: path
          description: ID of the authentication selector instance.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for updated authentication selector instance.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/AuthenticationSelector"
        required: true
      responses:
        "200":
          description: Authentication selector updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationSelector"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /authenticationSelectors
      summary: Delete an Authentication Selector instance.
      description:
        "Delete an Authentication Selector instance with the specified\
        \ ID. A 404 status code is returned for nonexistent IDs. Note: Only selectors\
        \ not in use can be deleted. If the request succeeds, the response body is\
        \ empty. If the request fails, an ApiResult is returned with details of the\
        \ error."
      operationId: deleteAuthenticationSelector
      parameters:
        - name: id
          in: path
          description: ID of Authentication Selector to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Authentication selector deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Resource is in use and cannot be deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /authenticationSelectors/descriptors:
    get:
      tags:
        - /authenticationSelectors
      summary: Get the list of available Authentication Selector descriptors.
      operationId: getAuthenticationSelectorDescriptors
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationSelectorDescriptors"
  /authenticationSelectors/descriptors/{id}:
    get:
      tags:
        - /authenticationSelectors
      summary: Get the description of an Authentication Selector plugin by ID.
      description:
        Get the description of an Authentication Selector plugin by ID.
        A 404 status code is returned for nonexistent IDs.
      operationId: getAuthenticationSelectorDescriptorsById
      parameters:
        - name: id
          in: path
          description: ID of Authentication Selector descriptor to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationSelectorDescriptor"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /session/settings:
    get:
      tags:
        - /session
      summary: Get general session management settings.
      operationId: getSessionSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionSettings"
    put:
      tags:
        - /session
      summary: Update general session management settings.
      operationId: updateSessionSettings
      requestBody:
        description: Session settings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionSettings"
        required: true
      responses:
        "200":
          description: General session management settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /session/applicationSessionPolicy:
    get:
      tags:
        - /session
      summary: Get the application session policy.
      operationId: getApplicationPolicy
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationSessionPolicy"
    put:
      tags:
        - /session
      summary: Update the application session policy.
      operationId: updateApplicationPolicy
      requestBody:
        description: Application session policy.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationSessionPolicy"
        required: true
      responses:
        "200":
          description: Application session policy updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationSessionPolicy"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /session/authenticationSessionPolicies/global:
    get:
      tags:
        - /session
      summary: Get the global authentication session policy.
      operationId: getGlobalPolicy
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalAuthenticationSessionPolicy"
    put:
      tags:
        - /session
      summary: Update the global authentication session policy.
      operationId: updateGlobalPolicy
      requestBody:
        description: Global authentication session policy.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GlobalAuthenticationSessionPolicy"
        required: true
      responses:
        "200":
          description: Global authentication session policy updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalAuthenticationSessionPolicy"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /session/authenticationSessionPolicies:
    get:
      tags:
        - /session
      summary: Get list of session policies.
      description:
        Get a list of all session policies that are associated with specific
        authentication sources.
      operationId: getSourcePolicies
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationSessionPolicies"
    post:
      tags:
        - /session
      summary: Create a new session policy.
      description:
        "Create a new session policy for a specified authentication source.\
        \ If the session policy is not properly configured, a 422 status code is returned\
        \ along with a list of validation errors that must be corrected."
      operationId: createSourcePolicy
      requestBody:
        description: Configuration for new policy.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationSessionPolicy"
        required: true
      responses:
        "201":
          description: Authentication session policy created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationSessionPolicy"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /session/authenticationSessionPolicies/{id}:
    get:
      tags:
        - /session
      summary: Find session policy by ID.
      description:
        Get the session policy with the specified ID. A 404 status code
        is returned for nonexistent IDs.
      operationId: getSourcePolicy
      parameters:
        - name: id
          in: path
          description: ID of the session policy to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationSessionPolicy"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /session
      summary: Update a session policy.
      description:
        "Update the session policy with the matching ID. If the policy\
        \ is not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected."
      operationId: updateSourcePolicy
      parameters:
        - name: id
          in: path
          description: ID of the session policy to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for updated policy.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationSessionPolicy"
        required: true
      responses:
        "200":
          description: Authentication session policy updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationSessionPolicy"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /session
      summary: Delete a session policy.
      description:
        "Delete the session policy with the specified ID. A 404 status\
        \ code is returned for nonexistent IDs. If the request succeeds, the response\
        \ body is empty. If the request fails, an ApiResult is returned with details\
        \ of the error."
      operationId: deleteSourcePolicy
      parameters:
        - name: id
          in: path
          description: ID of session policy to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Authentication session policy deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/authorizationDetailProcessors/descriptors:
    get:
      tags:
        - /oauth/authorizationDetailProcessors
      summary: Get a list of available authorization detail processor plugin descriptors.
      operationId: getAuthorizationDetailProcessorPluginDescriptors
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationDetailProcessorDescriptors"
  /oauth/authorizationDetailProcessors/descriptors/{id}:
    get:
      tags:
        - /oauth/authorizationDetailProcessors
      summary: Get an authorization detail processor plugin descriptor.
      operationId: getAuthorizationDetailProcessorPluginDescriptor
      parameters:
        - name: id
          in: path
          description: ID of authorization detail processor plugin descriptor.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationDetailProcessorDescriptor"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/authorizationDetailProcessors:
    get:
      tags:
        - /oauth/authorizationDetailProcessors
      summary: Get a list of authorization detail processor plugin instances.
      operationId: getAuthorizationDetailProcessors
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationDetailProcessors"
    post:
      tags:
        - /oauth/authorizationDetailProcessors
      summary: Create an authorization detail processor plugin instance.
      operationId: createAuthorizationDetailProcessor
      requestBody:
        description: Configuration for a authorization detail processor plugin instance.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorizationDetailProcessor"
        required: true
      responses:
        "201":
          description: Authorization Detail Processor plugin created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationDetailProcessor"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/authorizationDetailProcessors/{id}:
    get:
      tags:
        - /oauth/authorizationDetailProcessors
      summary: Get a specific authorization detail processor plugin instance.
      operationId: getAuthorizationDetailProcessor
      parameters:
        - name: id
          in: path
          description: ID of an authorization detail processor plugin instance.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationDetailProcessor"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /oauth/authorizationDetailProcessors
      summary: Update an authorization detail processor plugin instance.
      operationId: updateAuthorizationDetailProcessor
      parameters:
        - name: id
          in: path
          description: ID of an authorization detail processor plugin instance.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for a authorization detail processor plugin instance.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorizationDetailProcessor"
        required: true
      responses:
        "200":
          description: Authorization Detail Processor plugin updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationDetailProcessor"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /oauth/authorizationDetailProcessors
      summary: Delete an authorization detail processor plugin instance.
      operationId: deleteAuthorizationDetailProcessor
      parameters:
        - name: id
          in: path
          description: ID of an authorization detail processor plugin instance.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Authorization Detail Processor plugin deleted.
          content: {}
        "403":
          description:
            "The operation is not permitted, based on the current configuration\
            \ of the server."
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/authServerSettings:
    get:
      tags:
        - /oauth/authServerSettings
      summary: Get the Authorization Server Settings.
      operationId: getAuthorizationServerSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationServerSettings"
    put:
      tags:
        - /oauth/authServerSettings
      summary: Update the Authorization Server Settings.
      operationId: updateAuthorizationServerSettings
      requestBody:
        description: Configuration for updated server settings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorizationServerSettings"
        required: true
      responses:
        "200":
          description: Authorization Server Settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationServerSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/authServerSettings/scopes/commonScopes/{name}:
    get:
      tags:
        - /oauth/authServerSettings
      summary: Get an existing common scope.
      operationId: getCommonScope
      parameters:
        - name: name
          in: path
          description: Name of the common scope.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScopeEntry"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /oauth/authServerSettings
      summary: Update an existing common scope.
      operationId: updateCommonScope
      parameters:
        - name: name
          in: path
          description: Name of the common scope.
          required: true
          schema:
            type: string
      requestBody:
        description: The scope definition
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScopeEntry"
        required: true
      responses:
        "200":
          description: Common Scope updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScopeEntry"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /oauth/authServerSettings
      summary: Remove an existing common scope.
      operationId: removeCommonScope
      parameters:
        - name: name
          in: path
          description: Name of the common scope.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Common Scope deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/authServerSettings/scopes/commonScopes:
    post:
      tags:
        - /oauth/authServerSettings
      summary: Add a new common scope.
      operationId: addCommonScope
      requestBody:
        description: The scope definition.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScopeEntry"
        required: true
      responses:
        "201":
          description: Common Scope added.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScopeEntry"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/authServerSettings/scopes/exclusiveScopes:
    post:
      tags:
        - /oauth/authServerSettings
      summary: Add a new exclusive scope.
      operationId: addExclusiveScope
      requestBody:
        description: A new exclusive scope
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScopeEntry"
        required: true
      responses:
        "201":
          description: Exclusive Scope added.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScopeEntry"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/authServerSettings/scopes/exclusiveScopes/{name}:
    get:
      tags:
        - /oauth/authServerSettings
      summary: Get an existing exclusive scope.
      operationId: getExclusiveScope
      parameters:
        - name: name
          in: path
          description: Name of the exclusive scope.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScopeEntry"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /oauth/authServerSettings
      summary: Update an existing exclusive scope.
      operationId: updateExclusiveScope
      parameters:
        - name: name
          in: path
          description: Name of the exclusive scope.
          required: true
          schema:
            type: string
      requestBody:
        description: The scope definition.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScopeEntry"
        required: true
      responses:
        "200":
          description: Exclusive Scope updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScopeEntry"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /oauth/authServerSettings
      summary: Remove an existing exclusive scope.
      operationId: removeExclusiveScope
      parameters:
        - name: name
          in: path
          description: Name of the exclusive scope.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Exclusive Scope deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/authServerSettings/scopes/commonScopeGroups:
    post:
      tags:
        - /oauth/authServerSettings
      summary: Create a new common scope group.
      operationId: addCommonScopeGroup
      requestBody:
        description: The scope group definition
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScopeGroupEntry"
        required: true
      responses:
        "201":
          description: Common Scope Group created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScopeGroupEntry"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/authServerSettings/scopes/commonScopeGroups/{name}:
    get:
      tags:
        - /oauth/authServerSettings
      summary: Get an existing common scope group.
      operationId: getCommonScopeGroup
      parameters:
        - name: name
          in: path
          description: Name of the common scope group.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScopeGroupEntry"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /oauth/authServerSettings
      summary: Update an existing common scope group.
      operationId: updateCommonScopeGroup
      parameters:
        - name: name
          in: path
          description: Name of the common scope group.
          required: true
          schema:
            type: string
      requestBody:
        description: The scope group definition.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScopeGroupEntry"
        required: true
      responses:
        "200":
          description: Common Scope Group updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScopeGroupEntry"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /oauth/authServerSettings
      summary: Remove an existing common scope group.
      operationId: removeCommonScopeGroup
      parameters:
        - name: name
          in: path
          description: Name of the common scope group.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Common Scope Group deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/authServerSettings/scopes/exclusiveScopeGroups:
    post:
      tags:
        - /oauth/authServerSettings
      summary: Create a new exclusive scope group.
      operationId: addExclusiveScopeGroup
      requestBody:
        description: The scope group definition
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScopeGroupEntry"
        required: true
      responses:
        "201":
          description: Exclusive Scope Group created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScopeGroupEntry"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/authServerSettings/scopes/exclusiveScopeGroups/{name}:
    get:
      tags:
        - /oauth/authServerSettings
      summary: Get an existing exclusive scope group.
      operationId: getExclusiveScopeGroup
      parameters:
        - name: name
          in: path
          description: Name of the exclusive scope group.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScopeGroupEntry"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /oauth/authServerSettings
      summary: Update an existing exclusive scope group.
      operationId: updateExclusiveScopeGroups
      parameters:
        - name: name
          in: path
          description: Name of the exclusive scope group.
          required: true
          schema:
            type: string
      requestBody:
        description: The scope group definition
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScopeGroupEntry"
        required: true
      responses:
        "200":
          description: Exclusive Scope Group updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScopeGroupEntry"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /oauth/authServerSettings
      summary: Remove an existing exclusive scope group.
      operationId: removeExclusiveScopeGroup
      parameters:
        - name: name
          in: path
          description: Name of the exclusive scope group.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Exclusive Scope Group deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /bulk/export:
    get:
      tags:
        - /bulk
      summary: Export all API resources to a JSON file.
      description:
        "For the /configStore resource type, only the settings that are\
        \ different from the defaults for this version of PingFederate are included\
        \ in the export.<br><br>Only resource types currently supported by the Administrative\
        \ API are included in the exported data. Resources not yet supported include:<br><br>-\
        \ SMS Provider Settings<br>"
      operationId: exportConfiguration
      parameters:
        - name: includeExternalResources
          in: query
          description:
            Include external resources like OAuth clients stored outside
            of PingFederate.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkConfig"
        "403":
          description: The current configuration cannot be bulk exported.
          content: {}
  /bulk/import:
    post:
      tags:
        - /bulk
      summary: Import configuration for a PingFederate deployment from a JSON file.
      description: |-
        All existing configuration will be wiped before the import begins. If any validation errors are found, PingFederate will roll back to the previous configuration. The master key set in pf.jwk must include the key in use when the JSON configuration was originally exported.

        JSON configurations exported from earlier versions of PingFederate can be imported. However, this is not a supported way of upgrading from an earlier version. Instead, you should run the upgrade utility and then reexport to get an updated configuration JSON.
      operationId: importConfiguration
      parameters:
        - name: failFast
          in: query
          description:
            "When set to true, stops the import as soon as any validation\
            \ errors are encountered. When false, import will continue to validate configuration\
            \ after the first failure to identify all validation errors. If any validation\
            \ errors are present PingFederate will roll back to the state prior to the\
            \ import attempt."
          schema:
            type: boolean
            default: true
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration to import.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkConfig"
        required: true
      responses:
        "200":
          description: Success.
          content: {}
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /captchaProviders/settings:
    get:
      tags:
        - /captchaProviders
      summary: Get general CAPTCHA providers settings.
      operationId: getCaptchaProvidersSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CaptchaProvidersSettings"
    put:
      tags:
        - /captchaProviders
      summary: Update general CAPTCHA providers settings.
      operationId: updateCaptchaProvidersSettings
      requestBody:
        description: CAPTCHA providers settings.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/CaptchaProvidersSettings"
        required: true
      responses:
        "200":
          description: Settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CaptchaProvidersSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /captchaProviders/descriptors:
    get:
      tags:
        - /captchaProviders
      summary: Get a list of available CAPTCHA provider plugin descriptors.
      operationId: getCaptchaProviderPluginDescriptors
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref:
                  "#/components/schemas/A collection of CAPTCHA provider plugin
                  descriptors."
  /captchaProviders/descriptors/{id}:
    get:
      tags:
        - /captchaProviders
      summary: Get a CAPTCHA provider plugin descriptor.
      operationId: getCaptchaProviderPluginDescriptor
      parameters:
        - name: id
          in: path
          description: ID of CAPTCHA provider plugin descriptor.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/A CAPTCHA provider plugin descriptor."
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /captchaProviders:
    get:
      tags:
        - /captchaProviders
      summary: Get a list of CAPTCHA provider plugin instances.
      operationId: getCaptchaProviders
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CaptchaProviders"
    post:
      tags:
        - /captchaProviders
      summary: Create a CAPTCHA provider plugin instance.
      operationId: createCaptchaProvider
      requestBody:
        description: Configuration for a CAPTCHA provider plugin instance.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CaptchaProvider"
        required: true
      responses:
        "201":
          description: CAPTCHA Provider plugin created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CaptchaProvider"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /captchaProviders/{id}:
    get:
      tags:
        - /captchaProviders
      summary: Get a specific CAPTCHA provider plugin instance.
      operationId: getCaptchaProvider
      parameters:
        - name: id
          in: path
          description: ID of a CAPTCHA provider plugin instance.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CaptchaProvider"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /captchaProviders
      summary: Update a CAPTCHA provider plugin instance.
      operationId: updateCaptchaProvider
      parameters:
        - name: id
          in: path
          description: ID of a CAPTCHA provider plugin instance.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for a CAPTCHA provider plugin instance.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CaptchaProvider"
        required: true
      responses:
        "200":
          description: CAPTCHA Provider plugin updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CaptchaProvider"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /captchaProviders
      summary: Delete a CAPTCHA provider plugin instance.
      operationId: deleteCaptchaProvider
      parameters:
        - name: id
          in: path
          description: ID of a CAPTCHA provider plugin instance.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: CAPTCHA Provider plugin deleted.
          content: {}
        "403":
          description:
            "The operation is not permitted, based on the current configuration\
            \ of the server."
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /certificates/groups/{groupName}:
    get:
      tags:
        - /certificates/groups
      summary: Get list of all certificates for a group.
      operationId: getCertificatesForGroup
      parameters:
        - name: groupName
          in: path
          description: Name of the group to retrieve certificates for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertViews"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /certificates/groups/{groupName}/{id}:
    get:
      tags:
        - /certificates/groups
      summary: Retrieve details of a certificate.
      operationId: getCertificateFromGroup
      parameters:
        - name: groupName
          in: path
          description: Name of the group to retrieve certificates for.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: ID of the certificate to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertView"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    delete:
      tags:
        - /certificates/groups
      summary: Delete a certificate from a group.
      description:
        "If the request is successful, the response body is empty. If the\
        \ request fails, an ApiResult is returned with details of the error."
      operationId: deleteCertificateFromGroup
      parameters:
        - name: groupName
          in: path
          description: Name of the group to retrieve certificates for.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: ID of the certificate to retrieve.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Group certificate deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /certificates/groups/{groupName}/import:
    post:
      tags:
        - /certificates/groups
      summary: Import a new certificate to a group.
      operationId: importFeatureCert
      parameters:
        - name: groupName
          in: path
          description: Name of the group to retrieve certificates for.
          required: true
          schema:
            type: string
      requestBody:
        description: File data to import.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/X509File"
        required: true
      responses:
        "201":
          description: Group certificate imported.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertView"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /certificates/revocation/settings:
    get:
      tags:
        - /certificates/revocation
      summary: Get certificate revocation settings.
      operationId: getRevocationSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateRevocationSettings"
    put:
      tags:
        - /certificates/revocation
      summary: Update certificate revocation settings.
      operationId: updateRevocationSettings
      requestBody:
        description: Certificate revocation settings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CertificateRevocationSettings"
        required: true
      responses:
        "200":
          description: Certificate revocation settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateRevocationSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /certificates/revocation/ocspCertificates:
    get:
      tags:
        - /certificates/revocation
      summary: Get the list of available OCSP responder signature verification certificates.
      operationId: getOcspCertificates
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertViews"
    post:
      tags:
        - /certificates/revocation
      summary: Import an OCSP responder signature verification certificate.
      operationId: importOcspCertificate
      requestBody:
        description: File to import.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/X509File"
        required: true
      responses:
        "201":
          description: OCSP responder signature verification certificate imported.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertView"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /certificates/revocation/ocspCertificates/{id}:
    get:
      tags:
        - /certificates/revocation
      summary: Get an OCSP responder signature verification certificate by ID.
      operationId: getOcspCertificateById
      parameters:
        - name: id
          in: path
          description: Certificate ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertView"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    delete:
      tags:
        - /certificates/revocation
      summary: Delete an OCSP responder signature verification certificate by ID.
      operationId: deleteOcspCertificateById
      parameters:
        - name: id
          in: path
          description: Certificate ID.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: OCSP responder signature verification certificate deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Resource is in use and cannot be deleted.
          content: {}
  /cluster/settings:
    get:
      tags:
        - /cluster
      summary: Get the cluster configuration settings.
      operationId: getClusterSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterSettings"
        "403":
          description: This PingFederate instance is not deployed in clustered mode.
          content: {}
    put:
      tags:
        - /cluster
      summary: Update the cluster configuration settings.
      operationId: updateClusterSettings
      requestBody:
        description: Configuration for cluster settings.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/ClusterSettings"
        required: true
      responses:
        "200":
          description: Cluster settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterSettings"
        "403":
          description: This PingFederate instance is not deployed in clustered mode.
          content: {}
      x-codegen-request-body-name: body
  /cluster/status:
    get:
      tags:
        - /cluster
      summary: Get information on the current status of the cluster.
      operationId: getClusterStatus
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterStatus"
        "403":
          description: This PingFederate instance is not deployed in clustered mode.
          content: {}
  /cluster/replicate:
    post:
      tags:
        - /cluster
      summary: Replicate configuration updates to all nodes in the cluster.
      operationId: startReplication
      responses:
        "200":
          description: Replication completed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "403":
          description: This PingFederate instance is not deployed in clustered mode.
          content: {}
  /configArchive/import:
    post:
      tags:
        - /configArchive
      summary: Import a configuration archive.
      description:
        "If there are missing components or license inconsistencies, the\
        \ import is halted by default to allow you to install the necessary components\
        \ or license. However, you can choose to force the deployment by setting 'forceImport'\
        \ to true and then install the necessary files later."
      operationId: importConfigArchive
      parameters:
        - name: forceImport
          in: query
          schema:
            type: boolean
        - name: forceUnsupportedImport
          in: query
          description: Force import of unsupported versions.
          schema:
            type: boolean
            default: false
        - name: reencryptData
          in: query
          description:
            Reencrypt configuration archive data with the current deployment's
            encryption key.
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: Configuration Archive imported.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /configArchive/export:
    get:
      tags:
        - /configArchive
      summary: Export a configuration archive.
      operationId: exportConfigArchive
      responses:
        "200":
          description: Success.
          content: {}
  /configStore/{bundle}/{id}:
    get:
      tags:
        - /configStore
      summary: Get a single setting from a bundle.
      operationId: getConfigStoreSetting
      parameters:
        - name: bundle
          in: path
          description:
            This field represents a configuration file that contains a bundle
            of settings.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: ID of setting to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigStoreSetting"
        "403":
          description: The specified configuration bundle is unavailable.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /configStore
      summary: Create or update a setting/bundle.
      description:
        "Create or update a setting/bundle. This is an advanced operation\
        \ with minimal validation. Incorrect use of this operation can harm the integrity\
        \ of your PingFederate configuration. Please ensure you have specified the\
        \ correct bundle name, setting ID, and setting value before invoking this\
        \ operation."
      operationId: updateConfigStoreSetting
      parameters:
        - name: bundle
          in: path
          description:
            This field represents a configuration file that contains a bundle
            of settings.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: ID of setting to create/update.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration setting.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfigStoreSetting"
        required: true
      responses:
        "200":
          description: Configuration setting created/updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigStoreSetting"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "403":
          description: The specified configuration bundle is unavailable.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /configStore
      summary: Delete a setting.
      description:
        Delete a setting. This is an advanced operation with minimal validation.
        Incorrect use of this operation can harm the integrity of your PingFederate
        configuration. Please ensure you have specified the correct bundle name and
        setting ID before invoking this operation.
      operationId: deleteConfigStoreSetting
      parameters:
        - name: bundle
          in: path
          description:
            This field represents a configuration file that contains a bundle
            of settings.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: ID of setting to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Configuration setting deleted.
          content: {}
        "403":
          description: The specified configuration bundle is unavailable.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /configStore/{bundle}:
    get:
      tags:
        - /configStore
      summary: Get all settings from a bundle.
      operationId: getConfigStoreSettings
      parameters:
        - name: bundle
          in: path
          description:
            This field represents a configuration file that contains a bundle
            of settings.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigStoreBundle"
        "403":
          description: The specified configuration bundle is unavailable.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /configurationEncryptionKeys:
    get:
      tags:
        - /configurationEncryptionKeys
      summary: Get the list of Configuration Encryption Keys.
      description:
        The first key in the list is the current key used for encryption
        and decryption. Other keys are used for decryption.
      operationId: getConfigurationEncryptionKeys
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigurationEncryptionKeys"
  /configurationEncryptionKeys/rotate:
    post:
      tags:
        - /configurationEncryptionKeys
      summary: Rotate the current Configuration Encryption Key.
      description:
        A new key will be generated and will be used for encryption and
        decryption. The previous encryption key will continue to be used for decryption.
      operationId: rotateConfigurationEncryptionKey
      responses:
        "201":
          description: Configuration encryption key rotated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigurationEncryptionKeys"
  /connectionMetadata/export:
    post:
      tags:
        - /connectionMetadata
      summary: Export a connection's SAML metadata that can be given to a partner.
      operationId: export
      requestBody:
        description: Export metadata request.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExportMetadataRequest"
        required: true
      responses:
        "200":
          description: Connection SAML metadata exported.
          content:
            application/json:
              schema:
                type: string
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /connectionMetadata/convert:
    post:
      tags:
        - /connectionMetadata
      summary: Convert a partner's SAML metadata into a JSON representation.
      description:
        "Convert a partner's SAML metadata into an API JSON representation\
        \ that can be later saved using one of the connection creation endpoints.\
        \ The metadata can also be overlaid on top of a specified template connection.\
        \ The convert operation also returns the authenticity of the metadata based\
        \ on its certificate. If a certificate isn't embedded in the metadata, one\
        \ can be provided. Bindings and profiles are only enabled in the resulting\
        \ connection if the partner metadata provides related endpoints. In several\
        \ scenarios, additional connection configuration details (such as backchannel\
        \ authentication) may be required in the connection."
      operationId: convert
      requestBody:
        description: Convert metadata request.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConvertMetadataRequest"
        required: true
      responses:
        "200":
          description: Partner's SAML metadata converted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConvertMetadataResponse"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /idp/connectors/descriptors:
    get:
      tags:
        - /idp/connectors
      summary: Get the list of available IdP connector descriptors.
      operationId: getIdpConnectorDescriptors
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SaasPluginDescriptors"
  /idp/connectors/descriptors/{id}:
    get:
      tags:
        - /idp/connectors
      summary: Get the list of available connector descriptors.
      operationId: getIdpConnectorDescriptorById
      parameters:
        - name: id
          in: path
          description: the type of connector descriptor to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SaasPluginDescriptor"
  /dataStores/{id}/actions/{actionId}/invokeAction:
    post:
      tags:
        - /dataStores
      summary: Invokes an action for a data source instance.
      description:
        "Invokes an action for a data source instance. A 404 status code\
        \ is returned for nonexistent IDs. If the action produces a download file,\
        \ the file will be returned directly in the response. Otherwise an ActionResult\
        \ will be returned."
      operationId: invokeActionWithOptions
      parameters:
        - name: id
          in: path
          description: ID of data store to which these actions belong to.
          required: true
          schema:
            type: string
        - name: actionId
          in: path
          description: ID of the action.
          required: true
          schema:
            type: string
      requestBody:
        description: Action options for action invoked.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActionOptions"
        required: false
      responses:
        "200":
          description: Action invoked on Data store.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResult"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /dataStores/descriptors:
    get:
      tags:
        - /dataStores
      summary: Get the list of available custom data store descriptors.
      operationId: getCustomDataStoreDescriptors
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomDataStoreDescriptors"
  /dataStores/descriptors/{id}:
    get:
      tags:
        - /dataStores
      summary: Get the description of a custom data store plugin by ID.
      description:
        Get the description of a custom data store plugin by ID. A 404
        status code is returned for nonexistent IDs.
      operationId: getCustomDataStoreDescriptor
      parameters:
        - name: id
          in: path
          description: ID of custom data store descriptor to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomDataStoreDescriptor"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /dataStores:
    get:
      tags:
        - /dataStores
      summary: Get list of all data stores.
      operationId: getDataStores
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataStores"
    post:
      tags:
        - /dataStores
      summary: Create a new data store.
      description:
        "Create a new data store. If the data store is not properly configured,\
        \ a 422 status code is returned along with a list of validation errors that\
        \ must be corrected."
      operationId: createDataStore
      parameters:
        - name: X-BypassExternalValidation
          in: header
          description:
            Connection test will be bypassed when set to true. Default to
            false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for new data store.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataStoreAggregation"
        required: true
      responses:
        "201":
          description: Data store created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataStoreAggregation"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /dataStores/{id}:
    get:
      tags:
        - /dataStores
      summary: Find data store by ID.
      description:
        Get a data store with the specified ID. A 404 status code is returned
        for nonexistent IDs.
      operationId: getDataStore
      parameters:
        - name: id
          in: path
          description: ID of data store instance.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataStoreAggregation"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /dataStores
      summary: Update a data store.
      description:
        "Update a data store with the matching ID. If the data store is\
        \ not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected. Note: A 404 status code is\
        \ returned for nonexistent IDs."
      operationId: updateDataStore
      parameters:
        - name: id
          in: path
          description: ID of data store instance.
          required: true
          schema:
            type: string
        - name: X-BypassExternalValidation
          in: header
          description:
            Connection test will be bypassed when set to true. Default to
            false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for the data store.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataStoreAggregation"
        required: true
      responses:
        "200":
          description: Data store updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataStoreAggregation"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /dataStores
      summary: Delete a data store.
      description:
        "Delete a data store with the specified ID. A 404 status code is\
        \ returned for nonexistent IDs. Note: Only unused data stores can be deleted.\
        \ If the request succeeds, the response body is empty. If the request fails,\
        \ an ApiResult is returned with details of the error."
      operationId: deleteDataStore
      parameters:
        - name: id
          in: path
          description: ID of data store instance.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Data store deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Resource is in use and cannot be deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /dataStores/{id}/actions/{actionId}:
    get:
      tags:
        - /dataStores
      summary: Find a data store instance's action by ID.
      description:
        Find a data store instance's action by ID. A 404 status code is
        returned for nonexistent IDs.
      operationId: getDataStoresActionById
      parameters:
        - name: id
          in: path
          description: ID of data store to which these actions belong to.
          required: true
          schema:
            type: string
        - name: actionId
          in: path
          description: ID of the action.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Action"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /dataStores/{id}/actions:
    get:
      tags:
        - /dataStores
      summary: List the actions for a data store instance.
      description:
        List the actions for a data store instance. A 404 status code is
        returned for nonexistent IDs.
      operationId: getDataStoresActions
      parameters:
        - name: id
          in: path
          description: ID of data store to which these actions belong to.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Actions"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /extendedProperties:
    get:
      tags:
        - /extendedProperties
      summary: Get the defined Extended Properties.
      operationId: getExtendedProperties
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExtendedProperties"
    put:
      tags:
        - /extendedProperties
      summary: Update the Extended Properties.
      operationId: updateExtendedProperties
      requestBody:
        description: Definition of extended properties.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExtendedProperties"
        required: true
      responses:
        "200":
          description: Extended properties updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExtendedProperties"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /identityStoreProvisioners/descriptors:
    get:
      tags:
        - /identityStoreProvisioners
      summary: Get the list of available identity store provisioner descriptors.
      operationId: getIdentityStoreProvisionerDescriptors
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdentityStoreProvisionerDescriptors"
  /identityStoreProvisioners/descriptors/{id}:
    get:
      tags:
        - /identityStoreProvisioners
      summary: Get the descriptor of an identity store provisioner by ID.
      operationId: getIdentityStoreProvisionerDescriptorById
      parameters:
        - name: id
          in: path
          description: ID of identity store provisioner descriptor
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdentityStoreProvisionerDescriptor"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /identityStoreProvisioners:
    get:
      tags:
        - /identityStoreProvisioners
      summary: Get the list of configured identity store provisioner instances.
      operationId: getIdentityStoreProvisioners
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdentityStoreProvisioners"
    post:
      tags:
        - /identityStoreProvisioners
      summary: Create a new identity store provisioner instance.
      operationId: createIdentityStoreProvisioner
      requestBody:
        description: Configuration for the identity store provisioner instance.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/IdentityStoreProvisioner"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdentityStoreProvisioner"
        "201":
          description: Identity store provisioner created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdentityStoreProvisioner"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /identityStoreProvisioners/{id}:
    get:
      tags:
        - /identityStoreProvisioners
      summary: Get an identity store provisioner by ID.
      operationId: getIdentityStoreProvisioner
      parameters:
        - name: id
          in: path
          description: ID of identity store provisioner instance
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdentityStoreProvisioner"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /identityStoreProvisioners
      summary: Update an identity store provisioner instance
      operationId: updateIdentityStoreProvisioner
      parameters:
        - name: id
          in: path
          description: ID of identity store provisioner instance
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for the identity store provisioner instance
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/IdentityStoreProvisioner"
        required: true
      responses:
        "200":
          description: Identity store provisioner updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdentityStoreProvisioner"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /identityStoreProvisioners
      summary: Delete an identity store provisioner instance
      operationId: deleteIdentityStoreProvisioner
      parameters:
        - name: id
          in: path
          description: ID of identity store provisioner instance
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Identity store provisioner deleted
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Resource is in use and cannot be deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /idp/adapters/{id}/actions/{actionId}/invokeAction:
    post:
      tags:
        - /idp/adapters
      summary: Invokes an action for an IdP adapter instance.
      description:
        "Invokes an action for an IdP adapter instance. A 404 status code\
        \ is returned for nonexistent IDs. If the action produces a download file,\
        \ the file will be returned directly in the response. Otherwise an ActionResult\
        \ will be returned."
      operationId: invokeIdpAdaptersActionWithOptions
      parameters:
        - name: id
          in: path
          description:
            ID of the IdP adapter instance to which these actions belongs
            to.
          required: true
          schema:
            type: string
        - name: actionId
          in: path
          description: ID of the action.
          required: true
          schema:
            type: string
      requestBody:
        description: Action options for action invoked.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActionOptions"
        required: false
      responses:
        "200":
          description: Action invoked on adapter.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResult"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /idp/adapters/descriptors:
    get:
      tags:
        - /idp/adapters
      summary: Get the list of available IdP adapter descriptors.
      operationId: getIdpAdapterDescriptors
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpAdapterDescriptors"
  /idp/adapters/descriptors/{id}:
    get:
      tags:
        - /idp/adapters
      summary: Get the description of an IdP adapter plugin by ID.
      description:
        Get the description of an IdP adapter plugin by ID. A 404 status
        code is returned for nonexistent IDs.
      operationId: getIdpAdapterDescriptorsById
      parameters:
        - name: id
          in: path
          description: ID of IdP adapter descriptor to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpAdapterDescriptor"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /idp/adapters:
    get:
      tags:
        - /idp/adapters
      summary: Get the list of configured IdP adapter instances.
      operationId: getIdpAdapters
      parameters:
        - name: page
          in: query
          description: Page number to retrieve.
          schema:
            type: integer
            format: int32
        - name: numberPerPage
          in: query
          description: Number of adapters per page.
          schema:
            type: integer
            format: int32
        - name: filter
          in: query
          description:
            Filter criteria limits the IdP adapters that are returned to
            only those that match it. The filter criteria is compared to the IdP adapter
            instance name and ID fields. The comparison is a case-insensitive partial
            match. No additional pattern based matching is supported.
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpAdapters"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    post:
      tags:
        - /idp/adapters
      summary: Create a new IdP adapter instance.
      description:
        "Create a new IdP adapter instance. If the IdP adapter is not properly\
        \ configured, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: createIdpAdapter
      parameters:
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for the IdP adapter instance.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/IdpAdapter"
        required: true
      responses:
        "201":
          description: Adapter created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpAdapter"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /idp/adapters/{id}:
    get:
      tags:
        - /idp/adapters
      summary: Find an IdP adapter instance by ID.
      description:
        Get the configured IdP adapter instance with the specified ID.
        A 404 status code is returned for nonexistent IDs.
      operationId: getIdpAdapter
      parameters:
        - name: id
          in: path
          description: ID of IdP adapter instance.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpAdapter"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /idp/adapters
      summary: Update an IdP adapter instance.
      description:
        "Update an IdP adapter instance.If the IdP adapter is not properly\
        \ configured, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: updateIdpAdapter
      parameters:
        - name: id
          in: path
          description: ID of IdP adapter instance.
          required: true
          schema:
            type: string
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for the IdP adapter instance.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/IdpAdapter"
        required: true
      responses:
        "200":
          description: Adapter updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpAdapter"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /idp/adapters
      summary: Delete an IdP adapter instance.
      description:
        "Delete an IdP adapter instance with the specified ID. A 404 status\
        \ code is returned for nonexistent IDs. Note: Only adapters not in use can\
        \ be deleted. If the request succeeds, the response body is empty. If the\
        \ request fails, an ApiResult is returned with details of the error."
      operationId: deleteIdpAdapter
      parameters:
        - name: id
          in: path
          description: ID of IdP adapter instance.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Adapter deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Resource is in use and cannot be deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /idp/adapters/{id}/actions/{actionId}:
    get:
      tags:
        - /idp/adapters
      summary: Find an IdP adapter instance's action by ID.
      description:
        Find an IdP adapter instance's action by ID. A 404 status code
        is returned for nonexistent IDs.
      operationId: getIdpAdaptersActionById
      parameters:
        - name: id
          in: path
          description:
            ID of the IdP adapter instance to which these actions belongs
            to.
          required: true
          schema:
            type: string
        - name: actionId
          in: path
          description: ID of the action.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Action"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /idp/adapters/{id}/actions:
    get:
      tags:
        - /idp/adapters
      summary: List the actions for an IdP adapter instance.
      description:
        List the actions for an IdP adapter instance. A 404 status code
        is returned for nonexistent IDs.
      operationId: getIdpAdaptersActions
      parameters:
        - name: id
          in: path
          description:
            ID of the IdP adapter instance to which these actions belongs
            to.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Actions"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /sp/idpConnections/{id}/credentials/signingSettings:
    get:
      tags:
        - /sp/idpConnections
      summary: Get the IdP connection's signature settings.
      operationId: getIdpConnectionSigningSettings
      parameters:
        - name: id
          in: path
          description: ID of the IdP Connection.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SigningSettings"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /sp/idpConnections
      summary: Update the IdP connection's signature settings.
      operationId: updateIdpConnectionSigningSettings
      parameters:
        - name: id
          in: path
          description: ID of the IdP Connection to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Signature settings.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/SigningSettings"
        required: true
      responses:
        "200":
          description: Connection updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SigningSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /sp/idpConnections/{id}/credentials/certs:
    get:
      tags:
        - /sp/idpConnections
      summary: Get the IdP connection's certificates.
      operationId: getConnectionCerts
      parameters:
        - name: id
          in: path
          description: ID of the IdP Connection.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionCerts"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /sp/idpConnections
      summary: Update the IdP connection's certificates.
      operationId: updateConnectionCerts
      parameters:
        - name: id
          in: path
          description: ID of the IdP Connection to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for a verification certificates.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionCerts"
        required: true
      responses:
        "200":
          description: Connection updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionCerts"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    post:
      tags:
        - /sp/idpConnections
      summary: Add a new IdP connection certificate.
      description:
        "If the certificate's activeVerificationCert flag is set to true,\
        \ it will become the connection's primary verification certificate."
      operationId: addConnectionCert
      parameters:
        - name: id
          in: path
          description: ID of the IdP Connection to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for a verification certificate.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionCert"
        required: true
      responses:
        "201":
          description: Connection Certificate added.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionCert"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /sp/idpConnections/{id}/credentials/decryptionKeys:
    get:
      tags:
        - /sp/idpConnections
      summary: Get the decryption keys of an IdP connection.
      operationId: getIdpConnectionsDecryptionKeys
      parameters:
        - name: id
          in: path
          description: ID of the IdP Connection to update.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DecryptionKeys"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /sp/idpConnections
      summary: Updating the IdP connection's decryption keys.
      operationId: updateIdpConnectionsDecryptionKeys
      parameters:
        - name: id
          in: path
          description: ID of the IdP Connection to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for decryption keys.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DecryptionKeys"
        required: true
      responses:
        "200":
          description: Connection updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DecryptionKeys"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /sp/idpConnections/{id}:
    get:
      tags:
        - /sp/idpConnections
      summary: Find IdP connection by ID.
      description:
        Get a SAML 2.0 IdP connection with the specified ID. A 404 status
        code is returned for nonexistent IDs.
      operationId: getConnection
      parameters:
        - name: id
          in: path
          description: ID of IdP Connection to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpConnection"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /sp/idpConnections
      summary: Update an IdP connection.
      description:
        "Update an IdP connection with the matching ID. If the IdP connection\
        \ is not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected. Note: A 404 status code is\
        \ returned for nonexistent IDs."
      operationId: updateConnection
      parameters:
        - name: id
          in: path
          description: ID of IdP Connection to update.
          required: true
          schema:
            type: string
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for updated connection.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdpConnection"
        required: true
      responses:
        "200":
          description: Connection updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpConnection"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /sp/idpConnections
      summary: Delete an IdP connection.
      description:
        "Delete an IdP connection with the specified ID. A 404 status code\
        \ is returned for nonexistent IDs. Note: Only inactive connections can be\
        \ deleted. If the request succeeds, the response body is empty. If the request\
        \ fails, an ApiResult is returned with details of the error."
      operationId: deleteConnection
      parameters:
        - name: id
          in: path
          description: ID of IdP Connection to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Connection deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Resource is in use and cannot be deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /sp/idpConnections:
    get:
      tags:
        - /sp/idpConnections
      summary: Get list of IdP connections.
      description:
        "Get a list of all the OIDC, WS-Trust, WS-Fed, SAML1.0, SAML1.1\
        \ and SAML 2.0 IdP connections."
      operationId: getConnections
      parameters:
        - name: entityId
          in: query
          description: Entity ID of the connection to fetch. (case-sensitive)
          schema:
            type: string
        - name: page
          in: query
          description: Page number to retrieve.
          schema:
            type: integer
            format: int32
        - name: numberPerPage
          in: query
          description: Number of connections per page.
          schema:
            type: integer
            format: int32
        - name: filter
          in: query
          description:
            Filter criteria limits the IdP connections that are returned
            to only those that match it. The filter criteria is compared to the IdP
            connection name and partner entity ID fields. The comparison is a case-insensitive
            partial match. No additional pattern based matching is supported.
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpConnections"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    post:
      tags:
        - /sp/idpConnections
      summary: Create a new IdP connection.
      description:
        "Create a new IdP connection. If the IdP connection is not properly\
        \ configured, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: createConnection
      parameters:
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for new connection.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdpConnection"
        required: true
      responses:
        "201":
          description: Connection created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpConnection"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /idp/defaultUrls:
    get:
      tags:
        - /idp/defaultUrls
      summary: Gets the IDP Default URL settings.
      operationId: getDefaultUrl
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpDefaultUrl"
    put:
      tags:
        - /idp/defaultUrls
      summary: Update the IDP Default URL settings.
      operationId: updateDefaultUrlSettings
      requestBody:
        description: Configuration for the IdP Default URL settings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdpDefaultUrl"
        required: true
      responses:
        "200":
          description: Default URL updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpDefaultUrl"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /idpToSpAdapterMapping:
    get:
      tags:
        - /idpToSpAdapterMapping
      summary: Get list of IdP-to-SP Adapter Mappings.
      operationId: getIdpToSpAdapterMappings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpToSpAdapterMappings"
    post:
      tags:
        - /idpToSpAdapterMapping
      summary: Create a new IdP-to-SP Adapter mapping.
      operationId: createIdpToSpAdapterMapping
      parameters:
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for new IdP-to-SP Adapter Mapping.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdpToSpAdapterMapping"
        required: true
      responses:
        "201":
          description: IdP-to-SP adapter mapping created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpToSpAdapterMapping"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /idpToSpAdapterMapping/{id}:
    get:
      tags:
        - /idpToSpAdapterMapping
      summary: Get an IdP-to-SP Adapter Mapping.
      operationId: getIdpToSpAdapterMappingsById
      parameters:
        - name: id
          in: path
          description: ID of IdP-to-SP Adapter Mapping to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpToSpAdapterMapping"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /idpToSpAdapterMapping
      summary: Update the specified IdP-to-SP Adapter mapping.
      operationId: updateIdpToSpAdapterMapping
      parameters:
        - name: id
          in: path
          description: ID of source adapter in the IdP-to-SP Adapter Mapping to fetch.
          required: true
          schema:
            type: string
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for updated IdP-to-SP Adapter Mapping.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdpToSpAdapterMapping"
        required: true
      responses:
        "200":
          description: IdP-to-SP adapter mapping updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpToSpAdapterMapping"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /idpToSpAdapterMapping
      summary: Delete an Adapter to Adapter Mapping.
      operationId: deleteIdpToSpAdapterMappingsById
      parameters:
        - name: id
          in: path
          description: ID of the IdP-to-SP Adapter Mapping to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: IdP-to-SP adapter mapping deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /incomingProxySettings:
    get:
      tags:
        - /incomingProxySettings
      summary: Get incoming proxy settings.
      description:
        "When PingFederate is deployed behind a proxy server or load balancer,\
        \ use information in HTTP headers added by the proxy server to construct correct\
        \ responses."
      operationId: getIncomingProxySettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncomingProxySettings"
    put:
      tags:
        - /incomingProxySettings
      summary: Update incoming proxy settings.
      description:
        "When PingFederate is deployed behind a proxy server or load balancer,\
        \ use information in HTTP headers added by the proxy server to construct correct\
        \ responses."
      operationId: updateIncomingProxySettings
      requestBody:
        description: Incoming proxy settings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IncomingProxySettings"
        required: true
      responses:
        "200":
          description: Incoming proxy settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncomingProxySettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /kerberos/realms/settings:
    get:
      tags:
        - /kerberos/realms
      summary: Gets the Kerberos Realms Settings.
      operationId: getKerberosRealmSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KerberosRealmsSettings"
    put:
      tags:
        - /kerberos/realms
      summary: Set/Update the Kerberos Realms Settings.
      operationId: updateKerberosRealmSettings
      requestBody:
        description: Kerberos Realms Settings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KerberosRealmsSettings"
        required: true
      responses:
        "200":
          description: Settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KerberosRealmsSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /kerberos/realms:
    get:
      tags:
        - /kerberos/realms
      summary: Gets the Kerberos Realms.
      operationId: getKerberosRealms
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KerberosRealms"
    post:
      tags:
        - /kerberos/realms
      summary: Create a new Kerberos Realm.
      description:
        "Create a new Kerberos Realm. If the Kerberos Realm is not properly\
        \ configured, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: createKerberosRealm
      parameters:
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Defaults
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for new policy.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KerberosRealm"
        required: true
      responses:
        "201":
          description: Kerberos realm created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KerberosRealm"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /kerberos/realms/{id}:
    get:
      tags:
        - /kerberos/realms
      summary: Find a Kerberos Realm by ID.
      description:
        Get a Kerberos Realm with the specified ID. A 404 status code is
        returned for nonexistent IDs.
      operationId: getKerberosRealm
      parameters:
        - name: id
          in: path
          description: ID of the Kerberos Realm to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KerberosRealm"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /kerberos/realms
      summary: Update a Kerberos Realm by ID.
      description:
        Update a Kerberos Realm with the specified ID. A 404 status code
        is returned for nonexistent IDs.
      operationId: updateKerberosRealm
      parameters:
        - name: id
          in: path
          description: ID of the Kerberos Realm to update.
          required: true
          schema:
            type: string
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Defaults
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for updated Domain/Realm.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/KerberosRealm"
        required: true
      responses:
        "200":
          description: Kerberos realm updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KerberosRealm"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /kerberos/realms
      summary: Delete a Kerberos Realm.
      description:
        "Delete a Kerberos Realm with the specified ID. A 404 status code\
        \ is returned for nonexistent IDs. Note: If the request succeeds, the response\
        \ body is empty. If the request fails, an ApiResult is returned with details\
        \ of the error."
      operationId: deleteKerberosRealm
      parameters:
        - name: id
          in: path
          description: ID of Kerberos Realm to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Kerberos realm deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /license:
    get:
      tags:
        - /license
      summary: Get a license summary.
      operationId: getLicense
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LicenseView"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /license
      summary: Import a license.
      operationId: updateLicense
      requestBody:
        description: Base64 encoded value of a license.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/LicenseFile"
        required: true
      responses:
        "200":
          description: License imported.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LicenseView"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /license/agreement:
    get:
      tags:
        - /license
      summary: Get license agreement link.
      description:
        The license agreement has to be accepted before performing any
        other API calls.
      operationId: getLicenseAgreement
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LicenseAgreementInfo"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /license
      summary: Accept license agreement.
      description:
        The license agreement has to be accepted before performing any
        other API calls.
      operationId: updateLicenseAgreement
      requestBody:
        description: License Agreement reference.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/LicenseAgreementInfo"
        required: true
      responses:
        "200":
          description: License agreement accepted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LicenseAgreementInfo"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /localIdentity/identityProfiles/{id}:
    get:
      tags:
        - /localIdentity/identityProfiles
      summary: Get the local identity profile by ID.
      description:
        Get a local identity profile with the specified ID. A 404 status
        code is returned for nonexistent IDs.
      operationId: getIdentityProfile
      parameters:
        - name: id
          in: path
          description: ID of profile to fetch
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocalIdentityProfile"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /localIdentity/identityProfiles
      summary: Update the local identity profile by ID.
      description:
        Update a local identity profile with the specified ID. A 404 status
        code is returned for nonexistent IDs.
      operationId: updateIdentityProfile
      parameters:
        - name: id
          in: path
          description: ID of the profile to update
          required: true
          schema:
            type: string
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for updated local identity profile.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/LocalIdentityProfile"
        required: true
      responses:
        "200":
          description: Local identity profile updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocalIdentityProfile"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /localIdentity/identityProfiles
      summary: Delete the local identity profile by ID.
      description:
        "Delete a local identity profile with the specified ID. A 404 status\
        \ code is returned for nonexistent IDs. Note: If the request succeeds, the\
        \ response body is empty. If the request fails, an ApiResult is returned with\
        \ details of the error."
      operationId: deleteIdentityProfile
      parameters:
        - name: id
          in: path
          description: ID of the profile to delete
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Local identity profile deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /localIdentity/identityProfiles:
    get:
      tags:
        - /localIdentity/identityProfiles
      summary: Get the list of configured local identity profiles.
      operationId: getIdentityProfiles
      parameters:
        - name: page
          in: query
          description: Page number to retrieve.
          schema:
            type: integer
            format: int32
        - name: numberPerPage
          in: query
          description: Number of local identity profiles per page.
          schema:
            type: integer
            format: int32
        - name: filter
          in: query
          description:
            Filter criteria limits the local identity profiles that are returned
            to only those that match it. The filter criteria is compared to the local
            identity profile name and ID fields. The comparison is a case-insensitive
            partial match. No additional pattern based matching is supported.
          schema:
            type: string
        - name: apcId
          in: query
          description:
            Filter the local identity profiles by matching policy contract
            ID.
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocalIdentityProfiles"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    post:
      tags:
        - /localIdentity/identityProfiles
      summary: Create a new local identity profile.
      description:
        "Create a new local identity profile. If the local identity profile\
        \ is not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected."
      operationId: createIdentityProfile
      parameters:
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for a new profile.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocalIdentityProfile"
        required: true
      responses:
        "201":
          description: Local identity profile created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocalIdentityProfile"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /metadataUrls:
    get:
      tags:
        - /metadataUrls
      summary: Get a list of Metadata URLs
      operationId: getMetadataUrls
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataUrls"
    post:
      tags:
        - /metadataUrls
      summary: Add a new Metadata URL.
      description:
        "Add a new Metadata URL. If the Metadata URL is not properly configured,\
        \ a 422 status code is returned along with a list of validation errors that\
        \ must be corrected."
      operationId: addMetadataUrl
      requestBody:
        description: Configuration for a new Metadata URL.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetadataUrl"
        required: true
      responses:
        "201":
          description: Metadata URL added.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataUrl"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /metadataUrls/{id}:
    get:
      tags:
        - /metadataUrls
      summary: Get a Metadata URL by ID.
      description:
        Get a Metadata URL with the specified ID. A 404 status code is
        returned for nonexistent IDs
      operationId: getMetadataUrl
      parameters:
        - name: id
          in: path
          description: ID of Metadata URL to fetch
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataUrl"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /metadataUrls
      summary: Update a Metadata URL by ID.
      description:
        "Update a Metadata URL by ID. If the Metadata URL is not properly\
        \ configured, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: updateMetadataUrl
      parameters:
        - name: id
          in: path
          description: ID of the Metadata URL to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for the Metadata URL.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetadataUrl"
        required: true
      responses:
        "200":
          description: Metadata URL updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataUrl"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /metadataUrls
      summary: Delete a Metadata URL by ID.
      description:
        "Delete Metadata URL with the specified ID. A 404 status code is\
        \ returned for nonexistent IDs. Note: If the request succeeds, the response\
        \ body is empty. If the request fails, an ApiResult is returned with details\
        \ of the error."
      operationId: deleteMetadataUrl
      parameters:
        - name: id
          in: path
          description: ID of Metadata URL to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Metadata URL deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Resource is in use and cannot be deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /notificationPublishers/descriptors:
    get:
      tags:
        - /notificationPublishers
      summary: Get the list of available Notification Publisher Plugin descriptors.
      operationId: getNotificationPublisherPluginDescriptors
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationPublisherDescriptors"
  /notificationPublishers/descriptors/{id}:
    get:
      tags:
        - /notificationPublishers
      summary: Get the description of a notification publisher plugin descriptor.
      operationId: getNotificationPublisherPluginDescriptor
      parameters:
        - name: id
          in: path
          description: ID of notification publisher plugin descriptor.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationPublisherDescriptor"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /notificationPublishers/settings:
    get:
      tags:
        - /notificationPublishers
      summary: Get general notification publisher settings.
      operationId: getNotificationPublishersSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationPublishersSettings"
    put:
      tags:
        - /notificationPublishers
      summary: Update general notification publisher settings.
      operationId: updateNotificationPublishersSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationPublishersSettings"
        required: true
      responses:
        "200":
          description: Notification publisher settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationPublishersSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /notificationPublishers:
    get:
      tags:
        - /notificationPublishers
      summary: Get a list of notification publisher plugin instances.
      operationId: getNotificationPublishers
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationPublishers"
    post:
      tags:
        - /notificationPublishers
      summary: Create a notification publisher plugin instance.
      operationId: createNotificationPublisher
      requestBody:
        description: Configuration for a notification publisher plugin instance.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationPublisher"
        required: true
      responses:
        "201":
          description: Notification Publisher plugin created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationPublisher"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /notificationPublishers/{id}:
    get:
      tags:
        - /notificationPublishers
      summary: Get a specific notification publisher plugin instance.
      operationId: getNotificationPublisher
      parameters:
        - name: id
          in: path
          description: ID of a notification publisher plugin instance.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationPublisher"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /notificationPublishers
      summary: Update a notification publisher plugin instance.
      operationId: updateNotificationPublisher
      parameters:
        - name: id
          in: path
          description: ID of a notification publisher plugin instance.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for a notification publisher plugin instance.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationPublisher"
        required: true
      responses:
        "200":
          description: Notification Publisher plugin updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationPublisher"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /notificationPublishers
      summary: Delete a notification publisher plugin instance.
      operationId: deleteNotificationPublisher
      parameters:
        - name: id
          in: path
          description: ID of a notification publisher plugin instance.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Notification Publisher plugin deleted.
          content: {}
        "403":
          description:
            "The operation is not permitted, based on the current configuration\
            \ of the server."
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /notificationPublishers/{id}/actions/{actionId}/invokeAction:
    post:
      tags:
        - /notificationPublishers
      summary: Invokes an action for notification publisher plugin instance.
      operationId: invokeNotificationPublishersActionWithOptions
      parameters:
        - name: id
          in: path
          description:
            ID of the notification publisher plugin instance to which these
            actions belongs to.
          required: true
          schema:
            type: string
        - name: actionId
          in: path
          description: ID of the action to get.
          required: true
          schema:
            type: string
      requestBody:
        description: Action options for action invoked.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActionOptions"
        required: false
      responses:
        "200":
          description: Notification Publisher plugin action invoked.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResult"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /notificationPublishers/{id}/actions/{actionId}:
    get:
      tags:
        - /notificationPublishers
      summary: Find an notification publisher plugin instance's action by ID.
      operationId: getNotificationPublishersAction
      parameters:
        - name: id
          in: path
          description:
            ID of the notification publisher plugin instance to which these
            actions belongs to.
          required: true
          schema:
            type: string
        - name: actionId
          in: path
          description: ID of the action to get.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Action"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /notificationPublishers/{id}/actions:
    get:
      tags:
        - /notificationPublishers
      summary: List the actions for a notification publisher plugin instance.
      operationId: getNotificationPublisherActions
      parameters:
        - name: id
          in: path
          description:
            ID of the notification publisher plugin instance to which these
            actions belongs to.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Actions"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/authenticationPolicyContractMappings:
    get:
      tags:
        - /oauth/authenticationPolicyContractMappings
      summary:
        Get the list of authentication policy contract to persistent grant
        mappings.
      operationId: getApcMappings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApcToPersistentGrantMappings"
    post:
      tags:
        - /oauth/authenticationPolicyContractMappings
      summary: Create a new authentication policy contract to persistent grant mapping.
      description:
        "Create a new authentication policy contract to persistent grant\
        \ mapping. If a mapping can't be created, a 422 status code is returned along\
        \ with a list of validation errors that must be corrected."
      operationId: createApcMapping
      parameters:
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description:
          Configuration for an authentication policy contract to persistent
          grant mapping.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApcToPersistentGrantMapping"
        required: true
      responses:
        "201":
          description:
            Authentication policy contract to persistent grant mapping
            created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApcToPersistentGrantMapping"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/authenticationPolicyContractMappings/{id}:
    get:
      tags:
        - /oauth/authenticationPolicyContractMappings
      summary:
        Find the authentication policy contract to persistent grant mapping
        by ID.
      operationId: getApcMapping
      parameters:
        - name: id
          in: path
          description:
            ID of the authentication policy contract to persistent grant
            mapping.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApcToPersistentGrantMapping"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /oauth/authenticationPolicyContractMappings
      summary: Update an authentication policy contract to persistent grant mapping.
      operationId: updateApcMapping
      parameters:
        - name: id
          in: path
          description:
            ID of the authentication policy contract to persistent grant
            mapping to update.
          required: true
          schema:
            type: string
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description:
          Configuration for an authentication policy contract to persistent
          grant mapping.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApcToPersistentGrantMapping"
        required: true
      responses:
        "200":
          description:
            Authentication policy contract to persistent grant mapping
            updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApcToPersistentGrantMapping"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /oauth/authenticationPolicyContractMappings
      summary: Delete an authentication policy contract to persistent grant mapping.
      operationId: deleteApcMapping
      parameters:
        - name: id
          in: path
          description:
            ID of the authentication policy contract to persistent grant
            mapping.
          required: true
          schema:
            type: string
      responses:
        "204":
          description:
            Authentication policy contract to persistent grant mapping
            deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/cibaServerPolicy/settings:
    get:
      tags:
        - /oauth/cibaServerPolicy
      summary: Get general ciba server request policy settings.
      operationId: getCibaServerPolicySettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CibaServerPolicySettings"
    put:
      tags:
        - /oauth/cibaServerPolicy
      summary: Update general ciba server request policy settings.
      operationId: updateCibaServerPolicySettings
      parameters:
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Ciba server request policy settings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CibaServerPolicySettings"
        required: true
      responses:
        "200":
          description: Settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CibaServerPolicySettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/cibaServerPolicy/requestPolicies/{id}:
    get:
      tags:
        - /oauth/cibaServerPolicy
      summary: Find request policy by ID.
      description:
        Get a request policy with the specified ID. A 404 status code is
        returned for nonexistent IDs.
      operationId: getCibaServerPolicyById
      parameters:
        - name: id
          in: path
          description: ID of the request policy to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestPolicy"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /oauth/cibaServerPolicy
      summary: Update a request policy.
      description:
        "Update a request policy with the matching ID. If the policy is\
        \ not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected. Note: A 404 status code is\
        \ returned for nonexistent IDs."
      operationId: updateCibaServerPolicy
      parameters:
        - name: id
          in: path
          description: ID of the request policy to update.
          required: true
          schema:
            type: string
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for updated policy.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestPolicy"
        required: true
      responses:
        "200":
          description: Request Handling Policy updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestPolicy"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /oauth/cibaServerPolicy
      summary: Delete a request policy.
      description:
        "Delete a request policy with the specified ID. A 404 status code\
        \ is returned for nonexistent IDs. Note: If the request succeeds, the response\
        \ body is empty. If the request fails, an ApiResult is returned with details\
        \ of the error."
      operationId: deleteCibaServerPolicy
      parameters:
        - name: id
          in: path
          description: ID of request policy to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Request Handling Policy deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/cibaServerPolicy/requestPolicies:
    get:
      tags:
        - /oauth/cibaServerPolicy
      summary: Get list of request policies.
      operationId: getCibaServerPolicies
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestPolicies"
    post:
      tags:
        - /oauth/cibaServerPolicy
      summary: Create a new request policy.
      description:
        "Create a new request policy. If the request policy is not properly\
        \ configured, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: createCibaServerPolicy
      parameters:
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for new policy.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestPolicy"
        required: true
      responses:
        "201":
          description: Request Handling Policy created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestPolicy"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/clients/{id}/clientAuth/clientSecret:
    get:
      tags:
        - /oauth/clients
      summary: Get the client secret of an existing OAuth client.
      operationId: getOauthClientSecret
      parameters:
        - name: id
          in: path
          description: ID of the client.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientSecret"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /oauth/clients
      summary: Update the client secret of an existing OAuth client.
      operationId: updateOauthClientSecret
      parameters:
        - name: id
          in: path
          description: ID of the client to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: Client Secret.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientSecret"
        required: true
      responses:
        "200":
          description: Client updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientSecret"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/clients:
    get:
      tags:
        - /oauth/clients
      summary: Get the list of OAuth clients.
      operationId: getOauthClients
      parameters:
        - name: page
          in: query
          description: Page number to retrieve.
          schema:
            type: integer
            format: int32
        - name: numberPerPage
          in: query
          description: Number of OAuth clients per page. (uncapped if unspecified)
          schema:
            type: integer
            format: int32
        - name: filter
          in: query
          description:
            Filter criteria limits the OAuth clients that are returned to
            only those that match it. The filter criteria is compared to the OAuth client
            name and ID fields. The comparison is a case-insensitive partial match.
            No additional pattern based matching is supported.
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Clients"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    post:
      tags:
        - /oauth/clients
      summary: Create a new OAuth client.
      description:
        "Create a new OAuth client. If an OAuth client can't be created,\
        \ a 422 status code is returned along with a list of validation errors that\
        \ must be corrected."
      operationId: createOauthClient
      requestBody:
        description: Configuration for new client.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Client"
        required: true
      responses:
        "201":
          description: Client created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/clients/{id}:
    get:
      tags:
        - /oauth/clients
      summary: Find the OAuth client by ID.
      operationId: getOauthClientById
      parameters:
        - name: id
          in: path
          description: ID of the client.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /oauth/clients
      summary: Updates the OAuth client.
      operationId: updateOauthClient
      parameters:
        - name: id
          in: path
          description: ID of the client to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for the client.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Client"
        required: true
      responses:
        "200":
          description: Client updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /oauth/clients
      summary: Delete an OAuth client.
      operationId: deleteOauthClient
      parameters:
        - name: id
          in: path
          description: ID of the client.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Client deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Resource is in use and cannot be deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/clientSettings:
    get:
      tags:
        - /oauth/clientSettings
      summary: Configure the client settings.
      operationId: getOauthClientSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientSettings"
    put:
      tags:
        - /oauth/clientSettings
      summary: Update the client settings.
      operationId: updateOauthClientSettings
      requestBody:
        description: Configuration for client settings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientSettings"
        required: true
      responses:
        "200":
          description: Client Settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/clientRegistrationPolicies/descriptors:
    get:
      tags:
        - /oauth/clientRegistrationPolicies
      summary: Get the list of available client registration policy plugin descriptors.
      operationId: getDynamicClientRegistrationDescriptors
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRegistrationPolicyDescriptors"
  /oauth/clientRegistrationPolicies/descriptors/{id}:
    get:
      tags:
        - /oauth/clientRegistrationPolicies
      summary: Get the description of a client registration policy plugin descriptor.
      operationId: getDynamicClientRegistrationDescriptor
      parameters:
        - name: id
          in: path
          description: ID of client registration policy plugin descriptor.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRegistrationPolicyDescriptor"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/clientRegistrationPolicies:
    get:
      tags:
        - /oauth/clientRegistrationPolicies
      summary: Get a list of client registration policy plugin instances.
      operationId: getDynamicClientRegistrationPolicies
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRegistrationPolicies"
    post:
      tags:
        - /oauth/clientRegistrationPolicies
      summary: Create a client registration policy plugin instance.
      operationId: createDynamicClientRegistrationPolicy
      requestBody:
        description: Configuration for a client registration policy plugin instance.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientRegistrationPolicy"
        required: true
      responses:
        "201":
          description: Client Registration Policy plugin created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRegistrationPolicy"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/clientRegistrationPolicies/{id}:
    get:
      tags:
        - /oauth/clientRegistrationPolicies
      summary: Get a specific client registration policy plugin instance.
      operationId: getDynamicClientRegistrationPolicy
      parameters:
        - name: id
          in: path
          description: ID of client registration policy plugin instance.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRegistrationPolicy"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /oauth/clientRegistrationPolicies
      summary: Update a client registration policy plugin instance.
      operationId: updateDynamicClientRegistrationPolicy
      parameters:
        - name: id
          in: path
          description: ID of a client registration policy plugin instance.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for a client registration policy plugin instance.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientRegistrationPolicy"
        required: true
      responses:
        "200":
          description: Client Registration Policy plugin updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRegistrationPolicy"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /oauth/clientRegistrationPolicies
      summary: Delete a client registration policy plugin instance.
      operationId: deleteDynamicClientRegistrationPolicy
      parameters:
        - name: id
          in: path
          description: ID of a client registration policy plugin instance.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Client Registration Policy plugin deleted.
          content: {}
        "403":
          description:
            "The operation is not permitted, based on the current configuration\
            \ of the server."
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/idpAdapterMappings:
    get:
      tags:
        - /oauth/idpAdapterMappings
      summary: Get the list of IdP adapter mappings.
      operationId: getIdpAdapterMappings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpAdapterMappings"
    post:
      tags:
        - /oauth/idpAdapterMappings
      summary: Create a new IdP adapter mapping.
      description:
        "Create a new IdP adapter mapping. If an IdP adapter mapping can't\
        \ be created, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: createIdpAdapterMapping
      parameters:
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for IdP adapter mapping.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdpAdapterMapping"
        required: true
      responses:
        "201":
          description: IdP adapter mapping created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpAdapterMapping"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/idpAdapterMappings/{id}:
    get:
      tags:
        - /oauth/idpAdapterMappings
      summary: Find the IdP adapter mapping by the ID.
      operationId: getIdpAdapterMapping
      parameters:
        - name: id
          in: path
          description: ID of the adapter mapping.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpAdapterMapping"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /oauth/idpAdapterMappings
      summary: Update an IdP adapter mapping.
      operationId: updateIdpAdapterMapping
      parameters:
        - name: id
          in: path
          description: ID of the IdP adapter mapping to update.
          required: true
          schema:
            type: string
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for IdP adapter mapping.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdpAdapterMapping"
        required: true
      responses:
        "200":
          description: IdP adapter mapping updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpAdapterMapping"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /oauth/idpAdapterMappings
      summary: Delete an IdP adapter mapping.
      operationId: deleteIdpAdapterMapping
      parameters:
        - name: id
          in: path
          description: ID of the IdP adapter mapping.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: IdP adapter mapping deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/outOfBandAuthPlugins/{id}/actions/{actionId}/invokeAction:
    post:
      tags:
        - /oauth/outOfBandAuthPlugins
      summary: Invokes an action for Out of Band authenticator plugin instance.
      operationId: invokeOOBActionWithOptions
      parameters:
        - name: id
          in: path
          description:
            ID of the Out of Band authenticator plugin instance to which
            these actions belongs to.
          required: true
          schema:
            type: string
        - name: actionId
          in: path
          description: ID of the action.
          required: true
          schema:
            type: string
      requestBody:
        description: Action options for action invoked.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActionOptions"
        required: false
      responses:
        "200":
          description: Action invoked on Out of Band authenticator.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResult"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/outOfBandAuthPlugins/descriptors:
    get:
      tags:
        - /oauth/outOfBandAuthPlugins
      summary: Get the list of available Out of Band authenticator plugin descriptors.
      operationId: getOOBAuthPluginDescriptors
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OutOfBandAuthPluginDescriptors"
  /oauth/outOfBandAuthPlugins/descriptors/{id}:
    get:
      tags:
        - /oauth/outOfBandAuthPlugins
      summary: Get the descriptor of an Out of Band authenticator plugin.
      operationId: getOOBAuthPluginDescriptor
      parameters:
        - name: id
          in: path
          description: ID of an Out of Band authenticator plugin descriptor.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OutOfBandAuthPluginDescriptor"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/outOfBandAuthPlugins:
    get:
      tags:
        - /oauth/outOfBandAuthPlugins
      summary: Get a list of Out of Band authenticator plugin instances.
      operationId: getOOBAuthenticators
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OutOfBandAuthenticators"
    post:
      tags:
        - /oauth/outOfBandAuthPlugins
      summary: Create an Out of Band authenticator plugin instance.
      operationId: createOOBAuthenticator
      requestBody:
        description: Configuration for an Out of Band authenticator plugin instance.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OutOfBandAuthenticator"
        required: true
      responses:
        "201":
          description: Out of Band Authenticator created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OutOfBandAuthenticator"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/outOfBandAuthPlugins/{id}:
    get:
      tags:
        - /oauth/outOfBandAuthPlugins
      summary: Get a specific Out of Band authenticator plugin instance.
      operationId: getOOBAuthenticator
      parameters:
        - name: id
          in: path
          description: ID of Out of Band authenticator plugin instance.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OutOfBandAuthenticator"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /oauth/outOfBandAuthPlugins
      summary: Update an Out of Band authenticator plugin instance.
      operationId: updateOOBAuthenticator
      parameters:
        - name: id
          in: path
          description: ID of Out of Band authenticator plugin instance.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for an Out of Band authenticator plugin instance.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OutOfBandAuthenticator"
        required: true
      responses:
        "200":
          description: Out of Band Authenticator updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OutOfBandAuthenticator"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /oauth/outOfBandAuthPlugins
      summary: Delete an Out of Band authenticator plugin instance.
      operationId: deleteOOBAuthenticator
      parameters:
        - name: id
          in: path
          description: ID of Out of Band authenticator plugin instance.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Out of Band Authenticator deleted.
          content: {}
        "403":
          description:
            "The operation is not permitted, based on the current configuration\
            \ of the server."
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/outOfBandAuthPlugins/{id}/actions/{actionId}:
    get:
      tags:
        - /oauth/outOfBandAuthPlugins
      summary: Find an Out of Band authenticator plugin instance's action by ID.
      operationId: getOOBAction
      parameters:
        - name: id
          in: path
          description:
            ID of the Out of Band authenticator plugin instance to which
            these actions belongs to.
          required: true
          schema:
            type: string
        - name: actionId
          in: path
          description: ID of the action.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Action"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/outOfBandAuthPlugins/{id}/actions:
    get:
      tags:
        - /oauth/outOfBandAuthPlugins
      summary: List of actions for an Out of Band authenticator plugin instance.
      operationId: getOOBActions
      parameters:
        - name: id
          in: path
          description:
            ID of the Out of Band authenticator plugin instance to which
            these actions belongs to.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Actions"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /keyPairs/oauthOpenIdConnect:
    get:
      tags:
        - /keyPairs/oauthOpenIdConnect
      summary: Retrieve OAuth/OpenID Connect key settings.
      operationId: getOauthOidcKeysSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthOidcKeysSettings"
    put:
      tags:
        - /keyPairs/oauthOpenIdConnect
      summary: Update OAuth/OpenID Connect key settings.
      operationId: updateOAuthOidcKeysSettings
      requestBody:
        description: OAuth and OpenID Connect static key settings
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OAuthOidcKeysSettings"
        required: true
      responses:
        "200":
          description: OAuth/Open ID Connect key settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthOidcKeysSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /keyPairs/oauthOpenIdConnect/additionalKeySets/{id}:
    get:
      tags:
        - /keyPairs/oauthOpenIdConnect
      summary: Retrieve an OAuth/OpenID Connect additional signing key set.
      operationId: getKeySet
      parameters:
        - name: id
          in: path
          description: ID of an OAuth/OpenID Connect additional signing key set to update.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdditionalKeySet"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /keyPairs/oauthOpenIdConnect
      summary: Update an existing OAuth/OpenID Connect additional signing key set.
      description:
        "Update an existing OAuth/OpenID Connect additional signing key\
        \ set.  If not properly configured, a 422 status code is returned along with\
        \ a list of validation errors that must be corrected."
      operationId: updateKeySet
      parameters:
        - name: id
          in: path
          description: ID of an OAuth/OpenID Connect additional signing key set to update.
          required: true
          schema:
            type: string
      requestBody:
        description:
          Configuration for updated OAuth/OpenID Connect additional signing
          key set.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdditionalKeySet"
        required: true
      responses:
        "200":
          description: OAuth/OpenID Connect key set updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdditionalKeySet"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /keyPairs/oauthOpenIdConnect
      summary: Delete an existing OAuth/OpenID Connect additional signing key set.
      operationId: deleteKeySet
      parameters:
        - name: id
          in: path
          description: ID of an additional key set to be deleted.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: OAuth/OpenID Connect key set deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /keyPairs/oauthOpenIdConnect/additionalKeySets:
    get:
      tags:
        - /keyPairs/oauthOpenIdConnect
      summary: Retrieve OAuth/OpenID Connect additional signing key sets.
      operationId: getKeySets
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdditionalKeySets"
    post:
      tags:
        - /keyPairs/oauthOpenIdConnect
      summary: Create a new OAuth/OpenID Connect additional signing key set.
      description:
        "Create a new OAuth/OpenID Connect additional signing key set.\
        \  If not properly configured, a 422 status code is returned along with a\
        \ list of validation errors that must be corrected."
      operationId: createKeySet
      requestBody:
        description: Configuration for a new signing key set.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdditionalKeySet"
        required: true
      responses:
        "201":
          description: OAuth/OpenID Connect key set created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdditionalKeySet"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/resourceOwnerCredentialsMappings:
    get:
      tags:
        - /oauth/resourceOwnerCredentialsMappings
      summary: Get the list of Resource Owner Credentials Grant Mapping.
      operationId: getResourceOwnerCredentialsMappings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceOwnerCredentialsMappings"
    post:
      tags:
        - /oauth/resourceOwnerCredentialsMappings
      summary: Create a new Resource Owner Credentials mapping.
      description:
        "Create a new Resource Owner Credentials mapping. If a Resource\
        \ Owner Credentials mapping can't be created, a 422 status code is returned\
        \ along with a list of validation errors that must be corrected."
      operationId: createResourceOwnerCredentialsMapping
      parameters:
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for Resource Owner Credentials mapping.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceOwnerCredentialsMapping"
        required: true
      responses:
        "201":
          description: Resource owner credentials mapping created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceOwnerCredentialsMapping"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/resourceOwnerCredentialsMappings/{id}:
    get:
      tags:
        - /oauth/resourceOwnerCredentialsMappings
      summary: Find the Resource Owner Credentials mapping by the ID.
      operationId: getResourceOwnerCredentialsMapping
      parameters:
        - name: id
          in: path
          description: ID of the Resource Owner Credentials mapping.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceOwnerCredentialsMapping"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /oauth/resourceOwnerCredentialsMappings
      summary: Update a Resource Owner Credentials mapping.
      operationId: updateResourceOwnerCredentialsMapping
      parameters:
        - name: id
          in: path
          description: ID of the Resource Owner Credentials mapping to update.
          required: true
          schema:
            type: string
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for Resource Owner Credentials mapping.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceOwnerCredentialsMapping"
        required: true
      responses:
        "200":
          description: Resource owner credentials mapping updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceOwnerCredentialsMapping"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /oauth/resourceOwnerCredentialsMappings
      summary: Delete a Resource Owner Credentials mapping.
      operationId: deleteResourceOwnerCredentialsMapping
      parameters:
        - name: id
          in: path
          description: ID of the Resource Owner Credentials mapping.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Resource owner credentials mapping deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/openIdConnect/settings:
    get:
      tags:
        - /oauth/openIdConnect
      summary: Get the OpenID Connect Settings.
      operationId: getOIDCSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OpenIdConnectSettings"
    put:
      tags:
        - /oauth/openIdConnect
      summary: Set the OpenID Connect Settings.
      operationId: updateOIDCSettings
      requestBody:
        description: OpenID Connect Settings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OpenIdConnectSettings"
        required: true
      responses:
        "200":
          description: Settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OpenIdConnectSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/openIdConnect/policies/{id}:
    get:
      tags:
        - /oauth/openIdConnect
      summary: Find OpenID Connect Policy by ID.
      description:
        Get an OpenID Connect Policy with the specified ID. A 404 status
        code is returned for nonexistent IDs.
      operationId: getOIDCPolicy
      parameters:
        - name: id
          in: path
          description: ID of the OpenID Connect Policy to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OpenIdConnectPolicy"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /oauth/openIdConnect
      summary: Update an OpenID Connect Policy.
      description:
        "Update an OpenID Connect Policy with the matching ID. If the policy\
        \ is not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected. Note: A 404 status code is\
        \ returned for nonexistent IDs."
      operationId: updateOIDCPolicy
      parameters:
        - name: id
          in: path
          description: ID of the OpenID Connect Policy to update.
          required: true
          schema:
            type: string
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for updated policy.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OpenIdConnectPolicy"
        required: true
      responses:
        "200":
          description: Policy updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OpenIdConnectPolicy"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /oauth/openIdConnect
      summary: Delete an OpenID Connect Policy.
      description:
        "Delete an OpenID Connect Policy with the specified ID. A 404 status\
        \ code is returned for nonexistent IDs. Note: If the request succeeds, the\
        \ response body is empty. If the request fails, an ApiResult is returned with\
        \ details of the error."
      operationId: deleteOIDCPolicy
      parameters:
        - name: id
          in: path
          description: ID of OpenID Connect Policy to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Policy deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/openIdConnect/policies:
    get:
      tags:
        - /oauth/openIdConnect
      summary: Get list of OpenID Connect Policies.
      operationId: getOIDCPolicies
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OpenIdConnectPolicies"
    post:
      tags:
        - /oauth/openIdConnect
      summary: Create a new OpenID Connect Policy.
      description:
        "Create a new OpenID Connect Policy. If the OpenID Connect policy\
        \ is not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected."
      operationId: createOIDCPolicy
      parameters:
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for new policy.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OpenIdConnectPolicy"
        required: true
      responses:
        "201":
          description: Policy created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OpenIdConnectPolicy"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /passwordCredentialValidators/descriptors:
    get:
      tags:
        - /passwordCredentialValidators
      summary: Get a list of available password credential validator descriptors.
      operationId: getPasswordCredentialValidatorDescriptors
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordCredentialValidatorDescriptors"
  /passwordCredentialValidators/descriptors/{id}:
    get:
      tags:
        - /passwordCredentialValidators
      summary: Get the description of a password credential validator by ID.
      description:
        Get the description of a password credential validator by ID. A
        404 status code is returned for a nonexistent ID.
      operationId: getPasswordCredentialValidatorDescriptor
      parameters:
        - name: id
          in: path
          description: ID of the password credential validator descriptor to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordCredentialValidatorDescriptor"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /passwordCredentialValidators:
    get:
      tags:
        - /passwordCredentialValidators
      summary: Get the list of available password credential validators
      operationId: getPasswordCredentialValidators
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordCredentialValidators"
    post:
      tags:
        - /passwordCredentialValidators
      summary: Create a new password credential validator instance
      description:
        "Create a new password credential validator instance. If the password\
        \ credential validator is not properly configured, a 422 status code is returned\
        \ along with a list of validation errors that must be corrected."
      operationId: createPasswordCredentialValidator
      requestBody:
        description: Configuration for the new password credential validator instance.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordCredentialValidator"
        required: true
      responses:
        "201":
          description: Password credential validator created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordCredentialValidator"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /passwordCredentialValidators/{id}:
    get:
      tags:
        - /passwordCredentialValidators
      summary: Find a password credential validator by ID.
      description:
        Get the configured password credential validator instance with
        the specified ID. A 404 status code is returned for a nonexistent ID.
      operationId: getPasswordCredentialValidator
      parameters:
        - name: id
          in: path
          description: ID of password credential validator instance to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordCredentialValidator"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /passwordCredentialValidators
      summary: Update a password credential validator instance.
      description:
        "Update a password credential validator instance. If the password\
        \ credential validator is not properly configured, a 422 status code is returned\
        \ along with a list of validation errors that need to be corrected."
      operationId: updatePasswordCredentialValidator
      parameters:
        - name: id
          in: path
          description: ID of the password credential validator instance
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for the updated password credential validator instance.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordCredentialValidator"
        required: true
      responses:
        "200":
          description: Password credential validator updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordCredentialValidator"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /passwordCredentialValidators
      summary: Delete a password credential validator instance.
      description:
        "Delete a password credential validator instance with the specified\
        \ ID. A 404 status code is returned for nonexistent IDs. Note: Only validators\
        \ not in use can be deleted. If the request succeeds, the response body is\
        \ empty. If the request fails, an ApiResult is returned with details of the\
        \ errors."
      operationId: deletePasswordCredentialValidator
      parameters:
        - name: id
          in: path
          description: ID of the password credential validator to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Password credential validator deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Resource is in use and cannot be deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /pingOneConnections:
    get:
      tags:
        - /pingOneConnections
      summary: Get the list of all PingOne connections.
      operationId: getPingOneConnections
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PingOneConnections"
    post:
      tags:
        - /pingOneConnections
      summary: Create a new PingOne connection.
      operationId: createPingOneConnection
      parameters:
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for the new PingOne connection.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/PingOneConnection"
        required: true
      responses:
        "201":
          description: PingOne connection created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PingOneConnection"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /pingOneConnections/{id}/credentialStatus:
    get:
      tags:
        - /pingOneConnections
      summary: Get the status of the credential associated with the PingOne connection
      operationId: getCredentialStatus
      parameters:
        - name: id
          in: path
          description: ID of the PingOne connection.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PingOneCredentialStatus"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /pingOneConnections/{id}/environments:
    get:
      tags:
        - /pingOneConnections
      summary:
        Get the list of environments that the PingOne connection has access
        to.
      operationId: getPingOneConnectionEnvironments
      parameters:
        - name: id
          in: path
          description: ID of the PingOne connection.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: Page number to retrieve.
          schema:
            type: integer
            format: int32
        - name: numberPerPage
          in: query
          description: Number of environments per page.
          schema:
            type: integer
            format: int32
        - name: filter
          in: query
          description:
            Filter criteria limits the environments that are returned to
            only those that match it. The filter criteria is compared to the environment
            name and ID fields. The comparison is a case-insensitive partial match.
            No additional pattern based matching is supported.
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PingOneEnvironments"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "500":
          description: Error connecting to PingOne
          content: {}
  /pingOneConnections/{id}/usage:
    get:
      tags:
        - /pingOneConnections
      summary: Get the list of resources that reference this PingOne connection.
      operationId: getPingOneConnectionUsages
      parameters:
        - name: id
          in: path
          description: ID of the PingOne connection.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceUsages"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /pingOneConnections/{id}/serviceAssociations:
    get:
      tags:
        - /pingOneConnections
      summary:
        Get information about components using this connection to access PingOne
        services.
      operationId: getPingOneConnectionAssociations
      parameters:
        - name: id
          in: path
          description: ID of the PingOne connection.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceAssociations"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /pingOneConnections/{id}:
    get:
      tags:
        - /pingOneConnections
      summary: Get a PingOne connection with the specified ID.
      operationId: getPingOneConnection
      parameters:
        - name: id
          in: path
          description: ID of the connection to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PingOneConnection"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /pingOneConnections
      summary: Update a PingOne connection.
      operationId: updatePingOneConnection
      parameters:
        - name: id
          in: path
          description: ID of the PingOne connection to update.
          required: true
          schema:
            type: string
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for the updated connection.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/PingOneConnection"
        required: true
      responses:
        "200":
          description: PingOne connection updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PingOneConnection"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /pingOneConnections
      summary: Delete a PingOne connection.
      operationId: deletePingOneConnection
      parameters:
        - name: id
          in: path
          description: ID of the PingOne connection to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: PingOne connection deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /pingOneForEnterprise/updateIdentityRepository:
    post:
      tags:
        - /pingOneForEnterprise
      summary: Update the PingOne Identity Repository
      description:
        "Update the identity repository to keep your PingFederate and PingOne\
        \ for Enterprise settings synchronized.<br>CAUTION: Updating the identity\
        \ repository overwrites the existing PingOne for Enterprise identity repository,\
        \ causing users to be directed to the current PingFederate instance for SSO."
      operationId: updatePingOneForEnterpriseIdentityRepository
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PingOneForEnterpriseSettings"
        "403":
          description:
            PingFederate is not connected to PingOne for Enterprise. Operation
            not available.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /pingOneForEnterprise/keyPairs:
    get:
      tags:
        - /pingOneForEnterprise
      summary: Get the PingOne for Enterprise key pair settings
      operationId: getKeyPairs
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/P14EKeysView"
        "403":
          description:
            PingFederate is not connected to PingOne for Enterprise. Operation
            not available.
          content: {}
  /pingOneForEnterprise:
    get:
      tags:
        - /pingOneForEnterprise
      summary: Get the PingOne for Enterprise settings
      operationId: getPingOneForEnterpriseSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PingOneForEnterpriseSettings"
        "403":
          description:
            PingFederate is not connected to PingOne for Enterprise. Operation
            not available.
          content: {}
    put:
      tags:
        - /pingOneForEnterprise
      summary: Update the PingOne for Enterprise settings.
      operationId: updatePingOneSettings
      requestBody:
        description: PingOne for Enterprise connection settings
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PingOneForEnterpriseSettings"
        required: true
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PingOneForEnterpriseSettings"
        "403":
          description:
            PingFederate is not connected to PingOne for Enterprise. Operation
            not available.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /pingOneForEnterprise/keyPairs/rotate:
    post:
      tags:
        - /pingOneForEnterprise
      summary: Rotate the authentication key
      operationId: rotateKeys
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/P14EKeysView"
        "403":
          description:
            PingFederate is not connected to PingOne for Enterprise. Operation
            not available.
          content: {}
  /pingOneForEnterprise/disconnect:
    post:
      tags:
        - /pingOneForEnterprise
      summary: Disconnect from PingOne for Enterprise
      operationId: disconnect
      responses:
        "200":
          description: Disconnected from PingOne for Enterprise
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PingOneForEnterpriseSettings"
        "403":
          description:
            PingFederate is not connected to PingOne for Enterprise. Operation
            not available.
          content: {}
        "422":
          description: Unable to disconnect from PingOne for Enterprise.
          content: {}
  /protocolMetadata/lifetimeSettings:
    get:
      tags:
        - /protocolMetadata
      summary: Get metadata cache duration and reload delay for automated reloading.
      operationId: getLifetimeSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataLifetimeSettings"
    put:
      tags:
        - /protocolMetadata
      summary: Update metadata cache duration and reload delay for automated reloading.
      operationId: updateLifetimeSettings
      requestBody:
        description: Metadata lifetime settings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetadataLifetimeSettings"
        required: true
      responses:
        "200":
          description: Metadata lifetime settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataLifetimeSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /protocolMetadata/signingSettings:
    get:
      tags:
        - /protocolMetadata
      summary: Get the certificate ID and algorithm used for metadata signing.
      operationId: getSigningSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataSigningSettings"
    put:
      tags:
        - /protocolMetadata
      summary: Update the certificate and algorithm for metadata signing.
      operationId: updateSigningSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetadataSigningSettings"
        required: false
      responses:
        "200":
          description: Metadata signing settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataSigningSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /redirectValidation:
    get:
      tags:
        - /redirectValidation
      summary: Retrieve redirect validation settings.
      operationId: getRedirectValidationSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedirectValidationSettings"
    put:
      tags:
        - /redirectValidation
      summary: Update redirect validation settings.
      description:
        "<b>Note: </b>Ensure IdP Discovery and/or WS-Federation is enabled\
        \ for redirect validation to function for IdP Discovery and/or wreply for\
        \ SLO respectively."
      operationId: updateRedirectValidationSettings
      requestBody:
        description: Redirect validation settings.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/RedirectValidationSettings"
        required: true
      responses:
        "200":
          description: Redirect validation settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedirectValidationSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /keyPairs/keyAlgorithms:
    get:
      tags:
        - /keyPairs
      summary: Get list of the key algorithms supported for key pair generation.
      operationId: getKeyAlgorithms
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyAlgorithms"
  /secretManagers/{id}/actions/{actionId}/invokeAction:
    post:
      tags:
        - /secretManagers
      summary: Invokes an action for secret manager plugin instance.
      description:
        "Invokes an action for secret manager plugin instance. A 404 status\
        \ code is returned for nonexistent IDs. If the action produces a download\
        \ file, the file will be returned directly in the response. Otherwise an ActionResult\
        \ will be returned."
      operationId: invokeSecretManagersActionWithOptions
      parameters:
        - name: id
          in: path
          description: ID of a secret manager plugin instance.
          required: true
          schema:
            type: string
        - name: actionId
          in: path
          description: ID of the action.
          required: true
          schema:
            type: string
      requestBody:
        description: Action options for action invoked.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActionOptions"
        required: false
      responses:
        "200":
          description: Secret Manager plugin action invoked.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResult"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /secretManagers:
    get:
      tags:
        - /secretManagers
      summary: Get a list of secret manager plugin instances.
      operationId: getSecretManagers
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretManagers"
    post:
      tags:
        - /secretManagers
      summary: Create a secret manager plugin instance.
      operationId: createSecretManager
      requestBody:
        description: Configuration for a secret manager plugin instance.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecretManager"
        required: true
      responses:
        "201":
          description: Secret Manager plugin created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretManager"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /secretManagers/descriptors:
    get:
      tags:
        - /secretManagers
      summary: Get a list of available secret manager plugin descriptors.
      operationId: getSecretManagerPluginDescriptors
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretManagerDescriptors"
  /secretManagers/descriptors/{id}:
    get:
      tags:
        - /secretManagers
      summary: Get a secret manager plugin descriptor.
      operationId: getSecretManagerPluginDescriptor
      parameters:
        - name: id
          in: path
          description: ID of secret manager plugin descriptor.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretManagerDescriptor"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /secretManagers/{id}:
    get:
      tags:
        - /secretManagers
      summary: Get a specific secret manager plugin instance.
      operationId: getSecretManager
      parameters:
        - name: id
          in: path
          description: ID of a secret manager plugin instance.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretManager"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /secretManagers
      summary: Update a secret manager plugin instance.
      operationId: updateSecretManager
      parameters:
        - name: id
          in: path
          description: ID of a secret manager plugin instance.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for a secret manager plugin instance.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecretManager"
        required: true
      responses:
        "200":
          description: Secret Manager plugin updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretManager"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /secretManagers
      summary: Delete a secret manager plugin instance.
      operationId: deleteSecretManager
      parameters:
        - name: id
          in: path
          description: ID of a secret manager plugin instance.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Secret Manager plugin deleted.
          content: {}
        "403":
          description:
            "The operation is not permitted, based on the current configuration\
            \ of the server."
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /secretManagers/{id}/actions/{actionId}:
    get:
      tags:
        - /secretManagers
      summary: Get a secret manager plugin instance's action by ID.
      operationId: getSecretManagersAction
      parameters:
        - name: id
          in: path
          description: ID of a secret manager plugin instance.
          required: true
          schema:
            type: string
        - name: actionId
          in: path
          description: ID of the action.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Action"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /secretManagers/{id}/actions:
    get:
      tags:
        - /secretManagers
      summary: Get a list of actions for a secret manager plugin instance.
      operationId: getSecretManagersActions
      parameters:
        - name: id
          in: path
          description: ID of a secret manager plugin instance.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Actions"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /serverSettings:
    get:
      tags:
        - /serverSettings
      summary: Gets the server settings
      operationId: getServerSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerSettings"
    put:
      tags:
        - /serverSettings
      summary: Update the server settings.
      operationId: updateServerSettings
      requestBody:
        description: Configuration for server settings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServerSettings"
        required: true
      responses:
        "200":
          description: Server Settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /serverSettings/notifications:
    get:
      tags:
        - /serverSettings
      summary: Gets the notification settings
      operationId: getNotificationSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationSettings"
    put:
      tags:
        - /serverSettings
      summary: Update the notification settings.
      operationId: updateNotificationSettings
      requestBody:
        description: Notification settings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationSettings"
        required: true
      responses:
        "200":
          description: Notifications updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /serverSettings/emailServer:
    get:
      tags:
        - /serverSettings
      summary: (Deprecated) Gets the email server settings
      operationId: getEmailServerSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailServerSettings"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      deprecated: true
    put:
      tags:
        - /serverSettings
      summary: (Deprecated) Update the email server settings
      description:
        "(Deprecated) If the validationEmail is provided, an email will\
        \ be sent to the validationEmail using the provided email server settings.\
        \  The settings will be saved if the test email is successfully sent.<br>"
      operationId: updateEmailServerSettings
      parameters:
        - name: validationEmail
          in: query
          description: The email address used to validate the email server settings.
          schema:
            type: string
        - name: validateOnly
          in: query
          description:
            Only validation will be performed.  Email server settings will
            not be saved.
          schema:
            type: boolean
      requestBody:
        description: Configuration for email server settings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailServerSettings"
        required: true
      responses:
        "200":
          description: Email Server updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailServerSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      deprecated: true
      x-codegen-request-body-name: body
  /serverSettings/captchaSettings:
    get:
      tags:
        - /serverSettings
      summary: (Deprecated) Gets the CAPTCHA settings.
      operationId: getCaptchaSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CaptchaSettings"
      deprecated: true
    put:
      tags:
        - /serverSettings
      summary: (Deprecated) Update the CAPTCHA settings.
      operationId: updateCaptchaSettings
      requestBody:
        description: CAPTCHA settings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CaptchaSettings"
        required: true
      responses:
        "200":
          description: Captcha settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CaptchaSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      deprecated: true
      x-codegen-request-body-name: body
  /serverSettings/outboundProvisioning:
    get:
      tags:
        - /serverSettings
      summary: Get database used for outbound provisioning
      description:
        Get the settings for database used internally to facilitate outbound
        provisioning to service providers.
      operationId: getOutBoundProvisioningSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OutboundProvisionDatabase"
    put:
      tags:
        - /serverSettings
      summary: Update database used for outbound provisioning
      description:
        Update the settings for database used internally to facilitate
        outbound provisioning to service providers.
      operationId: updateOutBoundProvisioningSettings
      requestBody:
        description: The Outbound Provision Database settings.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/OutboundProvisionDatabase"
        required: true
      responses:
        "200":
          description: Database updated for outbound provisioning.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OutboundProvisionDatabase"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /serverSettings/systemKeys:
    get:
      tags:
        - /serverSettings
      summary: Get the system keys.
      description: "For each key, only encryptedKeyData and not keyData will be returned"
      operationId: getSystemKeys
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemKeys"
    put:
      tags:
        - /serverSettings
      summary: Update the system keys.
      description: "For each key, either encryptedKeyData or keyData must be provided."
      operationId: updateSystemKeys
      requestBody:
        description: System keys.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/SystemKeys"
        required: true
      responses:
        "200":
          description: System keys updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemKeys"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /serverSettings/systemKeys/rotate:
    post:
      tags:
        - /serverSettings
      summary: Rotate the system keys.
      description:
        "Upon rotation, previous key will be replaced by the current key,\
        \ the current key will be replaced by the pending key, while the newly generated\
        \ key replaces the pending key. Periodic rotation can ensure optimal security\
        \ of your environment."
      operationId: rotateSystemKeys
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemKeys"
        "201":
          description: System Keys rotated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemKeys"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /serverSettings/wsTrustStsSettings/issuerCertificates:
    get:
      tags:
        - /serverSettings
      summary: Get the list of certificates for WS-Trust STS Settings.
      operationId: getCerts
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssuerCerts"
    post:
      tags:
        - /serverSettings
      summary: Import a new certificate.
      operationId: importCertificate
      requestBody:
        description: File data to import.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/X509File"
        required: true
      responses:
        "201":
          description: New certificate has been imported to WS-Trust STS Settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssuerCert"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      x-codegen-request-body-name: body
  /serverSettings/wsTrustStsSettings/issuerCertificates/{id}:
    get:
      tags:
        - /serverSettings
      summary: Retrieve details of a certificate.
      operationId: getCert
      parameters:
        - name: id
          in: path
          description: ID of the certificate to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssuerCert"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
    delete:
      tags:
        - /serverSettings
      summary: Delete a certificate from WS-Trust STS Settings.
      description:
        "If the request is successful, the response body is empty. If the\
        \ request fails, an ApiResult is returned with details of the error."
      operationId: deleteCertificate
      parameters:
        - name: id
          in: path
          description: ID of the certificate to delete
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Certificate has been deleted from WS-Trust STS Settings
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Resource is in use and cannot be deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /serverSettings/generalSettings:
    get:
      tags:
        - /serverSettings
      summary: Gets the general settings.
      operationId: getGeneralSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralSettings"
    put:
      tags:
        - /serverSettings
      summary: Update general settings.
      operationId: updateGeneralSettings
      requestBody:
        description: Configuration for general settings.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/GeneralSettings"
        required: true
      responses:
        "200":
          description: General settings have been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /serverSettings/logSettings:
    get:
      tags:
        - /serverSettings
      summary: Gets the log settings.
      operationId: getLogSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogSettings"
    put:
      tags:
        - /serverSettings
      summary: Update log settings.
      operationId: updateLogSettings
      requestBody:
        description: Configuration for log settings.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/LogSettings"
        required: true
      responses:
        "200":
          description: Log settings have been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /serverSettings/wsTrustStsSettings:
    get:
      tags:
        - /serverSettings
      summary: Get the current WS-Trust STS Settings.
      operationId: getWsTrustStsSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WsTrustStsSettings"
    put:
      tags:
        - /serverSettings
      summary: Update WS-Trust STS Settings.
      operationId: updateWsTrustStsSettings
      requestBody:
        description: Configuration for WS-Trust STS Settings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WsTrustStsSettings"
        required: true
      responses:
        "200":
          description: Server Settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WsTrustStsSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /serviceAuthentication:
    get:
      tags:
        - /serviceAuthentication
      summary: Get the service authentication settings.
      operationId: getServiceAuthentication
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceAuthentication"
    put:
      tags:
        - /serviceAuthentication
      summary: Update the service authentication settings.
      description:
        "Manage availability and credentials to services responsible for\
        \ federation protocol handling, monitoring and administration."
      operationId: updateServiceAuthentication
      requestBody:
        description: Service authentication settings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceAuthentication"
        required: true
      responses:
        "200":
          description: Service authentication settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceAuthentication"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /keyPairs/signing/{id}/rotationSettings:
    get:
      tags:
        - /keyPairs/signing
      summary: Retrieve details of rotation settings for a key pair.
      operationId: getRotationSettings
      parameters:
        - name: id
          in: path
          description: ID of the key pair to retrieve its rotation settings.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyPairRotationSettings"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /keyPairs/signing
      summary: Add rotation settings to a key pair
      operationId: updateRotationSettings
      parameters:
        - name: id
          in: path
          description: ID of the key pair.
          required: true
          schema:
            type: string
      requestBody:
        description: The key rotation settings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeyPairRotationSettings"
        required: true
      responses:
        "200":
          description: Key Pair updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyPairRotationSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /keyPairs/signing
      summary: Delete rotation settings for a signing key pair.
      description:
        "If the request is successful, the response body is empty. If the\
        \ request fails, an ApiResult is returned with details of the error."
      operationId: deleteKeyPairRotationSettings
      parameters:
        - name: id
          in: path
          description: ID of the key pair's rotation settings to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Rotation Settings deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /keyPairs/signing:
    get:
      tags:
        - /keyPairs/signing
      summary: Get list of key pairs.
      operationId: getSigningKeyPairs
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyPairViews"
  /keyPairs/signing/generate:
    post:
      tags:
        - /keyPairs/signing
      summary: Generate a new key pair.
      operationId: createSigningKeyPair
      requestBody:
        description: Settings for the new key pair.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewKeyPairSettings"
        required: true
      responses:
        "201":
          description: Key Pair created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyPairView"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /keyPairs/signing/{id}:
    get:
      tags:
        - /keyPairs/signing
      summary: Retrieve details of a key pair.
      operationId: getSigningKeyPair
      parameters:
        - name: id
          in: path
          description: ID of the key pair to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyPairView"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    delete:
      tags:
        - /keyPairs/signing
      summary: Delete a key pair.
      description:
        "If the request is successful, the response body is empty. If the\
        \ request fails, an ApiResult is returned with details of the error."
      operationId: deleteSigningKeyPair
      parameters:
        - name: id
          in: path
          description: ID of the key pair to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Key Pair deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Resource is in use and cannot be deleted.
          content: {}
  /keyPairs/signing/{id}/csr:
    get:
      tags:
        - /keyPairs/signing
      summary: Generate a new certificate signing request (CSR) for this key pair.
      description:
        "For a successful request, the PEM-encoded CSR file is directly\
        \ returned as text and the response content type is application/pkcs10. If\
        \ an error occurs, an ApiResult is returned in JSON format, and the content\
        \ type is application/json."
      operationId: exportCsr
      parameters:
        - name: id
          in: path
          description: ID of the key pair.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: string
    post:
      tags:
        - /keyPairs/signing
      summary: Import a CSR response for this key pair.
      operationId: importCsrResponse
      parameters:
        - name: id
          in: path
          description: ID of the key pair.
          required: true
          schema:
            type: string
      requestBody:
        description: The CSR response.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CSRResponse"
        required: true
      responses:
        "200":
          description: CSR Response imported.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyPairView"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /keyPairs/signing/{id}/pkcs12:
    post:
      tags:
        - /keyPairs/signing
      summary: Download the key pair in PKCS12 format.
      description:
        "For a successful request, the PKCS12 file is directly returned\
        \ in binary format and the response content type is application/x-pkcs12.\
        \ If an error occurs, an ApiResult is returned in JSON format and the content\
        \ type is application/json. Due to the sensitivity of the password parameter,\
        \ the method for this operation is POST rather than GET."
      operationId: exportPKCS12File
      parameters:
        - name: id
          in: path
          description: ID of the key pair.
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters for the export request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeyPairExportSettings"
        required: true
      responses:
        "200":
          description: Key Pair downloaded.
          content:
            application/json:
              schema:
                type: string
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "403":
          description:
            "The operation is not permitted, based on the current configuration\
            \ of the server."
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /keyPairs/signing/{id}/pem:
    post:
      tags:
        - /keyPairs/signing
      summary: Download the key pair in PEM format.
      description:
        "For a successful request, the PEM file is directly returned in\
        \ PEM format and the response content type is application/x-pem-file. In the\
        \ exported PEM file, the private key is protected with PBES2 encryption and\
        \ AES. If an error occurs, an ApiResult is returned in JSON format and the\
        \ content type is application/json. Due to the sensitivity of the password\
        \ parameter, the method for this operation is POST rather than GET."
      operationId: exportPEMFile
      parameters:
        - name: id
          in: path
          description: ID of the key pair.
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters for the export request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeyPairExportSettings"
        required: true
      responses:
        "200":
          description: Key Pair downloaded.
          content:
            application/json:
              schema:
                type: string
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "403":
          description:
            "The operation is not permitted, based on the current configuration\
            \ of the server."
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /keyPairs/signing/{id}/certificate:
    get:
      tags:
        - /keyPairs/signing
      summary: Download the certificate from a given key pair.
      description:
        "For a successful request, the PEM-encoded certificate file is\
        \ directly returned as text and the response content type is application/x-x509-ca-cert.\
        \ If an error occurs, an ApiResult is returned in JSON format and the content\
        \ type is application/json."
      operationId: exportCertificateFile
      parameters:
        - name: id
          in: path
          description: ID of the key pair.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /keyPairs/signing/import:
    post:
      tags:
        - /keyPairs/signing
      summary: Import a new key pair.
      operationId: importSigningKeyPair
      requestBody:
        description: File to import.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeyPairFile"
        required: true
      responses:
        "201":
          description: Key Pair imported.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyPairView"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "403":
          description:
            "The operation is not permitted, based on the current configuration\
            \ of the server."
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /sp/adapters/{id}/actions/{actionId}/invokeAction:
    post:
      tags:
        - /sp/adapters
      summary: Invokes an action for an SP adapter instance.
      description:
        "Invokes an action for an SP adapter instance. A 404 status code\
        \ is returned for nonexistent IDs. If the action produces a download file,\
        \ the file will be returned directly in the response. Otherwise an ActionResult\
        \ will be returned."
      operationId: invokeSpAdapterActionWithOptions
      parameters:
        - name: id
          in: path
          description: ID of the SP adapter instance to which this action belongs to.
          required: true
          schema:
            type: string
        - name: actionId
          in: path
          description: ID of the action.
          required: true
          schema:
            type: string
      requestBody:
        description: Action options for action invoked.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActionOptions"
        required: false
      responses:
        "200":
          description: Action invoked on adapter.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResult"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /sp/adapters/descriptors:
    get:
      tags:
        - /sp/adapters
      summary: Get the list of available SP adapter descriptors.
      operationId: getSpAdapterDescriptors
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpAdapterDescriptors"
  /sp/adapters/descriptors/{id}:
    get:
      tags:
        - /sp/adapters
      summary: Get the description of an SP adapter plugin by ID.
      description:
        Get the description of an SP adapter plugin by ID. A 404 status
        code is returned for nonexistent IDs.
      operationId: getSpAdapterDescriptorsById
      parameters:
        - name: id
          in: path
          description: ID of SP adapter descriptor to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpAdapterDescriptor"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /sp/adapters:
    get:
      tags:
        - /sp/adapters
      summary: Get the list of configured SP adapter instances.
      operationId: getSpAdapters
      parameters:
        - name: page
          in: query
          description: Page number to retrieve.
          schema:
            type: integer
            format: int32
        - name: numberPerPage
          in: query
          description: Number of adapters per page.
          schema:
            type: integer
            format: int32
        - name: filter
          in: query
          description:
            Filter criteria limits the SP adapters that are returned to only
            those that match it. The filter criteria is compared to the SP adapter instance
            name and ID fields. The comparison is a case-insensitive partial match.
            No additional pattern based matching is supported.
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpAdapters"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    post:
      tags:
        - /sp/adapters
      summary: Create a new SP adapter instance.
      description:
        "Create a new SP adapter instance. If the SP adapter is not properly\
        \ configured, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: createSpAdapter
      requestBody:
        description: Configuration for the SP adapter instance.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/SpAdapter"
        required: true
      responses:
        "201":
          description: Adapter created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpAdapter"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /sp/adapters/{id}:
    get:
      tags:
        - /sp/adapters
      summary: Find an SP adapter instance by ID.
      description:
        Get the configured SP adapter instance with the specified ID. A
        404 status code is returned for nonexistent IDs.
      operationId: getSpAdapter
      parameters:
        - name: id
          in: path
          description: ID of SP adapter instance.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpAdapter"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /sp/adapters
      summary: Update an SP adapter instance.
      description:
        "Update an SP adapter instance.If the SP adapter is not properly\
        \ configured, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: updateSpAdapter
      parameters:
        - name: id
          in: path
          description: ID of SP adapter instance.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for the SP adapter instance.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/SpAdapter"
        required: true
      responses:
        "200":
          description: Adapter updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpAdapter"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /sp/adapters
      summary: Delete an SP adapter instance.
      description:
        "Delete an SP adapter instance with the specified ID. A 404 status\
        \ code is returned for nonexistent IDs. Note: Only adapters not in use can\
        \ be deleted. If the request succeeds, the response body is empty. If the\
        \ request fails, an ApiResult is returned with details of the error."
      operationId: deleteSpAdapter
      parameters:
        - name: id
          in: path
          description: ID of SP adapter instance.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Adapter deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Resource is in use and cannot be deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /sp/adapters/urlMappings:
    get:
      tags:
        - /sp/adapters
      summary: (Deprecated) List the mappings between URLs and adapter instances.
      operationId: getSpAdapterUrlMappings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpAdapterUrlMappings"
      deprecated: true
    put:
      tags:
        - /sp/adapters
      summary: (Deprecated) Update the mappings between URLs and adapters instances.
      operationId: updateSpAdapterUrlMappings
      requestBody:
        description: The SP adapter URL mappings to update.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/SpAdapterUrlMappings"
        required: true
      responses:
        "200":
          description: Mapping updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpAdapterUrlMappings"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      deprecated: true
      x-codegen-request-body-name: body
  /sp/adapters/{id}/actions/{actionId}:
    get:
      tags:
        - /sp/adapters
      summary: Find an SP adapter instance's action by ID.
      description:
        Find an SP adapter instance's action by ID. A 404 status code is
        returned for nonexistent IDs.
      operationId: getSpAdaptersActionById
      parameters:
        - name: id
          in: path
          description: ID of the SP adapter instance to which this action belongs to.
          required: true
          schema:
            type: string
        - name: actionId
          in: path
          description: ID of the action.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Action"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /sp/adapters/{id}/actions:
    get:
      tags:
        - /sp/adapters
      summary: List the actions for an SP adapter instance.
      description:
        List the actions for an SP adapter instance. A 404 status code
        is returned for nonexistent IDs.
      operationId: getSpAdaptersActions
      parameters:
        - name: id
          in: path
          description: ID of the SP adapter instance to which this action belongs to.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Actions"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /idp/spConnections/{id}/credentials/signingSettings:
    get:
      tags:
        - /idp/spConnections
      summary: Get the SP connection's signature settings.
      operationId: getSpSigningSettings
      parameters:
        - name: id
          in: path
          description: ID of the SP Connection.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SigningSettings"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /idp/spConnections
      summary: Update the SP connection's signature settings.
      operationId: updateSpSigningSettings
      parameters:
        - name: id
          in: path
          description: ID of the SP Connection to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Signature settings.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/SigningSettings"
        required: true
      responses:
        "200":
          description: Connection updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SigningSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /idp/spConnections/{id}/credentials/certs:
    get:
      tags:
        - /idp/spConnections
      summary: Get the SP connection's certificates.
      operationId: getSpConnectionCerts
      parameters:
        - name: id
          in: path
          description: ID of the SP Connection.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionCerts"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /idp/spConnections
      summary: Update the SP connection's certificates.
      operationId: updateSpConnectionCerts
      parameters:
        - name: id
          in: path
          description: ID of the SP Connection to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for a verification certificates.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionCerts"
        required: true
      responses:
        "200":
          description: Connection updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionCerts"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    post:
      tags:
        - /idp/spConnections
      summary: Add a new SP connection certificate.
      description:
        "If the certificate's activeVerificationCert flag is set to true,\
        \ it will become the connection's primary verification certificate."
      operationId: addSpConnectionCert
      parameters:
        - name: id
          in: path
          description: ID of the SP Connection to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for a verification certificate.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionCert"
        required: true
      responses:
        "201":
          description: Connection Certificate added.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionCert"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /idp/spConnections/{id}/credentials/decryptionKeys:
    get:
      tags:
        - /idp/spConnections
      summary: Get the decryption keys of an SP connection.
      operationId: getDecryptionKeys
      parameters:
        - name: id
          in: path
          description: ID of the SP Connection to update.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DecryptionKeys"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /idp/spConnections
      summary: Updating the SP connection's decryption keys.
      operationId: updateDecryptionKeys
      parameters:
        - name: id
          in: path
          description: ID of the SP Connection to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for decryption keys.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DecryptionKeys"
        required: true
      responses:
        "200":
          description: Connection updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DecryptionKeys"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /idp/spConnections/{id}:
    get:
      tags:
        - /idp/spConnections
      summary: Find SP connection by ID.
      description:
        Get an SP connection with the specified ID. A 404 status code is
        returned for nonexistent IDs.
      operationId: getSpConnection
      parameters:
        - name: id
          in: path
          description: ID of the SP Connection to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpConnection"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /idp/spConnections
      summary: Update an SP connection.
      description:
        "Update an SP connection with the matching ID. If the SP connection\
        \ is not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected. Note: A 404 status code is\
        \ returned for nonexistent IDs."
      operationId: updateSpConnection
      parameters:
        - name: id
          in: path
          description: ID of SP Connection to update.
          required: true
          schema:
            type: string
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for updated connection.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SpConnection"
        required: true
      responses:
        "200":
          description: Connection updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpConnection"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /idp/spConnections
      summary: Delete an SP connection.
      description:
        "Delete an SP connection with the specified ID. A 404 status code\
        \ is returned for nonexistent IDs. Note: Only inactive connections can be\
        \ deleted. If the request succeeds, the response body is empty. If the request\
        \ fails, an ApiResult is returned with details of the error."
      operationId: deleteSpConnection
      parameters:
        - name: id
          in: path
          description: ID of SP Connection to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Connection deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Resource is in use and cannot be deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /idp/spConnections:
    get:
      tags:
        - /idp/spConnections
      summary: Get list of SP connections.
      description:
        "Get a list of all the WS-Fed, WS-Trust, SAML1.0, SAML1.1 and SAML\
        \ 2.0 SP connections."
      operationId: getSpConnections
      parameters:
        - name: entityId
          in: query
          description: Entity ID of the connection to fetch. (case-sensitive)
          schema:
            type: string
        - name: page
          in: query
          description: Page number to retrieve.
          schema:
            type: integer
            format: int32
        - name: numberPerPage
          in: query
          description: Number of connections per page.
          schema:
            type: integer
            format: int32
        - name: filter
          in: query
          description:
            Filter criteria limits the SP connections that are returned to
            only those that match it. The filter criteria is compared to the SP connection
            name and partner entity ID fields. The comparison is a case-insensitive
            partial match. No additional pattern based matching is supported.
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpConnections"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    post:
      tags:
        - /idp/spConnections
      summary: Create a new SP connection.
      description:
        "Create a new SP connection. If the SP connection is not properly\
        \ configured, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: createSpConnection
      parameters:
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for new connection.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SpConnection"
        required: true
      responses:
        "201":
          description: Connection created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpConnection"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /sp/defaultUrls:
    get:
      tags:
        - /sp/defaultUrls
      summary:
        Gets the SP Default URLs. These are Values that affect the user's experience
        when executing SP-initiated SSO operations.
      operationId: getSpDefaultUrls
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpDefaultUrls"
    put:
      tags:
        - /sp/defaultUrls
      summary:
        Update the SP Default URLs. Enter values that affect the user's experience
        when executing SP-initiated SSO operations.
      operationId: updateSpDefaultUrls
      requestBody:
        description: Configuration for the IDP Default URL settings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SpDefaultUrls"
        required: true
      responses:
        "200":
          description: Default URL updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpDefaultUrls"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /sp/targetUrlMappings:
    get:
      tags:
        - /sp/targetUrlMappings
      summary: List the mappings between URLs and adapter or connection instances.
      operationId: getSpUrlMappings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpUrlMappings"
    put:
      tags:
        - /sp/targetUrlMappings
      summary: Update the mappings between URLs and adapters or connections instances.
      operationId: updateSpUrlMappings
      requestBody:
        description: The SP adapter URL mappings to update.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/SpUrlMappings"
        required: true
      responses:
        "200":
          description: Mapping updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpUrlMappings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /keyPairs/sslClient:
    get:
      tags:
        - /keyPairs/sslClient
      summary: Get list of key pairs.
      operationId: getSslClientKeyPairs
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyPairViews"
  /keyPairs/sslClient/generate:
    post:
      tags:
        - /keyPairs/sslClient
      summary: Generate a new key pair.
      operationId: createSslClientKeyPair
      requestBody:
        description: Settings for the new key pair.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewKeyPairSettings"
        required: true
      responses:
        "201":
          description: Key Pair created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyPairView"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /keyPairs/sslClient/{id}:
    get:
      tags:
        - /keyPairs/sslClient
      summary: Retrieve details of a key pair.
      operationId: getSslClientKeyPair
      parameters:
        - name: id
          in: path
          description: ID of the key pair to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyPairView"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    delete:
      tags:
        - /keyPairs/sslClient
      summary: Delete a key pair.
      description:
        "If the request is successful, the response body is empty. If the\
        \ request fails, an ApiResult is returned with details of the error."
      operationId: deleteSslClientKeyPair
      parameters:
        - name: id
          in: path
          description: ID of the key pair to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Key Pair deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Resource is in use and cannot be deleted.
          content: {}
  /keyPairs/sslClient/{id}/csr:
    get:
      tags:
        - /keyPairs/sslClient
      summary: Generate a new certificate signing request (CSR) for this key pair.
      description:
        "For a successful request, the PEM-encoded CSR file is directly\
        \ returned as text and the response content type is application/pkcs10. If\
        \ an error occurs, an ApiResult is returned in JSON format, and the content\
        \ type is application/json."
      operationId: exportSslClientCsr
      parameters:
        - name: id
          in: path
          description: ID of the key pair.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: string
    post:
      tags:
        - /keyPairs/sslClient
      summary: Import a CSR response for this key pair.
      operationId: importSslClientCsrResponse
      parameters:
        - name: id
          in: path
          description: ID of the key pair.
          required: true
          schema:
            type: string
      requestBody:
        description: The CSR response.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CSRResponse"
        required: true
      responses:
        "200":
          description: CSR Response imported.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyPairView"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /keyPairs/sslClient/{id}/pkcs12:
    post:
      tags:
        - /keyPairs/sslClient
      summary: Download the key pair in PKCS12 format.
      description:
        "For a successful request, the PKCS12 file is directly returned\
        \ in binary format and the response content type is application/x-pkcs12.\
        \ If an error occurs, an ApiResult is returned in JSON format and the content\
        \ type is application/json. Due to the sensitivity of the password parameter,\
        \ the method for this operation is POST rather than GET."
      operationId: exportSslClientPKCS12File
      parameters:
        - name: id
          in: path
          description: ID of the key pair.
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters for the export request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeyPairExportSettings"
        required: true
      responses:
        "200":
          description: Key Pair downloaded.
          content:
            application/json:
              schema:
                type: string
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "403":
          description:
            "The operation is not permitted, based on the current configuration\
            \ of the server."
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /keyPairs/sslClient/{id}/pem:
    post:
      tags:
        - /keyPairs/sslClient
      summary: Download the key pair in PEM format.
      description:
        "For a successful request, the PEM file is directly returned in\
        \ PEM format and the response content type is application/x-pem-file. In the\
        \ exported PEM file, the private key is protected with PBES2 encryption and\
        \ AES. If an error occurs, an ApiResult is returned in JSON format and the\
        \ content type is application/json. Due to the sensitivity of the password\
        \ parameter, the method for this operation is POST rather than GET."
      operationId: exportSslClientPEMFile
      parameters:
        - name: id
          in: path
          description: ID of the key pair.
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters for the export request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeyPairExportSettings"
        required: true
      responses:
        "200":
          description: Key Pair downloaded.
          content:
            application/json:
              schema:
                type: string
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "403":
          description:
            "The operation is not permitted, based on the current configuration\
            \ of the server."
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /keyPairs/sslClient/{id}/certificate:
    get:
      tags:
        - /keyPairs/sslClient
      summary: Download the certificate from a given key pair.
      description:
        "For a successful request, the PEM-encoded certificate file is\
        \ directly returned as text and the response content type is application/x-x509-ca-cert.\
        \ If an error occurs, an ApiResult is returned in JSON format and the content\
        \ type is application/json."
      operationId: exportSslClientCertificateFile
      parameters:
        - name: id
          in: path
          description: ID of the key pair.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /keyPairs/sslClient/import:
    post:
      tags:
        - /keyPairs/sslClient
      summary: Import a new key pair.
      operationId: importSslClientKeyPair
      requestBody:
        description: File to import.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeyPairFile"
        required: true
      responses:
        "201":
          description: Key Pair imported.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyPairView"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "403":
          description:
            "The operation is not permitted, based on the current configuration\
            \ of the server."
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /keyPairs/sslServer/settings:
    get:
      tags:
        - /keyPairs/sslServer
      summary: Get the SSL Server Certificate Settings.
      operationId: getSslServerSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SslServerSettings"
    put:
      tags:
        - /keyPairs/sslServer
      summary: Update the SSL Server Certificate Settings.
      operationId: updateSslServerSettings
      requestBody:
        description: Configuration for activation of SSL server certificates.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/SslServerSettings"
        required: true
      responses:
        "200":
          description: SSL Certificate Settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SslServerSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /keyPairs/sslServer:
    get:
      tags:
        - /keyPairs/sslServer
      summary: Get list of key pairs.
      operationId: getSslServerKeyPairs
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyPairViews"
  /keyPairs/sslServer/generate:
    post:
      tags:
        - /keyPairs/sslServer
      summary: Generate a new key pair.
      operationId: createSslServerKeyPair
      requestBody:
        description: Settings for the new key pair.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewKeyPairSettings"
        required: true
      responses:
        "201":
          description: Key Pair created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyPairView"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /keyPairs/sslServer/{id}:
    get:
      tags:
        - /keyPairs/sslServer
      summary: Retrieve details of a key pair.
      operationId: getSslServerKeyPair
      parameters:
        - name: id
          in: path
          description: ID of the key pair to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyPairView"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    delete:
      tags:
        - /keyPairs/sslServer
      summary: Delete a key pair.
      description:
        "If the request is successful, the response body is empty. If the\
        \ request fails, an ApiResult is returned with details of the error."
      operationId: deleteSslServerKeyPair
      parameters:
        - name: id
          in: path
          description: ID of the key pair to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Key Pair deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Resource is in use and cannot be deleted.
          content: {}
  /keyPairs/sslServer/{id}/csr:
    get:
      tags:
        - /keyPairs/sslServer
      summary: Generate a new certificate signing request (CSR) for this key pair.
      description:
        "For a successful request, the PEM-encoded CSR file is directly\
        \ returned as text and the response content type is application/pkcs10. If\
        \ an error occurs, an ApiResult is returned in JSON format, and the content\
        \ type is application/json."
      operationId: exportSslServerCsr
      parameters:
        - name: id
          in: path
          description: ID of the key pair.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: string
    post:
      tags:
        - /keyPairs/sslServer
      summary: Import a CSR response for this key pair.
      operationId: importSslServerCsrResponse
      parameters:
        - name: id
          in: path
          description: ID of the key pair.
          required: true
          schema:
            type: string
      requestBody:
        description: The CSR response.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CSRResponse"
        required: true
      responses:
        "200":
          description: CSR Response imported.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyPairView"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /keyPairs/sslServer/{id}/pkcs12:
    post:
      tags:
        - /keyPairs/sslServer
      summary: Download the key pair in PKCS12 format.
      description:
        "For a successful request, the PKCS12 file is directly returned\
        \ in binary format and the response content type is application/x-pkcs12.\
        \ If an error occurs, an ApiResult is returned in JSON format and the content\
        \ type is application/json. Due to the sensitivity of the password parameter,\
        \ the method for this operation is POST rather than GET."
      operationId: exportSslServerPKCS12File
      parameters:
        - name: id
          in: path
          description: ID of the key pair.
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters for the export request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeyPairExportSettings"
        required: true
      responses:
        "200":
          description: Key Pair downloaded.
          content:
            application/json:
              schema:
                type: string
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "403":
          description:
            "The operation is not permitted, based on the current configuration\
            \ of the server."
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /keyPairs/sslServer/{id}/pem:
    post:
      tags:
        - /keyPairs/sslServer
      summary: Download the key pair in PEM format.
      description:
        "For a successful request, the PEM file is directly returned in\
        \ PEM format and the response content type is application/x-pem-file. In the\
        \ exported PEM file, the private key is protected with PBES2 encryption and\
        \ AES. If an error occurs, an ApiResult is returned in JSON format and the\
        \ content type is application/json. Due to the sensitivity of the password\
        \ parameter, the method for this operation is POST rather than GET."
      operationId: exportSslServerPEMFile
      parameters:
        - name: id
          in: path
          description: ID of the key pair.
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters for the export request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeyPairExportSettings"
        required: true
      responses:
        "200":
          description: Key Pair downloaded.
          content:
            application/json:
              schema:
                type: string
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "403":
          description:
            "The operation is not permitted, based on the current configuration\
            \ of the server."
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /keyPairs/sslServer/{id}/certificate:
    get:
      tags:
        - /keyPairs/sslServer
      summary: Download the certificate from a given key pair.
      description:
        "For a successful request, the PEM-encoded certificate file is\
        \ directly returned as text and the response content type is application/x-x509-ca-cert.\
        \ If an error occurs, an ApiResult is returned in JSON format and the content\
        \ type is application/json."
      operationId: exportSslServerCertificateFile
      parameters:
        - name: id
          in: path
          description: ID of the key pair.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /keyPairs/sslServer/import:
    post:
      tags:
        - /keyPairs/sslServer
      summary: Import a new key pair.
      operationId: importSslServerKeyPair
      requestBody:
        description: File to import.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeyPairFile"
        required: true
      responses:
        "201":
          description: Key Pair imported.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyPairView"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "403":
          description:
            "The operation is not permitted, based on the current configuration\
            \ of the server."
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /idp/stsRequestParametersContracts:
    get:
      tags:
        - /idp/stsRequestParametersContracts
      summary: Get the list of STS Request Parameters Contracts.
      operationId: getStsRequestParamContracts
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StsRequestParametersContracts"
    post:
      tags:
        - /idp/stsRequestParametersContracts
      summary: Create a new STS Request Parameters Contract.
      operationId: createStsRequestParamContract
      requestBody:
        description: Details for the STS Request Parameters Contract.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StsRequestParametersContract"
        required: true
      responses:
        "201":
          description: STS Request Parameters Contract created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StsRequestParametersContract"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /idp/stsRequestParametersContracts/{id}:
    get:
      tags:
        - /idp/stsRequestParametersContracts
      summary: Get a STS Request Parameters Contract.
      operationId: getStsRequestParamContractById
      parameters:
        - name: id
          in: path
          description: ID of STS Request Parameters Contract to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StsRequestParametersContract"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /idp/stsRequestParametersContracts
      summary: Update a STS Request Parameters Contract.
      operationId: updateStsRequestParamContractById
      parameters:
        - name: id
          in: path
          description: ID of STS Request Parameters Contract to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Details for updated STS Request Parameters Contract.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/StsRequestParametersContract"
        required: true
      responses:
        "200":
          description: STS Request Parameters Contract updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StsRequestParametersContract"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /idp/stsRequestParametersContracts
      summary: Delete a STS Request Parameters Contract.
      operationId: deleteStsRequestParamContractById
      parameters:
        - name: id
          in: path
          description: ID of STS Request Parameters Contract to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: STS Request Parameters Contract deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /sp/tokenGenerators/descriptors:
    get:
      tags:
        - /sp/tokenGenerators
      summary: Get the list of available token generators.
      operationId: getTokenGeneratorDescriptors
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenGeneratorDescriptors"
  /sp/tokenGenerators/descriptors/{id}:
    get:
      tags:
        - /sp/tokenGenerators
      summary: Get the description of a token generator plugin by ID.
      description:
        Get the description of a token generator plugin by ID. A 404 status
        code is returned for nonexistent IDs.
      operationId: getTokenGeneratorDescriptorsById
      parameters:
        - name: id
          in: path
          description: ID of a token generator descriptor to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenGeneratorDescriptor"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /sp/tokenGenerators:
    get:
      tags:
        - /sp/tokenGenerators
      summary: Get the list of token generator instances.
      operationId: getTokenGenerators
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenGenerators"
    post:
      tags:
        - /sp/tokenGenerators
      summary: Create a new token generator instance.
      description:
        "Create a new token generator instance. If the token generator\
        \ is not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected."
      operationId: createTokenGenerator
      requestBody:
        description: Configuration for a token generator instance.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/TokenGenerator"
        required: true
      responses:
        "201":
          description: Token generator created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenGenerator"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /sp/tokenGenerators/{id}:
    get:
      tags:
        - /sp/tokenGenerators
      summary: Find a token generator instance by ID.
      description:
        Get the configured token generator instance with the specified
        ID. A 404 status code is returned for nonexistent IDs.
      operationId: getTokenGenerator
      parameters:
        - name: id
          in: path
          description: ID of the token generator instance to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenGenerator"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /sp/tokenGenerators
      summary: Update a token generator instance.
      description:
        "Update a token generator instance. If the token generator is not\
        \ properly configured, a 422 status code is returned along with a list of\
        \ validation errors that must be corrected."
      operationId: updateTokenGenerator
      parameters:
        - name: id
          in: path
          description: ID of the token generator instance.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for the updated token generator instance.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/TokenGenerator"
        required: true
      responses:
        "200":
          description: Token generator updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenGenerator"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /sp/tokenGenerators
      summary: Delete a token generator instance.
      description:
        "Delete a token generator instance with the specified ID. A 404\
        \ status code is returned for nonexistent IDs. Note: Only token generators\
        \ not in use can be deleted. If the request succeeds, the response body is\
        \ empty. If the request fails, an ApiResult is returned with details of the\
        \ error."
      operationId: deleteTokenGenerator
      parameters:
        - name: id
          in: path
          description: ID of the token generator instance to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Token generator deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Resource is in use and cannot be deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /idp/tokenProcessors:
    get:
      tags:
        - /idp/tokenProcessors
      summary: Get the list of token processor instances.
      operationId: getTokenProcessors
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenProcessors"
    post:
      tags:
        - /idp/tokenProcessors
      summary: Create a new token processor instance.
      description:
        "Create a new token processor instance. If the token processor\
        \ is not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected."
      operationId: createTokenProcessor
      requestBody:
        description: Configuration for a token processor instance.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/TokenProcessor"
        required: true
      responses:
        "201":
          description: Token processor created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenProcessor"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /idp/tokenProcessors/descriptors:
    get:
      tags:
        - /idp/tokenProcessors
      summary: Get the list of available token processors.
      operationId: getTokenProcessorDescriptors
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenProcessorDescriptors"
  /idp/tokenProcessors/descriptors/{id}:
    get:
      tags:
        - /idp/tokenProcessors
      summary: Get the description of a token processor plugin by ID.
      description:
        Get the description of a token processor plugin by ID. A 404 status
        code is returned for nonexistent IDs.
      operationId: getTokenProcessorDescriptorsById
      parameters:
        - name: id
          in: path
          description: ID of a token processor descriptor to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenProcessorDescriptor"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /idp/tokenProcessors/{id}:
    get:
      tags:
        - /idp/tokenProcessors
      summary: Find a token processor instance by ID.
      description:
        Get the configured token processor instance with the specified
        ID. A 404 status code is returned for nonexistent IDs.
      operationId: getTokenProcessor
      parameters:
        - name: id
          in: path
          description: ID of the token processor instance to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenProcessor"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /idp/tokenProcessors
      summary: Update a token processor instance.
      description:
        "Update a token processor instance. If the token processor is not\
        \ properly configured, a 422 status code is returned along with a list of\
        \ validation errors that must be corrected."
      operationId: updateTokenProcessor
      parameters:
        - name: id
          in: path
          description: ID of token processor instance.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for updated token processor instance.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/TokenProcessor"
        required: true
      responses:
        "200":
          description: Token Processor updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenProcessor"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /idp/tokenProcessors
      summary: Delete a token processor instance.
      description:
        "Delete a token processor instance with the specified ID. A 404\
        \ status code is returned for nonexistent IDs. Note: Only token processors\
        \ not in use can be deleted. If the request succeeds, the response body is\
        \ empty. If the request fails, an ApiResult is returned with details of the\
        \ error."
      operationId: deleteTokenProcessor
      parameters:
        - name: id
          in: path
          description: ID of the token processor instance to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Token processor deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Resource is in use and cannot be deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /tokenProcessorToTokenGeneratorMappings:
    get:
      tags:
        - /tokenProcessorToTokenGeneratorMappings
      summary: Get the list of Token Processor to Token Generator Mappings.
      operationId: getTokenToTokenMappings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenToTokenMappings"
    post:
      tags:
        - /tokenProcessorToTokenGeneratorMappings
      summary: Create a new Token Processor to Token Generator Mapping.
      operationId: createTokenToTokenMapping
      parameters:
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Configuration for a new Token Processor to Token Generator Mapping.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenToTokenMapping"
        required: true
      responses:
        "201":
          description: Token Processor to Token Generator mapping created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenToTokenMapping"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /tokenProcessorToTokenGeneratorMappings/{id}:
    get:
      tags:
        - /tokenProcessorToTokenGeneratorMappings
      summary: Get a Token Processor to Token Generator Mapping.
      operationId: getTokenToTokenMappingById
      parameters:
        - name: id
          in: path
          description: ID of Token Processor to Token Generator Mapping to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenToTokenMapping"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /tokenProcessorToTokenGeneratorMappings
      summary: Update a Token Processor to Token Generator Mapping.
      operationId: updateTokenToTokenMappingById
      parameters:
        - name: id
          in: path
          description: ID of Token Processor to Token Generator Mapping to update.
          required: true
          schema:
            type: string
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description:
          Configuration for updated Token Processor to Token Generator
          Mapping.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/TokenToTokenMapping"
        required: true
      responses:
        "200":
          description: Token Processor to Token Generator mapping updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenToTokenMapping"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /tokenProcessorToTokenGeneratorMappings
      summary: Delete a Token Processor to Token Generator Mapping.
      operationId: deleteTokenToTokenMappingById
      parameters:
        - name: id
          in: path
          description: ID of Token Processor to Token Generator Mapping to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Token Processor to Token Generator mapping deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /certificates/ca/{id}/file:
    get:
      tags:
        - /certificates/ca
      summary: Download the certificate from a given trusted certificate authority.
      description:
        "For a successful request, the PEM-encoded certificate file is\
        \ directly returned as text and the response content type is application/x-x509-ca-cert.\
        \ If an error occurs, an ApiResult is returned in JSON format and the content\
        \ type is application/json."
      operationId: exportCaCertificateFile
      parameters:
        - name: id
          in: path
          description: ID of the trusted certificate authority.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /certificates/ca/import:
    post:
      tags:
        - /certificates/ca
      summary: Import a new trusted certificate authority.
      operationId: importTrustedCA
      requestBody:
        description: File data to import.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/X509File"
        required: true
      responses:
        "201":
          description: Certificate Authority imported.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertView"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /certificates/ca:
    get:
      tags:
        - /certificates/ca
      summary: Get list of trusted certificate authorities.
      operationId: getTrustedCAs
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertViews"
  /certificates/ca/{id}:
    get:
      tags:
        - /certificates/ca
      summary: Retrieve details of a trusted certificate authority.
      operationId: getTrustedCert
      parameters:
        - name: id
          in: path
          description: ID of the trusted certificate authority to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertView"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    delete:
      tags:
        - /certificates/ca
      summary: Delete a trusted certificate authority.
      description:
        "If the request is successful, the response body is empty. If the\
        \ request fails, an ApiResult is returned with details of the error."
      operationId: deleteTrustedCA
      parameters:
        - name: id
          in: path
          description: ID of the trusted certificate authority to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Certificate Authority deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /version:
    get:
      tags:
        - /version
      summary: Gets the server version.
      operationId: getVersion
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Version"
  /virtualHostNames:
    get:
      tags:
        - /virtualHostNames
      summary: Retrieve virtual host names settings.
      operationId: getVirtualHostNamesSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VirtualHostNameSettings"
    put:
      tags:
        - /virtualHostNames
      summary: Update virtual host names settings.
      operationId: updateVirtualHostNamesSettings
      requestBody:
        description: Virtual host names settings.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/VirtualHostNameSettings"
        required: true
      responses:
        "200":
          description: Virtual host names settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VirtualHostNameSettings"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/authorizationDetailTypes/{id}:
    get:
      tags:
        - /oauth/authorizationDetailTypes
      summary: Get an authorization detail type.
      description:
        Get the configured authorization detail type with the specified
        ID. A 404 status code is returned for nonexistent IDs.
      operationId: getAuthorizationDetailTypeById
      parameters:
        - name: id
          in: path
          description: ID of the authorization detail type.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationDetailType"
    put:
      tags:
        - /oauth/authorizationDetailTypes
      summary: Update an authorization detail type.
      description:
        "Update an authorization detail type with matching ID. If the type\
        \ is not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected. Note: A 404 status code is\
        \ returned for nonexistent IDs."
      operationId: updateAuthorizationDetailType
      parameters:
        - name: id
          in: path
          description: ID of the authorization detail type.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for updated authorization detail type.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorizationDetailType"
        required: true
      responses:
        "200":
          description: Authorization Detail Type updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationDetailType"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /oauth/authorizationDetailTypes
      summary: Delete an authorization detail type.
      description:
        "Delete an authorization detail type with the specified ID. A 404\
        \ status code is returned for nonexistent IDs. Note: If the request succeeds,\
        \ the response body is empty."
      operationId: deleteAuthorizationDetailType
      parameters:
        - name: id
          in: path
          description: ID of the authorization detail type.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Authorization Detail Type deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/authorizationDetailTypes:
    get:
      tags:
        - /oauth/authorizationDetailTypes
      summary: Get the list of authorization detail types.
      operationId: getAuthorizationDetailTypes
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationDetailTypes"
    post:
      tags:
        - /oauth/authorizationDetailTypes
      summary: Create a new authorization detail type.
      description:
        "Create an authorization detail type. If the authorization detail\
        \ type is not properly configured, a 422 status code is returned along with\
        \ a list of validation errors that must be corrected."
      operationId: addAuthorizationDetailType
      requestBody:
        description: Configuration for new authorization detail type.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorizationDetailType"
        required: true
      responses:
        "201":
          description: Authorization Detail Type created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationDetailType"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/issuers:
    get:
      tags:
        - /oauth/issuers
      summary: Get the list of virtual issuers.
      operationId: getOauthIssuers
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Issuers"
    post:
      tags:
        - /oauth/issuers
      summary: Create a new virtual issuer.
      description:
        "Create a new virtual issuer. If the virtual issuer is not properly\
        \ configured, a 422 status code is returned along with a list of validation\
        \ errors that must be corrected."
      operationId: addOauthIssuer
      requestBody:
        description: Configuration for new virtual issuer.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Issuer"
        required: true
      responses:
        "201":
          description: Issuer created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Issuer"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/issuers/{id}:
    get:
      tags:
        - /oauth/issuers
      summary: Find a virtual issuer by ID.
      description:
        Get a virtual issuer with the specified ID. A 404 status code is
        returned for nonexistent IDs.
      operationId: getOauthIssuerById
      parameters:
        - name: id
          in: path
          description: ID of the virtual issuer to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Issuer"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /oauth/issuers
      summary: Update a virtual issuer.
      description:
        "Update a virtual issuer with the matching ID. If the policy is\
        \ not properly configured, a 422 status code is returned along with a list\
        \ of validation errors that must be corrected. Note: A 404 status code is\
        \ returned for nonexistent IDs."
      operationId: updateOauthIssuer
      parameters:
        - name: id
          in: path
          description: ID of the virtual issuer to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Configuration for updated virtual issuer.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Issuer"
        required: true
      responses:
        "200":
          description: Issuer updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Issuer"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /oauth/issuers
      summary: Delete a virtual issuer.
      description:
        "Delete a virtual issuer with the specified ID. A 404 status code\
        \ is returned for nonexistent IDs. Note: If the request succeeds, the response\
        \ body is empty. If the request fails, an ApiResult is returned with details\
        \ of the error."
      operationId: deleteOauthIssuer
      parameters:
        - name: id
          in: path
          description: ID of the virtual issuer to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Issuer deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/tokenExchange/tokenGeneratorMappings:
    get:
      tags:
        - /oauth/tokenExchange/tokenGeneratorMappings
      summary:
        Get the list of Token Exchange Processor policy to Token Generator
        Mappings.
      operationId: getTokenGeneratorMappings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorPolicyToGeneratorMappings"
    post:
      tags:
        - /oauth/tokenExchange/tokenGeneratorMappings
      summary: Create a new Token Exchange Processor policy to Token Generator Mapping.
      operationId: createTokenGeneratorMapping
      parameters:
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description:
          Configuration for a new Token Exchange Processor policy to Token
          Generator Mapping.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessorPolicyToGeneratorMapping"
        required: true
      responses:
        "201":
          description:
            Token Exchange Processor policy to Token Generator mapping
            created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorPolicyToGeneratorMapping"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/tokenExchange/tokenGeneratorMappings/{id}:
    get:
      tags:
        - /oauth/tokenExchange/tokenGeneratorMappings
      summary: Get a Token Exchange Processor policy to Token Generator Mapping.
      operationId: getTokenGeneratorMappingById
      parameters:
        - name: id
          in: path
          description:
            ID of Token Exchange Processor policy to Token Generator Mapping
            to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorPolicyToGeneratorMapping"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /oauth/tokenExchange/tokenGeneratorMappings
      summary: Update a Token Exchange Processor policy to Token Generator Mapping.
      operationId: updateTokenGeneratorMappingById
      parameters:
        - name: id
          in: path
          description:
            ID of Token Exchange Processor policy to Token Generator Mapping
            to update.
          required: true
          schema:
            type: string
        - name: X-BypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
            default: false
      requestBody:
        description:
          Configuration for updated Token Exchange Processor policy to
          Token Generator Mapping.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/ProcessorPolicyToGeneratorMapping"
        required: true
      responses:
        "200":
          description:
            Token Exchange Processor policy to Token Generator mapping
            updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorPolicyToGeneratorMapping"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /oauth/tokenExchange/tokenGeneratorMappings
      summary: Delete a Token Exchange Processor policy to Token Generator Mapping.
      operationId: deleteTokenGeneratorMappingById
      parameters:
        - name: id
          in: path
          description:
            ID of Token Exchange Processor policy to Token Generator Mapping
            to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description:
            Token Exchange Processor policy to Token Generator mapping
            deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/tokenExchange/generator/settings:
    get:
      tags:
        - /oauth/tokenExchange/generator
      summary: Get general OAuth 2.0 Token Exchange Generator settings.
      operationId: getOauthTokenExchangeSettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenExchangeGeneratorSettings"
    put:
      tags:
        - /oauth/tokenExchange/generator
      summary: Update general OAuth 2.0 Token Exchange Generator settings.
      operationId: updateOauthTokenExchangeSettings
      parameters:
        - name: bypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
      requestBody:
        description: OAuth 2.0 Token Exchange Generator settings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenExchangeGeneratorSettings"
        required: true
      responses:
        "200":
          description: Settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenExchangeGeneratorSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/tokenExchange/generator/groups/{id}:
    get:
      tags:
        - /oauth/tokenExchange/generator
      summary: Find an OAuth 2.0 Token Exchange Generator group by ID.
      description:
        Get an OAuth 2.0 Token Exchange Generator group with the specified
        ID. A 404 status code is returned for nonexistent IDs.
      operationId: getOauthTokenExchangeGroupById
      parameters:
        - name: id
          in: path
          description: ID of the OAuth 2.0 Token Exchange Generator group to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenExchangeGeneratorGroup"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /oauth/tokenExchange/generator
      summary: Update an OAuth 2.0 Token Exchange Generator group.
      description:
        "Update an OAuth 2.0 Token Exchange Generator group with the matching\
        \ ID. If the group is not properly configured, a 422 status code is returned\
        \ along with a list of validation errors that must be corrected. Note: A 404\
        \ status code is returned for nonexistent IDs."
      operationId: updateOauthTokenExchangeGroup
      parameters:
        - name: id
          in: path
          description: ID of the OAuth 2.0 Token Exchange Generator group to update.
          required: true
          schema:
            type: string
        - name: bypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
      requestBody:
        description:
          Configuration for updated OAuth 2.0 Token Exchange Generator
          group.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenExchangeGeneratorGroup"
        required: true
      responses:
        "200":
          description: Token Exchange Processor Policy updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenExchangeGeneratorGroup"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /oauth/tokenExchange/generator
      summary: Delete an OAuth 2.0 Token Exchange Generator group.
      description:
        "Delete an OAuth 2.0 Token Exchange Generator group with the specified\
        \ ID. A 404 status code is returned for nonexistent IDs. Note: If the request\
        \ succeeds, the response body is empty. If the request fails, an ApiResult\
        \ is returned with details of the error."
      operationId: deleteOauthTokenExchangeGroup
      parameters:
        - name: id
          in: path
          description: ID of OAuth 2.0 Token Exchange Generator group to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Token Exchange Processor Policy deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/tokenExchange/generator/groups:
    get:
      tags:
        - /oauth/tokenExchange/generator
      summary: Get list of OAuth 2.0 Token Exchange Generator groups.
      operationId: getOauthTokenExchangeGroups
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenExchangeGeneratorGroups"
    post:
      tags:
        - /oauth/tokenExchange/generator
      summary: Create a new OAuth 2.0 Token Exchange Generator group.
      description:
        "Create a new OAuth 2.0 Token Exchange Generator group. If the\
        \ OAuth 2.0 Token Exchange Generator group is not properly configured, a 422\
        \ status code is returned along with a list of validation errors that must\
        \ be corrected."
      operationId: createGroup
      parameters:
        - name: bypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
      requestBody:
        description: Configuration for new OAuth 2.0 Token Exchange Generator.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenExchangeGeneratorGroup"
        required: true
      responses:
        "201":
          description: Token Exchange Processor Policy created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenExchangeGeneratorGroup"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/tokenExchange/processor/settings:
    get:
      tags:
        - /oauth/tokenExchange/processor
      summary: Get general OAuth 2.0 Token Exchange Processor settings.
      operationId: getOauthTokenExchangeProcessorPolicySettings
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenExchangeProcessorSettings"
    put:
      tags:
        - /oauth/tokenExchange/processor
      summary: Update general OAuth 2.0 Token Exchange Processor settings.
      operationId: updateOauthTokenExchangeProcessorPolicySettings
      parameters:
        - name: bypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
      requestBody:
        description: OAuth 2.0 Token Exchange Processor settings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenExchangeProcessorSettings"
        required: true
      responses:
        "200":
          description: Settings updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenExchangeProcessorSettings"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
  /oauth/tokenExchange/processor/policies/{id}:
    get:
      tags:
        - /oauth/tokenExchange/processor
      summary: Find an OAuth 2.0 Token Exchange Processor policy by ID.
      description:
        Get an OAuth 2.0 Token Exchange Processor policy with the specified
        ID. A 404 status code is returned for nonexistent IDs.
      operationId: getOauthTokenExchangeProcessorPolicyById
      parameters:
        - name: id
          in: path
          description: ID of the OAuth 2.0 Token Exchange Processor policy to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenExchangeProcessorPolicy"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    put:
      tags:
        - /oauth/tokenExchange/processor
      summary: Update an OAuth 2.0 Token Exchange Processor policy.
      description:
        "Update an OAuth 2.0 Token Exchange Processor policy with the matching\
        \ ID. If the policy is not properly configured, a 422 status code is returned\
        \ along with a list of validation errors that must be corrected. Note: A 404\
        \ status code is returned for nonexistent IDs."
      operationId: updateOauthTokenExchangeProcessorPolicy
      parameters:
        - name: id
          in: path
          description: ID of the OAuth 2.0 Token Exchange Processor policy to update.
          required: true
          schema:
            type: string
        - name: bypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
      requestBody:
        description:
          Configuration for updated OAuth 2.0 Token Exchange Processor
          policy.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenExchangeProcessorPolicy"
        required: true
      responses:
        "200":
          description: Token Exchange Processor Policy updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenExchangeProcessorPolicy"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
    delete:
      tags:
        - /oauth/tokenExchange/processor
      summary: Delete an OAuth 2.0 Token Exchange Processor policy.
      description:
        "Delete an OAuth 2.0 Token Exchange Processor policy with the specified\
        \ ID. A 404 status code is returned for nonexistent IDs. Note: If the request\
        \ succeeds, the response body is empty. If the request fails, an ApiResult\
        \ is returned with details of the error."
      operationId: deleteOauthTokenExchangeProcessorPolicyy
      parameters:
        - name: id
          in: path
          description: ID of OAuth 2.0 Token Exchange Processor policy to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Token Exchange Processor Policy deleted.
          content: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /oauth/tokenExchange/processor/policies:
    get:
      tags:
        - /oauth/tokenExchange/processor
      summary: Get list of OAuth 2.0 Token Exchange Processor policies.
      operationId: getOauthTokenExchangeProcessorPolicyPolicies
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenExchangeProcessorPolicies"
    post:
      tags:
        - /oauth/tokenExchange/processor
      summary: Create a new OAuth 2.0 Token Exchange Processor policy.
      description:
        "Create a new OAuth 2.0 Token Exchange Processor policy. If the\
        \ OAuth 2.0 Token Exchange Processor policy is not properly configured, a\
        \ 422 status code is returned along with a list of validation errors that\
        \ must be corrected."
      operationId: createOauthTokenExchangeProcessorPolicy
      parameters:
        - name: bypassExternalValidation
          in: header
          description:
            External validation will be bypassed when set to true. Default
            to false.
          schema:
            type: boolean
      requestBody:
        description: Configuration for new OAuth 2.0 Token Exchange Processor.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenExchangeProcessorPolicy"
        required: true
      responses:
        "201":
          description: Token Exchange Processor Policy created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenExchangeProcessorPolicy"
        "400":
          description: The request was improperly formatted or contained invalid fields.
          content: {}
        "422":
          description: Validation error(s) occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
      x-codegen-request-body-name: body
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    bearer:
      bearerFormat: JWT
      description: OAuth bearer token (see documentation)
      scheme: bearer
      type: http
    oAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: "https://localhost:9031/as/token.oauth2"
          authorizationUrl: "https://localhost:9031/as/authorization.oauth2"

  schemas:
    AccessTokenManagementSettings:
      type: object
      properties:
        defaultAccessTokenManagerRef:
          $ref: "#/components/schemas/ResourceLink"
      description: General access token management settings.
    ResourceLink:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The ID of the resource.
      description: A reference to a resource.
    ApiResult:
      type: object
      properties:
        resultId:
          type: string
          description: Result identifier.
        message:
          type: string
          description: Success or error message.
        developerMessage:
          type: string
          description: "Developer-oriented error message, if available."
        validationErrors:
          type: array
          description: "List of validation errors, if any."
          items:
            $ref: "#/components/schemas/ValidationError"
      description: Details on the result of the operation.
    ValidationError:
      type: object
      properties:
        errorId:
          type: string
          description: Error identifier.
        message:
          type: string
          description: User-friendly error description.
        developerMessage:
          type: string
          description: "Developer-oriented error message, if available."
        fieldPath:
          type: string
          description:
            "The path to the model field to which the error relates, if\
            \ one exists."
      description: A data input validation error.
    AccessTokenManagerDescriptor:
      allOf:
        - $ref: "#/components/schemas/PluginDescriptor"
        - type: object
          description: An OAuth access token management plugin descriptor.
    AccessTokenManagerDescriptors:
      type: object
      properties:
        items:
          type: array
          description: The list of OAuth access token management plugin descriptors.
          items:
            $ref: "#/components/schemas/AccessTokenManagerDescriptor"
      description: A collection of OAuth access token management plugin descriptors.
    ActionDescriptor:
      type: object
      properties:
        name:
          type: string
          description: The name of this action
        description:
          type: string
          description: The description of this action
        download:
          type: boolean
          description:
            Whether this action will trigger a download or invoke an internal
            action that will return a string result.
        downloadContentType:
          type: string
          description:
            "If this is a download, this is the Content-Type of the downloaded\
            \ file. Otherwise, this is null."
        downloadFileName:
          type: string
          description:
            "If this is a download, this is the suggested file name of\
            \ the downloaded file. Otherwise, this is null."
        parameters:
          type: array
          description: List of parameters for this action.
          items:
            $ref: "#/components/schemas/FieldDescriptor"
      description: Describes an arbitrary action that is available for a plugin.
    AuthenticationSelectorDescriptor:
      allOf:
        - $ref: "#/components/schemas/PluginDescriptor"
        - type: object
          description: An Authentication Selector descriptor.
    AuthorizationDetailProcessorDescriptor:
      allOf:
        - $ref: "#/components/schemas/PluginDescriptor"
        - type: object
          properties:
            supportedAuthorizationDetailTypes:
              uniqueItems: true
              type: array
              description:
                The supported authorization detail types supported by this
                authorization detail processor plugin type. The default set is populated
                with 'ALL_AUTHORIZATION_DETAIL_TYPES' denoting that the plugin supports
                all authorization detail types.
              items:
                type: string
          description: An authorization detail processor plugin descriptor.
    BaseSelectionFieldDescriptor:
      allOf:
        - $ref: "#/components/schemas/FieldDescriptor"
        - type: object
          properties:
            optionValues:
              type: array
              description: The list of option values for this selection field.
              items:
                $ref: "#/components/schemas/OptionValue"
          description: Holds fields that are shared by all selection-type field descriptors.
    CheckBoxFieldDescriptor:
      allOf:
        - $ref: "#/components/schemas/FieldDescriptor"
        - type: object
          description:
            A boolean field typically rendered as a checkbox in a configuration
            UI.
    ClientRegistrationPolicyDescriptor:
      allOf:
        - $ref: "#/components/schemas/PluginDescriptor"
        - type: object
          description: A client registration policy plugin descriptor.
    CustomDataStoreDescriptor:
      allOf:
        - $ref: "#/components/schemas/PluginDescriptor"
        - type: object
          description: A custom data store descriptor.
    FieldDescriptor:
      type: object
      properties:
        type:
          type: string
          description: The type of field descriptor.
          enum:
            - RADIO_GROUP
            - SELECT
            - FILTERABLE_SELECT
            - CHECK_BOX
            - TEXT_AREA
            - TEXT
            - UPLOAD_FILE
            - HASHED_TEXT
        name:
          type: string
          description: Name of the field.
        description:
          type: string
          description: Description of the field.
        defaultValue:
          type: string
          description:
            Default value of the field. This is the value pre-populated
            in the UI on new plugin instance configuration. This is also the value
            used to populate the field if it is missing in a POST or PUT request and
            no 'defaultForLegacyConfig' is defined.
        defaultForLegacyConfig:
          type: string
          description:
            "Default value of the field when it is missing from the configuration\
            \ (e.g. in upgrade scenarios). This is the value pre-populated in the\
            \ UI for existing plugin configurations without values for the field.\
            \ This is also the value used to populate the field if it is missing in\
            \ a POST or PUT request. If 'defaultForLegacyConfig' is not defined, PingFederate\
            \ will fall back to applying the 'defaultValue' to the field."
        advanced:
          type: boolean
          description: Whether this is an advanced field or not.
        required:
          type: boolean
          description: Whether a value is required for this field or not.
        label:
          type: string
          description: Label of the field to be displayed in the administrative console.
      description: Describes a plugin configuration field.
      discriminator:
        propertyName: type
    HashedTextFieldDescriptor:
      allOf:
        - $ref: "#/components/schemas/FieldDescriptor"
        - type: object
          properties:
            size:
              type: integer
              description: The size of the text field.
              format: int32
          description: A text field that will contain a secure salted hash.
    IdpAdapterDescriptor:
      allOf:
        - $ref: "#/components/schemas/PluginDescriptor"
        - type: object
          description: An IdP adapter descriptor.
    NotificationPublisherDescriptor:
      allOf:
        - $ref: "#/components/schemas/PluginDescriptor"
        - type: object
          description: A notification publisher plugin descriptor.
    OptionValue:
      type: object
      properties:
        name:
          type: string
          description: The name of the option.
        value:
          type: string
          description: The value associated with this option.
      description: An option name and value associated with a selection field.
    OutOfBandAuthPluginDescriptor:
      allOf:
        - $ref: "#/components/schemas/PluginDescriptor"
        - type: object
          description: An out of band authenticator plugin descriptor.
    PasswordCredentialValidatorDescriptor:
      allOf:
        - $ref: "#/components/schemas/PluginDescriptor"
        - type: object
          description: A password credential validator descriptor.
    PluginConfigDescriptor:
      type: object
      properties:
        description:
          type: string
          description: The description of this plugin.
        fields:
          type: array
          description: The configuration fields available for this plugin.
          items:
            $ref: "#/components/schemas/FieldDescriptor"
        tables:
          type: array
          description: Configuration tables available for this plugin.
          items:
            $ref: "#/components/schemas/TableDescriptor"
        actionDescriptors:
          type: array
          description: The available actions for this plugin.
          items:
            $ref: "#/components/schemas/ActionDescriptor"
      description: Defines the configuration fields available for a plugin.
    PluginDescriptor:
      type: object
      properties:
        id:
          type: string
          description: Unique ID of the plugin.
        name:
          type: string
          description: Friendly name for the plugin.
        className:
          type: string
          description: Full class name of the class that implements this plugin.
        attributeContract:
          type: array
          description: The attribute contract for this plugin.
          items:
            type: string
        supportsExtendedContract:
          type: boolean
          description:
            Determines whether this plugin supports extending the attribute
            contract.
        configDescriptor:
          $ref: "#/components/schemas/PluginConfigDescriptor"
      description: "Defines a plugin type, including available configuration parameters."
    RadioGroupFieldDescriptor:
      allOf:
        - $ref: "#/components/schemas/BaseSelectionFieldDescriptor"
        - type: object
          description:
            A selection-type field intended to be rendered as a group of
            radio buttons in a UI.
    SecretManagerDescriptor:
      allOf:
        - $ref: "#/components/schemas/PluginDescriptor"
        - type: object
          description: A secret manager plugin descriptor.
    SelectFieldDescriptor:
      allOf:
        - $ref: "#/components/schemas/BaseSelectionFieldDescriptor"
        - type: object
          description:
            A selection field that is intended to be rendered as a dropdown
            list of options.
    SpAdapterDescriptor:
      allOf:
        - $ref: "#/components/schemas/PluginDescriptor"
        - type: object
          description: An SP adapter descriptor.
    TableDescriptor:
      type: object
      properties:
        name:
          type: string
          description: The name of the table.
        description:
          type: string
          description: Description for the table.
        columns:
          type: array
          description: Get the columns in the table.
          items:
            $ref: "#/components/schemas/FieldDescriptor"
        label:
          type: string
          description: Label for the table to be displayed in the administrative console.
        requireDefaultRow:
          type: boolean
          description: Configure whether this table requires default row to be set.
      description: Defines a plugin configuration table.
    TextAreaFieldDescriptor:
      allOf:
        - $ref: "#/components/schemas/FieldDescriptor"
        - type: object
          properties:
            rows:
              type: integer
              description: The number of rows for the text box.
              format: int32
            columns:
              type: integer
              description: The number of columns for the text box.
              format: int32
          description: A field intended to be rendered as a text box in a UI.
    TextFieldDescriptor:
      allOf:
        - $ref: "#/components/schemas/FieldDescriptor"
        - type: object
          properties:
            encrypted:
              type: boolean
              description:
                Determines whether the field value should be masked in the
                UI and encrypted on disk.
            size:
              type: integer
              description: The size of the text field.
              format: int32
          description: A text field.
    TokenGeneratorDescriptor:
      allOf:
        - $ref: "#/components/schemas/PluginDescriptor"
        - type: object
          description: A token generator descriptor.
    TokenProcessorDescriptor:
      allOf:
        - $ref: "#/components/schemas/PluginDescriptor"
        - type: object
          description: A token processor descriptor.
    UploadFileFieldDescriptor:
      allOf:
        - $ref: "#/components/schemas/FieldDescriptor"
        - type: object
          description: A field which allows the user to upload a file.
    AccessTokenAttribute:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of this attribute.
        multiValued:
          type: boolean
          description:
            Indicates whether attribute value is always returned as an
            array.
      description: An attribute for an Access Token's attribute contract.
    AccessTokenAttributeContract:
      type: object
      properties:
        coreAttributes:
          type: array
          description:
            A list of core token attributes that are associated with the
            access token management plugin type. This field is read-only and is ignored
            on POST/PUT.
          items:
            $ref: "#/components/schemas/AccessTokenAttribute"
        extendedAttributes:
          type: array
          description:
            A list of additional token attributes that are associated with
            this access token management plugin instance.
          items:
            $ref: "#/components/schemas/AccessTokenAttribute"
        inherited:
          type: boolean
          description:
            "Whether this attribute contract is inherited from its parent\
            \ instance. If true, the rest of the properties in this model become read-only.\
            \ The default value is false."
        defaultSubjectAttribute:
          type: string
          description:
            Default subject attribute to use for audit logging when validating
            the access token. Blank value means to use USER_KEY attribute value after
            grant lookup.
      description: A set of attributes exposed by an Access Token Manager.
    AccessTokenManager:
      allOf:
        - $ref: "#/components/schemas/PluginInstance"
        - type: object
          properties:
            attributeContract:
              $ref: "#/components/schemas/AccessTokenAttributeContract"
            selectionSettings:
              $ref: "#/components/schemas/AtmSelectionSettings"
            accessControlSettings:
              $ref: "#/components/schemas/AtmAccessControlSettings"
            sessionValidationSettings:
              $ref: "#/components/schemas/SessionValidationSettings"
            sequenceNumber:
              type: integer
              description:
                Number added to an access token to identify which Access
                Token Manager issued the token.
              format: int32
          description: An OAuth access token management plugin instance.
    AccessTokenManagers:
      type: object
      properties:
        items:
          type: array
          description: The list of OAuth access token management plugin instances.
          items:
            $ref: "#/components/schemas/AccessTokenManager"
      description: A collection of OAuth access token management plugin instances.
    AtmAccessControlSettings:
      type: object
      properties:
        inherited:
          type: boolean
          description:
            "If this token manager has a parent, this flag determines whether\
            \ access control settings are inherited from the parent. When set to true,\
            \ the other fields in this model become read-only. The default value is\
            \ false."
        restrictClients:
          type: boolean
          description:
            "Determines whether access to this token manager is restricted\
            \ to specific OAuth clients. If false, the 'allowedClients' field is ignored.\
            \ The default value is false."
        allowedClients:
          type: array
          description:
            "If 'restrictClients' is true, this field defines the list\
            \ of OAuth clients that are allowed to access the token manager."
          items:
            $ref: "#/components/schemas/ResourceLink"
      description: Access control settings for an access token management plugin instance.
    AtmSelectionSettings:
      type: object
      properties:
        inherited:
          type: boolean
          description:
            "If this token manager has a parent, this flag determines whether\
            \ selection settings, such as resource URI's, are inherited from the parent.\
            \ When set to true, the other fields in this model become read-only. The\
            \ default value is false."
        resourceUris:
          type: array
          description:
            "The list of base resource URI's which map to this token manager.\
            \ A resource URI, specified via the 'aud' parameter, can be used to select\
            \ a specific token manager for an OAuth request."
          items:
            type: string
      description: Selection settings for an access token management plugin instance.
    AttributeFulfillmentValue:
      required:
        - source
        - value
      type: object
      properties:
        source:
          $ref: "#/components/schemas/SourceTypeIdKey"
        value:
          type: string
          description: The value for this attribute.
      description: Defines how an attribute in an attribute contract should be populated.
    AttributeSourceAggregation:
      oneOf:
        - $ref: "#/components/schemas/CustomAttributeSource"
        - $ref: "#/components/schemas/JdbcAttributeSource"
        - $ref: "#/components/schemas/LdapAttributeSource"
      discriminator:
        propertyName: type
        mapping:
          CUSTOM: "#/components/schemas/CustomAttributeSource"
          JDBC: "#/components/schemas/JdbcAttributeSource"
          LDAP: "#/components/schemas/LdapAttributeSource"
          PING_ONE_LDAP_GATEWAY: "#/components/schemas/LdapAttributeSource"
    AttributeSource:
      required:
        - dataStoreRef
        - type
      type: object
      properties:
        type:
          type: string
          description: The data store type of this attribute source.
          enum:
            - LDAP
            - PING_ONE_LDAP_GATEWAY
            - JDBC
            - CUSTOM
        dataStoreRef:
          $ref: "#/components/schemas/ResourceLink"
        id:
          type: string
          description:
            "The ID that defines this attribute source. Only alphanumeric\
            \ characters allowed.<br>Note: Required for OpenID Connect policy attribute\
            \ sources, OAuth IdP adapter mappings, OAuth access token mappings and\
            \ APC-to-SP Adapter Mappings. IdP Connections will ignore this property\
            \ since it only allows one attribute source to be defined per mapping.\
            \ IdP-to-SP Adapter Mappings can contain multiple attribute sources."
        description:
          type: string
          description:
            "The description of this attribute source. The description\
            \ needs to be unique amongst the attribute sources for the mapping.<br>Note:\
            \ Required for APC-to-SP Adapter Mappings"
        attributeContractFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of mappings from attribute names to their fulfillment
            values. This field is only valid for the SP Connection's Browser SSO mappings
      description:
        The configured settings to look up attributes from an associated
        data store.
      discriminator:
        propertyName: type
    AuthenticationSelector:
      allOf:
        - $ref: "#/components/schemas/PluginInstance"
        - type: object
          properties:
            attributeContract:
              $ref: "#/components/schemas/AuthenticationSelectorAttributeContract"
          description: An Authentication Selector instance.
    AuthenticationSelectorAttribute:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of this attribute.
      description: An attribute for the Authentication Selector attribute contract.
    AuthenticationSelectorAttributeContract:
      type: object
      properties:
        extendedAttributes:
          type: array
          description:
            A list of additional attributes that can be returned by the
            Authentication Selector. The extended attributes are only used if the
            Authentication Selector supports them.
          items:
            $ref: "#/components/schemas/AuthenticationSelectorAttribute"
      description: A set of attributes exposed by an Authentication Selector.
    AuthorizationDetailProcessor:
      allOf:
        - $ref: "#/components/schemas/PluginInstance"
        - type: object
          description: An authorization detail processor plugin instance.
    BinaryLdapAttributeSettings:
      type: object
      properties:
        binaryEncoding:
          type: string
          description:
            "Get the encoding type for this attribute. If not specified,\
            \ the default is BASE64."
          enum:
            - BASE64
            - HEX
            - SID
      description: Binary settings for a LDAP attribute.
    ClientRegistrationPolicy:
      allOf:
        - $ref: "#/components/schemas/PluginInstance"
        - type: object
          description: A client registration policy plugin instance.
    ConditionalIssuanceCriteriaEntry:
      required:
        - attributeName
        - condition
        - source
        - value
      type: object
      properties:
        source:
          $ref: "#/components/schemas/SourceTypeIdKey"
        attributeName:
          type: string
          description: The name of the attribute to use in this issuance criterion.
        condition:
          type: string
          description:
            The condition that will be applied to the source attribute's
            value and the expected value.
          enum:
            - EQUALS
            - EQUALS_CASE_INSENSITIVE
            - EQUALS_DN
            - NOT_EQUAL
            - NOT_EQUAL_CASE_INSENSITIVE
            - NOT_EQUAL_DN
            - MULTIVALUE_CONTAINS
            - MULTIVALUE_CONTAINS_CASE_INSENSITIVE
            - MULTIVALUE_CONTAINS_DN
            - MULTIVALUE_DOES_NOT_CONTAIN
            - MULTIVALUE_DOES_NOT_CONTAIN_CASE_INSENSITIVE
            - MULTIVALUE_DOES_NOT_CONTAIN_DN
        value:
          type: string
          description: The expected value of this issuance criterion.
        errorResult:
          type: string
          description:
            The error result to return if this issuance criterion fails.
            This error result will show up in the PingFederate server logs.
      description:
        "An issuance criterion that checks a source attribute against a\
        \ particular condition and the expected value. If the condition is true then\
        \ this issuance criterion passes, otherwise the criterion fails."
    ConfigField:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the configuration field.
        value:
          type: string
          description:
            "The value for the configuration field. For encrypted or hashed\
            \ fields, GETs will not return this attribute. To update an encrypted\
            \ or hashed field, specify the new value in this attribute."
        encryptedValue:
          type: string
          description:
            "For encrypted or hashed fields, this attribute contains the\
            \ encrypted representation of the field's value, if a value is defined.\
            \ If you do not want to update the stored value, this attribute should\
            \ be passed back unchanged."
        inherited:
          type: boolean
          description:
            "Whether this field is inherited from its parent instance.\
            \ If true, the value/encrypted value properties become read-only. The\
            \ default value is false."
      description: A plugin configuration field value.
    ConfigRow:
      required:
        - fields
      type: object
      properties:
        fields:
          type: array
          description: The configuration fields in the row.
          items:
            $ref: "#/components/schemas/ConfigField"
        defaultRow:
          type: boolean
          description: Whether this row is the default.
      description: A row of configuration values for a plugin configuration table.
    ConfigTable:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the table.
        rows:
          type: array
          description: List of table rows.
          items:
            $ref: "#/components/schemas/ConfigRow"
        inherited:
          type: boolean
          description:
            "Whether this table is inherited from its parent instance.\
            \ If true, the rows become read-only. The default value is false."
      description: A plugin configuration table populated with values.
    CustomAttributeSource:
      allOf:
        - $ref: "#/components/schemas/AttributeSource"
        - type: object
          properties:
            filterFields:
              type: array
              description:
                The list of fields that can be used to filter a request to
                the custom data store.
              items:
                $ref: "#/components/schemas/FieldEntry"
          description:
            The configured settings used to look up attributes from a custom
            data store.
    ExpressionIssuanceCriteriaEntry:
      required:
        - expression
      type: object
      properties:
        expression:
          type: string
          description: The OGNL expression to evaluate.
        errorResult:
          type: string
          description:
            The error result to return if this issuance criterion fails.
            This error result will show up in the PingFederate server logs.
      description:
        An issuance criterion that uses a Boolean return value from an
        OGNL expression to determine whether or not it passes.
    FieldEntry:
      required:
        - name
      type: object
      properties:
        value:
          type: string
          description:
            The value of this field. Whether or not the value is required
            will be determined by plugin validation checks.
        name:
          type: string
          description: The name of this field.
      description: A simple name value pair to represent a field entry.
      xml:
        name: FieldEntry
    IdpAdapter:
      allOf:
        - $ref: "#/components/schemas/PluginInstance"
        - type: object
          properties:
            authnCtxClassRef:
              type: string
              description: The fixed value that indicates how the user was authenticated.
            attributeMapping:
              $ref: "#/components/schemas/IdpAdapterContractMapping"
            attributeContract:
              $ref: "#/components/schemas/IdpAdapterAttributeContract"
          description: An IdP adapter instance.
    IdpAdapterAttribute:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of this attribute.
        pseudonym:
          type: boolean
          description:
            Specifies whether this attribute is used to construct a pseudonym
            for the SP. Defaults to false.
        masked:
          type: boolean
          description:
            Specifies whether this attribute is masked in PingFederate
            logs. Defaults to false.
      description: An attribute for the IdP adapter attribute contract.
    IdpAdapterAttributeContract:
      required:
        - coreAttributes
      type: object
      properties:
        coreAttributes:
          type: array
          description:
            A list of IdP adapter attributes that correspond to the attributes
            exposed by the IdP adapter type.
          items:
            $ref: "#/components/schemas/IdpAdapterAttribute"
        extendedAttributes:
          type: array
          description:
            A list of additional attributes that can be returned by the
            IdP adapter. The extended attributes are only used if the adapter supports
            them.
          items:
            $ref: "#/components/schemas/IdpAdapterAttribute"
        uniqueUserKeyAttribute:
          type: string
          description:
            The attribute to use for uniquely identify a user's authentication
            sessions.
        maskOgnlValues:
          type: boolean
          description:
            Whether or not all OGNL expressions used to fulfill an outgoing
            assertion contract should be masked in the logs. Defaults to false.
        inherited:
          type: boolean
          description:
            "Whether this attribute contract is inherited from its parent\
            \ instance. If true, the rest of the properties in this model become read-only.\
            \ The default value is false."
      description: A set of attributes exposed by an IdP adapter.
    IdpAdapterContractMapping:
      required:
        - attributeContractFulfillment
      type: object
      properties:
        attributeSources:
          type: array
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: "#/components/schemas/AttributeSourceAggregation"
        attributeContractFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of mappings from attribute names to their fulfillment
            values.
        issuanceCriteria:
          $ref: "#/components/schemas/IssuanceCriteria"
        inherited:
          type: boolean
          description:
            "Whether this attribute mapping is inherited from its parent\
            \ instance. If true, the rest of the properties in this model become read-only.\
            \ The default value is false."
      description: An IdP Adapter Contract Mapping.
    IssuanceCriteria:
      type: object
      properties:
        conditionalCriteria:
          type: array
          description:
            A list of conditional issuance criteria where existing attributes
            must satisfy their conditions against expected values in order for the
            transaction to continue.
          items:
            $ref: "#/components/schemas/ConditionalIssuanceCriteriaEntry"
        expressionCriteria:
          type: array
          description:
            A list of expression issuance criteria where the OGNL expressions
            must evaluate to true in order for the transaction to continue.
          items:
            $ref: "#/components/schemas/ExpressionIssuanceCriteriaEntry"
      description:
        A list of criteria that determines whether a transaction (usually
        a SSO transaction) is continued. All criteria must pass in order for the transaction
        to continue.
    JdbcAttributeSource:
      allOf:
        - $ref: "#/components/schemas/AttributeSource"
        - required:
            - filter
            - table
          type: object
          properties:
            schema:
              type: string
              description:
                "Lists the table structure that stores information within\
                \ a database. Some databases, such as Oracle, require a schema for a\
                \ JDBC query. Other databases, such as MySQL, do not require a schema."
            table:
              type: string
              description:
                The name of the database table. The name is used to construct
                the SQL query to retrieve data from the data store.
            columnNames:
              type: array
              description:
                A list of column names used to construct the SQL query to
                retrieve data from the specified table in the datastore.
              items:
                type: string
            filter:
              type: string
              description:
                The JDBC WHERE clause used to query your data store to locate
                a user record.
          description:
            The configured settings used to look up attributes from a JDBC
            data store.
    LdapAttributeSource:
      allOf:
        - $ref: "#/components/schemas/AttributeSource"
        - required:
            - searchFilter
            - searchScope
          type: object
          properties:
            baseDn:
              type: string
              description:
                "The base DN to search from. If not specified, the search\
                \ will start at the LDAP's root."
            searchScope:
              type: string
              description: Determines the node depth of the query.
              enum:
                - OBJECT
                - ONE_LEVEL
                - SUBTREE
            searchFilter:
              type: string
              description:
                The LDAP filter that will be used to lookup the objects from
                the directory.
            searchAttributes:
              type: array
              description:
                A list of LDAP attributes returned from search and available
                for mapping.
              items:
                type: string
            binaryAttributeSettings:
              type: object
              additionalProperties:
                $ref: "#/components/schemas/BinaryLdapAttributeSettings"
              description: The advanced settings for binary LDAP attributes.
            memberOfNestedGroup:
              type: boolean
              description:
                Set this to true to return transitive group memberships for
                the 'memberOf' attribute.  This only applies for Active Directory data
                sources.  All other data sources will be set to false.
          description:
            The configured settings used to look up attributes from a LDAP
            data store.
    NotificationPublisher:
      allOf:
        - $ref: "#/components/schemas/PluginInstance"
        - type: object
          description: A notification publisher plugin instance.
    OutOfBandAuthAttribute:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of this attribute.
      description:
        An attribute for the out of band authenticator plugin instance
        attribute contract.
    OutOfBandAuthAttributeContract:
      required:
        - coreAttributes
      type: object
      properties:
        coreAttributes:
          type: array
          description: A list of out of band authenticator attributes.
          items:
            $ref: "#/components/schemas/OutOfBandAuthAttribute"
        extendedAttributes:
          type: array
          description:
            A list of additional attributes that can be returned by the
            out of band authenticator plugin instance. The extended attributes are
            only used if the plugin supports them.
          items:
            $ref: "#/components/schemas/OutOfBandAuthAttribute"
      description:
        A set of attributes exposed by an out of band authenticator plugin
        instance.
    OutOfBandAuthenticator:
      allOf:
        - $ref: "#/components/schemas/PluginInstance"
        - type: object
          properties:
            attributeContract:
              $ref: "#/components/schemas/OutOfBandAuthAttributeContract"
          description: An out of band authenticator plugin instance.
    PasswordCredentialValidator:
      allOf:
        - $ref: "#/components/schemas/PluginInstance"
        - type: object
          properties:
            attributeContract:
              $ref: "#/components/schemas/PasswordCredentialValidatorAttributeContract"
          description:
            The set of attributes used to configure a password credential
            validator
    PasswordCredentialValidatorAttribute:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of this attribute.
      description: An attribute for the password credential validator attribute contract.
    PasswordCredentialValidatorAttributeContract:
      type: object
      properties:
        coreAttributes:
          type: array
          description:
            A list of read-only attributes that are automatically populated
            by the password credential validator descriptor.
          items:
            $ref: "#/components/schemas/PasswordCredentialValidatorAttribute"
        extendedAttributes:
          type: array
          description:
            A list of additional attributes that can be returned by the
            password credential validator. The extended attributes are only used if
            the adapter supports them.
          items:
            $ref: "#/components/schemas/PasswordCredentialValidatorAttribute"
        inherited:
          type: boolean
          description:
            "Whether this attribute contract is inherited from its parent\
            \ instance. If true, the rest of the properties in this model become read-only.\
            \ The default value is false."
    PluginConfiguration:
      type: object
      properties:
        tables:
          type: array
          description: List of configuration tables.
          items:
            $ref: "#/components/schemas/ConfigTable"
        fields:
          type: array
          description: List of configuration fields.
          items:
            $ref: "#/components/schemas/ConfigField"
      description: Configuration settings for a plugin instance.
    PluginInstance:
      required:
        - configuration
        - id
        - name
        - pluginDescriptorRef
      type: object
      properties:
        id:
          type: string
          description:
            "The ID of the plugin instance. The ID cannot be modified once\
            \ the instance is created.<br>Note: Ignored when specifying a connection's\
            \ adapter override."
        name:
          type: string
          description:
            "The plugin instance name. The name can be modified once the\
            \ instance is created.<br>Note: Ignored when specifying a connection's\
            \ adapter override."
        pluginDescriptorRef:
          $ref: "#/components/schemas/ResourceLink"
        parentRef:
          $ref: "#/components/schemas/ResourceLink"
        configuration:
          $ref: "#/components/schemas/PluginConfiguration"
        lastModified:
          type: string
          description:
            The time at which the plugin instance was last changed. This
            property is read only and is ignored on PUT and POST requests.
          format: date-time
      description: A plugin instance.
    SecretManager:
      allOf:
        - $ref: "#/components/schemas/PluginInstance"
        - type: object
          description: A secret manager plugin instance.
    SessionValidationSettings:
      type: object
      properties:
        inherited:
          type: boolean
          description:
            "If this token manager has a parent, this flag determines whether\
            \ session validation settings, such as checkValidAuthnSession, are inherited\
            \ from the parent. When set to true, the other fields in this model become\
            \ read-only. The default value is false."
        includeSessionId:
          type: boolean
          description:
            "Include the session identifier in the access token. Note that\
            \ if any of the session validation features is enabled, the session identifier\
            \ will already be included in the access tokens."
        checkValidAuthnSession:
          type: boolean
          description:
            Check for a valid authentication session when validating the
            access token.
        checkSessionRevocationStatus:
          type: boolean
          description:
            Check the session revocation status when validating the access
            token.
        updateAuthnSessionActivity:
          type: boolean
          description:
            Update authentication session activity when validating the
            access token.
      description:
        Session validation settings for an access token management plugin
        instance.
    SourceTypeIdKey:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: The source type of this key.
          enum:
            - TOKEN_EXCHANGE_PROCESSOR_POLICY
            - ACCOUNT_LINK
            - ADAPTER
            - ASSERTION
            - CONTEXT
            - CUSTOM_DATA_STORE
            - EXPRESSION
            - JDBC_DATA_STORE
            - LDAP_DATA_STORE
            - PING_ONE_LDAP_GATEWAY_DATA_STORE
            - MAPPED_ATTRIBUTES
            - NO_MAPPING
            - TEXT
            - TOKEN
            - REQUEST
            - OAUTH_PERSISTENT_GRANT
            - SUBJECT_TOKEN
            - ACTOR_TOKEN
            - PASSWORD_CREDENTIAL_VALIDATOR
            - IDP_CONNECTION
            - AUTHENTICATION_POLICY_CONTRACT
            - CLAIMS
            - LOCAL_IDENTITY_PROFILE
            - EXTENDED_CLIENT_METADATA
            - EXTENDED_PROPERTIES
            - TRACKED_HTTP_PARAMS
            - FRAGMENT
            - INPUTS
            - ATTRIBUTE_QUERY
            - IDENTITY_STORE_USER
            - IDENTITY_STORE_GROUP
            - SCIM_USER
            - SCIM_GROUP
        id:
          type: string
          description:
            "The attribute source ID that refers to the attribute source\
            \ that this key references. In some resources, the ID is optional and\
            \ will be ignored. In these cases the ID should be omitted. If the source\
            \ type is not an attribute source then the ID can be omitted."
      description:
        "A key that is meant to reference a source from which an attribute\
        \ can be retrieved. This model is usually paired with a value which, depending\
        \ on the SourceType, can be a hardcoded value or a reference to an attribute\
        \ name specific to that SourceType. Not all values are applicable - a validation\
        \ error will be returned for incorrect values.<br>For each SourceType, the\
        \ value should be:<br>ACCOUNT_LINK - If account linking was enabled for the\
        \ browser SSO, the value must be 'Local User ID', unless it has been overridden\
        \ in PingFederate's server configuration.<br>ADAPTER - The value is one of\
        \ the attributes of the IdP Adapter.<br>ASSERTION - The value is one of the\
        \ attributes coming from the SAML assertion.<br>AUTHENTICATION_POLICY_CONTRACT\
        \ - The value is one of the attributes coming from an authentication policy\
        \ contract.<br>LOCAL_IDENTITY_PROFILE - The value is one of the fields coming\
        \ from a local identity profile.<br>CONTEXT - The value must be one of the\
        \ following ['TargetResource' or 'OAuthScopes' or 'ClientId' or 'AuthenticationCtx'\
        \ or 'ClientIp' or 'Locale' or 'StsBasicAuthUsername' or 'StsSSLClientCertSubjectDN'\
        \ or 'StsSSLClientCertChain' or 'VirtualServerId' or 'AuthenticatingAuthority'\
        \ or 'DefaultPersistentGrantLifetime'.]<br>CLAIMS - Attributes provided by\
        \ the OIDC Provider.<br>CUSTOM_DATA_STORE - The value is one of the attributes\
        \ returned by this custom data store.<br>EXPRESSION - The value is an OGNL\
        \ expression.<br>EXTENDED_CLIENT_METADATA - The value is from an OAuth extended\
        \ client metadata parameter. This source type is deprecated and has been replaced\
        \ by EXTENDED_PROPERTIES.<br>EXTENDED_PROPERTIES - The value is from an OAuth\
        \ Client's extended property.<br>IDP_CONNECTION - The value is one of the\
        \ attributes passed in by the IdP connection.<br>JDBC_DATA_STORE - The value\
        \ is one of the column names returned from the JDBC attribute source.<br>LDAP_DATA_STORE\
        \ - The value is one of the LDAP attributes supported by your LDAP data store.<br>MAPPED_ATTRIBUTES\
        \ - The value is the name of one of the mapped attributes that is defined\
        \ in the associated attribute mapping.<br>OAUTH_PERSISTENT_GRANT - The value\
        \ is one of the attributes from the persistent grant.<br>PASSWORD_CREDENTIAL_VALIDATOR\
        \ - The value is one of the attributes of the PCV.<br>NO_MAPPING - A placeholder\
        \ value to indicate that an attribute currently has no mapped source.TEXT\
        \ - A hardcoded value that is used to populate the corresponding attribute.<br>TOKEN\
        \ - The value is one of the token attributes.<br>REQUEST - The value is from\
        \ the request context such as the CIBA identity hint contract or the request\
        \ contract for Ws-Trust.<br>TRACKED_HTTP_PARAMS - The value is from the original\
        \ request parameters.<br>SUBJECT_TOKEN - The value is one of the OAuth 2.0\
        \ Token exchange subject_token attributes.<br>ACTOR_TOKEN - The value is one\
        \ of the OAuth 2.0 Token exchange actor_token attributes.<br>TOKEN_EXCHANGE_PROCESSOR_POLICY\
        \ - The value is one of the attributes coming from a Token Exchange Processor\
        \ policy.<br>FRAGMENT - The value is one of the attributes coming from an\
        \ authentication policy fragment.<br>INPUTS - The value is one of the attributes\
        \ coming from an attribute defined in the input authentication policy contract\
        \ for an authentication policy fragment.<br>ATTRIBUTE_QUERY - The value is\
        \ one of the user attributes queried from an Attribute Authority.<br>IDENTITY_STORE_USER\
        \ - The value is one of the attributes from a user identity store provisioner\
        \ for SCIM processing.<br>IDENTITY_STORE_GROUP - The value is one of the attributes\
        \ from a group identity store provisioner for SCIM processing.<br>SCIM_USER\
        \ - The value is one of the attributes passed in from the SCIM user request.<br>SCIM_GROUP\
        \ - The value is one of the attributes passed in from the SCIM group request.<br>"
    SpAdapter:
      allOf:
        - $ref: "#/components/schemas/PluginInstance"
        - type: object
          properties:
            attributeContract:
              $ref: "#/components/schemas/SpAdapterAttributeContract"
            targetApplicationInfo:
              $ref: "#/components/schemas/SpAdapterTargetApplicationInfo"
          description: An SP adapter instance.
    SpAdapterAttribute:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of this attribute.
      description: An attribute for the SP adapter attribute contract.
    SpAdapterAttributeContract:
      type: object
      properties:
        coreAttributes:
          type: array
          description:
            A list of read-only attributes that are automatically populated
            by the SP adapter descriptor.
          items:
            $ref: "#/components/schemas/SpAdapterAttribute"
        extendedAttributes:
          type: array
          description:
            A list of additional attributes that can be returned by the
            SP adapter. The extended attributes are only used if the adapter supports
            them.
          items:
            $ref: "#/components/schemas/SpAdapterAttribute"
        inherited:
          type: boolean
          description:
            "Whether this attribute contract is inherited from its parent\
            \ instance. If true, the rest of the properties in this model become read-only.\
            \ The default value is false."
      description: A set of attributes exposed by an SP adapter.
    SpAdapterTargetApplicationInfo:
      type: object
      properties:
        applicationName:
          type: string
          description: The application name.
        applicationIconUrl:
          type: string
          description: The application icon URL.
        inherited:
          type: boolean
          description:
            "Specifies Whether target application information is inherited\
            \ from its parent instance. If true, the rest of the properties in this\
            \ model become read-only. The default value is false."
      description: Target Application Information exposed by an SP adapter.
    TokenGenerator:
      allOf:
        - $ref: "#/components/schemas/PluginInstance"
        - type: object
          properties:
            attributeContract:
              $ref: "#/components/schemas/TokenGeneratorAttributeContract"
          description: A token generator instance.
    TokenGeneratorAttribute:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of this attribute.
      description: An attribute for the token generator attribute contract.
    TokenGeneratorAttributeContract:
      required:
        - coreAttributes
      type: object
      properties:
        coreAttributes:
          type: array
          description:
            A list of token generator attributes that correspond to the
            attributes exposed by the token generator type.
          items:
            $ref: "#/components/schemas/TokenGeneratorAttribute"
        extendedAttributes:
          type: array
          description:
            A list of additional attributes that can be returned by the
            token processor. The extended attributes are only used if the token generator
            supports them.
          items:
            $ref: "#/components/schemas/TokenGeneratorAttribute"
        inherited:
          type: boolean
          description:
            "Whether this attribute contract is inherited from its parent\
            \ instance. If true, the rest of the properties in this model become read-only.\
            \ The default value is false."
      description: A set of attributes exposed by a token generator.
    TokenProcessor:
      allOf:
        - $ref: "#/components/schemas/PluginInstance"
        - type: object
          properties:
            attributeContract:
              $ref: "#/components/schemas/TokenProcessorAttributeContract"
          description: A token processor instance.
    TokenProcessorAttribute:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of this attribute.
        masked:
          type: boolean
          description:
            Specifies whether this attribute is masked in PingFederate
            logs. Defaults to false.
      description: An attribute for the token processor attribute contract.
    TokenProcessorAttributeContract:
      required:
        - coreAttributes
      type: object
      properties:
        coreAttributes:
          type: array
          description:
            A list of token processor attributes that correspond to the
            attributes exposed by the token processor type.
          items:
            $ref: "#/components/schemas/TokenProcessorAttribute"
        extendedAttributes:
          type: array
          description:
            A list of additional attributes that can be returned by the
            token processor. The extended attributes are only used if the token processor
            supports them.
          items:
            $ref: "#/components/schemas/TokenProcessorAttribute"
        maskOgnlValues:
          type: boolean
          description:
            Whether or not all OGNL expressions used to fulfill an outgoing
            assertion contract should be masked in the logs. Defaults to false.
        inherited:
          type: boolean
          description:
            "Whether this attribute contract is inherited from its parent\
            \ instance. If true, the rest of the properties in this model become read-only.\
            \ The default value is false."
      description: A set of attributes exposed by a token processor.
    AccessTokenMapping:
      required:
        - accessTokenManagerRef
        - attributeContractFulfillment
        - context
      type: object
      properties:
        id:
          type: string
          description: The id of the Access Token Mapping.
        context:
          $ref: "#/components/schemas/AccessTokenMappingContext"
        accessTokenManagerRef:
          $ref: "#/components/schemas/ResourceLink"
        attributeSources:
          type: array
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: "#/components/schemas/AttributeSourceAggregation"
        attributeContractFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of mappings from attribute names to their fulfillment
            values.
        issuanceCriteria:
          $ref: "#/components/schemas/IssuanceCriteria"
      description: The Access Token Attribute Mapping.
    AccessTokenMappingContext:
      required:
        - contextRef
        - type
      type: object
      properties:
        type:
          type: string
          description: The Access Token Mapping Context type.
          enum:
            - DEFAULT
            - PCV
            - IDP_CONNECTION
            - IDP_ADAPTER
            - AUTHENTICATION_POLICY_CONTRACT
            - CLIENT_CREDENTIALS
            - TOKEN_EXCHANGE_PROCESSOR_POLICY
        contextRef:
          $ref: "#/components/schemas/ResourceLink"
      description: The Access Token Attribute Mapping.
    AdministrativeAccount:
      required:
        - username
      type: object
      properties:
        username:
          type: string
          description: Username for the Administrative Account.
        password:
          type: string
          description:
            Password for the Account. This field is only applicable during
            a POST operation.
        encryptedPassword:
          type: string
          description:
            "For GET requests, this field contains the encrypted account\
            \ password. For POST and PUT requests, if you wish to re-use the password\
            \ from an API response to this endpoint, this field should be passed back\
            \ unchanged."
        active:
          type: boolean
          description: Indicates whether the account is active or not.
        description:
          type: string
          description: Description of the account.
        auditor:
          type: boolean
          description:
            Indicates whether the account belongs to an Auditor. An Auditor
            has View-only permissions for all administrative functions. An Auditor
            cannot have any administrative roles.
        phoneNumber:
          type: string
          description: Phone number associated with the account.
        emailAddress:
          type: string
          description: Email address associated with the account.
        department:
          type: string
          description: The Department name of account user.
        roles:
          uniqueItems: true
          type: array
          description:
            "Roles available for an administrator. <br>USER_ADMINISTRATOR\
            \ - Can create, deactivate or delete accounts and reset passwords. Additionally,\
            \ install replacement license keys. <br> CRYPTO_ADMINISTRATOR - Can manage\
            \ local keys and certificates. <br> ADMINISTRATOR - Can configure partner\
            \ connections and most system settings (except the management of native\
            \ accounts and the handling of local keys and certificates. <br>EXPRESSION_ADMINISTRATOR\
            \ - Can add and update OGNL expressions. <br>"
          items:
            type: string
            enum:
              - USER_ADMINISTRATOR
              - CRYPTO_ADMINISTRATOR
              - ADMINISTRATOR
              - EXPRESSION_ADMINISTRATOR
      description: A PingFederate administrator account.
    AdministrativeAccounts:
      type: object
      properties:
        items:
          type: array
          description: List of Administrative Accounts.
          items:
            $ref: "#/components/schemas/AdministrativeAccount"
      description: PingFederate administrator accounts.
    UserCredentials:
      required:
        - newPassword
      type: object
      properties:
        currentPassword:
          type: string
          description:
            Current password. Required only during Password Change and
            not applicable for Password Reset.
        newPassword:
          type: string
          description: A new password.
      description: Credentials for an administrator account.
    ApcToSpAdapterMapping:
      required:
        - attributeContractFulfillment
        - sourceId
        - targetId
      type: object
      properties:
        attributeSources:
          type: array
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: "#/components/schemas/AttributeSourceAggregation"
        attributeContractFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of mappings from attribute names to their fulfillment
            values.
        issuanceCriteria:
          $ref: "#/components/schemas/IssuanceCriteria"
        sourceId:
          type: string
          description: The id of the Authentication Policy Contract.
        targetId:
          type: string
          description: The id of the SP Adapter.
        id:
          type: string
          description:
            The id of the APC-to-SP Adapter mapping. This field is read-only
            and is ignored when passed in with the payload.
        defaultTargetResource:
          type: string
          description: Default target URL for this APC-to-adapter mapping configuration.
        licenseConnectionGroupAssignment:
          type: string
          description: The license connection group.
      description: The Authentication Policy Contract (APC) to SP Adapter Mapping.
    ApcToSpAdapterMappings:
      type: object
      properties:
        items:
          type: array
          description: The actual list of mappings.
          items:
            $ref: "#/components/schemas/ApcToSpAdapterMapping"
      description:
        A collection of Authentication Policy Contract (APC) to SP Adapter
        Mappings.
    AuthnApiApplication:
      required:
        - id
        - name
        - url
      type: object
      properties:
        id:
          type: string
          description:
            "The persistent, unique ID for the Authentication API application.\
            \ It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned\
            \ if not specified."
        name:
          type: string
          description: The Authentication API Application Name. Name must be unique.
        url:
          type: string
          description: The Authentication API Application redirect URL.
        description:
          type: string
          description: The Authentication API Application description.
        additionalAllowedOrigins:
          type: array
          description:
            The domain in the redirect URL is always whitelisted. This
            field contains a list of additional allowed origin URL's for cross-origin
            resource sharing.
          items:
            type: string
        clientForRedirectlessModeRef:
          $ref: "#/components/schemas/ResourceLink"
      description: Authentication API Application.
    AuthnApiSettings:
      type: object
      properties:
        apiEnabled:
          type: boolean
          description:
            Specifies whether the authentication API is enabled. The default
            value is false.
        defaultApplicationRef:
          $ref: "#/components/schemas/ResourceLink"
        enableApiDescriptions:
          type: boolean
          description: Enable the API Descriptions endpoint.
        restrictAccessToRedirectlessMode:
          type: boolean
          description:
            Determines whether access to the authentication API redirectless
            mode is restricted to specified applications.
        includeRequestContext:
          type: boolean
          description:
            Determines whether the request context parameters are included
            in response for authentication API. The default value is false.
      description: Authentication API Application Settings.
    AuthnApiApplications:
      type: object
      properties:
        items:
          type: array
          description: The actual list of Authentication API Applications.
          items:
            $ref: "#/components/schemas/AuthnApiApplication"
      description: A collection of Authentication API Application items.
    AuthenticationPoliciesSettings:
      type: object
      properties:
        enableIdpAuthnSelection:
          type: boolean
          description: Enable IdP authentication policies.
        enableSpAuthnSelection:
          type: boolean
          description: Enable SP authentication policies.
      description: The settings for the authentication policies.
    ApcMappingPolicyAction:
      allOf:
        - $ref: "#/components/schemas/PolicyAction"
        - required:
            - attributeMapping
            - authenticationPolicyContractRef
          type: object
          properties:
            authenticationPolicyContractRef:
              $ref: "#/components/schemas/ResourceLink"
            attributeMapping:
              $ref: "#/components/schemas/AttributeMapping"
          description: An authentication policy contract selection action.
    AttributeMapping:
      required:
        - attributeContractFulfillment
      type: object
      properties:
        attributeSources:
          type: array
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: "#/components/schemas/AttributeSourceAggregation"
        attributeContractFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of mappings from attribute names to their fulfillment
            values.
        issuanceCriteria:
          $ref: "#/components/schemas/IssuanceCriteria"
      description: A list of mappings from attribute sources to attribute targets.
    AttributeRule:
      required:
        - result
      type: object
      properties:
        attributeSource:
          $ref: "#/components/schemas/SourceTypeIdKey"
        attributeName:
          type: string
          description:
            The name of the attribute to use in this attribute rule. This
            field is required if the Attribute Source type is not 'EXPRESSION'.
        condition:
          type: string
          description:
            The condition that will be applied to the attribute's expected
            value. This field is required if the Attribute Source type is not 'EXPRESSION'.
          enum:
            - EQUALS
            - EQUALS_CASE_INSENSITIVE
            - EQUALS_DN
            - NOT_EQUAL
            - NOT_EQUAL_CASE_INSENSITIVE
            - NOT_EQUAL_DN
            - MULTIVALUE_CONTAINS
            - MULTIVALUE_CONTAINS_CASE_INSENSITIVE
            - MULTIVALUE_CONTAINS_DN
            - MULTIVALUE_DOES_NOT_CONTAIN
            - MULTIVALUE_DOES_NOT_CONTAIN_CASE_INSENSITIVE
            - MULTIVALUE_DOES_NOT_CONTAIN_DN
        expectedValue:
          type: string
          description:
            The expected value of this attribute rule. This field is required
            if the Attribute Source type is not 'EXPRESSION'.
        expression:
          type: string
          description:
            The expression of this attribute rule. This field is required
            if the Attribute Source type is 'EXPRESSION'.
        result:
          type: string
          description: The result of this attribute rule.
      description:
        Authentication policy rules using attributes from the previous
        authentication source. Each rule is evaluated to determine the next action
        in the policy.
    AttributeRules:
      type: object
      properties:
        fallbackToSuccess:
          type: boolean
          description:
            "When all the rules fail, you may choose to default to the\
            \ general success action or fail. Default to success."
        items:
          type: array
          description: The actual list of attribute rules.
          items:
            $ref: "#/components/schemas/AttributeRule"
      description: A collection of attribute rules
    AuthenticationPolicyFragment:
      type: object
      properties:
        id:
          type: string
          description: The authentication policy fragment ID. ID is unique.
        name:
          type: string
          description: The authentication policy fragment name. Name is unique.
        description:
          type: string
          description: A description for the authentication policy fragment.
        rootNode:
          $ref: "#/components/schemas/AuthenticationPolicyTreeNode"
        inputs:
          $ref: "#/components/schemas/ResourceLink"
        outputs:
          $ref: "#/components/schemas/ResourceLink"
      description: An authentication policy fragment.
    AuthenticationPolicyTreeNode:
      required:
        - action
      type: object
      properties:
        action:
          $ref: "#/components/schemas/PolicyActionAggregation"
        children:
          type: array
          description:
            The nodes inside the authentication policy tree node of type
            AuthenticationPolicyTreeNode.
          items:
            $ref: "#/components/schemas/AuthenticationPolicyTreeNode"
      description: An authentication policy tree node.
    AuthenticationSource:
      required:
        - sourceRef
        - type
      type: object
      properties:
        type:
          type: string
          description: The type of this authentication source.
          enum:
            - IDP_ADAPTER
            - IDP_CONNECTION
        sourceRef:
          $ref: "#/components/schemas/ResourceLink"
      description: An authentication source (IdP adapter or IdP connection).
    AuthnSelectorPolicyAction:
      allOf:
        - $ref: "#/components/schemas/PolicyAction"
        - required:
            - authenticationSelectorRef
          type: object
          properties:
            authenticationSelectorRef:
              $ref: "#/components/schemas/ResourceLink"
          description: An authentication selector selection action.
    AuthnSourcePolicyAction:
      allOf:
        - $ref: "#/components/schemas/PolicyAction"
        - required:
            - authenticationSource
          type: object
          properties:
            attributeRules:
              $ref: "#/components/schemas/AttributeRules"
            authenticationSource:
              $ref: "#/components/schemas/AuthenticationSource"
            inputUserIdMapping:
              $ref: "#/components/schemas/AttributeFulfillmentValue"
            userIdAuthenticated:
              type: boolean
              description:
                Indicates whether the user ID obtained by the user ID mapping
                is authenticated.
          description: An authentication source selection action.
    ContinuePolicyAction:
      allOf:
        - $ref: "#/components/schemas/PolicyAction"
        - type: object
          description: The continue selection action.
    DonePolicyAction:
      allOf:
        - $ref: "#/components/schemas/PolicyAction"
        - type: object
          description: The done selection action.
    FragmentPolicyAction:
      allOf:
        - $ref: "#/components/schemas/PolicyAction"
        - required:
            - fragment
          type: object
          properties:
            attributeRules:
              $ref: "#/components/schemas/AttributeRules"
            fragment:
              $ref: "#/components/schemas/ResourceLink"
            fragmentMapping:
              $ref: "#/components/schemas/AttributeMapping"
          description: A authentication policy fragment selection action.
    LocalIdentityMappingPolicyAction:
      allOf:
        - $ref: "#/components/schemas/PolicyAction"
        - required:
            - localIdentityRef
            - outboundAttributeMapping
          type: object
          properties:
            localIdentityRef:
              $ref: "#/components/schemas/ResourceLink"
            inboundMapping:
              $ref: "#/components/schemas/AttributeMapping"
            outboundAttributeMapping:
              $ref: "#/components/schemas/AttributeMapping"
          description: A local identity profile selection action.
    PolicyActionAggregation:
      oneOf:
        - $ref: "#/components/schemas/ApcMappingPolicyAction"
        - $ref: "#/components/schemas/AuthnSelectorPolicyAction"
        - $ref: "#/components/schemas/AuthnSourcePolicyAction"
        - $ref: "#/components/schemas/ContinuePolicyAction"
        - $ref: "#/components/schemas/DonePolicyAction"
        - $ref: "#/components/schemas/FragmentPolicyAction"
        - $ref: "#/components/schemas/LocalIdentityMappingPolicyAction"
        - $ref: "#/components/schemas/RestartPolicyAction"
      discriminator:
        propertyName: type
        mapping:
          APC_MAPPING: "#/components/schemas/ApcMappingPolicyAction"
          AUTHN_SELECTOR: "#/components/schemas/AuthnSelectorPolicyAction"
          AUTHN_SOURCE: "#/components/schemas/AuthnSourcePolicyAction"
          CONTINUE: "#/components/schemas/ContinuePolicyAction"
          DONE: "#/components/schemas/DonePolicyAction"
          FRAGMENT: "#/components/schemas/FragmentPolicyAction"
          LOCAL_IDENTITY_MAPPING: "#/components/schemas/LocalIdentityMappingPolicyAction"
          RESTART: "#/components/schemas/RestartPolicyAction"
    PolicyAction:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: The authentication selection type.
          enum:
            - APC_MAPPING
            - LOCAL_IDENTITY_MAPPING
            - AUTHN_SELECTOR
            - AUTHN_SOURCE
            - DONE
            - CONTINUE
            - RESTART
            - FRAGMENT
        context:
          type: string
          description: The result context.
      description: An authentication policy selection action.
      discriminator:
        propertyName: type
    RestartPolicyAction:
      allOf:
        - $ref: "#/components/schemas/PolicyAction"
        - type: object
          description: The restart selection action.
    MoveItemRequest:
      required:
        - location
      type: object
      properties:
        location:
          type: string
          description: Enumeration for where to move the item.
          enum:
            - START
            - END
            - BEFORE
            - AFTER
        moveToId:
          type: string
          description:
            "When moving an item relative to another, this value indicates\
            \ the target move-to ID."
      description: Metadata from a request about where to move a resource
    AuthenticationPolicy:
      type: object
      properties:
        failIfNoSelection:
          type: boolean
          description: Fail if policy finds no authentication source.
        authnSelectionTrees:
          type: array
          description: The list of authentication policy trees.
          items:
            $ref: "#/components/schemas/AuthenticationPolicyTree"
        defaultAuthenticationSources:
          type: array
          description: The default authentication sources.
          items:
            $ref: "#/components/schemas/AuthenticationSource"
        trackedHttpParameters:
          type: array
          description:
            "The HTTP request parameters to track and make available to\
            \ authentication sources, selectors, and contract mappings throughout\
            \ the authentication policy."
          items:
            type: string
      description: An authentication policy.
    AuthenticationPolicyTree:
      type: object
      properties:
        id:
          type: string
          description: The authentication policy ID. ID is unique.
        name:
          type: string
          description: The authentication policy name. Name is unique.
        description:
          type: string
          description: A description for the authentication policy.
        authenticationApiApplicationRef:
          $ref: "#/components/schemas/ResourceLink"
        enabled:
          type: boolean
          description:
            Whether or not this authentication policy tree is enabled.
            Default is true.
        rootNode:
          $ref: "#/components/schemas/AuthenticationPolicyTreeNode"
        handleFailuresLocally:
          type: boolean
          description: If a policy ends in failure keep the user local.
      description: An authentication policy tree.
    AuthenticationPolicyFragments:
      type: object
      properties:
        items:
          type: array
          description: The actual list of Authentication Policy Fragments.
          items:
            $ref: "#/components/schemas/AuthenticationPolicyFragment"
      description: A collection of Authentication Policy Fragments
    AuthenticationPolicyContract:
      type: object
      properties:
        id:
          type: string
          description:
            "The persistent, unique ID for the authentication policy contract.\
            \ It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned\
            \ if not specified."
        name:
          type: string
          description: The Authentication Policy Contract Name. Name is unique.
        coreAttributes:
          type: array
          description:
            "A list of read-only assertion attributes (for example, subject)\
            \ that are automatically populated by PingFederate."
          items:
            $ref: "#/components/schemas/AuthenticationPolicyContractAttribute"
        extendedAttributes:
          type: array
          description: A list of additional attributes as needed.
          items:
            $ref: "#/components/schemas/AuthenticationPolicyContractAttribute"
        lastModified:
          type: string
          description:
            The time at which the authentication policy contract was last
            changed. This property is read only and is ignored on PUT and POST requests.
          format: date-time
      description:
        Authentication Policy Contracts carry user attributes from the
        identity provider to the service provider.
    AuthenticationPolicyContractAttribute:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of this attribute.
      description: An attribute for the Authentication Policy Contract.
    AuthenticationPolicyContracts:
      type: object
      properties:
        items:
          type: array
          description: The actual list of Authentication Policy Contracts.
          items:
            $ref: "#/components/schemas/AuthenticationPolicyContract"
      description: A collection of Authentication Policy Contracts
    AuthenticationSelectors:
      type: object
      properties:
        items:
          type: array
          description: The actual list of Authentication Selectors.
          items:
            $ref: "#/components/schemas/AuthenticationSelector"
      description: A collection of Authentication Selector instances.
    AuthenticationSelectorDescriptors:
      type: object
      properties:
        items:
          type: array
          description: The list of Authentication Selector descriptors.
          items:
            $ref: "#/components/schemas/AuthenticationSelectorDescriptor"
      description: A collection of Authentication Selector descriptors.
    SessionSettings:
      type: object
      properties:
        trackAdapterSessionsForLogout:
          type: boolean
          description:
            Determines whether adapter sessions are tracked for cleanup
            during single logout. The default is false.
        revokeUserSessionOnLogout:
          type: boolean
          description:
            "Determines whether the user's session is revoked on logout.\
            \ If this property is not provided on a PUT, the setting is left unchanged."
        sessionRevocationLifetime:
          type: integer
          description:
            "How long a session revocation is tracked and stored, in minutes.\
            \ If this property is not provided on a PUT, the setting is left unchanged."
          format: int32
      description: General settings related to session management.
    ApplicationSessionPolicy:
      type: object
      properties:
        idleTimeoutMins:
          type: integer
          description:
            "The idle timeout period, in minutes. If set to -1, the idle\
            \ timeout will be set to the maximum timeout. The default is 60."
          format: int32
        maxTimeoutMins:
          type: integer
          description:
            "The maximum timeout period, in minutes. If set to -1, sessions\
            \ do not expire. The default is 480."
          format: int32
      description:
        "Session controls for user facing PingFederate application endpoints,\
        \ such as the profile management endpoint."
    GlobalAuthenticationSessionPolicy:
      required:
        - enableSessions
      type: object
      properties:
        enableSessions:
          type: boolean
          description: Determines whether authentication sessions are enabled globally.
        persistentSessions:
          type: boolean
          description:
            Determines whether authentication sessions are persistent by
            default. Persistent sessions are linked to a persistent cookie and stored
            in a data store. This field is ignored if enableSessions is false.
        hashUniqueUserKeyAttribute:
          type: boolean
          description:
            Determines whether to hash the value of the unique user key
            attribute.
        idleTimeoutMins:
          type: integer
          description:
            "The idle timeout period, in minutes. If set to -1, the idle\
            \ timeout will be set to the maximum timeout. The default is 60."
          format: int32
        idleTimeoutDisplayUnit:
          type: string
          description:
            "The display unit for the idle timeout period in the PingFederate\
            \ administrative console. When the display unit is HOURS or DAYS, the\
            \ timeout value in minutes must correspond to a whole number value for\
            \ the specified unit."
          enum:
            - MINUTES
            - HOURS
            - DAYS
        maxTimeoutMins:
          type: integer
          description:
            "The maximum timeout period, in minutes. If set to -1, sessions\
            \ do not expire. The default is 480."
          format: int32
        maxTimeoutDisplayUnit:
          type: string
          description:
            "The display unit for the maximum timeout period in the PingFederate\
            \ administrative console. When the display unit is HOURS or DAYS, the\
            \ timeout value in minutes must correspond to a whole number value for\
            \ the specified unit."
          enum:
            - MINUTES
            - HOURS
            - DAYS
      description: The global policy for authentication sessions.
    AuthenticationSessionPolicy:
      required:
        - authenticationSource
        - enableSessions
      type: object
      properties:
        id:
          type: string
          description:
            "The persistent, unique ID for the session policy. It can be\
            \ any combination of [a-z0-9._-]. This property is system-assigned if\
            \ not specified."
        authenticationSource:
          $ref: "#/components/schemas/AuthenticationSource"
        enableSessions:
          type: boolean
          description:
            Determines whether sessions are enabled for the authentication
            source. This value overrides the enableSessions value from the global
            authentication session policy.
        userDeviceType:
          type: string
          description:
            "Determines the type of user device that the authentication\
            \ session can be created on. If empty, the value will default to PRIVATE."
          enum:
            - PRIVATE
            - SHARED
            - ANY
        persistent:
          type: boolean
          description:
            Determines whether sessions for the authentication source are
            persistent. This value overrides the persistentSessions value from the
            global authentication session policy.This field is ignored if enableSessions
            is false.
        idleTimeoutMins:
          type: integer
          description:
            "The idle timeout period, in minutes. If omitted, the value\
            \ from the global authentication session policy will be used. If set to\
            \ -1, the idle timeout will be set to the maximum timeout. If a value\
            \ is provided for this property, a value must also be provided for maxTimeoutMins."
          format: int32
        maxTimeoutMins:
          type: integer
          description:
            "The maximum timeout period, in minutes. If omitted, the value\
            \ from the global authentication session policy will be used. If set to\
            \ -1, sessions do not expire. If a value is provided for this property,\
            \ a value must also be provided for idleTimeoutMins."
          format: int32
        timeoutDisplayUnit:
          type: string
          description:
            "The display unit for session timeout periods in the PingFederate\
            \ administrative console. When the display unit is HOURS or DAYS, the\
            \ timeout values in minutes must correspond to a whole number value for\
            \ the specified unit."
          enum:
            - MINUTES
            - HOURS
            - DAYS
        authnContextSensitive:
          type: boolean
          description:
            Determines whether the requested authentication context is
            considered when deciding whether an existing session is valid for a given
            request. The default is false.
      description: The session policy for a specified authentication source.
    AuthenticationSessionPolicies:
      type: object
      properties:
        items:
          type: array
          description: The actual list of policies.
          items:
            $ref: "#/components/schemas/AuthenticationSessionPolicy"
      description: A collection of authentication session policies.
    AuthorizationDetailProcessorDescriptors:
      type: object
      properties:
        items:
          type: array
          description: The list of authorization detail processor plugin descriptors.
          items:
            $ref: "#/components/schemas/AuthorizationDetailProcessorDescriptor"
      description: A collection of authorization detail processor plugin descriptors.
    AuthorizationDetailProcessors:
      type: object
      properties:
        items:
          type: array
          description: The list of authorization detail processor plugin instances.
          items:
            $ref: "#/components/schemas/AuthorizationDetailProcessor"
      description: A collection of authorization detail processor plugin instances.
    AuthorizationServerSettings:
      required:
        - authorizationCodeEntropy
        - authorizationCodeTimeout
        - refreshRollingInterval
        - refreshTokenLength
      type: object
      properties:
        defaultScopeDescription:
          type: string
          description: The default scope description.
        scopes:
          type: array
          description: The list of common scopes.
          items:
            $ref: "#/components/schemas/ScopeEntry"
        scopeGroups:
          type: array
          description: The list of common scope groups.
          items:
            $ref: "#/components/schemas/ScopeGroupEntry"
        exclusiveScopes:
          type: array
          description: The list of exclusive scopes.
          items:
            $ref: "#/components/schemas/ScopeEntry"
        exclusiveScopeGroups:
          type: array
          description: The list of exclusive scope groups.
          items:
            $ref: "#/components/schemas/ScopeGroupEntry"
        authorizationCodeTimeout:
          type: integer
          description: "The authorization code timeout, in seconds."
          format: int32
        authorizationCodeEntropy:
          type: integer
          description: "The authorization code entropy, in bytes."
          format: int32
        disallowPlainPKCE:
          type: boolean
          description:
            Determines whether PKCE's 'plain' code challenge method will
            be disallowed. The default value is false.
        includeIssuerInAuthorizationResponse:
          type: boolean
          description:
            Determines whether the authorization server's issuer value
            is added to the authorization response or not. The default value is false.
        trackUserSessionsForLogout:
          type: boolean
          description:
            "Determines whether user sessions are tracked for logout. If\
            \ this property is not provided on a PUT, the setting is left unchanged."
        tokenEndpointBaseUrl:
          type: string
          description:
            The token endpoint base URL used to validate the 'aud' claim
            during Private Key JWT Client Authentication.
        persistentGrantLifetime:
          type: integer
          description:
            The persistent grant lifetime. The default value is indefinite.
            -1 indicates an indefinite amount of time.
          format: int64
        persistentGrantLifetimeUnit:
          type: string
          description: The persistent grant lifetime unit.
          enum:
            - MINUTES
            - DAYS
            - HOURS
        persistentGrantIdleTimeout:
          type: integer
          description:
            The persistent grant idle timeout. The default value is 30
            (days). -1 indicates an indefinite amount of time.
          format: int64
        persistentGrantIdleTimeoutTimeUnit:
          type: string
          description: The persistent grant idle timeout time unit.
          enum:
            - MINUTES
            - DAYS
            - HOURS
        refreshTokenLength:
          type: integer
          description: The refresh token length in number of characters.
          format: int32
        rollRefreshTokenValues:
          type: boolean
          description:
            The roll refresh token values default policy. The default value
            is true.
        refreshTokenRollingGracePeriod:
          type: integer
          description:
            The grace period that a rolled refresh token remains valid
            in seconds. The default value is 60.
          format: int32
        refreshRollingInterval:
          type: integer
          description: "The minimum interval to roll refresh tokens, in hours."
          format: int64
        persistentGrantReuseGrantTypes:
          type: array
          description:
            The grant types that the OAuth AS can reuse rather than creating
            a new grant for each request. Only 'IMPLICIT' or 'AUTHORIZATION_CODE'
            or 'RESOURCE_OWNER_CREDENTIALS' are valid grant types.
          items:
            type: string
            enum:
              - IMPLICIT
              - AUTHORIZATION_CODE
              - RESOURCE_OWNER_CREDENTIALS
              - CLIENT_CREDENTIALS
              - REFRESH_TOKEN
              - EXTENSION
              - DEVICE_CODE
              - ACCESS_TOKEN_VALIDATION
              - CIBA
              - TOKEN_EXCHANGE
        persistentGrantContract:
          $ref: "#/components/schemas/PersistentGrantContract"
        bypassAuthorizationForApprovedGrants:
          type: boolean
          description:
            Bypass authorization for previously approved persistent grants.
            The default value is false.
        bypassAuthorizationForApprovedConsents:
          type: boolean
          description:
            Bypass authorization for previously approved consents. The
            default value is false.
        consentLifetimeDays:
          type: integer
          description:
            The consent lifetime in days. The default value is indefinite.
            -1 indicates an indefinite amount of time.
          format: int32
        allowUnidentifiedClientROCreds:
          type: boolean
          description:
            Allow unidentified clients to request resource owner password
            credentials grants. The default value is false.
        allowUnidentifiedClientExtensionGrants:
          type: boolean
          description:
            Allow unidentified clients to request extension grants. The
            default value is false.
        adminWebServicePcvRef:
          $ref: "#/components/schemas/ResourceLink"
        atmIdForOAuthGrantManagement:
          type: string
          description:
            The ID of the Access Token Manager used for OAuth enabled grant
            management.
        scopeForOAuthGrantManagement:
          type: string
          description:
            The OAuth scope to validate when accessing grant management
            service.
        allowedOrigins:
          type: array
          description: The list of allowed origins.
          items:
            type: string
        userAuthorizationUrl:
          type: string
          description:
            The URL used to generate 'verification_url' and 'verification_url_complete'
            values in a Device Authorization request
        registeredAuthorizationPath:
          type: string
          description:
            The Registered Authorization Path is concatenated to PingFederate
            base URL to generate 'verification_url' and 'verification_url_complete'
            values in a Device Authorization request. PingFederate listens to this
            path if specified
        pendingAuthorizationTimeout:
          type: integer
          description: "The 'device_code' and 'user_code' timeout, in seconds."
          format: int32
        devicePollingInterval:
          type: integer
          description:
            "The amount of time client should wait between polling requests,\
            \ in seconds."
          format: int32
        activationCodeCheckMode:
          type: string
          description:
            Determines whether the user is prompted to enter or confirm
            the activation code after authenticating or before. The default is AFTER_AUTHENTICATION.
          enum:
            - AFTER_AUTHENTICATION
            - BEFORE_AUTHENTICATION
        bypassActivationCodeConfirmation:
          type: boolean
          description:
            Indicates if the Activation Code Confirmation page should be
            bypassed if 'verification_url_complete' is used by the end user to authorize
            a device.
        userAuthorizationConsentPageSetting:
          type: string
          description:
            User Authorization Consent Page setting to use PingFederate's
            internal consent page or an external system
          enum:
            - INTERNAL
            - ADAPTER
        userAuthorizationConsentAdapter:
          type: string
          description:
            Adapter ID of the external consent adapter to be used for the
            consent page user interface.
        approvedScopesAttribute:
          type: string
          description:
            "Attribute from the external consent adapter's contract, intended\
            \ for storing approved scopes returned by the external consent page."
        approvedAuthorizationDetailAttribute:
          type: string
          description:
            "Attribute from the external consent adapter's contract, intended\
            \ for storing approved authorization details returned by the external\
            \ consent page."
        parReferenceTimeout:
          type: integer
          description:
            "The timeout, in seconds, of the pushed authorization request\
            \ reference. The default value is 60."
          format: int32
        parReferenceLength:
          type: integer
          description:
            "The entropy of pushed authorization request references, in\
            \ bytes. The default value is 24."
          format: int32
        parStatus:
          type: string
          description:
            The status of pushed authorization request support. The default
            value is ENABLED.
          enum:
            - DISABLED
            - ENABLED
            - REQUIRED
        clientSecretRetentionPeriod:
          type: integer
          description:
            "The length of time in minutes that client secrets will be\
            \ retained as secondary secrets after secret change. The default value\
            \ is 0, which will disable secondary client secret retention."
          format: int32
        jwtSecuredAuthorizationResponseModeLifetime:
          type: integer
          description:
            "The lifetime, in seconds, of the JWT Secured authorization\
            \ response. The default value is 600."
          format: int32
        dpopProofRequireNonce:
          type: boolean
          description:
            Determines whether nonce is required in the Demonstrating Proof-of-Possession
            (DPoP) proof JWT. The default value is false.
        dpopProofLifetimeSeconds:
          type: integer
          description:
            "The lifetime, in seconds, of the Demonstrating Proof-of-Possession\
            \ (DPoP) proof JWT. The default value is 120."
          format: int32
        dpopProofEnforceReplayPrevention:
          type: boolean
          description:
            Determines whether Demonstrating Proof-of-Possession (DPoP)
            proof JWT replay prevention is enforced. The default value is false.
      description: Authorization Server Settings attributes.
    PersistentGrantAttribute:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of this attribute.
      description: A persistent grant contract attribute.
    PersistentGrantContract:
      required:
        - coreAttributes
      type: object
      properties:
        coreAttributes:
          type: array
          description:
            This is a read-only list of persistent grant attributes and
            includes USER_KEY and USER_NAME. Changes to this field will be ignored.
          items:
            $ref: "#/components/schemas/PersistentGrantAttribute"
        extendedAttributes:
          type: array
          description: A list of additional attributes for the persistent grant contract.
          items:
            $ref: "#/components/schemas/PersistentGrantAttribute"
    ScopeEntry:
      required:
        - description
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the scope.
        description:
          type: string
          description:
            The description of the scope that appears when the user is
            prompted for authorization.
        dynamic:
          type: boolean
          description: True if the scope is dynamic. (Defaults to false)
      description: A scope name and its description.
    ScopeGroupEntry:
      required:
        - description
        - name
        - scopes
      type: object
      properties:
        name:
          type: string
          description: The name of the scope group.
        description:
          type: string
          description: The description of the scope group.
        scopes:
          uniqueItems: true
          type: array
          description: The set of scopes for this scope group.
          items:
            type: string
      description: A scope group name and its description.
    BulkConfig:
      required:
        - metadata
        - operations
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/BulkConfigMetadata"
        operations:
          type: array
          description: A list of configuration operations.
          items:
            $ref: "#/components/schemas/ConfigOperation"
      description: Model describing a series of configuration operations.
    BulkConfigMetadata:
      required:
        - pfVersion
      type: object
      properties:
        pfVersion:
          type: string
          description: The version of PingFederate this config was generated from.
      description: Model describing how bulk configuration data was generated.
    ConfigOperation:
      required:
        - operationType
        - resourceType
      type: object
      properties:
        resourceType:
          type: string
          description:
            The identifier for the resource type the operation applies
            to.
        subResource:
          type: string
          description: The subresource for the operation.
        operationType:
          type: string
          description: The type of operation to be performed.
          enum:
            - SAVE
            - DELETE
        items:
          type: array
          description:
            The configuration items for the operation. This field only
            applies to the SAVE operation type.
          items:
            type: object
            properties: {}
        itemIds:
          type: array
          description:
            The item ID's for the operation. This field only applies to
            the DELETE operation type.
          items:
            type: string
      description:
        Model describing a list of configuration operations for a given
        resource type.
    CaptchaProvidersSettings:
      type: object
      properties:
        defaultCaptchaProviderRef:
          $ref: "#/components/schemas/ResourceLink"
      description: General CAPTCHA provider settings.
    A CAPTCHA provider plugin descriptor.:
      type: object
      properties:
        id:
          type: string
          description: Unique ID of the plugin.
        name:
          type: string
          description: Friendly name for the plugin.
        className:
          type: string
          description: Full class name of the class that implements this plugin.
        attributeContract:
          type: array
          description: The attribute contract for this plugin.
          items:
            type: string
        supportsExtendedContract:
          type: boolean
          description:
            Determines whether this plugin supports extending the attribute
            contract.
        configDescriptor:
          $ref: "#/components/schemas/PluginConfigDescriptor"
    A collection of CAPTCHA provider plugin descriptors.:
      type: object
      properties:
        items:
          type: array
          description: The list of CAPTCHA provider plugin descriptors.
          items:
            $ref: "#/components/schemas/A CAPTCHA provider plugin descriptor."
    CaptchaProvider:
      required:
        - configuration
        - id
        - name
        - pluginDescriptorRef
      type: object
      properties:
        id:
          type: string
          description:
            "The ID of the plugin instance. The ID cannot be modified once\
            \ the instance is created.<br>Note: Ignored when specifying a connection's\
            \ adapter override."
        name:
          type: string
          description:
            "The plugin instance name. The name can be modified once the\
            \ instance is created.<br>Note: Ignored when specifying a connection's\
            \ adapter override."
        pluginDescriptorRef:
          $ref: "#/components/schemas/ResourceLink"
        parentRef:
          $ref: "#/components/schemas/ResourceLink"
        configuration:
          $ref: "#/components/schemas/PluginConfiguration"
        lastModified:
          type: string
          description:
            The time at which the plugin instance was last changed. This
            property is read only and is ignored on PUT and POST requests.
          format: date-time
      description: A CAPTCHA provider plugin instance.
    CaptchaProviders:
      type: object
      properties:
        items:
          type: array
          description: The list of CAPTCHA provider plugin instances.
          items:
            $ref: "#/components/schemas/CaptchaProvider"
      description: A collection of CAPTCHA provider plugin instances.
    CertView:
      type: object
      properties:
        id:
          type: string
          description: "The persistent, unique ID for the certificate."
        serialNumber:
          type: string
          description: The serial number assigned by the CA.
        subjectDN:
          type: string
          description: The subject's distinguished name.
        subjectAlternativeNames:
          type: array
          description: The subject alternative names (SAN).
          items:
            type: string
        issuerDN:
          type: string
          description: The issuer's distinguished name.
        validFrom:
          type: string
          description:
            "The start date from which the item is valid, in ISO 8601 format\
            \ (UTC)."
          format: date-time
        expires:
          type: string
          description:
            "The end date up until which the item is valid, in ISO 8601\
            \ format (UTC)."
          format: date-time
        keyAlgorithm:
          type: string
          description: The public key algorithm.
        keySize:
          type: integer
          description: The public key size.
          format: int32
        signatureAlgorithm:
          type: string
          description: The signature algorithm.
        version:
          type: integer
          description: The X.509 version to which the item conforms.
          format: int32
        sha1Fingerprint:
          type: string
          description: SHA-1 fingerprint in Hex encoding.
        sha256Fingerprint:
          type: string
          description: SHA-256 fingerprint in Hex encoding.
        status:
          type: string
          description: Status of the item.
          enum:
            - VALID
            - EXPIRED
            - NOT_YET_VALID
            - REVOKED
        cryptoProvider:
          type: string
          description:
            Cryptographic Provider. This is only applicable if Hybrid HSM
            mode is true.
          enum:
            - LOCAL
            - HSM
      description: Certificate details.
    CertViews:
      type: object
      properties:
        items:
          type: array
          description: The actual list of certificate instances.
          items:
            $ref: "#/components/schemas/CertView"
      description: A collection of Certificate items.
    X509File:
      required:
        - fileData
      type: object
      properties:
        id:
          type: string
          description:
            "The persistent, unique ID for the certificate. It can be any\
            \ combination of [a-z0-9._-]. This property is system-assigned if not\
            \ specified."
        fileData:
          type: string
          description:
            The certificate data in PEM format. New line characters should
            be omitted or encoded in this value.
        cryptoProvider:
          type: string
          description:
            Cryptographic Provider. This is only applicable if Hybrid HSM
            mode is true.
          enum:
            - LOCAL
            - HSM
      description: Encoded certificate data.
    CertificateRevocationSettings:
      type: object
      properties:
        ocspSettings:
          $ref: "#/components/schemas/OcspSettings"
        crlSettings:
          $ref: "#/components/schemas/CrlSettings"
        proxySettings:
          $ref: "#/components/schemas/ProxySettings"
      description: Certificate revocation settings.
    CrlSettings:
      type: object
      properties:
        treatNonRetrievableCrlAsRevoked:
          type: boolean
          description:
            Treat non retrievable CRL as revoked. This setting defaults
            to disabled.
        verifyCrlSignature:
          type: boolean
          description: Verify CRL signature. This setting defaults to enabled.
        nextRetryMinsWhenResolveFailed:
          type: integer
          description:
            Next retry on resolution failure in minutes. This value defaults
            to "1440".
          format: int32
        nextRetryMinsWhenNextUpdateInPast:
          type: integer
          description:
            Next retry on next update expiration in minutes. This value
            defaults to "60".
          format: int32
      description: CRL settings.
    OcspSettings:
      type: object
      properties:
        requesterAddNonce:
          type: boolean
          description:
            Do not allow responder to use cached responses. This setting
            defaults to disabled.
        responderUrl:
          type: string
          description:
            Default responder URL. This URL is used if the certificate
            being checked does not specify an OCSP responder URL.
        responderCertReference:
          $ref: "#/components/schemas/ResourceLink"
        currentUpdateGracePeriod:
          type: integer
          description:
            Current update grace period in minutes. This value defaults
            to "5".
          format: int32
        nextUpdateGracePeriod:
          type: integer
          description:
            Next update grace period in minutes. This value defaults to
            "5".
          format: int32
        responseCachePeriod:
          type: integer
          description: Response cache period in hours. This value defaults to "48".
          format: int32
        responderTimeout:
          type: integer
          description:
            Responder connection timeout in seconds. This value defaults
            to "5".
          format: int32
        actionOnResponderUnavailable:
          type: string
          description: Action on responder unavailable. This value defaults to  "CONTINUE".
        actionOnStatusUnknown:
          type: string
          description: Action on status unknown. This value defaults to  "FAIL".
        actionOnUnsuccessfulResponse:
          type: string
          description: Action on unsuccessful response. This value defaults to  "FAIL".
      description: OCSP settings.
    ProxySettings:
      type: object
      properties:
        host:
          type: string
          description: Host name.
        port:
          type: integer
          description: Port number.
          format: int32
      description: Proxy settings.
    ClusterSettings:
      type: object
      properties:
        replicateConnectionsOnSave:
          type: boolean
          description:
            Whether changes to connections will automatically be replicated
            to the cluster.
        replicateClientsOnSave:
          type: boolean
          description:
            Whether changes to OAuth clients will automatically be replicated
            to the cluster. This setting only applies when using XML Client storage.
      description: Cluster configuration settings.
    ClusterNode:
      type: object
      properties:
        address:
          type: string
          description: The IP address and port this node is running on.
        index:
          type: integer
          description:
            "Index of the node within the cluster, or -1 if an index is\
            \ not assigned."
          format: int32
        mode:
          type: string
          description:
            "The deployment mode of this node, from a clustering standpoint.\
            \ CLUSTERED_DUAL is not supported."
          enum:
            - CLUSTERED_ENGINE
            - CLUSTERED_CONSOLE
            - CLUSTERED_DUAL
            - STANDALONE
        nodeGroup:
          type: string
          description:
            The node group for this node. This field is only populated
            if adaptive clustering is enabled.
        version:
          type: string
          description: The PingFederate version this node is running on.
        nodeTags:
          type: string
          description:
            The node tags for this node. This field is only populated for
            engine nodes.
        configurationTimestamp:
          type: string
          description:
            The time stamp of the configuration data retrieved by this
            node.
          format: date-time
        replicationStatus:
          type: string
          description: The replication status of the node.
          enum:
            - RETRIEVING
            - APPLYING
            - FAILED
            - SUCCEEDED
            - OUT_OF_DATE
      description: Describes a node in a clustered deployment of PingFederate.
    ClusterStatus:
      type: object
      properties:
        nodes:
          type: array
          description: List of nodes in the cluster.
          items:
            $ref: "#/components/schemas/ClusterNode"
        lastConfigUpdateTime:
          type: string
          description: Time when the configuration of this node was last updated.
          format: date-time
        lastReplicationTime:
          type: string
          description: Time when configuration changes were last replicated.
          format: date-time
        replicationRequired:
          type: boolean
          description:
            Indicates whether a replication is required to propagate config
            updates.
        mixedMode:
          type: boolean
          description:
            Indicates whether there is more than one version of PingFederate
            in the cluster.
      description: Information on cluster nodes and replication status.
    ConfigStoreSetting:
      required:
        - id
        - type
      type: object
      properties:
        id:
          type: string
          description: The id of the configuration setting.
        stringValue:
          type: string
          description:
            The value of the configuration setting. This is used when the
            setting has a single string value.
        listValue:
          type: array
          description:
            The list of values for the configuration setting. This is used
            when the setting has a list of string values.
          items:
            type: string
        mapValue:
          type: object
          additionalProperties:
            type: string
          description:
            The map of key/value pairs for the configuration setting. This
            is used when the setting has a map of string keys and values.
        type:
          type: string
          description:
            "The type of configuration setting. This could be a single\
            \ string, list of strings, or map of string keys and values."
          enum:
            - STRING
            - LIST
            - MAP
      description: Single configuration setting.
    ConfigStoreBundle:
      type: object
      properties:
        items:
          type: array
          description: List of configuration settings.
          items:
            $ref: "#/components/schemas/ConfigStoreSetting"
      description: List of all configuration settings in a bundle.
    ConfigurationEncryptionKey:
      type: object
      properties:
        keyId:
          type: string
          description: The id of the key.
        creationDate:
          type: string
          description: The creation date of the key.
          format: date-time
      description: Configuration Encryption Key.
    ConfigurationEncryptionKeys:
      type: object
      properties:
        items:
          type: array
          description: The list of Configuration Encryption Keys.
          items:
            $ref: "#/components/schemas/ConfigurationEncryptionKey"
      description: Configuration Encryption Keys.
    BaseSigningSettings:
      required:
        - signingKeyPairRef
      type: object
      properties:
        signingKeyPairRef:
          $ref: "#/components/schemas/ResourceLink"
        algorithm:
          type: string
          description:
            "The algorithm used to sign messages sent to this partner.\
            \ The default is SHA1withDSA for DSA certs, SHA256withRSA for RSA certs,\
            \ and SHA256withECDSA for EC certs. For RSA certs, SHA1withRSA, SHA384withRSA,\
            \ SHA512withRSA, SHA256withRSAandMGF1, SHA384withRSAandMGF1 and SHA512withRSAandMGF1\
            \ are also supported. For EC certs, SHA384withECDSA and SHA512withECDSA\
            \ are also supported. If the connection is WS-Federation with JWT token\
            \ type, then the possible values are RSA SHA256, RSA SHA384, RSA SHA512,\
            \ RSASSA-PSS SHA256, RSASSA-PSS SHA384, RSASSA-PSS SHA512, ECDSA SHA256,\
            \ ECDSA SHA384, ECDSA SHA512"
        includeCertInSignature:
          type: boolean
          description:
            Determines whether the signing certificate is included in the
            signature <KeyInfo> element.
        includeRawKeyInSignature:
          type: boolean
          description:
            Determines whether the <KeyValue> element with the raw public
            key is included in the signature <KeyInfo> element.
      description: Settings related to signing messages.
    ExportMetadataRequest:
      required:
        - connectionId
        - connectionType
      type: object
      properties:
        connectionType:
          type: string
          description: The type of connection to export.
          enum:
            - IDP
            - SP
        connectionId:
          type: string
          description: The ID of the connection to export.
        virtualServerId:
          type: string
          description:
            "The virtual server ID to export the metadata with. If null,\
            \ the connection's default will be used."
        signingSettings:
          $ref: "#/components/schemas/BaseSigningSettings"
        useSecondaryPortForSoap:
          type: boolean
          description:
            "If PingFederate's secondary SSL port is configured and you\
            \ want to use it for the SOAP channel, set to true. If client-certificate\
            \ authentication is configured for the SOAP channel, the secondary port\
            \ is required and this must be set to true."
        virtualHostName:
          type: string
          description: The virtual host name to be used as the base url.
      description:
        The request for exporting a SAML connection's metadata file for
        a partner.
    AccessTokenManagerMapping:
      required:
        - attributeContractFulfillment
      type: object
      properties:
        accessTokenManagerRef:
          $ref: "#/components/schemas/ResourceLink"
        attributeSources:
          type: array
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: "#/components/schemas/AttributeSourceAggregation"
        attributeContractFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of mappings from attribute names to their fulfillment
            values.
        issuanceCriteria:
          $ref: "#/components/schemas/IssuanceCriteria"
      description: A mapping in a connection that defines how access tokens are created.
    AccountManagementSettings:
      required:
        - accountStatusAlgorithm
        - accountStatusAttributeName
      type: object
      properties:
        accountStatusAttributeName:
          type: string
          description: The account status attribute name.
        accountStatusAlgorithm:
          type: string
          description:
            "The account status algorithm name. \nACCOUNT_STATUS_ALGORITHM_AD\
            \ -  Algorithm name for Active Directory, which uses a bitmap for each\
            \ user entry. \nACCOUNT_STATUS_ALGORITHM_FLAG - Algorithm name for Oracle\
            \ Directory Server and other LDAP directories that use a separate attribute\
            \ to store the user's status. When this option is selected, the Flag Comparison\
            \ Value and Flag Comparison Status fields should be used."
          enum:
            - ACCOUNT_STATUS_ALGORITHM_AD
            - ACCOUNT_STATUS_ALGORITHM_FLAG
        flagComparisonValue:
          type: string
          description: The flag that represents comparison value.
        flagComparisonStatus:
          type: boolean
          description: The flag that represents comparison status.
        defaultStatus:
          type: boolean
          description: The default status of the account.
      description: Account management settings.
    AdditionalAllowedEntitiesConfiguration:
      type: object
      properties:
        allowAdditionalEntities:
          type: boolean
          description:
            Set to true to configure additional entities or issuers to
            be accepted during entity or issuer validation.
        allowAllEntities:
          type: boolean
          description:
            Set to true to accept any entity or issuer during entity or
            issuer validation. (Not Recommended)
        additionalAllowedEntities:
          type: array
          description:
            An array of additional allowed entities or issuers to be accepted
            during entity or issuer validation.
          items:
            $ref: "#/components/schemas/Entity"
      description:
        Additional allowed entities or issuers configuration. Currently
        only used in OIDC IdP (RP) connection.
    ArtifactResolverLocation:
      required:
        - index
        - url
      type: object
      properties:
        index:
          type: integer
          description: The priority of the endpoint.
          format: int32
        url:
          type: string
          description:
            Remote party URLs that you will use to resolve/translate the
            artifact and get the actual protocol message
      description: The remote party URLs to resolve the artifact.
    ArtifactSettings:
      required:
        - lifetime
        - resolverLocations
      type: object
      properties:
        lifetime:
          type: integer
          description: The lifetime of the artifact in seconds.
          format: int32
        resolverLocations:
          type: array
          description:
            Remote party URLs that you will use to resolve/translate the
            artifact and get the actual protocol message
          items:
            $ref: "#/components/schemas/ArtifactResolverLocation"
        sourceId:
          type: string
          description: Source ID for SAML1.x connections
      description: The settings for an Artifact binding.
    AssertionLifetime:
      required:
        - minutesAfter
        - minutesBefore
      type: object
      properties:
        minutesBefore:
          type: integer
          description: Assertion validity in minutes before the assertion issuance.
          format: int32
        minutesAfter:
          type: integer
          description: Assertion validity in minutes after the assertion issuance.
          format: int32
      description:
        The timeframe of validity before and after the issuance of the
        assertion.
    Attribute:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of this attribute.
      description: The definition of an attribute in an attribute contract.
    AttributeQueryNameMapping:
      required:
        - localName
        - remoteName
      type: object
      properties:
        localName:
          type: string
          description: The local attribute name.
        remoteName:
          type: string
          description: The remote attribute name as defined by the attribute authority.
      description: The attribute query name mappings between the SP and the IdP.
    AuthenticationPolicyContractAssertionMapping:
      required:
        - attributeContractFulfillment
        - authenticationPolicyContractRef
      type: object
      properties:
        authenticationPolicyContractRef:
          $ref: "#/components/schemas/ResourceLink"
        restrictVirtualEntityIds:
          type: boolean
          description: Restricts this mapping to specific virtual entity IDs.
        restrictedVirtualEntityIds:
          type: array
          description:
            The list of virtual server IDs that this mapping is restricted
            to.
          items:
            type: string
        abortSsoTransactionAsFailSafe:
          type: boolean
          description:
            "If set to true, SSO transaction will be aborted as a fail-safe\
            \ when the data-store's attribute mappings fail to complete the attribute\
            \ contract. Otherwise, the attribute contract with default values is used.\
            \ By default, this value is false."
        attributeSources:
          type: array
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: "#/components/schemas/AttributeSourceAggregation"
        attributeContractFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of mappings from attribute names to their fulfillment
            values.
        issuanceCriteria:
          $ref: "#/components/schemas/IssuanceCriteria"
      description: The Authentication Policy Contract Assertion Mapping.
    AuthenticationPolicyContractMapping:
      required:
        - attributeContractFulfillment
        - authenticationPolicyContractRef
      type: object
      properties:
        authenticationPolicyContractRef:
          $ref: "#/components/schemas/ResourceLink"
        restrictVirtualServerIds:
          type: boolean
          description: Restricts this mapping to specific virtual entity IDs.
        restrictedVirtualServerIds:
          type: array
          description:
            The list of virtual server IDs that this mapping is restricted
            to.
          items:
            type: string
        attributeSources:
          type: array
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: "#/components/schemas/AttributeSourceAggregation"
        attributeContractFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of mappings from attribute names to their fulfillment
            values.
        issuanceCriteria:
          $ref: "#/components/schemas/IssuanceCriteria"
      description: An Authentication Policy Contract mapping into IdP Connection.
    AuthnContextMapping:
      type: object
      properties:
        local:
          type: string
          description: The local authentication context value.
        remote:
          type: string
          description: The remote authentication context value.
      description: The authentication context mapping between local and remote values.
    BackChannelAuth:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: The back channel authentication type.
          enum:
            - INBOUND
            - OUTBOUND
        httpBasicCredentials:
          $ref: "#/components/schemas/UsernamePasswordCredentials"
        digitalSignature:
          type: boolean
          description: If incoming or outgoing messages must be signed.
      description:
        The SOAP authentication methods when sending or receiving a message
        using SOAP back channel.
      discriminator:
        propertyName: type
    ChangeDetectionSettings:
      required:
        - changedUsersAlgorithm
        - groupObjectClass
        - timeStampAttributeName
        - userObjectClass
      type: object
      properties:
        userObjectClass:
          type: string
          description: The user object class.
        groupObjectClass:
          type: string
          description: The group object class.
        changedUsersAlgorithm:
          type: string
          description:
            "The changed user algorithm. \nACTIVE_DIRECTORY_USN - For Active\
            \ Directory only, this algorithm queries for update sequence numbers on\
            \ user records that are larger than the last time records were checked.\
            \ \nTIMESTAMP - Queries for timestamps on user records that are not older\
            \ than the last time records were checked. This check is more efficient\
            \ from the point of view of the PingFederate provisioner but can be more\
            \ time consuming on the LDAP side, particularly with the Oracle Directory\
            \ Server. \nTIMESTAMP_NO_NEGATION - Queries for timestamps on user records\
            \ that are newer than the last time records were checked. This algorithm\
            \ is recommended for the Oracle Directory Server."
          enum:
            - ACTIVE_DIRECTORY_USN
            - TIMESTAMP
            - TIMESTAMP_NO_NEGATION
        usnAttributeName:
          type: string
          description: The USN attribute name.
        timeStampAttributeName:
          type: string
          description: The timestamp attribute name.
      description: Setting to detect changes to a user or a group.
    Channel:
      required:
        - active
        - attributeMapping
        - channelSource
        - maxThreads
        - name
        - timeout
      type: object
      properties:
        active:
          type: boolean
          description:
            Indicates whether the channel is the active channel for this
            connection.
        channelSource:
          $ref: "#/components/schemas/ChannelSource"
        attributeMapping:
          type: array
          description:
            The mapping of attributes from the local data store into Fields
            specified by the service provider.
          items:
            $ref: "#/components/schemas/SaasAttributeMapping"
        name:
          type: string
          description: The name of the channel.
        maxThreads:
          type: integer
          description: The number of processing threads. The default value is 1.
          format: int32
        timeout:
          type: integer
          description:
            "Timeout, in seconds, for individual user and group provisioning\
            \ operations on the target service provider. The default value is 60."
          format: int32
      description:
        "A channel is a combination of a source data store and a provisioning\
        \ target. It include settings of a source data store, managing provisioning\
        \ threads and mapping of attributes."
    ChannelSource:
      required:
        - accountManagementSettings
        - baseDn
        - changeDetectionSettings
        - dataSource
        - groupMembershipDetection
        - guidAttributeName
        - guidBinary
        - userSourceLocation
      type: object
      properties:
        dataSource:
          $ref: "#/components/schemas/ResourceLink"
        guidAttributeName:
          type: string
          description: the GUID attribute name.
        guidBinary:
          type: boolean
          description: Indicates whether the GUID is stored in binary format.
        changeDetectionSettings:
          $ref: "#/components/schemas/ChangeDetectionSettings"
        groupMembershipDetection:
          $ref: "#/components/schemas/GroupMembershipDetection"
        accountManagementSettings:
          $ref: "#/components/schemas/AccountManagementSettings"
        baseDn:
          type: string
          description: The base DN where the user records are located.
        userSourceLocation:
          $ref: "#/components/schemas/ChannelSourceLocation"
        groupSourceLocation:
          $ref: "#/components/schemas/ChannelSourceLocation"
      description: The source data source and LDAP settings.
    ChannelSourceLocation:
      type: object
      properties:
        groupDN:
          type: string
          description: The group DN for users or groups.
        filter:
          type: string
          description: An LDAP filter.
        nestedSearch:
          type: boolean
          description: Indicates whether the search is nested.
      description: The location settings that includes a DN and a LDAP filter.
    Connection:
      required:
        - entityId
        - name
      type: object
      properties:
        type:
          type: string
          description: The type of this connection. Default is 'IDP'.
          enum:
            - IDP
            - SP
        id:
          type: string
          description:
            "The persistent, unique ID for the connection. It can be any\
            \ combination of [a-zA-Z0-9._-]. This property is system-assigned if not\
            \ specified."
        entityId:
          type: string
          description:
            The partner's entity ID (connection ID) or issuer value (for
            OIDC Connections).
        name:
          type: string
          description: The connection name.
        modificationDate:
          type: string
          description:
            The time at which the connection was last changed. This property
            is read only and is ignored on PUT and POST requests.
          format: date-time
        creationDate:
          type: string
          description:
            The time at which the connection was created. This property
            is read only and is ignored on PUT and POST requests.
          format: date-time
        active:
          type: boolean
          description:
            Specifies whether the connection is active and ready to process
            incoming requests. The default value is false.
        baseUrl:
          type: string
          description:
            The fully-qualified hostname and port on which your partner's
            federation deployment runs.
        defaultVirtualEntityId:
          type: string
          description:
            The default alternate entity ID that identifies the local server
            to this partner. It is required when virtualEntityIds is not empty and
            must be included in that list.
        virtualEntityIds:
          type: array
          description:
            List of alternate entity IDs that identifies the local server
            to this partner.
          items:
            type: string
        metadataReloadSettings:
          $ref: "#/components/schemas/ConnectionMetadataUrl"
        credentials:
          $ref: "#/components/schemas/ConnectionCredentials"
        contactInfo:
          $ref: "#/components/schemas/ContactInfo"
        licenseConnectionGroup:
          type: string
          description:
            "The license connection group. If your PingFederate license\
            \ is based on connection groups, each connection must be assigned to a\
            \ group before it can be used."
        loggingMode:
          type: string
          description:
            The level of transaction logging applicable for this connection.
            Default is STANDARD.
          enum:
            - NONE
            - STANDARD
            - ENHANCED
            - FULL
        additionalAllowedEntitiesConfiguration:
          $ref: "#/components/schemas/AdditionalAllowedEntitiesConfiguration"
        extendedProperties:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ParameterValues"
          description:
            Extended Properties allows to store additional information
            for IdP/SP Connections. The names of these extended properties should
            be defined in /extendedProperties.
        replicationStatus:
          type: string
          description:
            This status indicates whether the connection has been replicated
            to the cluster. This property only applies when automatic replication
            of connections is enabled. It is read only and is ignored on PUT and POST
            requests.
          enum:
            - REPLICATED
            - NOT_REPLICATED
      description: Settings shared by SP-side and IdP-side connections.
      discriminator:
        propertyName: type
    ConnectionCert:
      required:
        - x509File
      type: object
      properties:
        certView:
          $ref: "#/components/schemas/CertView"
        x509File:
          $ref: "#/components/schemas/X509File"
        activeVerificationCert:
          type: boolean
          description:
            Indicates whether this is an active signature verification
            certificate.
        primaryVerificationCert:
          type: boolean
          description:
            Indicates whether this is the primary signature verification
            certificate. Only one certificate in the collection can have this flag
            set.
        secondaryVerificationCert:
          type: boolean
          description:
            Indicates whether this is the secondary signature verification
            certificate. Only one certificate in the collection can have this flag
            set.
        encryptionCert:
          type: boolean
          description:
            Indicates whether to use this cert to encrypt outgoing assertions.
            Only one certificate in the collection can have this flag set.
      description: A certificate used for signature verification or XML encryption.
    ConnectionCredentials:
      type: object
      properties:
        verificationSubjectDN:
          type: string
          description:
            "If this property is set, the verification trust model is Anchored.\
            \ The verification certificate must be signed by a trusted CA and included\
            \ in the incoming message, and the subject DN of the expected certificate\
            \ is specified in this property. If this property is not set, then a primary\
            \ verification certificate must be specified in the certs array."
        verificationIssuerDN:
          type: string
          description:
            "If a verification Subject DN is provided, you can optionally\
            \ restrict the issuer to a specific trusted CA by specifying its DN in\
            \ this field."
        certs:
          type: array
          description: The certificates used for signature verification and XML encryption.
          items:
            $ref: "#/components/schemas/ConnectionCert"
        blockEncryptionAlgorithm:
          type: string
          description:
            "The algorithm used to encrypt assertions sent to this partner.\
            \ AES_128, AES_256, AES_128_GCM, AES_192_GCM, AES_256_GCM and Triple_DES\
            \ are supported."
        keyTransportAlgorithm:
          type: string
          description:
            "The algorithm used to transport keys to this partner. RSA_OAEP,\
            \ RSA_OAEP_256 and RSA_v15 are supported."
        signingSettings:
          $ref: "#/components/schemas/SigningSettings"
        decryptionKeyPairRef:
          $ref: "#/components/schemas/ResourceLink"
        secondaryDecryptionKeyPairRef:
          $ref: "#/components/schemas/ResourceLink"
        outboundBackChannelAuth:
          $ref: "#/components/schemas/OutboundBackChannelAuth"
        inboundBackChannelAuth:
          $ref: "#/components/schemas/InboundBackChannelAuth"
      description:
        "The certificates and settings for encryption, signing, and signature\
        \ verification."
    ConnectionMetadataUrl:
      required:
        - metadataUrlRef
      type: object
      properties:
        metadataUrlRef:
          $ref: "#/components/schemas/ResourceLink"
        enableAutoMetadataUpdate:
          type: boolean
          description:
            Specifies whether the metadata of the connection will be automatically
            reloaded. The default value is true.
      description:
        Configuration settings to enable automatic reload of partner's
        metadata.
    ContactInfo:
      type: object
      properties:
        company:
          type: string
          description: Company name.
        email:
          type: string
          description: Contact email address.
        firstName:
          type: string
          description: Contact first name.
        lastName:
          type: string
          description: Contact last name.
        phone:
          type: string
          description: Contact phone number.
      description: Contact information.
    ConvertMetadataResponse:
      type: object
      properties:
        signatureStatus:
          type: string
          description: The metadata's digital signature status.
          enum:
            - SIGNED
            - UNSIGNED
        certTrustStatus:
          type: string
          description:
            "The metadata certificate's trust status, i.e. If the partner's\
            \ certificate can be trusted or not."
          enum:
            - TRUSTED
            - NOT_TRUSTED
        certSubjectDn:
          type: string
          description: The metadata certificate's subject DN.
        certSerialNumber:
          type: string
          description: The metadata certificate's serial number.
        certExpiration:
          type: string
          description: The metadata certificate's expiry date.
          format: date-time
        connection:
          $ref: "#/components/schemas/Connection"
      description:
        A response from converting SAML connection metadata into a JSON
        connection. It includes the converted connection and the authenticity information
        of the metadata.
    DataStoreRepository:
      required:
        - dataStoreRef
        - jitRepositoryAttributeMapping
        - type
      type: object
      properties:
        type:
          type: string
          description: The data store repository type.
          enum:
            - LDAP
            - JDBC
        dataStoreRef:
          $ref: "#/components/schemas/ResourceLink"
        jitRepositoryAttributeMapping:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description: The user repository attribute mapping.
      description: Jit Provisioning user repository data store.
      discriminator:
        propertyName: type
    DecryptionPolicy:
      type: object
      properties:
        assertionEncrypted:
          type: boolean
          description:
            Specify whether the incoming SAML assertion is encrypted for
            an IdP connection.
        attributesEncrypted:
          type: boolean
          description:
            Specify whether one or more incoming SAML attributes are encrypted
            for an IdP connection.
        subjectNameIdEncrypted:
          type: boolean
          description:
            Specify whether the incoming Subject Name ID is encrypted for
            an IdP connection.
        sloEncryptSubjectNameID:
          type: boolean
          description: Encrypt the Subject Name ID in SLO messages to the IdP.
        sloSubjectNameIDEncrypted:
          type: boolean
          description: Allow encrypted Subject Name ID in SLO messages from the IdP.
      description: Defines what to decrypt in the browser-based SSO profile.
    EncryptionPolicy:
      type: object
      properties:
        encryptAssertion:
          type: boolean
          description: Whether the outgoing SAML assertion will be encrypted.
        encryptedAttributes:
          type: array
          description:
            The list of outgoing SAML assertion attributes that will be
            encrypted. The 'encryptAssertion' property takes precedence over this.
          items:
            type: string
        encryptSloSubjectNameId:
          type: boolean
          description:
            Encrypt the name-identifier attribute in outbound SLO messages.  This
            can be set if the name id is encrypted.
        sloSubjectNameIDEncrypted:
          type: boolean
          description:
            Allow the encryption of the name-identifier attribute for inbound
            SLO messages. This can be set if SP initiated SLO is enabled.
      description: Defines what to encrypt in the browser-based SSO profile.
    Entity:
      type: object
      properties:
        entityId:
          type: string
          description: Unique entity identifier.
        entityDescription:
          type: string
          description: Entity description.
    GroupMembershipDetection:
      required:
        - groupMemberAttributeName
      type: object
      properties:
        memberOfGroupAttributeName:
          type: string
          description:
            "The name of the attribute that indicates the entity is a member\
            \ of a group, also known as member of attribute."
        groupMemberAttributeName:
          type: string
          description:
            "The name of the attribute that represents group members in\
            \ a group, also known as group member attribute."
      description: Settings to detect group memberships.
    Groups:
      required:
        - readGroups
        - writeGroups
      type: object
      properties:
        writeGroups:
          $ref: "#/components/schemas/WriteGroups"
        readGroups:
          $ref: "#/components/schemas/ReadGroups"
      description: Group creation and read configuration.
    IdentityStoreInboundProvisioningUserRepository:
      allOf:
        - $ref: "#/components/schemas/InboundProvisioningUserRepository"
        - required:
            - identityStoreProvisionerRef
          type: object
          properties:
            identityStoreProvisionerRef:
              $ref: "#/components/schemas/ResourceLink"
          description: Identity Store Provisioner data store user repository.
    IdpAdapterAssertionMapping:
      required:
        - attributeContractFulfillment
      type: object
      properties:
        idpAdapterRef:
          $ref: "#/components/schemas/ResourceLink"
        restrictVirtualEntityIds:
          type: boolean
          description: Restricts this mapping to specific virtual entity IDs.
        restrictedVirtualEntityIds:
          type: array
          description:
            The list of virtual server IDs that this mapping is restricted
            to.
          items:
            type: string
        adapterOverrideSettings:
          $ref: "#/components/schemas/IdpAdapter"
        abortSsoTransactionAsFailSafe:
          type: boolean
          description:
            "If set to true, SSO transaction will be aborted as a fail-safe\
            \ when the data-store's attribute mappings fail to complete the attribute\
            \ contract. Otherwise, the attribute contract with default values is used.\
            \ By default, this value is false."
        attributeSources:
          type: array
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: "#/components/schemas/AttributeSourceAggregation"
        attributeContractFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of mappings from attribute names to their fulfillment
            values.
        issuanceCriteria:
          $ref: "#/components/schemas/IssuanceCriteria"
      description: The IdP Adapter Assertion Mapping.
    IdpAttributeQuery:
      required:
        - url
      type: object
      properties:
        url:
          type: string
          description:
            The URL at your IdP partner's site where attribute queries
            are to be sent.
        nameMappings:
          type: array
          description: The attribute name mappings between the SP and the IdP.
          items:
            $ref: "#/components/schemas/AttributeQueryNameMapping"
        policy:
          $ref: "#/components/schemas/IdpAttributeQueryPolicy"
      description:
        The attribute query profile supports local applications in requesting
        user attributes from an attribute authority.
    IdpAttributeQueryPolicy:
      type: object
      properties:
        requireSignedResponse:
          type: boolean
          description: Require signed response.
        requireSignedAssertion:
          type: boolean
          description: Require signed assertion.
        requireEncryptedAssertion:
          type: boolean
          description: Require encrypted assertion.
        signAttributeQuery:
          type: boolean
          description: Sign the attribute query.
        encryptNameId:
          type: boolean
          description: Encrypt the name identifier.
        maskAttributeValues:
          type: boolean
          description: Mask attributes in log files.
      description: The attribute query profile's security policy.
    IdpBrowserSso:
      required:
        - idpIdentityMapping
        - protocol
      type: object
      properties:
        protocol:
          type: string
          description: The browser-based SSO protocol to use.
          enum:
            - SAML20
            - WSFED
            - SAML11
            - SAML10
            - OIDC
        oidcProviderSettings:
          $ref: "#/components/schemas/OIDCProviderSettings"
        enabledProfiles:
          uniqueItems: true
          type: array
          description:
            "The profiles that are enabled for browser-based SSO. SAML
            2.0 supports all profiles whereas SAML 1.x IdP connections support both
            IdP and SP (non-standard) initiated SSO. This is required for SAMLx.x
            Connections. "
          items:
            type: string
            enum:
              - IDP_INITIATED_SSO
              - SP_INITIATED_SSO
              - IDP_INITIATED_SLO
              - SP_INITIATED_SLO
        incomingBindings:
          uniqueItems: true
          type: array
          description:
            "The SAML bindings that are enabled for browser-based SSO.\
            \ This is required for SAML 2.0 connections when the enabled profiles\
            \ contain the SP-initiated SSO profile or either SLO profile. For SAML\
            \ 1.x based connections, it is not used for SP Connections and it is optional\
            \ for IdP Connections."
          items:
            type: string
            enum:
              - ARTIFACT
              - POST
              - REDIRECT
              - SOAP
        messageCustomizations:
          type: array
          description:
            "The message customizations for browser-based SSO. Depending\
            \ on server settings, connection type, and protocol this may or may not\
            \ be supported."
          items:
            $ref: "#/components/schemas/ProtocolMessageCustomization"
        urlWhitelistEntries:
          type: array
          description:
            "For WS-Federation connections, a whitelist of additional allowed\
            \ domains and paths used to validate wreply for SLO, if enabled."
          items:
            $ref: "#/components/schemas/UrlWhitelistEntry"
        artifact:
          $ref: "#/components/schemas/ArtifactSettings"
        sloServiceEndpoints:
          type: array
          description: A list of possible endpoints to send SLO requests and responses.
          items:
            $ref: "#/components/schemas/SloServiceEndpoint"
        alwaysSignArtifactResponse:
          type: boolean
          description: Specify to always sign the SAML ArtifactResponse.
        ssoApplicationEndpoint:
          type: string
          description:
            Application endpoint that can be used to invoke single sign-on
            (SSO) for the connection. This is a read-only parameter.
        ssoServiceEndpoints:
          type: array
          description:
            The IdP SSO endpoints that define where to send your authentication
            requests. Only required for SP initiated SSO. This is required for SAML
            x.x and WS-FED Connections.
          items:
            $ref: "#/components/schemas/IdpSsoServiceEndpoint"
        defaultTargetUrl:
          type: string
          description:
            "The default target URL for this connection. If defined, this\
            \ overrides the default URL."
        authnContextMappings:
          type: array
          description:
            A list of authentication context mappings between local and
            remote values. Applicable for SAML 2.0 and OIDC protocol connections.
          items:
            $ref: "#/components/schemas/AuthnContextMapping"
        assertionsSigned:
          type: boolean
          description:
            Specify whether the incoming SAML assertions are signed rather
            than the entire SAML response being signed.
        signAuthnRequests:
          type: boolean
          description: Determines whether SAML authentication requests should be signed.
        decryptionPolicy:
          $ref: "#/components/schemas/DecryptionPolicy"
        idpIdentityMapping:
          type: string
          description:
            Defines the process in which users authenticated by the IdP
            are associated with user accounts local to the SP.
          enum:
            - ACCOUNT_MAPPING
            - ACCOUNT_LINKING
            - NONE
        attributeContract:
          $ref: "#/components/schemas/IdpBrowserSsoAttributeContract"
        adapterMappings:
          type: array
          description: A list of adapters that map to incoming assertions.
          items:
            $ref: "#/components/schemas/SpAdapterMapping"
        authenticationPolicyContractMappings:
          type: array
          description:
            A list of Authentication Policy Contracts that map to incoming
            assertions.
          items:
            $ref: "#/components/schemas/AuthenticationPolicyContractMapping"
        ssoOAuthMapping:
          $ref: "#/components/schemas/SsoOAuthMapping"
        oauthAuthenticationPolicyContractRef:
          $ref: "#/components/schemas/ResourceLink"
        jitProvisioning:
          $ref: "#/components/schemas/JitProvisioning"
      description:
        The settings used to enable secure browser-based SSO to resources
        at your site.
    IdpBrowserSsoAttribute:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of this attribute.
        masked:
          type: boolean
          description:
            Specifies whether this attribute is masked in PingFederate
            logs. Defaults to false.
      description: An attribute for the IdP Browser SSO attribute contract.
    IdpBrowserSsoAttributeContract:
      type: object
      properties:
        coreAttributes:
          type: array
          description:
            A list of read-only assertion attributes that are automatically
            populated by PingFederate.
          items:
            $ref: "#/components/schemas/IdpBrowserSsoAttribute"
        extendedAttributes:
          type: array
          description:
            A list of additional attributes that are present in the incoming
            assertion.
          items:
            $ref: "#/components/schemas/IdpBrowserSsoAttribute"
      description: A set of user attributes that the IdP sends in the SAML assertion.
    IdpConnection:
      allOf:
        - $ref: "#/components/schemas/Connection"
        - type: object
          properties:
            oidcClientCredentials:
              $ref: "#/components/schemas/OIDCClientCredentials"
            idpBrowserSso:
              $ref: "#/components/schemas/IdpBrowserSso"
            attributeQuery:
              $ref: "#/components/schemas/IdpAttributeQuery"
            idpOAuthGrantAttributeMapping:
              $ref: "#/components/schemas/IdpOAuthGrantAttributeMapping"
            wsTrust:
              $ref: "#/components/schemas/IdpWsTrust"
            inboundProvisioning:
              $ref: "#/components/schemas/IdpInboundProvisioning"
            errorPageMsgId:
              type: string
              description:
                Identifier that specifies the message displayed on a user-facing
                error page.
          description: The set of attributes used to configure an IdP connection.
    IdpInboundProvisioning:
      required:
        - customSchema
        - groupSupport
        - groups
        - userRepository
        - users
      type: object
      properties:
        groupSupport:
          type: boolean
          description: Specify support for provisioning of groups.
        userRepository:
          $ref: "#/components/schemas/InboundProvisioningUserRepository"
        customSchema:
          $ref: "#/components/schemas/Schema"
        users:
          $ref: "#/components/schemas/Users"
        groups:
          $ref: "#/components/schemas/Groups"
        actionOnDelete:
          type: string
          description: Specify behavior of how SCIM DELETE requests are handled.
          enum:
            - DISABLE_USER
            - PERMANENTLY_DELETE_USER
      description:
        SCIM Inbound Provisioning specifies how and when to provision user
        accounts and groups.
    IdpInboundProvisioningAttribute:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of this attribute.
        masked:
          type: boolean
          description:
            Specifies whether this attribute is masked in PingFederate
            logs. Defaults to false.
      description: An attribute for the IdP Inbound Provisioning attribute contract.
    IdpInboundProvisioningAttributeContract:
      type: object
      properties:
        coreAttributes:
          type: array
          description:
            A list of read-only assertion attributes that are automatically
            populated by PingFederate.
          items:
            $ref: "#/components/schemas/IdpInboundProvisioningAttribute"
        extendedAttributes:
          type: array
          description:
            A list of additional attributes that are added to the SCIM
            response.
          items:
            $ref: "#/components/schemas/IdpInboundProvisioningAttribute"
      description: A set of user attributes that the IdP sends in the SCIM response.
    IdpOAuthAttributeContract:
      type: object
      properties:
        coreAttributes:
          type: array
          description:
            A list of read-only assertion attributes that are automatically
            populated by PingFederate.
          items:
            $ref: "#/components/schemas/IdpBrowserSsoAttribute"
        extendedAttributes:
          type: array
          description:
            A list of additional attributes that are present in the incoming
            assertion.
          items:
            $ref: "#/components/schemas/IdpBrowserSsoAttribute"
      description:
        A set of user attributes that the IdP sends in the OAuth Assertion
        Grant.
    IdpOAuthGrantAttributeMapping:
      type: object
      properties:
        accessTokenManagerMappings:
          type: array
          description:
            A mapping in a connection that defines how access tokens are
            created.
          items:
            $ref: "#/components/schemas/AccessTokenManagerMapping"
        idpOAuthAttributeContract:
          $ref: "#/components/schemas/IdpOAuthAttributeContract"
      description: The OAuth Assertion Grant settings used to map from your IdP.
    IdpSsoServiceEndpoint:
      required:
        - binding
        - url
      type: object
      properties:
        binding:
          type: string
          description:
            "The binding of this endpoint, if applicable - usually only\
            \ required for SAML 2.0 endpoints."
          enum:
            - ARTIFACT
            - POST
            - REDIRECT
            - SOAP
        url:
          type: string
          description:
            The absolute or relative URL of the endpoint. A relative URL
            can be specified if a base URL for the connection has been defined.
      description: The settings that define an endpoint to an IdP SSO service.
    IdpTokenProcessorMapping:
      required:
        - attributeContractFulfillment
        - idpTokenProcessorRef
      type: object
      properties:
        idpTokenProcessorRef:
          $ref: "#/components/schemas/ResourceLink"
        restrictedVirtualEntityIds:
          type: array
          description:
            The list of virtual server IDs that this mapping is restricted
            to.
          items:
            type: string
        attributeSources:
          type: array
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: "#/components/schemas/AttributeSourceAggregation"
        attributeContractFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of mappings from attribute names to their fulfillment
            values.
        issuanceCriteria:
          $ref: "#/components/schemas/IssuanceCriteria"
      description: The IdP Token Processor Mapping.
    IdpWsTrust:
      required:
        - attributeContract
        - generateLocalToken
      type: object
      properties:
        attributeContract:
          $ref: "#/components/schemas/IdpWsTrustAttributeContract"
        generateLocalToken:
          type: boolean
          description:
            Indicates whether a local token needs to be generated. The
            default value is false.
        tokenGeneratorMappings:
          type: array
          description:
            A list of token generators to generate local tokens. Required
            if a local token needs to be generated.
          items:
            $ref: "#/components/schemas/SpTokenGeneratorMapping"
      description:
        Ws-Trust STS provides validation of incoming tokens which enable
        SSO access to Web Services. It also allows generation of local tokens for
        Web Services.
    IdpWsTrustAttribute:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of this attribute.
        masked:
          type: boolean
          description:
            Specifies whether this attribute is masked in PingFederate
            logs. Defaults to false.
      description: An attribute for the Ws-Trust attribute contract.
    IdpWsTrustAttributeContract:
      type: object
      properties:
        coreAttributes:
          type: array
          description:
            A list of read-only assertion attributes that are automatically
            populated by PingFederate.
          items:
            $ref: "#/components/schemas/IdpWsTrustAttribute"
        extendedAttributes:
          type: array
          description:
            A list of additional attributes that are receive in the incoming
            assertion.
          items:
            $ref: "#/components/schemas/IdpWsTrustAttribute"
      description: A set of user attributes that this server will receive in the token.
    InboundBackChannelAuth:
      allOf:
        - $ref: "#/components/schemas/BackChannelAuth"
        - type: object
          properties:
            verificationSubjectDN:
              type: string
              description:
                "If this property is set, the verification trust model is\
                \ Anchored. The verification certificate must be signed by a trusted\
                \ CA and included in the incoming message, and the subject DN of the\
                \ expected certificate is specified in this property. If this property\
                \ is not set, then a primary verification certificate must be specified\
                \ in the certs array."
            verificationIssuerDN:
              type: string
              description:
                "If a verification Subject DN is provided, you can optionally\
                \ restrict the issuer to a specific trusted CA by specifying its DN\
                \ in this field."
            certs:
              type: array
              description: The certificate used for signature verification and XML encryption.
              items:
                $ref: "#/components/schemas/ConnectionCert"
            requireSsl:
              type: boolean
              description: Incoming HTTP transmissions must use a secure channel.
    InboundProvisioningUserRepository:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: The user repository type.
          enum:
            - LDAP
            - IDENTITY_STORE
      description: SCIM Inbound Provisioning user repository.
      discriminator:
        propertyName: type
    JdbcDataStoreRepository:
      allOf:
        - $ref: "#/components/schemas/DataStoreRepository"
        - required:
            - jitRepositoryAttributeMapping
            - sqlMethod
          type: object
          properties:
            sqlMethod:
              $ref: "#/components/schemas/SqlMethod"
            jitRepositoryAttributeMapping:
              type: object
              additionalProperties:
                $ref: "#/components/schemas/AttributeFulfillmentValue"
              description:
                A list of user repository mappings from attribute names to
                their fulfillment values.
          description: JDBC data store user repository.
    JitProvisioning:
      required:
        - userAttributes
        - userRepository
      type: object
      properties:
        userAttributes:
          $ref: "#/components/schemas/JitProvisioningUserAttributes"
        userRepository:
          $ref: "#/components/schemas/DataStoreRepository"
        eventTrigger:
          type: string
          description:
            Specify when provisioning occurs during assertion processing.
            The default is 'NEW_USER_ONLY'.
          enum:
            - NEW_USER_ONLY
            - ALL_SAML_ASSERTIONS
        errorHandling:
          type: string
          description:
            Specify behavior when provisioning request fails. The default
            is 'CONTINUE_SSO'.
          enum:
            - CONTINUE_SSO
            - ABORT_SSO
      description: The settings used to specify how and when to provision user accounts.
    JitProvisioningUserAttributes:
      type: object
      properties:
        attributeContract:
          type: array
          description: A list of user attributes that the IdP sends in the SAML assertion.
          items:
            $ref: "#/components/schemas/IdpBrowserSsoAttribute"
        doAttributeQuery:
          type: boolean
          description:
            Specify whether to use only attributes from the SAML Assertion
            or retrieve additional attributes from the IdP. The default is false.
    LdapDataStoreRepository:
      allOf:
        - $ref: "#/components/schemas/DataStoreRepository"
        - required:
            - jitRepositoryAttributeMapping
            - uniqueUserIdFilter
          type: object
          properties:
            baseDn:
              type: string
              description:
                "The base DN to search from. If not specified, the search\
                \ will start at the LDAP's root."
            uniqueUserIdFilter:
              type: string
              description:
                "The expression that results in a unique user identifier,\
                \ when combined with the Base DN."
            jitRepositoryAttributeMapping:
              type: object
              additionalProperties:
                $ref: "#/components/schemas/AttributeFulfillmentValue"
              description:
                A list of user repository mappings from attribute names to
                their fulfillment values.
          description: LDAP data store user repository.
    LdapInboundProvisioningUserRepository:
      allOf:
        - $ref: "#/components/schemas/InboundProvisioningUserRepository"
        - required:
            - dataStoreRef
            - uniqueGroupIdFilter
            - uniqueUserIdFilter
          type: object
          properties:
            dataStoreRef:
              $ref: "#/components/schemas/ResourceLink"
            baseDn:
              type: string
              description:
                "The base DN to search from. If not specified, the search\
                \ will start at the LDAP's root."
            uniqueUserIdFilter:
              type: string
              description:
                "The expression that results in a unique user identifier,\
                \ when combined with the Base DN."
            uniqueGroupIdFilter:
              type: string
              description:
                "The expression that results in a unique group identifier,\
                \ when combined with the Base DN."
          description: LDAP Active Directory data store user repository
    OIDCClientCredentials:
      required:
        - clientId
      type: object
      properties:
        clientId:
          type: string
          description: The OpenID Connect client identitification.
        clientSecret:
          type: string
          description:
            "The OpenID Connect client secret. To update the client secret,\
            \ specify the plaintext value in this field.  This field will not be populated\
            \ for GET requests."
        encryptedSecret:
          type: string
          description:
            "For GET requests, this field contains the encrypted client\
            \ secret, if one exists.  For POST and PUT requests, if you wish to reuse\
            \ the existing secret, this field should be passed back unchanged."
      description:
        The OpenID Connect Client Credentials settings. This is required
        for an OIDC Connection.
    OIDCProviderSettings:
      required:
        - authorizationEndpoint
        - jwksURL
        - loginType
        - scopes
      type: object
      properties:
        scopes:
          type: string
          description: Space separated scope values that the OpenID Provider supports.
        authorizationEndpoint:
          type: string
          description: URL of the OpenID Provider's OAuth 2.0 Authorization Endpoint.
        pushedAuthorizationRequestEndpoint:
          type: string
          description:
            URL of the OpenID Provider's OAuth 2.0 Pushed Authorization
            Request Endpoint.
        loginType:
          type: string
          description:
            "The OpenID Connect login type. These values maps to: <br>\
            \  CODE: Authentication using Code Flow <br> POST: Authentication using\
            \ Form Post <br> POST_AT: Authentication using Form Post with Access Token"
          enum:
            - CODE
            - POST
            - POST_AT
        authenticationScheme:
          type: string
          description:
            "The OpenID Connect Authentication Scheme. This is required
            for Authentication using Code Flow. "
          enum:
            - BASIC
            - POST
            - PRIVATE_KEY_JWT
            - CLIENT_SECRET_JWT
        authenticationSigningAlgorithm:
          type: string
          description:
            "The authentication signing algorithm for token endpoint PRIVATE_KEY_JWT\
            \ or CLIENT_SECRET_JWT authentication. Asymmetric algorithms are allowed\
            \ for PRIVATE_KEY_JWT and symmetric algorithms are allowed for CLIENT_SECRET_JWT.\
            \ For RSASSA-PSS signing algorithm, PingFederate must be integrated with\
            \ a hardware security module (HSM) or Java 11."
          enum:
            - NONE
            - HS256
            - HS384
            - HS512
            - RS256
            - RS384
            - RS512
            - ES256
            - ES384
            - ES512
            - PS256
            - PS384
            - PS512
        requestSigningAlgorithm:
          type: string
          description:
            "The request signing algorithm. Required only if you wish to\
            \ use signed requests. Only asymmetric algorithms are allowed. For RSASSA-PSS\
            \ signing algorithm, PingFederate must be integrated with a hardware security\
            \ module (HSM) or Java 11."
          enum:
            - NONE
            - HS256
            - HS384
            - HS512
            - RS256
            - RS384
            - RS512
            - ES256
            - ES384
            - ES512
            - PS256
            - PS384
            - PS512
        enablePKCE:
          type: boolean
          description:
            "Enable Proof Key for Code Exchange (PKCE). When enabled, the\
            \ client sends an SHA-256 code challenge and corresponding code verifier\
            \ to the OpenID Provider during the authorization code flow."
        tokenEndpoint:
          type: string
          description: URL of the OpenID Provider's OAuth 2.0 Token Endpoint.
        userInfoEndpoint:
          type: string
          description: URL of the OpenID Provider's UserInfo Endpoint.
        logoutEndpoint:
          type: string
          description: URL of the OpenID Provider's RP-Initiated Logout Endpoint.
        jwksURL:
          type: string
          description: "URL of the OpenID Provider's JSON Web Key Set [JWK] document."
        trackUserSessionsForLogout:
          type: boolean
          description:
            "Determines whether PingFederate tracks a logout entry when\
            \ a user signs in, so that the user session can later be terminated via\
            \ a logout request from the OP. This setting must also be enabled in order\
            \ for PingFederate to send an RP-initiated logout request to the OP during\
            \ SLO."
        requestParameters:
          type: array
          description:
            A list of request parameters. Request parameters with same
            name but different attribute values are treated as a multi-valued request
            parameter.
          items:
            $ref: "#/components/schemas/OIDCRequestParameter"
        redirectUri:
          type: string
          description: The redirect URI. This is a read-only parameter.
        backChannelLogoutUri:
          type: string
          description:
            The Back-Channel Logout URI. This read-only parameter is available
            when user sessions are tracked for logout.
        frontChannelLogoutUri:
          type: string
          description: The Front-Channel Logout URI. This is a read-only parameter.
        postLogoutRedirectUri:
          type: string
          description:
            "The Post-Logout Redirect URI, where the OpenID Provider may\
            \ redirect the user when RP-Initiated Logout has completed. This is a\
            \ read-only parameter."
      description: The OpenID Provider settings.
    OIDCRequestParameter:
      required:
        - applicationEndpointOverride
        - attributeValue
        - name
      type: object
      properties:
        name:
          type: string
          description: Request parameter name.
        attributeValue:
          $ref: "#/components/schemas/AttributeFulfillmentValue"
        value:
          type: string
          description:
            A request parameter value. A parameter can have either a value
            or a attribute value but not both. Value set here will be converted to
            an attribute value of source type TEXT. An empty value will be converted
            to attribute value of source type NO_MAPPING.
        applicationEndpointOverride:
          type: boolean
          description:
            Indicates whether the parameter value can be overridden by
            an Application Endpoint parameter
      description: An OIDC custom request parameter.
    OutboundBackChannelAuth:
      allOf:
        - $ref: "#/components/schemas/BackChannelAuth"
        - type: object
          properties:
            sslAuthKeyPairRef:
              $ref: "#/components/schemas/ResourceLink"
            validatePartnerCert:
              type: boolean
              description: Validate the partner server certificate. Default is true.
    OutboundProvision:
      required:
        - channels
        - targetSettings
        - type
      type: object
      properties:
        type:
          type: string
          description: The SaaS plugin type.
        targetSettings:
          type: array
          description:
            Configuration fields that includes credentials to target SaaS
            application.
          items:
            $ref: "#/components/schemas/ConfigField"
        customSchema:
          $ref: "#/components/schemas/Schema"
        channels:
          type: array
          description:
            "Includes settings of a source data store, managing provisioning\
            \ threads and mapping of attributes."
          items:
            $ref: "#/components/schemas/Channel"
      description:
        Outbound Provisioning allows an IdP to create and maintain user
        accounts at standards-based partner sites using SCIM as well as select-proprietary
        provisioning partner sites that are protocol-enabled.
    ParameterValues:
      type: object
      properties:
        values:
          type: array
          description: A List of values
          items:
            type: string
      description: Parameter Values.
    ProtocolMessageCustomization:
      type: object
      properties:
        contextName:
          type: string
          description:
            "The context in which the customization will be applied. Depending\
            \ on the connection type and protocol, this can either be 'assertion',\
            \ 'authn-response' or 'authn-request'."
        messageExpression:
          type: string
          description:
            The OGNL expression that will be executed. Refer to the Admin
            Manual for a list of variables provided by PingFederate.
      description:
        The message customization that will be executed on outgoing PingFederate
        messages.
    ReadGroups:
      required:
        - attributeContract
        - attributeFulfillment
        - attributes
      type: object
      properties:
        attributeContract:
          $ref: "#/components/schemas/IdpInboundProvisioningAttributeContract"
        attributes:
          type: array
          description:
            A list of LDAP data store attributes to populate a response
            to a user-provisioning request.
          items:
            $ref: "#/components/schemas/Attribute"
        attributeFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of user repository mappings from attribute names to
            their fulfillment values.
      description: Group info lookup and respond to incoming SCIM requests configuration.
    ReadUsers:
      required:
        - attributeContract
        - attributeFulfillment
        - attributes
      type: object
      properties:
        attributeContract:
          $ref: "#/components/schemas/IdpInboundProvisioningAttributeContract"
        attributes:
          type: array
          description:
            A list of LDAP data store attributes to populate a response
            to a user-provisioning request.
          items:
            $ref: "#/components/schemas/Attribute"
        attributeFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of user repository mappings from attribute names to
            their fulfillment values.
      description: User info lookup and respond to incoming SCIM requests configuration.
    SaasAttributeMapping:
      required:
        - fieldName
        - saasFieldInfo
      type: object
      properties:
        fieldName:
          type: string
          description: The name of target field.
        saasFieldInfo:
          $ref: "#/components/schemas/SaasFieldConfiguration"
      description: Settings to map the source record attributes to target attributes.
    SaasFieldConfiguration:
      type: object
      properties:
        attributeNames:
          uniqueItems: true
          type: array
          description:
            The list of source attribute names used to generate or map
            to a target field
          items:
            type: string
        defaultValue:
          type: string
          description: The default value for the target field
        expression:
          type: string
          description: An OGNL expression to obtain a value.
        createOnly:
          type: boolean
          description:
            Indicates whether this field is a create only field and cannot
            be updated.
        trim:
          type: boolean
          description: Indicates whether field should be trimmed before provisioning.
        characterCase:
          type: string
          description: The character case of the field value.
          enum:
            - LOWER
            - UPPER
            - NONE
        parser:
          type: string
          description: Indicates how the field shall be parsed.
          enum:
            - EXTRACT_CN_FROM_DN
            - EXTRACT_USERNAME_FROM_EMAIL
            - NONE
        masked:
          type: boolean
          description:
            Indicates whether the attribute should be masked in server
            logs.
      description:
        The settings that represent how attribute values from source data
        store will be mapped into Fields specified by the service provider.
    Schema:
      type: object
      properties:
        namespace:
          type: string
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/SchemaAttribute"
      description: Custom SCIM Attributes configuration.
    SchemaAttribute:
      type: object
      properties:
        name:
          type: string
          description: Name of the attribute.
        multiValued:
          type: boolean
          description: Indicates whether the attribute is multi-valued.
        types:
          type: array
          description:
            Represents the name of each attribute type in case of multi-valued
            attribute.
          items:
            type: string
        subAttributes:
          type: array
          description: List of sub-attributes for an attribute.
          items:
            type: string
      description: A custom SCIM attribute.
    SigningSettings:
      required:
        - signingKeyPairRef
      type: object
      properties:
        signingKeyPairRef:
          $ref: "#/components/schemas/ResourceLink"
        alternativeSigningKeyPairRefs:
          type: array
          description:
            The list of IDs of alternative key pairs used to sign messages
            sent to this partner. The ID of the key pair is also known as the alias
            and can be found by viewing the corresponding certificate under 'Signing
            & Decryption Keys & Certificates' in the PingFederate admin console.
          items:
            $ref: "#/components/schemas/ResourceLink"
        algorithm:
          type: string
          description:
            "The algorithm used to sign messages sent to this partner.\
            \ The default is SHA1withDSA for DSA certs, SHA256withRSA for RSA certs,\
            \ and SHA256withECDSA for EC certs. For RSA certs, SHA1withRSA, SHA384withRSA,\
            \ SHA512withRSA, SHA256withRSAandMGF1, SHA384withRSAandMGF1 and SHA512withRSAandMGF1\
            \ are also supported. For EC certs, SHA384withECDSA and SHA512withECDSA\
            \ are also supported. If the connection is WS-Federation with JWT token\
            \ type, then the possible values are RSA SHA256, RSA SHA384, RSA SHA512,\
            \ RSASSA-PSS SHA256, RSASSA-PSS SHA384, RSASSA-PSS SHA512, ECDSA SHA256,\
            \ ECDSA SHA384, ECDSA SHA512"
        includeCertInSignature:
          type: boolean
          description:
            Determines whether the signing certificate is included in the
            signature <KeyInfo> element.
        includeRawKeyInSignature:
          type: boolean
          description:
            Determines whether the <KeyValue> element with the raw public
            key is included in the signature <KeyInfo> element.
      description: Settings related to signing messages sent to this partner.
    SloServiceEndpoint:
      required:
        - url
      type: object
      properties:
        binding:
          type: string
          description:
            "The binding of this endpoint, if applicable - usually only\
            \ required for SAML 2.0 endpoints."
          enum:
            - ARTIFACT
            - POST
            - REDIRECT
            - SOAP
        url:
          type: string
          description:
            The absolute or relative URL of the endpoint. A relative URL
            can be specified if a base URL for the connection has been defined.
        responseUrl:
          type: string
          description:
            The absolute or relative URL to which logout responses are
            sent. A relative URL can be specified if a base URL for the connection
            has been defined.
      description: Where SLO logout messages are sent. Only applicable for SAML 2.0.
    SpAdapterMapping:
      required:
        - attributeContractFulfillment
        - spAdapterRef
      type: object
      properties:
        spAdapterRef:
          $ref: "#/components/schemas/ResourceLink"
        restrictVirtualEntityIds:
          type: boolean
          description: Restricts this mapping to specific virtual entity IDs.
        restrictedVirtualEntityIds:
          type: array
          description:
            The list of virtual server IDs that this mapping is restricted
            to.
          items:
            type: string
        adapterOverrideSettings:
          $ref: "#/components/schemas/SpAdapter"
        attributeSources:
          type: array
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: "#/components/schemas/AttributeSourceAggregation"
        attributeContractFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of mappings from attribute names to their fulfillment
            values.
        issuanceCriteria:
          $ref: "#/components/schemas/IssuanceCriteria"
      description: A mapping to a SP adapter.
    SpAttributeQuery:
      required:
        - attributeContractFulfillment
        - attributeSources
        - attributes
      type: object
      properties:
        attributes:
          uniqueItems: true
          type: array
          description:
            The list of attributes that may be returned to the SP in the
            response to an attribute request.
          items:
            type: string
        attributeContractFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of mappings from attribute names to their fulfillment
            values.
        issuanceCriteria:
          $ref: "#/components/schemas/IssuanceCriteria"
        policy:
          $ref: "#/components/schemas/SpAttributeQueryPolicy"
        attributeSources:
          type: array
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: "#/components/schemas/AttributeSourceAggregation"
      description: The attribute query profile supports SPs in requesting user attributes.
    SpAttributeQueryPolicy:
      type: object
      properties:
        signResponse:
          type: boolean
          description: Sign the response.
        signAssertion:
          type: boolean
          description: Sign the assertion.
        encryptAssertion:
          type: boolean
          description: Encrypt the assertion.
        requireSignedAttributeQuery:
          type: boolean
          description: Require signed attribute query.
        requireEncryptedNameId:
          type: boolean
          description: Require an encrypted name identifier.
      description: The attribute query profile's security policy.
    SpBrowserSso:
      required:
        - adapterMappings
        - assertionLifetime
        - attributeContract
        - protocol
        - ssoServiceEndpoints
      type: object
      properties:
        protocol:
          type: string
          description: The browser-based SSO protocol to use.
          enum:
            - SAML20
            - WSFED
            - SAML11
            - SAML10
            - OIDC
        wsFedTokenType:
          type: string
          description: The WS-Federation Token Type to use.
          enum:
            - SAML11
            - SAML20
            - JWT
        wsTrustVersion:
          type: string
          description:
            The WS-Trust version for a WS-Federation connection. The default
            version is WSTRUST12.
          enum:
            - WSTRUST12
            - WSTRUST13
        enabledProfiles:
          uniqueItems: true
          type: array
          description:
            "The profiles that are enabled for browser-based SSO. SAML
            2.0 supports all profiles whereas SAML 1.x IdP connections support both
            IdP and SP (non-standard) initiated SSO. This is required for SAMLx.x
            Connections. "
          items:
            type: string
            enum:
              - IDP_INITIATED_SSO
              - SP_INITIATED_SSO
              - IDP_INITIATED_SLO
              - SP_INITIATED_SLO
        incomingBindings:
          uniqueItems: true
          type: array
          description:
            "The SAML bindings that are enabled for browser-based SSO.\
            \ This is required for SAML 2.0 connections when the enabled profiles\
            \ contain the SP-initiated SSO profile or either SLO profile. For SAML\
            \ 1.x based connections, it is not used for SP Connections and it is optional\
            \ for IdP Connections."
          items:
            type: string
            enum:
              - ARTIFACT
              - POST
              - REDIRECT
              - SOAP
        messageCustomizations:
          type: array
          description:
            "The message customizations for browser-based SSO. Depending\
            \ on server settings, connection type, and protocol this may or may not\
            \ be supported."
          items:
            $ref: "#/components/schemas/ProtocolMessageCustomization"
        urlWhitelistEntries:
          type: array
          description:
            "For WS-Federation connections, a whitelist of additional allowed\
            \ domains and paths used to validate wreply for SLO, if enabled."
          items:
            $ref: "#/components/schemas/UrlWhitelistEntry"
        artifact:
          $ref: "#/components/schemas/ArtifactSettings"
        sloServiceEndpoints:
          type: array
          description: A list of possible endpoints to send SLO requests and responses.
          items:
            $ref: "#/components/schemas/SloServiceEndpoint"
        defaultTargetUrl:
          type: string
          description:
            "Default Target URL for SAML1.x connections. For SP connections,\
            \ this default URL represents the destination on the SP where the user\
            \ will be directed. For IdP connections, entering a URL in the Default\
            \ Target URL field overrides the SP Default URL SSO setting."
        alwaysSignArtifactResponse:
          type: boolean
          description: Specify to always sign the SAML ArtifactResponse.
        ssoApplicationEndpoint:
          type: string
          description:
            Application endpoint that can be used to invoke single sign-on
            (SSO) for the connection. This is a read-only parameter.
        ssoServiceEndpoints:
          type: array
          description: A list of possible endpoints to send assertions to.
          items:
            $ref: "#/components/schemas/SpSsoServiceEndpoint"
        spSamlIdentityMapping:
          type: string
          description:
            Process in which users authenticated by the IdP are associated
            with user accounts local to the SP.
          enum:
            - PSEUDONYM
            - STANDARD
            - TRANSIENT
        spWsFedIdentityMapping:
          type: string
          description:
            Process in which users authenticated by the IdP are associated
            with user accounts local to the SP for WS-Federation connection types.
          enum:
            - EMAIL_ADDRESS
            - USER_PRINCIPLE_NAME
            - COMMON_NAME
        signResponseAsRequired:
          type: boolean
          description:
            Sign SAML Response as required by the associated binding and
            encryption policy. Applicable to SAML2.0 only and is defaulted to true.
            It can be set to false only on SAML2.0 connections when signAssertions
            is set to true.
        signAssertions:
          type: boolean
          description: Always sign the SAML Assertion.
        requireSignedAuthnRequests:
          type: boolean
          description:
            Require AuthN requests to be signed when received via the POST
            or Redirect bindings.
        encryptionPolicy:
          $ref: "#/components/schemas/EncryptionPolicy"
        attributeContract:
          $ref: "#/components/schemas/SpBrowserSsoAttributeContract"
        adapterMappings:
          type: array
          description: A list of adapters that map to outgoing assertions.
          items:
            $ref: "#/components/schemas/IdpAdapterAssertionMapping"
        authenticationPolicyContractAssertionMappings:
          type: array
          description:
            A list of authentication policy contracts that map to outgoing
            assertions.
          items:
            $ref: "#/components/schemas/AuthenticationPolicyContractAssertionMapping"
        assertionLifetime:
          $ref: "#/components/schemas/AssertionLifetime"
      description:
        The SAML settings used to enable secure browser-based SSO to resources
        at your partner's site.
    SpBrowserSsoAttribute:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of this attribute.
        nameFormat:
          type: string
          description: The SAML Name Format for the attribute.
      description: An attribute for the SP Browser SSO attribute contract.
    SpBrowserSsoAttributeContract:
      type: object
      properties:
        coreAttributes:
          type: array
          description:
            "A list of read-only assertion attributes (for example, SAML_SUBJECT)\
            \ that are automatically populated by PingFederate."
          items:
            $ref: "#/components/schemas/SpBrowserSsoAttribute"
        extendedAttributes:
          type: array
          description:
            A list of additional attributes that are added to the outgoing
            assertion.
          items:
            $ref: "#/components/schemas/SpBrowserSsoAttribute"
      description: A set of user attributes that the IdP sends in the SAML assertion.
    SpConnection:
      allOf:
        - $ref: "#/components/schemas/Connection"
        - type: object
          properties:
            spBrowserSso:
              $ref: "#/components/schemas/SpBrowserSso"
            attributeQuery:
              $ref: "#/components/schemas/SpAttributeQuery"
            wsTrust:
              $ref: "#/components/schemas/SpWsTrust"
            applicationName:
              type: string
              description: The application name.
            applicationIconUrl:
              type: string
              description: The application icon url.
            outboundProvision:
              $ref: "#/components/schemas/OutboundProvision"
            connectionTargetType:
              type: string
              description:
                The connection target type. This field is intended for bulk
                import/export usage. Changing its value may result in unexpected behavior.
              enum:
                - STANDARD
                - SALESFORCE
                - SALESFORCE_CP
                - SALESFORCE_PP
                - PINGONE_SCIM11
          description: The set of attributes used to configure an SP connection.
    SpSsoServiceEndpoint:
      required:
        - url
      type: object
      properties:
        binding:
          type: string
          description:
            "The binding of this endpoint, if applicable - usually only\
            \ required for SAML 2.0 endpoints.  Supported bindings are Artifact and\
            \ POST."
          enum:
            - ARTIFACT
            - POST
            - REDIRECT
            - SOAP
        url:
          type: string
          description:
            The absolute or relative URL of the endpoint. A relative URL
            can be specified if a base URL for the connection has been defined.
        isDefault:
          type: boolean
          description:
            Whether or not this endpoint is the default endpoint. Defaults
            to false.
        index:
          type: integer
          description: The priority of the endpoint.
          format: int32
      description: The settings that define a service endpoint to a SP SSO service.
    SpTokenGeneratorMapping:
      required:
        - attributeContractFulfillment
        - spTokenGeneratorRef
      type: object
      properties:
        spTokenGeneratorRef:
          $ref: "#/components/schemas/ResourceLink"
        restrictedVirtualEntityIds:
          type: array
          description:
            The list of virtual server IDs that this mapping is restricted
            to.
          items:
            type: string
        defaultMapping:
          type: boolean
          description:
            Indicates whether the token generator mapping is the default
            mapping. The default value is false.
        attributeSources:
          type: array
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: "#/components/schemas/AttributeSourceAggregation"
        attributeContractFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of mappings from attribute names to their fulfillment
            values.
        issuanceCriteria:
          $ref: "#/components/schemas/IssuanceCriteria"
      description: The SP Token Generator Mapping.
    SpWsTrust:
      required:
        - attributeContract
        - partnerServiceIds
        - tokenProcessorMappings
      type: object
      properties:
        partnerServiceIds:
          type: array
          description: The partner service identifiers.
          items:
            type: string
        oAuthAssertionProfiles:
          type: boolean
          description:
            "When selected, four additional token-type requests become\
            \ available."
        defaultTokenType:
          type: string
          description:
            The default token type when a web service client (WSC) does
            not specify in the token request which token type the STS should issue.
            Defaults to SAML 2.0.
          enum:
            - SAML20
            - SAML11
            - SAML11_O365
        generateKey:
          type: boolean
          description:
            "When selected, the STS generates a symmetric key to be used\
            \ in conjunction with the \"Holder of Key\" (HoK) designation for the\
            \ assertion's Subject Confirmation Method.  This option does not apply\
            \ to OAuth assertion profiles."
        encryptSaml2Assertion:
          type: boolean
          description:
            "When selected, the STS encrypts the SAML 2.0 assertion. Applicable\
            \ only to SAML 2.0 security token.  This option does not apply to OAuth\
            \ assertion profiles."
        minutesBefore:
          type: integer
          description:
            The amount of time before the SAML token was issued during
            which it is to be considered valid. The default value is 5.
          format: int32
        minutesAfter:
          type: integer
          description:
            The amount of time after the SAML token was issued during which
            it is to be considered valid. The default value is 30.
          format: int32
        attributeContract:
          $ref: "#/components/schemas/SpWsTrustAttributeContract"
        tokenProcessorMappings:
          type: array
          description: A list of token processors to validate incoming tokens.
          items:
            $ref: "#/components/schemas/IdpTokenProcessorMapping"
        abortIfNotFulfilledFromRequest:
          type: boolean
          description:
            "If the attribute contract cannot be fulfilled using data from\
            \ the Request, abort the transaction."
        requestContractRef:
          $ref: "#/components/schemas/ResourceLink"
        messageCustomizations:
          type: array
          description:
            "The message customizations for WS-Trust. Depending on server\
            \ settings, connection type, and protocol this may or may not be supported."
          items:
            $ref: "#/components/schemas/ProtocolMessageCustomization"
      description:
        Ws-Trust STS provides security-token validation and creation to
        extend SSO access to identity-enabled Web Services
    SpWsTrustAttribute:
      required:
        - name
        - namespace
      type: object
      properties:
        name:
          type: string
          description: The name of this attribute.
        namespace:
          type: string
          description:
            The attribute namespace.  This is required when the Default
            Token Type is SAML2.0 or SAML1.1 or SAML1.1 for Office 365.
      description: An attribute for the Ws-Trust attribute contract.
    SpWsTrustAttributeContract:
      type: object
      properties:
        coreAttributes:
          type: array
          description:
            A list of read-only assertion attributes that are automatically
            populated by PingFederate.
          items:
            $ref: "#/components/schemas/SpWsTrustAttribute"
        extendedAttributes:
          type: array
          description:
            A list of additional attributes that are added to the outgoing
            assertion.
          items:
            $ref: "#/components/schemas/SpWsTrustAttribute"
      description: A set of user attributes that this server will send in the token.
    SqlMethod:
      type: object
      properties:
        table:
          $ref: "#/components/schemas/Table"
        storedProcedure:
          $ref: "#/components/schemas/StoredProcedure"
      description: SQL Method.
    SsoOAuthMapping:
      required:
        - attributeContractFulfillment
      type: object
      properties:
        attributeSources:
          type: array
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: "#/components/schemas/AttributeSourceAggregation"
        attributeContractFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of mappings from attribute names to their fulfillment
            values.
        issuanceCriteria:
          $ref: "#/components/schemas/IssuanceCriteria"
      description: IdP Browser SSO OAuth Attribute Mapping
    StoredProcedure:
      required:
        - schema
        - storedProcedure
      type: object
      properties:
        schema:
          type: string
          description:
            Lists the table structure that stores information within a
            database.
        storedProcedure:
          type: string
          description: The name of the database stored procedure.
      description: SQL Method Stored Procedure.
    Table:
      required:
        - schema
        - tableName
        - uniqueIdColumn
      type: object
      properties:
        schema:
          type: string
          description:
            Lists the table structure that stores information within a
            database.
        tableName:
          type: string
          description: The name of the database table.
        uniqueIdColumn:
          type: string
          description:
            The database column that uniquely identifies the provisioned
            user on the SP side.
      description: SQL Method Table.
    UrlWhitelistEntry:
      type: object
      properties:
        validDomain:
          type: string
          description: Valid Domain Name (leading wildcard '*.' allowed)
        validPath:
          type: string
          description: Valid Path (leave blank to allow any path)
        allowQueryAndFragment:
          type: boolean
          description: Allow Any Query/Fragment
        requireHttps:
          type: boolean
          description: Require HTTPS
      description: Url domain and path to be used as whitelist in WS-Federation connection
    UsernamePasswordCredentials:
      type: object
      properties:
        username:
          type: string
          description: The username.
        password:
          type: string
          description:
            "User password.  To update the password, specify the plaintext\
            \ value in this field.  This field will not be populated for GET requests."
        encryptedPassword:
          type: string
          description:
            "For GET requests, this field contains the encrypted password,\
            \ if one exists.  For POST and PUT requests, if you wish to reuse the\
            \ existing password, this field should be passed back unchanged."
      description: Username and password credentials.
    Users:
      required:
        - readUsers
        - writeUsers
      type: object
      properties:
        writeUsers:
          $ref: "#/components/schemas/WriteUsers"
        readUsers:
          $ref: "#/components/schemas/ReadUsers"
      description: User creation and read configuration.
    WriteGroups:
      required:
        - attributeFulfillment
      type: object
      properties:
        attributeFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of user repository mappings from attribute names to
            their fulfillment values.
      description: Group creation configuration.
    WriteUsers:
      required:
        - attributeFulfillment
      type: object
      properties:
        attributeFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of user repository mappings from attribute names to
            their fulfillment values.
      description: User creation configuration.
    ConvertMetadataRequest:
      required:
        - connectionType
        - expectedProtocol
        - samlMetadata
      type: object
      properties:
        connectionType:
          type: string
          description: The expected connection type to convert.
          enum:
            - IDP
            - SP
        expectedProtocol:
          type: string
          description:
            The expected browser-based SSO protocol to convert. In this
            case the protocol is restricted to SAML.
          enum:
            - SAML20
            - SAML11
            - SAML10
        expectedEntityId:
          type: string
          description:
            The entity ID of the connection to be obtained from the input
            SAML Metadata. Required if the SAML Metadata has more than one connection
            defined.
        samlMetadata:
          type: string
          description: The base-64 encoded XML SAML metadata.
        verificationCertificate:
          type: string
          description:
            The certificate to validate the metadata signature against.
            The certificate can be in PEM format or base-64 encoded DER format.
        templateConnection:
          $ref: "#/components/schemas/Connection"
      description: A request for converting SAML connection metadata into a JSON connection.
    SaasPluginDescriptor:
      type: object
      properties:
        id:
          type: string
          description: The SaaS plugin type.
        description:
          type: string
          description: The SaaS plugin description.
        configDescriptor:
          $ref: "#/components/schemas/PluginConfigDescriptor"
        saasPluginFieldInfoDescriptors:
          type: array
          description:
            The SaaS plugin attribute list for mapping from the local data
            store into Fields specified by the service provide.
          items:
            $ref: "#/components/schemas/SaasPluginFieldInfoDescriptor"
      description: A SaaS Plugin.
    SaasPluginDescriptors:
      type: object
      properties:
        items:
          type: array
          description: The actual list of SaaS plugins.
          items:
            $ref: "#/components/schemas/SaasPluginDescriptor"
      description: A collection of SaaS plugins.
    SaasPluginFieldInfoDescriptor:
      required:
        - code
        - label
      type: object
      properties:
        code:
          type: string
          description: The name or code that represents a field.
        label:
          type: string
          description: The label for a field.
        required:
          type: boolean
          description: Indicates whether a value is required for this field.
        unique:
          type: boolean
          description: indicates whether the value of this field is unique.
        multiValue:
          type: boolean
          description: Whether the field can have multiple values.
        options:
          type: array
          description: List of Option values available for this field.
          items:
            $ref: "#/components/schemas/SaasPluginFieldOption"
        minLength:
          type: integer
          description: Minimum character length for a value.
          format: int32
        maxLength:
          type: integer
          description: Maximum character length for a value.
          format: int32
        pattern:
          type: string
          description: Pattern used to validate values of this field.
        notes:
          type: array
          description: Description or notes for the field.
          items:
            type: string
        defaultValue:
          type: string
          description: Default value for the field.
        dsLdapMap:
          type: boolean
          description: Indicates whether the field can be mapped raw to an LDAP attribute.
        persistForMembership:
          type: boolean
          description: The code that represents the field.
        attributeGroup:
          type: boolean
          description:
            Indicates whether this field belongs to group of attribute
            such as multivalued or sub-type custom attributes.
      description: A Saas Plugin Field configuration.
    SaasPluginFieldOption:
      required:
        - code
        - label
      type: object
      properties:
        code:
          type: string
          description: The code that represents the field.
        label:
          type: string
          description: The label for the field.
      description: A plugin configuration field value.
    ActionResult:
      type: object
      properties:
        message:
          type: string
          description: The message from the completed action.
      description: The result for non-download plugin actions.
    ActionOptions:
      required:
        - parameters
      type: object
      properties:
        parameters:
          type: array
          description: List of action parameters.
          items:
            $ref: "#/components/schemas/ActionParameter"
      description: Action options to invoke action.
    ActionParameter:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the action parameter.
        value:
          type: string
          description: The value for the action parameter.
      description: An action parameter value.
    CustomDataStoreDescriptors:
      type: object
      properties:
        items:
          type: array
          description: The list of custom data store descriptors.
          items:
            $ref: "#/components/schemas/CustomDataStoreDescriptor"
      description: A collection of custom data store descriptors.
    DataStoreAggregation:
      oneOf:
        - $ref: "#/components/schemas/CustomDataStore"
        - $ref: "#/components/schemas/JdbcDataStore"
        - $ref: "#/components/schemas/LdapDataStore"
        - $ref: "#/components/schemas/PingOneLdapGatewayDataStore"
      discriminator:
        propertyName: type
        mapping:
          CUSTOM: "#/components/schemas/CustomDataStore"
          JDBC: "#/components/schemas/JdbcDataStore"
          LDAP: "#/components/schemas/LdapDataStore"
          PING_ONE_LDAP_GATEWAY: "#/components/schemas/PingOneLdapGatewayDataStore"
    CustomDataStore:
      allOf:
        - $ref: "#/components/schemas/DataStore"
        - required:
            - configuration
            - name
            - pluginDescriptorRef
            - type
          type: object
          properties:
            type:
              type: string
              description: The data store type.
              enum:
                - LDAP
                - PING_ONE_LDAP_GATEWAY
                - JDBC
                - CUSTOM
            id:
              type: string
              description:
                "The persistent, unique ID for the data store. It can be\
                \ any combination of [a-zA-Z0-9._-]. This property is system-assigned\
                \ if not specified."
            maskAttributeValues:
              type: boolean
              description: Whether attribute values should be masked in the log.
            name:
              type: string
              description: The plugin instance name.
            pluginDescriptorRef:
              $ref: "#/components/schemas/ResourceLink"
            parentRef:
              $ref: "#/components/schemas/ResourceLink"
            configuration:
              $ref: "#/components/schemas/PluginConfiguration"
          description: A custom data store.
    DataStore:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: The data store type.
          enum:
            - LDAP
            - PING_ONE_LDAP_GATEWAY
            - JDBC
            - CUSTOM
        id:
          type: string
          description:
            "The persistent, unique ID for the data store. It can be any\
            \ combination of [a-zA-Z0-9._-]. This property is system-assigned if not\
            \ specified."
        maskAttributeValues:
          type: boolean
          description: Whether attribute values should be masked in the log.
        lastModified:
          type: string
          description:
            The time at which the datastore instance was last changed.
            This property is read only and is ignored on PUT and POST requests.
          format: date-time
      description: The set of attributes used to configure a data store.
      discriminator:
        propertyName: type
    DataStores:
      type: object
      properties:
        items:
          type: array
          description: The actual list of data stores.
          items:
            $ref: "#/components/schemas/DataStoreAggregation"
      description: A collection of data stores.
    JdbcDataStore:
      allOf:
        - $ref: "#/components/schemas/DataStore"
        - required:
            - driverClass
          type: object
          properties:
            connectionUrlTags:
              type: array
              description:
                The set of connection URLs and associated tags for this JDBC
                data store. This is required if 'connectionUrl' is not provided.
              items:
                $ref: "#/components/schemas/JdbcTagConfig"
            connectionUrl:
              type: string
              description:
                The default location of the JDBC database. This field is
                required if no mapping for JDBC database location and tags is specified.
            name:
              type: string
              description:
                The data store name with a unique value across all data sources.
                Omitting this attribute will set the value to a combination of the connection
                url and the username.
            driverClass:
              type: string
              description:
                The name of the driver class used to communicate with the
                source database.
            userName:
              type: string
              description:
                The name that identifies the user when connecting to the
                database.
            password:
              type: string
              description:
                "The password needed to access the database. GETs will not\
                \ return this attribute. To update this field, specify the new value\
                \ in this attribute."
            encryptedPassword:
              type: string
              description:
                "The encrypted password needed to access the database. If\
                \ you do not want to update the stored value, this attribute should\
                \ be passed back unchanged. Secret Reference may be provided in this\
                \ field with format 'OBF:MGR:{secretManagerId}:{secretId}'."
            validateConnectionSql:
              type: string
              description:
                A simple SQL statement used by PingFederate at runtime to
                verify that the database connection is still active and to reconnect
                if needed.
            allowMultiValueAttributes:
              type: boolean
              description:
                Indicates that this data store can select more than one record
                from a column and return the results as a multi-value attribute.
            minPoolSize:
              type: integer
              description:
                The smallest number of database connections in the connection
                pool for the given data store. Omitting this attribute will set the
                value to the connection pool default.
              format: int32
            maxPoolSize:
              type: integer
              description:
                The largest number of database connections in the connection
                pool for the given data store. Omitting this attribute will set the
                value to the connection pool default.
              format: int32
            blockingTimeout:
              type: integer
              description:
                The amount of time in milliseconds a request waits to get
                a connection from the connection pool before it fails. Omitting this
                attribute will set the value to the connection pool default.
              format: int32
            idleTimeout:
              type: integer
              description:
                The length of time in minutes the connection can be idle
                in the pool before it is closed. Omitting this attribute will set the
                value to the connection pool default.
              format: int32
            lastModified:
              type: string
              description:
                The time at which the datastore instance was last changed.
                This property is read only and is ignored on PUT and POST requests.
              format: date-time
          description: A JDBC data store.
    JdbcTagConfig:
      required:
        - connectionUrl
      type: object
      properties:
        connectionUrl:
          type: string
          description: "The location of the JDBC database. "
        tags:
          type: string
          description:
            "Tags associated with the connection URL. At runtime, nodes\
            \ will use the first JdbcTagConfig that has a tag that matches with node.tags\
            \ in run.properties."
        defaultSource:
          type: boolean
          description:
            Whether this is the default connection. Defaults to false if
            not specified.
      description:
        "A JDBC data store's connection URLs and tags configuration. For\
        \ regional deployments, provide a separate JdbcTagConfig for each region,\
        \ containing the region-specific connection URL and the corresponding tags."
    LdapDataStore:
      allOf:
        - $ref: "#/components/schemas/DataStore"
        - required:
            - ldapType
          type: object
          properties:
            hostnamesTags:
              type: array
              description:
                The set of host names and associated tags for this LDAP data
                store. This is required if 'hostnames' is not provided.
              items:
                $ref: "#/components/schemas/LdapTagConfig"
            hostnames:
              type: array
              description:
                The default LDAP host names. This field is required if no
                mapping for host names and tags is specified. Failover can be configured
                by providing multiple host names.
              items:
                type: string
            name:
              type: string
              description:
                The data store name with a unique value across all data sources.
                Omitting this attribute will set the value to a combination of the hostname(s)
                and the principal.
            ldapType:
              type: string
              description:
                "A type that allows PingFederate to configure many provisioning\
                \ settings automatically. The 'UNBOUNDID_DS' type has been deprecated,\
                \ please use the 'PING_DIRECTORY' type instead."
              enum:
                - ACTIVE_DIRECTORY
                - ORACLE_DIRECTORY_SERVER
                - ORACLE_UNIFIED_DIRECTORY
                - UNBOUNDID_DS
                - PING_DIRECTORY
                - GENERIC
            bindAnonymously:
              type: boolean
              description:
                "Whether username and password are required. If true, no\
                \ other authentication fields should be provided. The default value\
                \ is false."
            userDN:
              type: string
              description:
                "The username credential required to access the data store.\
                \ If specified, no other authentication fields should be provided."
            password:
              type: string
              description:
                "The password credential required to access the data store.\
                \ GETs will not return this attribute. To update this field, specify\
                \ the new value in this attribute."
            encryptedPassword:
              type: string
              description:
                "The encrypted password credential required to access the\
                \ data store.  If you do not want to update the stored value, this attribute\
                \ should be passed back unchanged. Secret Reference may be provided\
                \ in this field with format 'OBF:MGR:{secretManagerId}:{secretId}'."
            clientTlsCertificateRef:
              $ref: "#/components/schemas/ResourceLink"
            useSsl:
              type: boolean
              description:
                Connects to the LDAP data store using secure SSL/TLS encryption
                (LDAPS). The default value is false.
            useDnsSrvRecords:
              type: boolean
              description:
                Use DNS SRV Records to discover LDAP server information.
                The default value is false.
            followLDAPReferrals:
              type: boolean
              description:
                Follow LDAP Referrals in the domain tree. The default value
                is false. This property does not apply to PingDirectory as this functionality
                is configured in PingDirectory.
            retryFailedOperations:
              type: boolean
              description:
                Indicates whether failed operations should be retried. The
                default is false.
            testOnBorrow:
              type: boolean
              description:
                Indicates whether objects are validated before being borrowed
                from the pool.
            testOnReturn:
              type: boolean
              description:
                Indicates whether objects are validated before being returned
                to the pool.
            createIfNecessary:
              type: boolean
              description:
                Indicates whether temporary connections can be created when
                the Maximum Connections threshold is reached.
            verifyHost:
              type: boolean
              description:
                Verifies that the presented server certificate includes the
                address to which the client intended to establish a connection. Omitting
                this attribute will set the value to true.
            minConnections:
              type: integer
              description:
                "The smallest number of connections that can remain in each\
                \ pool, without creating extra ones. Omitting this attribute will set\
                \ the value to the default value."
              format: int32
            maxConnections:
              type: integer
              description:
                The largest number of active connections that can remain
                in each pool without releasing extra ones. Omitting this attribute will
                set the value to the default value.
              format: int32
            maxWait:
              type: integer
              description:
                The maximum number of milliseconds the pool waits for a connection
                to become available when trying to obtain a connection from the pool.
                Omitting this attribute or setting a value of -1 causes the pool not
                to wait at all and to either create a new connection or produce an error
                (when no connections are available).
              format: int32
            timeBetweenEvictions:
              type: integer
              description:
                "The frequency, in milliseconds, that the evictor cleans\
                \ up the connections in the pool. A value of -1 disables the evictor.\
                \ Omitting this attribute will set the value to the default value."
              format: int32
            readTimeout:
              type: integer
              description:
                The maximum number of milliseconds a connection waits for
                a response to be returned before producing an error. A value of -1 causes
                the connection to wait indefinitely. Omitting this attribute will set
                the value to the default value.
              format: int32
            connectionTimeout:
              type: integer
              description:
                The maximum number of milliseconds that a connection attempt
                should be allowed to continue before returning an error. A value of
                -1 causes the pool to wait indefinitely. Omitting this attribute will
                set the value to the default value.
              format: int32
            dnsTtl:
              type: integer
              description:
                The maximum time in milliseconds that DNS information are
                cached. Omitting this attribute will set the value to the default value.
              format: int32
            ldapDnsSrvPrefix:
              type: string
              description:
                The prefix value used to discover LDAP DNS SRV record. Omitting
                this attribute will set the value to the default value.
            ldapsDnsSrvPrefix:
              type: string
              description:
                The prefix value used to discover LDAPs DNS SRV record. Omitting
                this attribute will set the value to the default value.
            binaryAttributes:
              type: array
              description: The list of LDAP attributes to be handled as binary data.
              items:
                type: string
            lastModified:
              type: string
              description:
                The time at which the datastore instance was last changed.
                This property is read only and is ignored on PUT and POST requests.
              format: date-time
          description: A LDAP data store.
    LdapTagConfig:
      required:
        - hostnames
      type: object
      properties:
        hostnames:
          type: array
          description:
            The LDAP host names. Failover can be configured by providing
            multiple host names.
          items:
            type: string
        tags:
          type: string
          description:
            "Tags associated with the host names. At runtime, nodes will\
            \ use the first LdapTagConfig that has a tag that matches with node.tags\
            \ in run.properties."
        defaultSource:
          type: boolean
          description:
            Whether this is the default connection. Defaults to false if
            not specified.
      description:
        "An LDAP data store's hostnames and tags configuration. For regional\
        \ deployments, provide a separate LdapTagConfig for each region, containing\
        \ region-specific hostnames and the corresponding tags."
    PingOneLdapGatewayDataStore:
      allOf:
        - $ref: "#/components/schemas/DataStore"
        - required:
            - ldapType
            - pingOneConnectionRef
            - pingOneEnvironmentId
            - pingOneLdapGatewayId
          type: object
          properties:
            name:
              type: string
              description:
                The data store name with a unique value across all data sources.
                Omitting this attribute will set the value to a combination of the hostname(s)
                and the principal.
            ldapType:
              type: string
              description:
                A type that allows PingFederate to configure many provisioning
                settings automatically. The value is validated against the LDAP gateway
                configuration in PingOne unless the header 'X-BypassExternalValidation'
                is set to true.
              enum:
                - ACTIVE_DIRECTORY
                - ORACLE_DIRECTORY_SERVER
                - ORACLE_UNIFIED_DIRECTORY
                - UNBOUNDID_DS
                - PING_DIRECTORY
                - GENERIC
            pingOneConnectionRef:
              $ref: "#/components/schemas/ResourceLink"
            pingOneEnvironmentId:
              type: string
              description: The environment ID that the gateway belongs to.
            pingOneLdapGatewayId:
              type: string
              description: The ID of the PingOne LDAP Gateway this data store uses.
            useSsl:
              type: boolean
              description:
                Connects to the LDAP data store using secure SSL/TLS encryption
                (LDAPS). The default value is false. The value is validated against
                the LDAP gateway configuration in PingOne unless the header 'X-BypassExternalValidation'
                is set to true.
            binaryAttributes:
              type: array
              description: The list of LDAP attributes to be handled as binary data.
              items:
                type: string
            lastModified:
              type: string
              description:
                The time at which the datastore instance was last changed.
                This property is read only and is ignored on PUT and POST requests.
              format: date-time
          description: A LDAP gateway data store.
    Action:
      type: object
      properties:
        id:
          type: string
          description: The ID of this action.
        name:
          type: string
          description: The name of this action.
        description:
          type: string
          description: The description of this action.
        download:
          type: boolean
          description:
            Whether this action will trigger a download or invoke an internal
            action that will return a string result.
        invocationRef:
          $ref: "#/components/schemas/ResourceLink"
        parameters:
          type: array
          description: List of parameters for this action.
          items:
            $ref: "#/components/schemas/FieldDescriptor"
      description:
        A read-only plugin action that either represents a file download
        or an arbitrary invocation performed by the plugin.
    Actions:
      type: object
      properties:
        items:
          type: array
          description: The list of available actions.
          items:
            $ref: "#/components/schemas/Action"
      description: A read-only list of available actions for this plugin instance.
    ExtendedProperties:
      type: object
      properties:
        items:
          type: array
          description: The actual list of Extended Property definitions.
          items:
            $ref: "#/components/schemas/ExtendedProperty"
      description: A collection of Extended Properties definitions.
    ExtendedProperty:
      type: object
      properties:
        name:
          type: string
          description: The property name.
        description:
          type: string
          description: The property description.
        multiValued:
          type: boolean
          description: Indicates whether the property should allow multiple values.
      description:
        Extended Property definition that allows to store additional information
        about IdP/SP Connections and OAuth Clients.
    IdentityStoreProvisionerDescriptor:
      type: object
      properties:
        id:
          type: string
          description: Unique ID of the plugin.
        name:
          type: string
          description: Friendly name for the plugin.
        className:
          type: string
          description: Full class name of the class that implements this plugin.
        attributeContract:
          type: array
          description: The attribute contract for this plugin.
          items:
            type: string
        groupAttributeContract:
          type: array
          description: The group attribute contract for this identity store provisioner
          items:
            type: string
        supportsExtendedContract:
          type: boolean
          description:
            Determines whether this plugin supports extending the attribute
            contract.
        supportsGroupExtendedContract:
          type: boolean
          description:
            Determines whether this plugin supports extending the group
            attribute contract
        configDescriptor:
          $ref: "#/components/schemas/PluginConfigDescriptor"
      description: An identity store provisioner descriptor
    IdentityStoreProvisionerDescriptors:
      type: object
      properties:
        items:
          type: array
          description: The list of identity store provisioner descriptors.
          items:
            $ref: "#/components/schemas/IdentityStoreProvisionerDescriptor"
      description: A collection of identity store provisioner descriptors.
    GroupAttribute:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of this attribute.
      description: The definition of a group attribute in a group attribute contract.
    IdentityStoreProvisioner:
      required:
        - configuration
        - id
        - name
        - pluginDescriptorRef
      type: object
      properties:
        id:
          type: string
          description:
            "The ID of the plugin instance. The ID cannot be modified once\
            \ the instance is created.<br>Note: Ignored when specifying a connection's\
            \ adapter override."
        name:
          type: string
          description:
            "The plugin instance name. The name can be modified once the\
            \ instance is created.<br>Note: Ignored when specifying a connection's\
            \ adapter override."
        pluginDescriptorRef:
          $ref: "#/components/schemas/ResourceLink"
        parentRef:
          $ref: "#/components/schemas/ResourceLink"
        configuration:
          $ref: "#/components/schemas/PluginConfiguration"
        lastModified:
          type: string
          description:
            The time at which the plugin instance was last changed. This
            property is read only and is ignored on PUT and POST requests.
          format: date-time
        attributeContract:
          $ref: "#/components/schemas/IdentityStoreProvisionerAttributeContract"
        groupAttributeContract:
          $ref: "#/components/schemas/IdentityStoreProvisionerGroupAttributeContract"
      description: An identity store provisioner instance.
    IdentityStoreProvisionerAttributeContract:
      required:
        - coreAttributes
      type: object
      properties:
        coreAttributes:
          type: array
          description:
            A list of identity store provisioner attributes that correspond
            to the attributes exposed by the identity store provisioner type.
          items:
            $ref: "#/components/schemas/Attribute"
        extendedAttributes:
          type: array
          description:
            A list of additional attributes that can be returned by the
            identity store provisioner. The extended attributes are only used if the
            provisioner supports them.
          items:
            $ref: "#/components/schemas/Attribute"
        inherited:
          type: boolean
          description:
            "Whether this attribute contract is inherited from its parent\
            \ instance. If true, the rest of the properties in this model become read-only.\
            \ The default value is false."
      description: A set of attributes exposed by an identity store provisioner.
    IdentityStoreProvisionerGroupAttributeContract:
      required:
        - coreAttributes
      type: object
      properties:
        coreAttributes:
          type: array
          description:
            A list of identity store provisioner group attributes that
            correspond to the group attributes exposed by the identity store provisioner
            type.
          items:
            $ref: "#/components/schemas/GroupAttribute"
        extendedAttributes:
          type: array
          description:
            A list of additional group attributes that can be returned
            by the identity store provisioner. The extended group attributes are only
            used if the provisioner supports them.
          items:
            $ref: "#/components/schemas/GroupAttribute"
        inherited:
          type: boolean
          description:
            "Whether this group attribute contract is inherited from its\
            \ parent instance. If true, the rest of the properties in this model become\
            \ read-only. The default value is false."
      description: A set of group attributes exposed by an identity store provisioner.
    IdentityStoreProvisioners:
      type: object
      properties:
        items:
          type: array
          description: The actual list of identity store provisioners.
          items:
            $ref: "#/components/schemas/IdentityStoreProvisioner"
      description: A collection of identity store provisioners.
    IdpAdapterDescriptors:
      type: object
      properties:
        items:
          type: array
          description: The list of IdP adapter descriptors.
          items:
            $ref: "#/components/schemas/IdpAdapterDescriptor"
      description: A collection of IdP adapter descriptors.
    IdpAdapters:
      type: object
      properties:
        items:
          type: array
          description: The actual list of IdP adapters.
          items:
            $ref: "#/components/schemas/IdpAdapter"
      description: A collection of IdP adapters.
    ConnectionCerts:
      type: object
      properties:
        items:
          type: array
          description: The actual list of certificates.
          items:
            $ref: "#/components/schemas/ConnectionCert"
      description: The certificates used for signature verification and XML encryption.
    DecryptionKeys:
      type: object
      properties:
        primaryKeyRef:
          $ref: "#/components/schemas/ResourceLink"
        secondaryKeyPairRef:
          $ref: "#/components/schemas/ResourceLink"
      description:
        Decryption keys used to decrypt message content received from the
        partner.
    IdpConnections:
      type: object
      properties:
        items:
          type: array
          description: The actual list of connections.
          items:
            $ref: "#/components/schemas/IdpConnection"
      description: A collection of IdP connections.
    IdpDefaultUrl:
      required:
        - idpErrorMsg
      type: object
      properties:
        confirmIdpSlo:
          type: boolean
          description: Prompt user to confirm Single Logout (SLO).
        idpSloSuccessUrl:
          type: string
          description:
            Provide the default URL you would like to send the user to
            when Single Logout has succeeded.
        idpErrorMsg:
          type: string
          description:
            Provide the error text displayed in a user's browser when an
            SSO operation fails.
      description: IDP Default URL settings.
    IdpToSpAdapterMapping:
      required:
        - attributeContractFulfillment
        - sourceId
        - targetId
      type: object
      properties:
        attributeSources:
          type: array
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: "#/components/schemas/AttributeSourceAggregation"
        attributeContractFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of mappings from attribute names to their fulfillment
            values.
        issuanceCriteria:
          $ref: "#/components/schemas/IssuanceCriteria"
        sourceId:
          type: string
          description: The id of the IdP Adapter.
        targetId:
          type: string
          description: The id of the SP Adapter.
        id:
          type: string
          description:
            The id of the IdP-to-SP Adapter mapping. This field is read-only
            and is ignored when passed in with the payload.
        defaultTargetResource:
          type: string
          description: Default target URL for this adapter-to-adapter mapping configuration.
        licenseConnectionGroupAssignment:
          type: string
          description: The license connection group.
        applicationName:
          type: string
          description: The application name.
        applicationIconUrl:
          type: string
          description: The application icon URL.
      description: The IdP-to-SP Adapter Mapping.
    IdpToSpAdapterMappings:
      type: object
      properties:
        items:
          type: array
          description: The actual list of connections.
          items:
            $ref: "#/components/schemas/IdpToSpAdapterMapping"
      description: A collection of IdP-to-SP Adapter Mappings.
    IncomingProxySettings:
      type: object
      properties:
        forwardedIpAddressHeaderName:
          type: string
          description:
            "Globally specify the header name (for example, X-Forwarded-For)\
            \ where PingFederate should attempt to retrieve the client IP address\
            \ in all HTTP requests."
        forwardedIpAddressHeaderIndex:
          type: string
          description:
            PingFederate combines multiple comma-separated header values
            into the same order that they are received. Define which IP address you
            want to use. Default is to use the last address.
          enum:
            - FIRST
            - LAST
        forwardedHostHeaderName:
          type: string
          description:
            "Globally specify the header name (for example, X-Forwarded-Host)\
            \ where PingFederate should attempt to retrieve the hostname and port\
            \ in all HTTP requests."
        forwardedHostHeaderIndex:
          type: string
          description:
            PingFederate combines multiple comma-separated header values
            into the same order that they are received. Define which hostname you
            want to use. Default is to use the last hostname.
          enum:
            - FIRST
            - LAST
        clientCertSSLHeaderName:
          type: string
          description:
            "While the proxy server is configured to pass client certificates\
            \ as HTTP request headers, specify the header name here."
        clientCertChainSSLHeaderName:
          type: string
          description:
            "While the proxy server is configured to pass client certificates\
            \ as HTTP request headers, specify the chain header name here."
        proxyTerminatesHttpsConns:
          type: boolean
          description:
            Allows you to globally specify that connections to the reverse
            proxy are made over HTTPS even when HTTP is used between the reverse proxy
            and PingFederate.
      description: Incoming Proxy Settings.
    KerberosRealmsSettings:
      required:
        - kdcRetries
        - kdcTimeout
      type: object
      properties:
        forceTcp:
          type: boolean
          description: Reference to the default security.
        kdcRetries:
          type: string
          description: Reference to the default Key Distribution Center Retries.
        debugLogOutput:
          type: boolean
          description: Reference to the default logging.
        kdcTimeout:
          type: string
          description:
            Reference to the default Key Distribution Center Timeout (in
            seconds).
        keySetRetentionPeriodMins:
          type: integer
          description:
            "The key set retention period in minutes. When 'retainPreviousKeysOnPasswordChange'\
            \ is set to true for a realm, this setting determines how long keys will\
            \ be retained after a password change occurs. If this field is omitted\
            \ in a PUT request, the default of 610 minutes is applied."
          format: int32
      description: Settings for all of the Kerberos Realms.
    KerberosKeySet:
      required:
        - encryptedKeySet
      type: object
      properties:
        encryptedKeySet:
          type: string
          description: The encrypted key set.
        deactivatedAt:
          type: string
          description:
            Time at which the key set was deactivated due to password change.
            This field is not populated if the key set is active.
          format: date-time
      description: Represents a set of Kerberos encryption keys.
    KerberosRealm:
      required:
        - kerberosRealmName
      type: object
      properties:
        id:
          type: string
          description:
            "The persistent, unique ID for the Kerberos Realm. It can be\
            \ any combination of [a-z0-9._-]. This property is system-assigned if\
            \ not specified."
        kerberosRealmName:
          type: string
          description: The Domain/Realm name used for display in UI screens.
        connectionType:
          type: string
          description:
            "Controls how PingFederate connects to the Active Directory/Kerberos\
            \ Realm. The default is: \"DIRECT\"."
          enum:
            - DIRECT
            - LDAP_GATEWAY
        keyDistributionCenters:
          type: array
          description:
            The Domain Controller/Key Distribution Center Host Action Names.
            Only applicable when 'connectionType' is "DIRECT".
          items:
            type: string
        kerberosUsername:
          type: string
          description:
            The Domain/Realm username. Only required when 'connectionType'
            is "DIRECT".
        kerberosPassword:
          type: string
          description:
            "The Domain/Realm password. GETs will not return this attribute.\
            \ To update this field, specify the new value in this attribute. Only\
            \ applicable when 'connectionType' is \"DIRECT\"."
        kerberosEncryptedPassword:
          type: string
          description:
            "For GET requests, this field contains the encrypted Domain/Realm\
            \ password, if one exists. For POST and PUT requests, if you wish to reuse\
            \ the existing password, this field should be passed back unchanged. Only\
            \ applicable when 'connectionType' is \"DIRECT\"."
        keySets:
          type: array
          description:
            "A list of key sets for validating Kerberos tickets. On POST\
            \ or PUT, if 'retainPreviousKeysOnPasswordChange' is true, PingFederate\
            \ automatically adds the key set for the current password to this list\
            \ and removes expired key sets. If 'retainPreviousKeysOnPasswordChange'\
            \ is false, this list is cleared. Only applicable when 'connectionType'\
            \ is \"DIRECT\"."
          items:
            $ref: "#/components/schemas/KerberosKeySet"
        retainPreviousKeysOnPasswordChange:
          type: boolean
          description:
            Determines whether the previous encryption keys are retained
            when the password is updated. Retaining the previous keys allows existing
            Kerberos tickets to continue to be validated. The default is false. Only
            applicable when 'connectionType' is "DIRECT".
        suppressDomainNameConcatenation:
          type: boolean
          description:
            Controls whether the KDC hostnames and the realm name are concatenated
            in the auto-generated krb5.conf file. Default is false. Only applicable
            when 'connectionType' is "DIRECT".
        ldapGatewayDataStoreRef:
          $ref: "#/components/schemas/ResourceLink"
    KerberosRealms:
      type: object
      properties:
        items:
          type: array
          description: The actual list of kerberos realms.
          items:
            $ref: "#/components/schemas/KerberosRealm"
      description: A collection of Kerberos Realms.
    ConnectionGroupLicenseView:
      type: object
      properties:
        name:
          type: string
          description: Group name from the license file.
        connectionCount:
          type: integer
          description: Maximum number of connections permitted under the group.
          format: int32
        startDate:
          type: string
          description: Start date for the group.
          format: date-time
        endDate:
          type: string
          description: End date for the group.
          format: date-time
      description: Connection group license information.
    LicenseFeatureView:
      type: object
      properties:
        name:
          type: string
          description: The name of the license feature.
        value:
          type: string
          description: The value of the license feature.
      description: PingFederate license feature details.
    LicenseView:
      type: object
      properties:
        name:
          type: string
          description: Name of the person the license was issued to.
        id:
          type: string
          description: Unique identifier of a license.
        maxConnections:
          type: integer
          description:
            Maximum number of connections that can be created under this
            license (if applicable).
          format: int32
        usedConnections:
          type: integer
          description: Number of used connections under this license.
          format: int32
        tier:
          type: string
          description:
            "The tier value from the license file. The possible values\
            \ are FREE, PERPETUAL or SUBSCRIPTION."
        issueDate:
          type: string
          description: The issue date value from the license file.
          format: date-time
        expirationDate:
          type: string
          description: The expiration date value from the license file (if applicable).
          format: date-time
        enforcementType:
          type: string
          description:
            "The enforcement type is a 3-bit binary value, expressed as\
            \ a decimal digit. The bits from left to right are: <br>1: Shutdown on\
            \ expire <br>2: Notify on expire <br>4: Enforce minor version <br>if all\
            \ three enforcements are active, the enforcement type will be 7 (1 + 2\
            \ + 4); if only the first two are active, you have an enforcement type\
            \ of 3 (1 + 2). "
        version:
          type: string
          description: The Ping Identity product version from the license file.
        product:
          type: string
          description: The Ping Identity product value from the license file.
        organization:
          type: string
          description: The organization value from the license file.
        gracePeriod:
          type: integer
          description:
            "Number of days provided as grace period, past the expiration\
            \ date (if applicable)."
          format: int64
        nodeLimit:
          type: integer
          description:
            Maximum number of clustered nodes allowed under this license
            (if applicable).
          format: int32
        licenseGroups:
          type: array
          description: "License connection groups, if applicable."
          items:
            $ref: "#/components/schemas/ConnectionGroupLicenseView"
        oauthEnabled:
          type: boolean
          description: Indicates whether OAuth role is enabled for this license.
        wsTrustEnabled:
          type: boolean
          description: Indicates whether WS-Trust role is enabled for this license.
        provisioningEnabled:
          type: boolean
          description: Indicates whether Provisioning role is enabled for this license.
        bridgeMode:
          type: boolean
          description: Indicates whether this license is a bridge license or not.
        features:
          type: array
          description: "Other licence features, if applicable."
          items:
            $ref: "#/components/schemas/LicenseFeatureView"
      description: PingFederate License details.
    LicenseFile:
      required:
        - fileData
      type: object
      properties:
        fileData:
          type: string
          description: The base64-encoded license file.
      description: License to import.
    LicenseAgreementInfo:
      type: object
      properties:
        licenseAgreementUrl:
          type: string
          description: URL to license agreement.
        accepted:
          type: boolean
          description:
            Indicates whether license agreement has been accepted. The
            default value is false.
      description: PingFederate License Agreement information.
    BaseDefaultValueLocalIdentityField:
      allOf:
        - $ref: "#/components/schemas/LocalIdentityField"
        - type: object
          properties:
            defaultValue:
              type: string
              description: The default value for this field.
          description: Holds fields that are shared by all default value type fields.
    BaseSelectionLocalIdentityField:
      allOf:
        - $ref: "#/components/schemas/LocalIdentityField"
        - type: object
          properties:
            options:
              type: array
              description: The list of options for this selection field.
              items:
                type: string
          description: Holds fields that are shared by all selection-type fields.
    CheckboxGroupLocalIdentityField:
      allOf:
        - $ref: "#/components/schemas/BaseSelectionLocalIdentityField"
        - required:
            - options
          type: object
          properties:
            options:
              type: array
              description: The list of options for this selection field.
              items:
                type: string
          description: A checkbox group selection type field.
    CheckboxLocalIdentityField:
      allOf:
        - $ref: "#/components/schemas/BaseDefaultValueLocalIdentityField"
        - type: object
          description: A checkbox selection type field.
    DataStoreAttribute:
      required:
        - name
        - type
      type: object
      properties:
        type:
          type: string
          description: The data store attribute type.
          enum:
            - LDAP
            - PING_ONE_LDAP_GATEWAY
            - JDBC
            - CUSTOM
        name:
          type: string
          description: The data store attribute name.
        metadata:
          type: object
          additionalProperties:
            type: string
          description: The data store attribute metadata.
      description: The data store attribute.
      discriminator:
        propertyName: type
    DataStoreConfig:
      required:
        - dataStoreRef
        - type
      type: object
      properties:
        type:
          type: string
          description: The data store config type.
          enum:
            - LDAP
            - PING_ONE_LDAP_GATEWAY
            - JDBC
            - CUSTOM
        dataStoreRef:
          $ref: "#/components/schemas/ResourceLink"
        dataStoreMapping:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/DataStoreAttribute"
          description: The data store mapping.
      description: Local identity profile data store.
      discriminator:
        propertyName: type
    DateLocalIdentityField:
      allOf:
        - $ref: "#/components/schemas/BaseDefaultValueLocalIdentityField"
        - type: object
          description: A date type field.
    DropDownLocalIdentityField:
      allOf:
        - $ref: "#/components/schemas/BaseSelectionLocalIdentityField"
        - required:
            - options
          type: object
          properties:
            defaultValue:
              type: string
              description: The default value for this field.
            options:
              type: array
              description: The list of options for this selection field.
              items:
                type: string
          description: A dropdown selection type field.
    EmailLocalIdentityField:
      allOf:
        - $ref: "#/components/schemas/LocalIdentityField"
        - type: object
          description: An email type field.
    EmailVerificationConfig:
      required:
        - fieldForEmailToVerify
        - fieldStoringVerificationStatus
      type: object
      properties:
        emailVerificationEnabled:
          type: boolean
          description: Whether the email ownership verification is enabled.
        verifyEmailTemplateName:
          type: string
          description: The template name for verify email. The default is message-template-email-ownership-verification.html.
        emailVerificationSentTemplateName:
          type: string
          description:
            The template name for email verification sent. The default
            is local.identity.email.verification.sent.html.<br>Note:Only applicable
            if EmailVerificationType is OTL.
        emailVerificationSuccessTemplateName:
          type: string
          description:
            The template name for email verification success. The default
            is local.identity.email.verification.success.html.
        emailVerificationErrorTemplateName:
          type: string
          description:
            The template name for email verification error.  The default
            is local.identity.email.verification.error.html.
        emailVerificationType:
          type: string
          description: Email Verification Type.
          enum:
            - OTP
            - OTL
        otpLength:
          type: integer
          description:
            "The OTP length generated for email verification. The default\
            \ is 8.<br>Note: Only applicable if EmailVerificationType is OTP."
          format: int32
        otpRetryAttempts:
          type: integer
          description:
            "The number of OTP retry attempts for email verification. The\
            \ default is 3.<br>Note: Only applicable if EmailVerificationType is OTP."
          format: int32
        allowedOtpCharacterSet:
          type: string
          description:
            "The allowed character set used to generate the OTP. The default\
            \ is 23456789BCDFGHJKMNPQRSTVWXZbcdfghjkmnpqrstvwxz.<br>Note: Only applicable\
            \ if EmailVerificationType is OTP."
        otpTimeToLive:
          type: integer
          description:
            "Field used OTP time to live. The default is 15.<br>Note: Only\
            \ applicable if EmailVerificationType is OTP."
          format: int32
        emailVerificationOtpTemplateName:
          type: string
          description:
            "The template name for email verification OTP verification.\
            \  The default is local.identity.email.verification.otp.html.<br>Note:\
            \ Only applicable if EmailVerificationType is OTP."
        otlTimeToLive:
          type: integer
          description:
            "Field used OTL time to live. The default is 1440.<br>Note:\
            \ Only applicable if EmailVerificationType is OTL."
          format: int32
        fieldForEmailToVerify:
          type: string
          description:
            "Field used for email ownership verification.<br>Note: Not\
            \ required when emailVerificationEnabled is set to false."
        fieldStoringVerificationStatus:
          type: string
          description:
            "Field used for storing email verification status.<br>Note:\
            \ Not required when emailVerificationEnabled is set to false."
        notificationPublisherRef:
          $ref: "#/components/schemas/ResourceLink"
        requireVerifiedEmail:
          type: boolean
          description:
            Whether the user must verify their email address before they
            can complete a single sign-on transaction. The default is false.
        requireVerifiedEmailTemplateName:
          type: string
          description:
            The template to render when the user must verify their email
            address before they can complete a single sign-on transaction. The default
            is local.identity.email.verification.required.html.<br>Note:Only applicable
            if EmailVerificationType is OTL and requireVerifiedEmail is true.
      description: A local identity email verification configuration.
    FieldConfig:
      type: object
      properties:
        fields:
          type: array
          description: The field configuration for the local identity profile.
          items:
            $ref: "#/components/schemas/LocalIdentityField"
        stripSpaceFromUniqueField:
          type: boolean
          description:
            Strip leading/trailing spaces from unique ID field. Default
            is true.
      description: A local identity profile field configuration.
    HiddenLocalIdentityField:
      allOf:
        - $ref: "#/components/schemas/LocalIdentityField"
        - type: object
          description: A hidden selection type field.
    LdapDataStoreAttribute:
      allOf:
        - $ref: "#/components/schemas/DataStoreAttribute"
        - type: object
          description: LDAP data store attribute.
    LdapDataStoreConfig:
      required:
        - baseDn
        - createPattern
        - dataStoreMapping
        - objectClass
        - dataStoreRef
        - type
      type: object
      properties:
        baseDn:
          type: string
          description:
            "The base DN to search from. If not specified, the search\
            \ will start at the LDAP's root."
        createPattern:
          type: string
          description:
            The Relative DN Pattern that will be used to create objects
            in the directory.
        objectClass:
          type: string
          description:
            The Object Class used by the new objects stored in the LDAP
            data store.
        auxiliaryObjectClasses:
          type: array
          description:
            The Auxiliary Object Classes used by the new objects stored
            in the LDAP data store.
          items:
            type: string
        dataStoreMapping:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/DataStoreAttribute"
          description: The data store mapping.
        type:
          type: string
          description: The data store config type.
          enum:
            - LDAP
            - PING_ONE_LDAP_GATEWAY
            - JDBC
            - CUSTOM
        dataStoreRef:
          $ref: "#/components/schemas/ResourceLink"
      description: LDAP data store configuration.
    LocalIdentityAuthSource:
      type: object
      properties:
        id:
          type: string
          description:
            "The persistent, unique ID for the local identity authentication\
            \ source. It can be any combination of [a-zA-Z0-9._-]. This property is\
            \ system-assigned if not specified."
        source:
          type: string
          description: The local identity authentication source. Source is unique.
      description: An authentication source name.
    LocalIdentityAuthSourceUpdatePolicy:
      type: object
      properties:
        storeAttributes:
          type: boolean
          description:
            Whether or not to store attributes that came from authentication
            sources.
        retainAttributes:
          type: boolean
          description: Whether or not to keep attributes after user disconnects.
        updateAttributes:
          type: boolean
          description: Whether or not to update attributes when users authenticate.
        updateInterval:
          type: number
          description: The minimum number of days between updates.
          format: double
      description:
        Settings to determine whether to store attributes that came from
        third-party authentication sources.
    LocalIdentityField:
      required:
        - id
        - label
        - type
      type: object
      properties:
        type:
          type: string
          description: The type of the local identity field.
          enum:
            - CHECKBOX
            - CHECKBOX_GROUP
            - DATE
            - DROP_DOWN
            - EMAIL
            - PHONE
            - TEXT
            - HIDDEN
        id:
          type: string
          description: Id of the local identity field.
        label:
          type: string
          description: Label of the local identity field.
        registrationPageField:
          type: boolean
          description: Whether this is a registration page field or not.
        profilePageField:
          type: boolean
          description: Whether this is a profile page field or not.
        attributes:
          type: object
          additionalProperties:
            type: boolean
          description: Attributes of the local identity field.
      description: Local identity profile fields.
      discriminator:
        propertyName: type
    LocalIdentityProfile:
      required:
        - apcId
        - name
      type: object
      properties:
        id:
          type: string
          description:
            "The persistent, unique ID for the local identity profile.\
            \ It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned\
            \ if not specified."
        name:
          type: string
          description: The local identity profile name. Name is unique.
        apcId:
          $ref: "#/components/schemas/ResourceLink"
        authSources:
          type: array
          description: The local identity authentication sources. Sources are unique.
          items:
            $ref: "#/components/schemas/LocalIdentityAuthSource"
        authSourceUpdatePolicy:
          $ref: "#/components/schemas/LocalIdentityAuthSourceUpdatePolicy"
        registrationEnabled:
          type: boolean
          description: Whether the registration configuration is enabled or not.
        registrationConfig:
          $ref: "#/components/schemas/RegistrationConfig"
        profileConfig:
          $ref: "#/components/schemas/ProfileConfig"
        fieldConfig:
          $ref: "#/components/schemas/FieldConfig"
        emailVerificationConfig:
          $ref: "#/components/schemas/EmailVerificationConfig"
        dataStoreConfig:
          $ref: "#/components/schemas/LdapDataStoreConfig"
        profileEnabled:
          type: boolean
          description: Whether the profile configuration is enabled or not.
      description: A local identity profile.
    PhoneLocalIdentityField:
      allOf:
        - $ref: "#/components/schemas/LocalIdentityField"
        - type: object
          description: A phone type field.
    ProfileConfig:
      required:
        - templateName
      type: object
      properties:
        deleteIdentityEnabled:
          type: boolean
          description: Whether the end user is allowed to use delete functionality.
        templateName:
          type: string
          description: The template name for end-user profile management.
      description: A local identity profile management configuration.
    RegistrationConfig:
      required:
        - templateName
      type: object
      properties:
        captchaEnabled:
          type: boolean
          description: Whether CAPTCHA is enabled or not in the registration configuration.
        captchaProviderRef:
          $ref: "#/components/schemas/ResourceLink"
        templateName:
          type: string
          description: The template name for the registration configuration.
        createAuthnSessionAfterRegistration:
          type: boolean
          description:
            Whether to create an Authentication Session when registering
            a local account. Default is true.
        usernameField:
          type: string
          description:
            "When creating an Authentication Session after registering\
            \ a local account, PingFederate will pass the Unique ID field's value\
            \ as the username. If the Unique ID value is not the username, then override\
            \ which field's value will be used as the username."
        thisIsMyDeviceEnabled:
          type: boolean
          description:
            "Allows users to indicate whether their device is shared or\
            \ private. In this mode, PingFederate Authentication Sessions will not\
            \ be stored unless the user indicates the device is private."
        registrationWorkflow:
          $ref: "#/components/schemas/ResourceLink"
        executeWorkflow:
          type: string
          description:
            This setting indicates whether PingFederate should execute
            the workflow before or after account creation. The default is to run the
            registration workflow after account creation.
          enum:
            - BEFORE_ACCOUNT_CREATION
            - AFTER_ACCOUNT_CREATION
      description: A local identity profile registration configuration.
    TextLocalIdentityField:
      allOf:
        - $ref: "#/components/schemas/BaseDefaultValueLocalIdentityField"
        - type: object
          description: A text type field.
    LocalIdentityProfiles:
      type: object
      properties:
        items:
          type: array
          description: The actual list of local identity profiles.
          items:
            $ref: "#/components/schemas/LocalIdentityProfile"
      description: A collection of local identity profiles.
    MetadataUrl:
      required:
        - name
        - url
      type: object
      properties:
        id:
          type: string
          description:
            "The persistent, unique ID for the Metadata Url. It can be\
            \ any combination of [a-z0-9._-]. This property is system-assigned if\
            \ not specified."
        name:
          type: string
          description: The name for the Metadata URL.
        url:
          type: string
          description: The Metadata URL.
        certView:
          $ref: "#/components/schemas/CertView"
        x509File:
          $ref: "#/components/schemas/X509File"
        validateSignature:
          type: boolean
          description:
            Perform Metadata Signature Validation. The default value is
            TRUE.
      description: Metadata URL and corresponding Signature Verification Certificate.
    MetadataUrls:
      type: object
      properties:
        items:
          type: array
          description: The list of Metadata URL items.
          items:
            $ref: "#/components/schemas/MetadataUrl"
    NotificationPublisherDescriptors:
      type: object
      properties:
        items:
          type: array
          description: The list of notification publisher plugin descriptors.
          items:
            $ref: "#/components/schemas/NotificationPublisherDescriptor"
      description: A collection of notification publisher plugin descriptors.
    NotificationPublishersSettings:
      type: object
      properties:
        defaultNotificationPublisherRef:
          $ref: "#/components/schemas/ResourceLink"
      description: General notification publisher settings.
    NotificationPublishers:
      type: object
      properties:
        items:
          type: array
          description: The list of notification publisher plugin instances.
          items:
            $ref: "#/components/schemas/NotificationPublisher"
      description: A collection of notification publisher plugin instances.
    ApcToPersistentGrantMapping:
      required:
        - attributeContractFulfillment
        - authenticationPolicyContractRef
        - id
      type: object
      properties:
        id:
          type: string
          description:
            The ID of the authentication policy contract to persistent
            grant mapping.
        authenticationPolicyContractRef:
          $ref: "#/components/schemas/ResourceLink"
        attributeSources:
          type: array
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: "#/components/schemas/AttributeSourceAggregation"
        attributeContractFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of mappings from attribute names to their fulfillment
            values.
        issuanceCriteria:
          $ref: "#/components/schemas/IssuanceCriteria"
      description:
        An authentication policy contract mapping into an OAuth persistent
        grant.
    ApcToPersistentGrantMappings:
      type: object
      properties:
        items:
          type: array
          description:
            The actual list of OAuth authentication policy contract to
            persistent grant mappings.
          items:
            $ref: "#/components/schemas/ApcToPersistentGrantMapping"
      description:
        A collection of OAuth authentication policy contract to persistent
        grant mapping items.
    CibaServerPolicySettings:
      type: object
      properties:
        defaultRequestPolicyRef:
          $ref: "#/components/schemas/ResourceLink"
      description: Settings for the CIBA request policy configuration.
    AlternativeLoginHintTokenIssuer:
      required:
        - issuer
      type: object
      properties:
        issuer:
          type: string
          description: The issuer. Issuer is unique.
        jwksURL:
          type: string
          description: The JWKS URL.
        jwks:
          type: string
          description: The JWKS.
      description: JSON Web Key Set Settings.
    IdentityHintAttribute:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of this attribute.
      description:
        An attribute for the ciba request policy's identity hint attribute
        contract.
    IdentityHintContract:
      required:
        - coreAttributes
      type: object
      properties:
        coreAttributes:
          type: array
          description: A list of required identity hint contract attributes.
          items:
            $ref: "#/components/schemas/IdentityHintAttribute"
        extendedAttributes:
          type: array
          description: A list of additional identity hint contract attributes.
          items:
            $ref: "#/components/schemas/IdentityHintAttribute"
      description: A set of attributes exposed by request policy contract.
    RequestPolicies:
      type: object
      properties:
        items:
          type: array
          description: The list of request policies.
          items:
            $ref: "#/components/schemas/RequestPolicy"
      description: A collection of CIBA request policies.
    RequestPolicy:
      required:
        - authenticatorRef
        - id
        - identityHintContract
        - name
      type: object
      properties:
        id:
          type: string
          description: The request policy ID. ID is unique.
        name:
          type: string
          description: The request policy name. Name is unique.
        authenticatorRef:
          $ref: "#/components/schemas/ResourceLink"
        userCodePcvRef:
          $ref: "#/components/schemas/ResourceLink"
        transactionLifetime:
          type: integer
          description: The transaction lifetime in seconds.
          format: int32
        allowUnsignedLoginHintToken:
          type: boolean
          description: Allow unsigned login hint token.
        requireTokenForIdentityHint:
          type: boolean
          description: Require token for identity hint.
        alternativeLoginHintTokenIssuers:
          type: array
          description: Alternative login hint token issuers.
          items:
            $ref: "#/components/schemas/AlternativeLoginHintTokenIssuer"
        identityHintContract:
          $ref: "#/components/schemas/IdentityHintContract"
        identityHintContractFulfillment:
          $ref: "#/components/schemas/AttributeMapping"
        identityHintMapping:
          $ref: "#/components/schemas/AttributeMapping"
        lastModified:
          type: string
          description:
            The time at which the request policy was last changed. This
            property is read only and is ignored on PUT and POST requests.
          format: date-time
      description: The set of attributes used to configure a CIBA request policy.
    ClientSecret:
      type: object
      properties:
        secret:
          type: string
          description:
            "Client secret for Basic Authentication.  To update the client\
            \ secret, specify the plaintext value in this field.  This field will\
            \ not be populated for GET requests."
        encryptedSecret:
          type: string
          description:
            "For GET requests, this field contains the encrypted client\
            \ secret, if one exists.  For POST and PUT requests, if you wish to reuse\
            \ the existing secret, this field should be passed back unchanged."
        secondarySecrets:
          type: array
          description: The list of secondary client secrets that are temporarily retained.
          items:
            $ref: "#/components/schemas/SecondarySecret"
      description: Client Secret.
    SecondarySecret:
      type: object
      properties:
        secret:
          type: string
          description:
            "Secondary client secret for Basic Authentication.  To update\
            \ the secondary client secret, specify the plaintext value in this field.\
            \  This field will not be populated for GET requests."
        encryptedSecret:
          type: string
          description:
            "For GET requests, this field contains the encrypted secondary\
            \ client secret, if one exists.  For POST and PUT requests, if you wish\
            \ to reuse the existing secret, this field should be passed back unchanged."
        expiryTime:
          type: string
          description: The expiry time of the secondary secret.
          format: date-time
    Client:
      required:
        - clientId
        - grantTypes
        - name
      type: object
      properties:
        clientId:
          type: string
          description:
            "A unique identifier the client provides to the Resource Server\
            \ to identify itself. This identifier is included with every request the\
            \ client makes. For PUT requests, this field is optional and it will be\
            \ overridden by the 'id' parameter of the PUT request."
        enabled:
          type: boolean
          description:
            Specifies whether the client is enabled. The default value
            is true.
        redirectUris:
          type: array
          description:
            "URIs to which the OAuth AS may redirect the resource owner's\
            \ user agent after authorization is obtained. A redirection URI is used\
            \ with the Authorization Code and Implicit grant types. Wildcards are\
            \ allowed. However, for security reasons, make the URL as restrictive\
            \ as possible.For example: https://*.company.com/* Important: If more\
            \ than one URI is added or if a single URI uses wildcards, then Authorization\
            \ Code grant and token requests must contain a specific matching redirect\
            \ uri parameter."
          items:
            type: string
        grantTypes:
          uniqueItems: true
          type: array
          description:
            The grant types allowed for this client. The EXTENSION grant
            type applies to SAML/JWT assertion grants.
          items:
            type: string
            enum:
              - IMPLICIT
              - AUTHORIZATION_CODE
              - RESOURCE_OWNER_CREDENTIALS
              - CLIENT_CREDENTIALS
              - REFRESH_TOKEN
              - EXTENSION
              - DEVICE_CODE
              - ACCESS_TOKEN_VALIDATION
              - CIBA
              - TOKEN_EXCHANGE
        name:
          type: string
          description:
            A descriptive name for the client instance. This name appears
            when the user is prompted for authorization.
        description:
          type: string
          description:
            A description of what the client application does. This description
            appears when the user is prompted for authorization.
        modificationDate:
          type: string
          description:
            The time at which the client was last changed. This property
            is read only and is ignored on PUT and POST requests.
          format: date-time
        creationDate:
          type: string
          description:
            The time at which the client was created. This property is
            read only and is ignored on PUT and POST requests.
          format: date-time
        replicationStatus:
          type: string
          description:
            This status indicates whether the client has been replicated
            to the cluster. This property only applies when using XML client storage
            and automatic replication of clients is enabled. It is read only and is
            ignored on PUT and POST requests.
          enum:
            - REPLICATED
            - NOT_REPLICATED
        logoUrl:
          type: string
          description:
            The location of the logo used on user-facing OAuth grant authorization
            and revocation pages.
        defaultAccessTokenManagerRef:
          $ref: "#/components/schemas/ResourceLink"
        restrictToDefaultAccessTokenManager:
          type: boolean
          description:
            Determines whether the client is restricted to using only its
            default access token manager. The default is false.
        validateUsingAllEligibleAtms:
          type: boolean
          description:
            Validates token using all eligible access token managers for
            the client. This setting is ignored if 'restrictToDefaultAccessTokenManager'
            is set to true.
        refreshRolling:
          type: string
          description:
            Use ROLL or DONT_ROLL to override the Roll Refresh Token Values
            setting on the Authorization Server Settings. SERVER_DEFAULT will default
            to the Roll Refresh Token Values setting on the Authorization Server Setting
            screen. Defaults to SERVER_DEFAULT.
          enum:
            - SERVER_DEFAULT
            - DONT_ROLL
            - ROLL
        refreshTokenRollingIntervalType:
          type: string
          description:
            Use OVERRIDE_SERVER_DEFAULT to override the Refresh Token Rolling
            Interval value on the Authorization Server Settings. SERVER_DEFAULT will
            default to the Refresh Token Rolling Interval value on the Authorization
            Server Setting. Defaults to SERVER_DEFAULT.
          enum:
            - SERVER_DEFAULT
            - OVERRIDE_SERVER_DEFAULT
        refreshTokenRollingInterval:
          type: integer
          description:
            "The minimum interval to roll refresh tokens, in hours. This\
            \ value will override the Refresh Token Rolling Interval Value on the\
            \ Authorization Server Settings."
          format: int64
        persistentGrantExpirationType:
          type: string
          description:
            Allows an administrator to override the Persistent Grant Lifetime
            set globally for the OAuth AS. Defaults to SERVER_DEFAULT.
          enum:
            - INDEFINITE_EXPIRY
            - SERVER_DEFAULT
            - OVERRIDE_SERVER_DEFAULT
        persistentGrantExpirationTime:
          type: integer
          description:
            The persistent grant expiration time. -1 indicates an indefinite
            amount of time.
          format: int64
        persistentGrantExpirationTimeUnit:
          type: string
          description: The persistent grant expiration time unit.
          enum:
            - MINUTES
            - DAYS
            - HOURS
        persistentGrantIdleTimeoutType:
          type: string
          description:
            Allows an administrator to override the Persistent Grant Idle
            Timeout set globally for the OAuth AS. Defaults to SERVER_DEFAULT.
          enum:
            - INDEFINITE_EXPIRY
            - SERVER_DEFAULT
            - OVERRIDE_SERVER_DEFAULT
        persistentGrantIdleTimeout:
          type: integer
          description: The persistent grant idle timeout.
          format: int64
        persistentGrantIdleTimeoutTimeUnit:
          type: string
          description: The persistent grant idle timeout time unit.
          enum:
            - MINUTES
            - DAYS
            - HOURS
        persistentGrantReuseType:
          type: string
          description:
            Allows and administrator to override the Reuse Existing Persistent
            Access Grants for Grant Types set globally for OAuth AS. Defaults to SERVER_DEFAULT.
          enum:
            - SERVER_DEFAULT
            - OVERRIDE_SERVER_DEFAULT
        persistentGrantReuseGrantTypes:
          uniqueItems: true
          type: array
          description:
            The grant types that the OAuth AS can reuse rather than creating
            a new grant for each request. This value will override the Reuse Existing
            Persistent Access Grants for Grant Types on the Authorization Server Settings.
            Only 'IMPLICIT' or 'AUTHORIZATION_CODE' or 'RESOURCE_OWNER_CREDENTIALS'
            are valid grant types.
          items:
            type: string
            enum:
              - IMPLICIT
              - AUTHORIZATION_CODE
              - RESOURCE_OWNER_CREDENTIALS
              - CLIENT_CREDENTIALS
              - REFRESH_TOKEN
              - EXTENSION
              - DEVICE_CODE
              - ACCESS_TOKEN_VALIDATION
              - CIBA
              - TOKEN_EXCHANGE
        allowAuthenticationApiInit:
          type: boolean
          description:
            Set to true to allow this client to initiate the authentication
            API redirectless flow.
        bypassApprovalPage:
          type: boolean
          description:
            "Use this setting, for example, when you want to deploy a trusted\
            \ application and authenticate end users via an IdP adapter or IdP connection."
        restrictScopes:
          type: boolean
          description: Restricts this client's access to specific scopes.
        restrictedScopes:
          uniqueItems: true
          type: array
          description: The scopes available for this client.
          items:
            type: string
        exclusiveScopes:
          uniqueItems: true
          type: array
          description: The exclusive scopes available for this client.
          items:
            type: string
        authorizationDetailTypes:
          uniqueItems: true
          type: array
          description: The authorization detail types available for this client.
          items:
            type: string
        restrictedResponseTypes:
          uniqueItems: true
          type: array
          description:
            The response types allowed for this client. If omitted all
            response types are available to the client.
          items:
            type: string
        requirePushedAuthorizationRequests:
          type: boolean
          description:
            Determines whether pushed authorization requests are required
            when initiating an authorization request. The default is false.
        requireJwtSecuredAuthorizationResponseMode:
          type: boolean
          description:
            Determines whether JWT Secured authorization response mode
            is required when initiating an authorization request. The default is false.
        requireSignedRequests:
          type: boolean
          description: Determines whether signed requests are required for this client
        requestObjectSigningAlgorithm:
          type: string
          description:
            "The JSON Web Signature [JWS] algorithm that must be used to\
            \ sign the Request Object. All signing algorithms are allowed if value\
            \ is not present <br>RS256 - RSA using SHA-256<br>RS384 - RSA using SHA-384<br>RS512\
            \ - RSA using SHA-512<br>ES256 - ECDSA using P256 Curve and SHA-256<br>ES384\
            \ - ECDSA using P384 Curve and SHA-384<br>ES512 - ECDSA using P521 Curve\
            \ and SHA-512<br>PS256 - RSASSA-PSS using SHA-256 and MGF1 padding with\
            \ SHA-256<br>PS384 - RSASSA-PSS using SHA-384 and MGF1 padding with SHA-384<br>PS512\
            \ - RSASSA-PSS using SHA-512 and MGF1 padding with SHA-512<br>RSASSA-PSS\
            \ is only supported with SafeNet Luna, Thales nCipher or Java 11."
          enum:
            - RS256
            - RS384
            - RS512
            - ES256
            - ES384
            - ES512
            - PS256
            - PS384
            - PS512
        oidcPolicy:
          $ref: "#/components/schemas/ClientOIDCPolicy"
        clientAuth:
          $ref: "#/components/schemas/ClientAuth"
        jwksSettings:
          $ref: "#/components/schemas/JwksSettings"
        extendedParameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ParameterValues"
          description:
            OAuth Client Metadata can be extended to use custom Client
            Metadata Parameters. The names of these custom parameters should be defined
            in /extendedProperties.
        deviceFlowSettingType:
          type: string
          description:
            Allows an administrator to override the Device Authorization
            Settings set globally for the OAuth AS. Defaults to SERVER_DEFAULT.
          enum:
            - SERVER_DEFAULT
            - OVERRIDE_SERVER_DEFAULT
        userAuthorizationUrlOverride:
          type: string
          description:
            The URL used as 'verification_url' and 'verification_url_complete'
            values in a Device Authorization request. This property overrides the
            'userAuthorizationUrl' value present in Authorization Server Settings.
        pendingAuthorizationTimeoutOverride:
          type: integer
          description:
            "The 'device_code' and 'user_code' timeout, in seconds. This\
            \ overrides the 'pendingAuthorizationTimeout' value present in Authorization\
            \ Server Settings."
          format: int32
        devicePollingIntervalOverride:
          type: integer
          description:
            "The amount of time client should wait between polling requests,\
            \ in seconds. This overrides the 'devicePollingInterval' value present\
            \ in Authorization Server Settings."
          format: int32
        bypassActivationCodeConfirmationOverride:
          type: boolean
          description:
            Indicates if the Activation Code Confirmation page should be
            bypassed if 'verification_url_complete' is used by the end user to authorize
            a device. This overrides the 'bypassUseCodeConfirmation' value present
            in Authorization Server Settings.
        requireProofKeyForCodeExchange:
          type: boolean
          description:
            Determines whether Proof Key for Code Exchange (PKCE) is required
            for this client.
        cibaDeliveryMode:
          type: string
          description:
            The token delivery mode for the client.  The default value
            is 'POLL'.
          enum:
            - POLL
            - PING
        cibaNotificationEndpoint:
          type: string
          description:
            The endpoint the OP will call after a successful or failed
            end-user authentication.
        cibaPollingInterval:
          type: integer
          description:
            The minimum amount of time in seconds that the Client must
            wait between polling requests to the token endpoint. The default is 3
            seconds.
          format: int32
        cibaRequireSignedRequests:
          type: boolean
          description:
            Determines whether CIBA signed requests are required for this
            client.
        cibaRequestObjectSigningAlgorithm:
          type: string
          description:
            "The JSON Web Signature [JWS] algorithm that must be used to\
            \ sign the CIBA Request Object. All signing algorithms are allowed if\
            \ value is not present <br>RS256 - RSA using SHA-256<br>RS384 - RSA using\
            \ SHA-384<br>RS512 - RSA using SHA-512<br>ES256 - ECDSA using P256 Curve\
            \ and SHA-256<br>ES384 - ECDSA using P384 Curve and SHA-384<br>ES512 -\
            \ ECDSA using P521 Curve and SHA-512<br>PS256 - RSASSA-PSS using SHA-256\
            \ and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS using SHA-384 and\
            \ MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using SHA-512 and MGF1\
            \ padding with SHA-512<br>RSASSA-PSS is only supported with SafeNet Luna,\
            \ Thales nCipher or Java 11."
          enum:
            - RS256
            - RS384
            - RS512
            - ES256
            - ES384
            - ES512
            - PS256
            - PS384
            - PS512
        cibaUserCodeSupported:
          type: boolean
          description: Determines whether CIBA user code is supported for this client.
        requestPolicyRef:
          $ref: "#/components/schemas/ResourceLink"
        tokenExchangeProcessorPolicyRef:
          $ref: "#/components/schemas/ResourceLink"
        refreshTokenRollingGracePeriodType:
          type: string
          description:
            "When specified, it overrides the global Refresh Token Grace\
            \ Period defined in the Authorization Server Settings. The default value\
            \ is SERVER_DEFAULT"
          enum:
            - SERVER_DEFAULT
            - OVERRIDE_SERVER_DEFAULT
        refreshTokenRollingGracePeriod:
          type: integer
          description:
            The grace period that a rolled refresh token remains valid
            in seconds.
          format: int32
        clientSecretRetentionPeriodType:
          type: string
          description:
            Use OVERRIDE_SERVER_DEFAULT to override the Client Secret Retention
            Period value on the Authorization Server Settings. SERVER_DEFAULT will
            default to the Client Secret Retention Period value on the Authorization
            Server Setting. Defaults to SERVER_DEFAULT.
          enum:
            - SERVER_DEFAULT
            - OVERRIDE_SERVER_DEFAULT
        clientSecretRetentionPeriod:
          type: integer
          description:
            "The length of time in minutes that client secrets will be\
            \ retained as secondary secrets after secret change. The default value\
            \ is 0, which will disable secondary client secret retention. This value\
            \ will override the Client Secret Retention Period value on the Authorization\
            \ Server Settings."
          format: int32
        clientSecretChangedTime:
          type: string
          description:
            The time at which the client secret was last changed. This
            property is read only and is ignored on PUT and POST requests.
          format: date-time
        tokenIntrospectionSigningAlgorithm:
          type: string
          description:
            "The JSON Web Signature [JWS] algorithm required to sign the\
            \ Token Introspection Response.<br>HS256 - HMAC using SHA-256<br>HS384\
            \ - HMAC using SHA-384<br>HS512 - HMAC using SHA-512<br>RS256 - RSA using\
            \ SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256\
            \ - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve\
            \ and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 -\
            \ RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS\
            \ using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using\
            \ SHA-512 and MGF1 padding with SHA-512<br>A null value will represent\
            \ the default algorithm which is RS256.<br>RSASSA-PSS is only supported\
            \ with SafeNet Luna, Thales nCipher or Java 11"
          enum:
            - RS256
            - RS384
            - RS512
            - HS256
            - HS384
            - HS512
            - ES256
            - ES384
            - ES512
            - PS256
            - PS384
            - PS512
        tokenIntrospectionEncryptionAlgorithm:
          type: string
          description:
            "The JSON Web Encryption [JWE] encryption algorithm used to\
            \ encrypt the content-encryption key of the Token Introspection Response.<br>DIR\
            \ - Direct Encryption with symmetric key<br>A128KW - AES-128 Key Wrap<br>A192KW\
            \ - AES-192 Key Wrap<br>A256KW - AES-256 Key Wrap<br>A128GCMKW - AES-GCM-128\
            \ key encryption<br>A192GCMKW - AES-GCM-192 key encryption<br>A256GCMKW\
            \ - AES-GCM-256 key encryption<br>ECDH_ES - ECDH-ES<br>ECDH_ES_A128KW\
            \ - ECDH-ES with AES-128 Key Wrap<br>ECDH_ES_A192KW - ECDH-ES with AES-192\
            \ Key Wrap<br>ECDH_ES_A256KW - ECDH-ES with AES-256 Key Wrap<br>RSA_OAEP\
            \ - RSAES OAEP<br>RSA_OAEP_256 - RSAES OAEP using SHA-256 and MGF1 with\
            \ SHA-256"
          enum:
            - DIR
            - A128KW
            - A192KW
            - A256KW
            - A128GCMKW
            - A192GCMKW
            - A256GCMKW
            - ECDH_ES
            - ECDH_ES_A128KW
            - ECDH_ES_A192KW
            - ECDH_ES_A256KW
            - RSA_OAEP
            - RSA_OAEP_256
        tokenIntrospectionContentEncryptionAlgorithm:
          type: string
          description:
            "The JSON Web Encryption [JWE] content-encryption algorithm\
            \ for the Token Introspection Response.<br>AES_128_CBC_HMAC_SHA_256 -\
            \ Composite AES-CBC-128 HMAC-SHA-256<br>AES_192_CBC_HMAC_SHA_384 - Composite\
            \ AES-CBC-192 HMAC-SHA-384<br>AES_256_CBC_HMAC_SHA_512 - Composite AES-CBC-256\
            \ HMAC-SHA-512<br>AES_128_GCM - AES-GCM-128<br>AES_192_GCM - AES-GCM-192<br>AES_256_GCM\
            \ - AES-GCM-256"
          enum:
            - AES_128_CBC_HMAC_SHA_256
            - AES_192_CBC_HMAC_SHA_384
            - AES_256_CBC_HMAC_SHA_512
            - AES_128_GCM
            - AES_192_GCM
            - AES_256_GCM
        jwtSecuredAuthorizationResponseModeSigningAlgorithm:
          type: string
          description:
            "The JSON Web Signature [JWS] algorithm required to sign the\
            \ JWT Secured Authorization Response.<br>HS256 - HMAC using SHA-256<br>HS384\
            \ - HMAC using SHA-384<br>HS512 - HMAC using SHA-512<br>RS256 - RSA using\
            \ SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256\
            \ - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve\
            \ and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 -\
            \ RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS\
            \ using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using\
            \ SHA-512 and MGF1 padding with SHA-512<br>A null value will represent\
            \ the default algorithm which is RS256.<br>RSASSA-PSS is only supported\
            \ with SafeNet Luna, Thales nCipher or Java 11"
          enum:
            - RS256
            - RS384
            - RS512
            - HS256
            - HS384
            - HS512
            - ES256
            - ES384
            - ES512
            - PS256
            - PS384
            - PS512
        jwtSecuredAuthorizationResponseModeEncryptionAlgorithm:
          type: string
          description:
            "The JSON Web Encryption [JWE] encryption algorithm used to\
            \ encrypt the content-encryption key of the JWT Secured Authorization\
            \ Response.<br>DIR - Direct Encryption with symmetric key<br>A128KW -\
            \ AES-128 Key Wrap<br>A192KW - AES-192 Key Wrap<br>A256KW - AES-256 Key\
            \ Wrap<br>A128GCMKW - AES-GCM-128 key encryption<br>A192GCMKW - AES-GCM-192\
            \ key encryption<br>A256GCMKW - AES-GCM-256 key encryption<br>ECDH_ES\
            \ - ECDH-ES<br>ECDH_ES_A128KW - ECDH-ES with AES-128 Key Wrap<br>ECDH_ES_A192KW\
            \ - ECDH-ES with AES-192 Key Wrap<br>ECDH_ES_A256KW - ECDH-ES with AES-256\
            \ Key Wrap<br>RSA_OAEP - RSAES OAEP<br>RSA_OAEP_256 - RSAES OAEP using\
            \ SHA-256 and MGF1 with SHA-256"
          enum:
            - DIR
            - A128KW
            - A192KW
            - A256KW
            - A128GCMKW
            - A192GCMKW
            - A256GCMKW
            - ECDH_ES
            - ECDH_ES_A128KW
            - ECDH_ES_A192KW
            - ECDH_ES_A256KW
            - RSA_OAEP
            - RSA_OAEP_256
        jwtSecuredAuthorizationResponseModeContentEncryptionAlgorithm:
          type: string
          description:
            "The JSON Web Encryption [JWE] content-encryption algorithm\
            \ for the JWT Secured Authorization Response.<br>AES_128_CBC_HMAC_SHA_256\
            \ - Composite AES-CBC-128 HMAC-SHA-256<br>AES_192_CBC_HMAC_SHA_384 - Composite\
            \ AES-CBC-192 HMAC-SHA-384<br>AES_256_CBC_HMAC_SHA_512 - Composite AES-CBC-256\
            \ HMAC-SHA-512<br>AES_128_GCM - AES-GCM-128<br>AES_192_GCM - AES-GCM-192<br>AES_256_GCM\
            \ - AES-GCM-256"
          enum:
            - AES_128_CBC_HMAC_SHA_256
            - AES_192_CBC_HMAC_SHA_384
            - AES_256_CBC_HMAC_SHA_512
            - AES_128_GCM
            - AES_192_GCM
            - AES_256_GCM
        requireDpop:
          type: boolean
          description:
            Determines whether Demonstrating Proof-of-Possession (DPoP)
            is required for this client.
      description: OAuth client.
    ClientAuth:
      type: object
      properties:
        type:
          type: string
          description:
            "Client authentication type.<br>The required field for type\
            \ SECRET is secret.<br>The required fields for type CERTIFICATE are clientCertIssuerDn\
            \ and clientCertSubjectDn.<br>The required field for type PRIVATE_KEY_JWT\
            \ is: either jwks or jwksUrl."
          enum:
            - NONE
            - SECRET
            - CERTIFICATE
            - PRIVATE_KEY_JWT
            - CLIENT_SECRET_JWT
        secret:
          type: string
          description:
            "Client secret for Basic Authentication.  To update the client\
            \ secret, specify the plaintext value in this field.  This field will\
            \ not be populated for GET requests."
        encryptedSecret:
          type: string
          description:
            "For GET requests, this field contains the encrypted client\
            \ secret, if one exists.  For POST and PUT requests, if you wish to reuse\
            \ the existing secret, this field should be passed back unchanged."
        secondarySecrets:
          type: array
          description: The list of secondary client secrets that are temporarily retained.
          items:
            $ref: "#/components/schemas/SecondarySecret"
        clientCertIssuerDn:
          type: string
          description: Client TLS Certificate Issuer DN.
        clientCertSubjectDn:
          type: string
          description: Client TLS Certificate Subject DN.
        enforceReplayPrevention:
          type: boolean
          description:
            Enforce replay prevention on JSON Web Tokens. This field is
            applicable only for Private Key JWT Client and Client Secret JWT Authentication.
        tokenEndpointAuthSigningAlgorithm:
          type: string
          description:
            "The JSON Web Signature [JWS] algorithm that must be used to\
            \ sign the JSON Web Tokens. This field is applicable only for Private\
            \ Key JWT and Client Secret JWT Client Authentication. All asymmetric\
            \ signing algorithms are allowed for Private Key JWT if value is not present.All\
            \ symmetric signing algorithms are allowed for Client Secret JWT if value\
            \ is not present <br>RS256 - RSA using SHA-256<br>RS384 - RSA using SHA-384<br>RS512\
            \ - RSA using SHA-512<br>ES256 - ECDSA using P256 Curve and SHA-256<br>ES384\
            \ - ECDSA using P384 Curve and SHA-384<br>ES512 - ECDSA using P521 Curve\
            \ and SHA-512<br>PS256 - RSASSA-PSS using SHA-256 and MGF1 padding with\
            \ SHA-256<br>PS384 - RSASSA-PSS using SHA-384 and MGF1 padding with SHA-384<br>PS512\
            \ - RSASSA-PSS using SHA-512 and MGF1 padding with SHA-512<br>RSASSA-PSS\
            \ is only supported with SafeNet Luna, Thales nCipher or Java 11.<br>HS256\
            \ - HMAC using SHA-256<br>HS384 - HMAC using SHA-384<br>HS512 - HMAC using\
            \ SHA-512."
          enum:
            - RS256
            - RS384
            - RS512
            - ES256
            - ES384
            - ES512
            - PS256
            - PS384
            - PS512
            - HS256
            - HS384
            - HS512
      description: Client Authentication.
    ClientOIDCPolicy:
      type: object
      properties:
        idTokenSigningAlgorithm:
          type: string
          description:
            "The JSON Web Signature [JWS] algorithm required for the ID\
            \ Token.<br>NONE - No signing algorithm<br>HS256 - HMAC using SHA-256<br>HS384\
            \ - HMAC using SHA-384<br>HS512 - HMAC using SHA-512<br>RS256 - RSA using\
            \ SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256\
            \ - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve\
            \ and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 -\
            \ RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS\
            \ using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using\
            \ SHA-512 and MGF1 padding with SHA-512<br>A null value will represent\
            \ the default algorithm which is RS256.<br>RSASSA-PSS is only supported\
            \ with SafeNet Luna, Thales nCipher or Java 11"
          enum:
            - NONE
            - HS256
            - HS384
            - HS512
            - RS256
            - RS384
            - RS512
            - ES256
            - ES384
            - ES512
            - PS256
            - PS384
            - PS512
        idTokenEncryptionAlgorithm:
          type: string
          description:
            "The JSON Web Encryption [JWE] encryption algorithm used to\
            \ encrypt the content encryption key for the ID Token.<br>DIR - Direct\
            \ Encryption with symmetric key<br>A128KW - AES-128 Key Wrap<br>A192KW\
            \ - AES-192 Key Wrap<br>A256KW - AES-256 Key Wrap<br>A128GCMKW - AES-GCM-128\
            \ key encryption<br>A192GCMKW - AES-GCM-192 key encryption<br>A256GCMKW\
            \ - AES-GCM-256 key encryption<br>ECDH_ES - ECDH-ES<br>ECDH_ES_A128KW\
            \ - ECDH-ES with AES-128 Key Wrap<br>ECDH_ES_A192KW - ECDH-ES with AES-192\
            \ Key Wrap<br>ECDH_ES_A256KW - ECDH-ES with AES-256 Key Wrap<br>RSA_OAEP\
            \ - RSAES OAEP<br>RSA_OAEP_256 - RSAES OAEP using SHA-256 and MGF1 with\
            \ SHA-256"
          enum:
            - DIR
            - A128KW
            - A192KW
            - A256KW
            - A128GCMKW
            - A192GCMKW
            - A256GCMKW
            - ECDH_ES
            - ECDH_ES_A128KW
            - ECDH_ES_A192KW
            - ECDH_ES_A256KW
            - RSA_OAEP
            - RSA_OAEP_256
        idTokenContentEncryptionAlgorithm:
          type: string
          description:
            "The JSON Web Encryption [JWE] content encryption algorithm\
            \ for the ID Token.<br>AES_128_CBC_HMAC_SHA_256 - Composite AES-CBC-128\
            \ HMAC-SHA-256<br>AES_192_CBC_HMAC_SHA_384 - Composite AES-CBC-192 HMAC-SHA-384<br>AES_256_CBC_HMAC_SHA_512\
            \ - Composite AES-CBC-256 HMAC-SHA-512<br>AES_128_GCM - AES-GCM-128<br>AES_192_GCM\
            \ - AES-GCM-192<br>AES_256_GCM - AES-GCM-256"
          enum:
            - AES_128_CBC_HMAC_SHA_256
            - AES_192_CBC_HMAC_SHA_384
            - AES_256_CBC_HMAC_SHA_512
            - AES_128_GCM
            - AES_192_GCM
            - AES_256_GCM
        policyGroup:
          $ref: "#/components/schemas/ResourceLink"
        grantAccessSessionRevocationApi:
          type: boolean
          description:
            Determines whether this client is allowed to access the Session
            Revocation API.
        grantAccessSessionSessionManagementApi:
          type: boolean
          description:
            Determines whether this client is allowed to access the Session
            Management API.
        logoutMode:
          type: string
          description: The logout mode for this client. The default is 'NONE'.
          enum:
            - NONE
            - OIDC_FRONT_CHANNEL
            - OIDC_BACK_CHANNEL
            - PING_FRONT_CHANNEL
        pingAccessLogoutCapable:
          type: boolean
          description:
            "Set this value to true if you wish to enable client application\
            \ logout, and the client is PingAccess, or its logout endpoints follow\
            \ the PingAccess path convention."
        logoutUris:
          type: array
          description: A list of front-channel logout URIs for this client.
          items:
            type: string
        backChannelLogoutUri:
          type: string
          description: The back-channel logout URI for this client.
        postLogoutRedirectUris:
          type: array
          description:
            "URIs to which the OIDC OP may redirect the resource owner's\
            \ user agent after RP-initiated logout has completed. Wildcards are allowed.\
            \ However, for security reasons, make the URL as restrictive as possible."
          items:
            type: string
        pairwiseIdentifierUserType:
          type: boolean
          description: Determines whether the subject identifier type is pairwise.
        sectorIdentifierUri:
          type: string
          description:
            The URI references a file with a single JSON array of Redirect
            URI and JWKS URL values.
      description: OAuth Client Open ID Connect Policy.
    JwksSettings:
      type: object
      properties:
        jwksUrl:
          type: string
          description:
            "JSON Web Key Set (JWKS) URL of the OAuth client. Either 'jwks'\
            \ or 'jwksUrl' must be provided if private key JWT client authentication\
            \ or signed requests is enabled.  If the client signs its JWTs using an\
            \ RSASSA-PSS signing algorithm, PingFederate must either use Java 11 or\
            \ be integrated with a hardware security module (HSM) to process the digital\
            \ signatures."
        jwks:
          type: string
          description:
            "JSON Web Key Set (JWKS) document of the OAuth client. Either\
            \ 'jwks' or 'jwksUrl' must be provided if private key JWT client authentication\
            \ or signed requests is enabled.  If the client signs its JWTs using an\
            \ RSASSA-PSS signing algorithm, PingFederate must either use Java 11 or\
            \ be integrated with a hardware security module (HSM) to process the digital\
            \ signatures."
      description: JSON Web Key Set Settings.
    Clients:
      type: object
      properties:
        items:
          type: array
          description: The actual list of OAuth clients.
          items:
            $ref: "#/components/schemas/Client"
      description: A collection of OAuth client items.
    ClientMetadata:
      type: object
      properties:
        parameter:
          type: string
          description: The metadata name.
        description:
          type: string
          description: The metadata description.
        multiValued:
          type: boolean
          description: If the field should allow multiple values.
      description: The client metadata.
    ClientRegistrationOIDCPolicy:
      type: object
      properties:
        idTokenSigningAlgorithm:
          type: string
          description:
            "The JSON Web Signature [JWS] algorithm required for the ID\
            \ Token.<br>NONE - No signing algorithm<br>HS256 - HMAC using SHA-256<br>HS384\
            \ - HMAC using SHA-384<br>HS512 - HMAC using SHA-512<br>RS256 - RSA using\
            \ SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256\
            \ - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve\
            \ and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 -\
            \ RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS\
            \ using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using\
            \ SHA-512 and MGF1 padding with SHA-512<br>A null value will represent\
            \ the default algorithm which is RS256.<br>RSASSA-PSS is only supported\
            \ with SafeNet Luna, Thales nCipher or Java 11"
          enum:
            - NONE
            - HS256
            - HS384
            - HS512
            - RS256
            - RS384
            - RS512
            - ES256
            - ES384
            - ES512
            - PS256
            - PS384
            - PS512
        idTokenEncryptionAlgorithm:
          type: string
          description:
            "The JSON Web Encryption [JWE] encryption algorithm used to\
            \ encrypt the content encryption key for the ID Token.<br>DIR - Direct\
            \ Encryption with symmetric key<br>A128KW - AES-128 Key Wrap<br>A192KW\
            \ - AES-192 Key Wrap<br>A256KW - AES-256 Key Wrap<br>A128GCMKW - AES-GCM-128\
            \ key encryption<br>A192GCMKW - AES-GCM-192 key encryption<br>A256GCMKW\
            \ - AES-GCM-256 key encryption<br>ECDH_ES - ECDH-ES<br>ECDH_ES_A128KW\
            \ - ECDH-ES with AES-128 Key Wrap<br>ECDH_ES_A192KW - ECDH-ES with AES-192\
            \ Key Wrap<br>ECDH_ES_A256KW - ECDH-ES with AES-256 Key Wrap<br>RSA_OAEP\
            \ - RSAES OAEP<br>RSA_OAEP_256 - RSAES OAEP using SHA-256 and MGF1 with\
            \ SHA-256"
          enum:
            - DIR
            - A128KW
            - A192KW
            - A256KW
            - A128GCMKW
            - A192GCMKW
            - A256GCMKW
            - ECDH_ES
            - ECDH_ES_A128KW
            - ECDH_ES_A192KW
            - ECDH_ES_A256KW
            - RSA_OAEP
            - RSA_OAEP_256
        idTokenContentEncryptionAlgorithm:
          type: string
          description:
            "The JSON Web Encryption [JWE] content encryption algorithm\
            \ for the ID Token.<br>AES_128_CBC_HMAC_SHA_256 - Composite AES-CBC-128\
            \ HMAC-SHA-256<br>AES_192_CBC_HMAC_SHA_384 - Composite AES-CBC-192 HMAC-SHA-384<br>AES_256_CBC_HMAC_SHA_512\
            \ - Composite AES-CBC-256 HMAC-SHA-512<br>AES_128_GCM - AES-GCM-128<br>AES_192_GCM\
            \ - AES-GCM-192<br>AES_256_GCM - AES-GCM-256"
          enum:
            - AES_128_CBC_HMAC_SHA_256
            - AES_192_CBC_HMAC_SHA_384
            - AES_256_CBC_HMAC_SHA_512
            - AES_128_GCM
            - AES_192_GCM
            - AES_256_GCM
        policyGroup:
          $ref: "#/components/schemas/ResourceLink"
      description: Client Registration Open ID Connect Policy settings.
    ClientSettings:
      type: object
      properties:
        clientMetadata:
          type: array
          description: The client metadata.
          items:
            $ref: "#/components/schemas/ClientMetadata"
        dynamicClientRegistration:
          $ref: "#/components/schemas/DynamicClientRegistration"
      description: The client settings.
    DynamicClientRegistration:
      type: object
      properties:
        initialAccessTokenScope:
          type: string
          description: The initial access token to prevent unwanted client registrations.
        restrictCommonScopes:
          type: boolean
          description: Restrict common scopes.
        restrictedCommonScopes:
          type: array
          description: The common scopes to restrict.
          items:
            type: string
        allowedExclusiveScopes:
          type: array
          description: The exclusive scopes to allow.
          items:
            type: string
        allowedAuthorizationDetailTypes:
          type: array
          description: The authorization detail types to allow.
          items:
            type: string
        enforceReplayPrevention:
          type: boolean
          description: Enforce replay prevention.
        requireSignedRequests:
          type: boolean
          description: Require signed requests.
        defaultAccessTokenManagerRef:
          $ref: "#/components/schemas/ResourceLink"
        restrictToDefaultAccessTokenManager:
          type: boolean
          description:
            Determines whether the client is restricted to using only its
            default access token manager. The default is false.
        persistentGrantExpirationType:
          type: string
          description:
            Allows an administrator to override the Persistent Grant Lifetime
            set globally for the OAuth AS. Defaults to SERVER_DEFAULT.
          enum:
            - INDEFINITE_EXPIRY
            - SERVER_DEFAULT
            - OVERRIDE_SERVER_DEFAULT
        persistentGrantExpirationTime:
          type: integer
          description: The persistent grant expiration time.
          format: int64
        persistentGrantExpirationTimeUnit:
          type: string
          description: The persistent grant expiration time unit.
          enum:
            - MINUTES
            - DAYS
            - HOURS
        persistentGrantIdleTimeoutType:
          type: string
          description:
            Allows an administrator to override the Persistent Grant Idle
            Timeout set globally for the OAuth AS. Defaults to SERVER_DEFAULT.
          enum:
            - INDEFINITE_EXPIRY
            - SERVER_DEFAULT
            - OVERRIDE_SERVER_DEFAULT
        persistentGrantIdleTimeout:
          type: integer
          description: The persistent grant idle timeout.
          format: int64
        persistentGrantIdleTimeoutTimeUnit:
          type: string
          description: The persistent grant idle timeout time unit.
          enum:
            - MINUTES
            - DAYS
            - HOURS
        clientCertIssuerType:
          type: string
          description: Client TLS Certificate Issuer Type.
          enum:
            - NONE
            - TRUST_ANY
            - CERTIFICATE
        clientCertIssuerRef:
          $ref: "#/components/schemas/ResourceLink"
        refreshRolling:
          type: string
          description:
            Use ROLL or DONT_ROLL to override the Roll Refresh Token Values
            setting on the Authorization Server Settings. SERVER_DEFAULT will default
            to the Roll Refresh Token Values setting on the Authorization Server Setting
            screen. Defaults to SERVER_DEFAULT.
          enum:
            - SERVER_DEFAULT
            - DONT_ROLL
            - ROLL
        refreshTokenRollingIntervalType:
          type: string
          description:
            Use OVERRIDE_SERVER_DEFAULT to override the Refresh Token Rolling
            Interval value on the Authorization Server Settings. SERVER_DEFAULT will
            default to the Refresh Token Rolling Interval value on the Authorization
            Server Setting. Defaults to SERVER_DEFAULT.
          enum:
            - SERVER_DEFAULT
            - OVERRIDE_SERVER_DEFAULT
        refreshTokenRollingInterval:
          type: integer
          description:
            "The minimum interval to roll refresh tokens, in hours. This\
            \ value will override the Refresh Token Rolling Interval Value on the\
            \ Authorization Server Settings."
          format: int64
        oidcPolicy:
          $ref: "#/components/schemas/ClientRegistrationOIDCPolicy"
        policyRefs:
          type: array
          description: The client registration policies.
          items:
            $ref: "#/components/schemas/ResourceLink"
        deviceFlowSettingType:
          type: string
          description:
            Allows an administrator to override the Device Authorization
            Settings set globally for the OAuth AS. Defaults to SERVER_DEFAULT.
          enum:
            - SERVER_DEFAULT
            - OVERRIDE_SERVER_DEFAULT
        userAuthorizationUrlOverride:
          type: string
          description:
            The URL is used as 'verification_url' and 'verification_url_complete'
            values in a Device Authorization request.
        pendingAuthorizationTimeoutOverride:
          type: integer
          description: "The 'device_code' and 'user_code' timeout, in seconds."
          format: int32
        devicePollingIntervalOverride:
          type: integer
          description:
            "The amount of time client should wait between polling requests,\
            \ in seconds."
          format: int32
        bypassActivationCodeConfirmationOverride:
          type: boolean
          description:
            Indicates if the Activation Code Confirmation page should be
            bypassed if 'verification_url_complete' is used by the end user to authorize
            a device.
        requireProofKeyForCodeExchange:
          type: boolean
          description:
            Determines whether Proof Key for Code Exchange (PKCE) is required
            for the dynamically created client.
        cibaPollingInterval:
          type: integer
          description:
            The minimum amount of time in seconds that the Client must
            wait between polling requests to the token endpoint. The default is 3
            seconds.
          format: int32
        cibaRequireSignedRequests:
          type: boolean
          description:
            Determines whether CIBA signed requests are required for this
            client.
        requestPolicyRef:
          $ref: "#/components/schemas/ResourceLink"
        tokenExchangeProcessorPolicyRef:
          $ref: "#/components/schemas/ResourceLink"
        rotateClientSecret:
          type: boolean
          description:
            Rotate registration access token on dynamic client management
            requests.
        rotateRegistrationAccessToken:
          type: boolean
          description: Rotate client secret on dynamic client management requests.
        allowClientDelete:
          type: boolean
          description: Allow client deletion from dynamic client management.
        disableRegistrationAccessTokens:
          type: boolean
          description:
            "Disable registration access tokens. Local standards may mandate\
            \ different registration access token requirements. If applicable, implement\
            \ custom validation and enforcement rules using the DynamicClientRegistrationPlugin\
            \ interface from the PingFederate SDK, configure the client registration\
            \ policies (policyRefs), and set this property (disableRegistrationAccessTokens)\
            \ to true. CAUTION: When the disableRegistrationAccessTokens property\
            \ is set to true, all clients, not just the ones created using the Dynamic\
            \ Client Registration protocol, are vulnerable to unrestricted retrievals,\
            \ updates (including modifications to the client authentication scheme\
            \ and redirect URIs), and deletes at the /as/clients.oauth2 endpoint unless\
            \ one or more client registration policies are in place to protect against\
            \ unauthorized attempts."
        refreshTokenRollingGracePeriodType:
          type: string
          description:
            "When specified, it overrides the global Refresh Token Grace\
            \ Period defined in the Authorization Server Settings. The default value\
            \ is SERVER_DEFAULT"
          enum:
            - SERVER_DEFAULT
            - OVERRIDE_SERVER_DEFAULT
        refreshTokenRollingGracePeriod:
          type: integer
          description:
            The grace period that a rolled refresh token remains valid
            in seconds.
          format: int32
        retainClientSecret:
          type: boolean
          description: Temporarily retain the old client secret on client secret change.
        clientSecretRetentionPeriodType:
          type: string
          description:
            Use OVERRIDE_SERVER_DEFAULT to override the Client Secret Retention
            Period value on the Authorization Server Settings. SERVER_DEFAULT will
            default to the Client Secret Retention Period value on the Authorization
            Server Setting. Defaults to SERVER_DEFAULT.
        clientSecretRetentionPeriodOverride:
          type: integer
          description:
            "The length of time in minutes that client secrets will be\
            \ retained as secondary secrets after secret change. The default value\
            \ is 0, which will disable secondary client secret retention. This value\
            \ will override the Client Secret Retention Period value on the Authorization\
            \ Server Settings."
          format: int32
        requireJwtSecuredAuthorizationResponseMode:
          type: boolean
          description:
            Determines whether JWT Secured authorization response mode
            is required when initiating an authorization request. The default is false.
      description: Dynamic client registration settings.
    ClientRegistrationPolicyDescriptors:
      type: object
      properties:
        items:
          type: array
          description: The list of client registration policy plugin descriptors.
          items:
            $ref: "#/components/schemas/ClientRegistrationPolicyDescriptor"
      description: A collection of client registration policy plugin descriptors.
    ClientRegistrationPolicies:
      type: object
      properties:
        items:
          type: array
          description: The list of client registration policy plugin instances.
          items:
            $ref: "#/components/schemas/ClientRegistrationPolicy"
      description: A collection of client registration policy plugin instances.
    IdpAdapterMapping:
      required:
        - attributeContractFulfillment
        - id
      type: object
      properties:
        id:
          type: string
          description: The ID of the adapter mapping.
        idpAdapterRef:
          $ref: "#/components/schemas/ResourceLink"
        attributeSources:
          type: array
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: "#/components/schemas/AttributeSourceAggregation"
        attributeContractFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of mappings from attribute names to their fulfillment
            values.
        issuanceCriteria:
          $ref: "#/components/schemas/IssuanceCriteria"
      description: The OAuth IdP Adapter Mapping.
    IdpAdapterMappings:
      type: object
      properties:
        items:
          type: array
          description: The actual list of OAuth IdP adapter mappings.
          items:
            $ref: "#/components/schemas/IdpAdapterMapping"
      description: A collection of OAuth IdP adapter mapping items.
    OutOfBandAuthPluginDescriptors:
      type: object
      properties:
        items:
          type: array
          description: The list of out of band authenticator plugin descriptors.
          items:
            $ref: "#/components/schemas/OutOfBandAuthPluginDescriptor"
    OutOfBandAuthenticators:
      type: object
      properties:
        items:
          type: array
          description: The list of out of band authenticator plugin instances.
          items:
            $ref: "#/components/schemas/OutOfBandAuthenticator"
      description: A collection of out of band authenticator plugin instances.
    OAuthOidcKeysSettings:
      required:
        - staticJwksEnabled
      type: object
      properties:
        staticJwksEnabled:
          type: boolean
          position: 10
          description: Enable static keys.
        p256ActiveCertRef:
          position: 15
          description: Reference to the P-256 key currently active.
          $ref: "#/components/schemas/ResourceLink"
        p256PreviousCertRef:
          position: 20
          description: Reference to the P-256 key previously active.
          $ref: "#/components/schemas/ResourceLink"
        p256PublishX5cParameter:
          type: boolean
          position: 25
          description: Enable publishing of the P-256 certificate chain associated with the active key.
        p256ActiveKeyId:
          type: string
          position: 27
          description: Key Id for currently active P-256 key.
        p256PreviousKeyId:
          type: string
          position: 28
          description: Key Id for previously active P-256 key.
        p384ActiveCertRef:
          position: 30
          description: Reference to the P-384 key currently active.
          $ref: "#/components/schemas/ResourceLink"
        p384PreviousCertRef:
          position: 35
          description: Reference to the P-384 key previously active.
          $ref: "#/components/schemas/ResourceLink"
        p384PublishX5cParameter:
          type: boolean
          position: 40
          description: Enable publishing of the P-384 certificate chain associated with the active key.
        p384ActiveKeyId:
          type: string
          position: 43
          description: Key Id for currently active P-384 key.
        p384PreviousKeyId:
          type: string
          position: 44
          description: Key Id for previously active P-384 key.
        p521ActiveCertRef:
          position: 45
          description: Reference to the P-521 key currently active.
          $ref: "#/components/schemas/ResourceLink"
        p521PreviousCertRef:
          position: 50
          description: Reference to the P-521 key previously active.
          $ref: "#/components/schemas/ResourceLink"
        p521PublishX5cParameter:
          type: boolean
          position: 55
          description: Enable publishing of the P-521 certificate chain associated with the active key.
        p521ActiveKeyId:
          type: string
          position: 57
          description: Key Id for currently active P-521 key.
        p521PreviousKeyId:
          type: string
          position: 58
          description: Key Id for previously active P-521 key.
        rsaActiveCertRef:
          position: 60
          description: Reference to the RSA key currently active.
          $ref: "#/components/schemas/ResourceLink"
        rsaPreviousCertRef:
          position: 65
          description: Reference to the RSA key previously active.
          $ref: "#/components/schemas/ResourceLink"
        rsaPublishX5cParameter:
          type: boolean
          position: 70
          description: Enable publishing of the RSA certificate chain associated with the active key.
        rsaActiveKeyId:
          type: string
          position: 72
          description: Key Id for currently active RSA key.
        rsaPreviousKeyId:
          type: string
          position: 73
          description: Key Id for previously active RSA key.
        p256DecryptionActiveCertRef:
          position: 75
          description: Reference to the P-256 decryption key currently active.
          $ref: "#/components/schemas/ResourceLink"
        p256DecryptionPreviousCertRef:
          position: 80
          description: Reference to the P-256 decryption key previously active.
          $ref: "#/components/schemas/ResourceLink"
        p256DecryptionPublishX5cParameter:
          type: boolean
          position: 85
          description: Enable publishing of the P-256 certificate chain associated with the active key.
        p256DecryptionActiveKeyId:
          type: string
          position: 88
          description: Key Id for currently active P-256 decryption key.
        p256DecryptionPreviousKeyId:
          type: string
          position: 89
          description: Key Id for previously active P-256 decryption key.
        p384DecryptionActiveCertRef:
          position: 90
          description: Reference to the P-384 decryption key currently active.
          $ref: "#/components/schemas/ResourceLink"
        p384DecryptionPreviousCertRef:
          position: 95
          description: Reference to the P-384 decryption key previously active.
          $ref: "#/components/schemas/ResourceLink"
        p384DecryptionPublishX5cParameter:
          type: boolean
          position: 100
          description: Enable publishing of the P-384 certificate chain associated with the active key.
        p384DecryptionActiveKeyId:
          type: string
          position: 102
          description: Key Id for currently active P-384 decryption key.
        p384DecryptionPreviousKeyId:
          type: string
          position: 103
          description: Key Id for previously active P-384 decryption key.
        p521DecryptionActiveCertRef:
          position: 105
          description: Reference to the P-521 decryption key currently active.
          $ref: "#/components/schemas/ResourceLink"
        p521DecryptionPreviousCertRef:
          position: 110
          description: Reference to the P-521 decryption key previously active.
          $ref: "#/components/schemas/ResourceLink"
        p521DecryptionPublishX5cParameter:
          type: boolean
          position: 115
          description: Enable publishing of the P-521 certificate chain associated with the active key.
        p521DecryptionActiveKeyId:
          type: string
          position: 117
          description: Key Id for currently active P-521 decryption key.
        p521DecryptionPreviousKeyId:
          type: string
          position: 118
          description: Key Id for previously active P-521 decryption key.
        rsaDecryptionActiveCertRef:
          position: 120
          description: Reference to the RSA decryption key currently active.
          $ref: "#/components/schemas/ResourceLink"
        rsaDecryptionPreviousCertRef:
          position: 125
          description: Reference to the RSA decryption key previously active.
          $ref: "#/components/schemas/ResourceLink"
        rsaDecryptionPublishX5cParameter:
          type: boolean
          position: 130
          description: Enable publishing of the RSA certificate chain associated with the active key.
        rsaDecryptionActiveKeyId:
          type: string
          position: 135
          description: Key Id for currently active RSA decryption key.
        rsaDecryptionPreviousKeyId:
          type: string
          position: 136
          description: Key Id for previously active RSA decryption key.
        rsaAlgorithmActiveKeyIds:
          type: array
          position: 140
          description: PingFederate uses the same RSA key for all RSA signing algorithms. To enable active RSA JWK entry to have unique single valued ''alg'' parameter, use this list to set a key identifier for each RSA algorithm (RS256, RS384, RS512, PS256, PS384 and PS512).
          items:
            $ref: "#/components/schemas/RsaAlgKeyId"
        rsaAlgorithmPreviousKeyIds:
          type: array
          position: 150
          description: PingFederate uses the same RSA key for all RSA signing algorithms. To enable previously active RSA JWK entry to have unique single valued ''alg'' parameter, use this list to set a key identifier for each RSA algorithm (RS256, RS384, RS512, PS256, PS384 and PS512).
          items:
            $ref: "#/components/schemas/RsaAlgKeyId"
      description: Setting for OAuth/OpenID Connect signing and decryption key settings.
    AdditionalKeySet:
      required:
        - issuers
        - name
        - signingKeys
      type: object
      properties:
        id:
          type: string
          description:
            "The unique ID for the key set. It can be any combination of\
            \ [a-zA-Z0-9._-]. This property is system-assigned if not specified."
        name:
          type: string
          description: The key set name.
        description:
          type: string
          description: A description of the key set.
        signingKeys:
          $ref: "#/components/schemas/SigningKeys"
        issuers:
          type: array
          description:
            "A list of virtual issuers that will use the current key set.\
            \ Once assigned to a key set, the same virtual issuer cannot be assigned\
            \ to another key set instance."
          items:
            $ref: "#/components/schemas/ResourceLink"
      description:
        The attributes used to configure an OAuth/OpenID Connect additional
        signing key set with virtual issuers.
    RsaAlgKeyId:
      type: object
      required:
        - keyId
        - rsaAlgType
      properties:
        rsaAlgType:
          type: string
          position: 10
          description: The RSA signing algorithm type. The supported RSA signing algorithm types are RS256, RS384, RS512, PS256, PS384 and PS512.
        keyId:
          type: string
          position: 20
          description: Unique key identifier.
      description: This class represents a pair of RSA algorithm type and key identifier.
    SigningKeys:
      type: object
      properties:
        p256ActiveCertRef:
          position: 15
          description: Reference to the P-256 key currently active.
          $ref: "#/components/schemas/ResourceLink"
        p256PreviousCertRef:
          position: 20
          description: Reference to the P-256 key previously active.
          $ref: "#/components/schemas/ResourceLink"
        p256PublishX5cParameter:
          type: boolean
          position: 25
          description: Enable publishing of the P-256 certificate chain associated with the active key.
        p256ActiveKeyId:
          type: string
          position: 27
          description: Key Id for currently active P-256 key.
        p256PreviousKeyId:
          type: string
          position: 28
          description: Key Id for previously active P-256 key.
        p384ActiveCertRef:
          position: 30
          description: Reference to the P-384 key currently active.
          $ref: "#/components/schemas/ResourceLink"
        p384PreviousCertRef:
          position: 35
          description: Reference to the P-384 key previously active.
          $ref: "#/components/schemas/ResourceLink"
        p384PublishX5cParameter:
          type: boolean
          position: 40
          description: Enable publishing of the P-384 certificate chain associated with the active key.
        p384ActiveKeyId:
          type: string
          position: 43
          description: Key Id for currently active P-384 key.
        p384PreviousKeyId:
          type: string
          position: 44
          description: Key Id for previously active P-384 key.
        p521ActiveCertRef:
          position: 45
          description: Reference to the P-521 key currently active.
          $ref: "#/components/schemas/ResourceLink"
        p521PreviousCertRef:
          position: 50
          description: Reference to the P-521 key previously active.
          $ref: "#/components/schemas/ResourceLink"
        p521PublishX5cParameter:
          type: boolean
          position: 55
          description: Enable publishing of the P-521 certificate chain associated with the active key.
        p521ActiveKeyId:
          type: string
          position: 57
          description: Key Id for currently active P-521 key.
        p521PreviousKeyId:
          type: string
          position: 58
          description: Key Id for previously active P-521 key.
        rsaActiveCertRef:
          position: 60
          description: Reference to the RSA key currently active.
          $ref: "#/components/schemas/ResourceLink"
        rsaPreviousCertRef:
          position: 65
          description: Reference to the RSA key previously active.
          $ref: "#/components/schemas/ResourceLink"
        rsaPublishX5cParameter:
          type: boolean
          position: 67
          description: Enable publishing of the RSA certificate chain associated with the active key.
        rsaActiveKeyId:
          type: string
          position: 68
          description: Key Id for currently active RSA key.
        rsaPreviousKeyId:
          type: string
          position: 69
          description: Key Id for previously active RSA key.
        rsaAlgorithmActiveKeyIds:
          type: array
          position: 75
          description: PingFederate uses the same RSA key for all RSA signing algorithms. To enable active RSA JWK entry to have unique single valued ''alg'' parameter, use this list to set a key identifier for each RSA algorithm (RS256, RS384, RS512, PS256, PS384 and PS512).
          items:
            $ref: "#/components/schemas/RsaAlgKeyId"
        rsaAlgorithmPreviousKeyIds:
          type: array
          position: 80
          description: PingFederate uses the same RSA key for all RSA signing algorithms. To enable previously active RSA JWK entry to have unique single valued ''alg'' parameter, use this list to set a key identifier for each RSA algorithm (RS256, RS384, RS512, PS256, PS384 and PS512).
          items:
            $ref: "#/components/schemas/RsaAlgKeyId"
      description:
        Setting for a OAuth/OpenID Connect signing key set while using
        multiple virtual issuers.
    AdditionalKeySets:
      type: object
      properties:
        items:
          type: array
          description: The actual list of signing key sets.
          items:
            $ref: "#/components/schemas/AdditionalKeySet"
      description: A collection of OAuth/OpenID Connect additional signing key sets.
    ResourceOwnerCredentialsMapping:
      required:
        - attributeContractFulfillment
        - id
      type: object
      properties:
        id:
          type: string
          description: The ID of the Resource Owner Credentials Mapping.
        passwordValidatorRef:
          $ref: "#/components/schemas/ResourceLink"
        attributeSources:
          type: array
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: "#/components/schemas/AttributeSourceAggregation"
        attributeContractFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of mappings from attribute names to their fulfillment
            values.
        issuanceCriteria:
          $ref: "#/components/schemas/IssuanceCriteria"
      description: The OAuth Resource Owner Credentials Mapping.
    ResourceOwnerCredentialsMappings:
      type: object
      properties:
        items:
          type: array
          description: The actual list of OAuth Resource Owner Credentials Grant Mapping.
          items:
            $ref: "#/components/schemas/ResourceOwnerCredentialsMapping"
      description: A collection of OAuth Resource Owner Credentials mapping items.
    OIDCSessionSettings:
      type: object
      properties:
        trackUserSessionsForLogout:
          type: boolean
          description:
            Determines whether user sessions are tracked for logout. This
            property is now available under /oauth/authServerSettings and should be
            accessed through that resource.
        revokeUserSessionOnLogout:
          type: boolean
          description:
            Determines whether the user's session is revoked on logout.
            This property is now available under /session/settings and should be accessed
            through that resource.
        sessionRevocationLifetime:
          type: integer
          description:
            "How long a session revocation is tracked and stored, in minutes.\
            \ This property is now available under /session/settings and should be\
            \ accessed through that resource."
          format: int32
      description: Settings relating to OpenID Connect session management.
    OpenIdConnectSettings:
      type: object
      properties:
        defaultPolicyRef:
          $ref: "#/components/schemas/ResourceLink"
        sessionSettings:
          $ref: "#/components/schemas/OIDCSessionSettings"
      description: Settings for the OpenID Connect configuration.
    OpenIdConnectAttribute:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of this attribute.
        includeInIdToken:
          type: boolean
          description: Attribute is included in the ID Token.
        includeInUserInfo:
          type: boolean
          description: Attribute is included in the User Info.
        multiValued:
          type: boolean
          description:
            Indicates whether attribute value is always returned as an
            array.
      description: An attribute for the OpenID Connect returned to OAuth clients.
    OpenIdConnectAttributeContract:
      type: object
      properties:
        coreAttributes:
          type: array
          description:
            "A list of read-only attributes (for example, sub) that are\
            \ automatically populated by PingFederate."
          items:
            $ref: "#/components/schemas/OpenIdConnectAttribute"
        extendedAttributes:
          type: array
          description: A list of additional attributes.
          items:
            $ref: "#/components/schemas/OpenIdConnectAttribute"
      description:
        A set of attributes that will be returned to OAuth clients in response
        to requests received at the PingFederate UserInfo endpoint.
    OpenIdConnectPolicies:
      type: object
      properties:
        items:
          type: array
          description: The actual list of policies.
          items:
            $ref: "#/components/schemas/OpenIdConnectPolicy"
      description: A collection of OpenID Connect policies.
    OpenIdConnectPolicy:
      required:
        - accessTokenManagerRef
        - attributeContract
        - attributeMapping
        - id
        - name
      type: object
      properties:
        id:
          type: string
          description: The policy ID used internally.
        name:
          type: string
          description: The name used for display in UI screens.
        accessTokenManagerRef:
          $ref: "#/components/schemas/ResourceLink"
        idTokenLifetime:
          type: integer
          description: "The ID Token Lifetime, in minutes. The default value is 5."
          format: int32
        includeSriInIdToken:
          type: boolean
          description:
            Determines whether a Session Reference Identifier is included
            in the ID token.
        includeUserInfoInIdToken:
          type: boolean
          description:
            Determines whether the User Info is always included in the
            ID token.
        includeSHashInIdToken:
          type: boolean
          description:
            Determines whether the State Hash should be included in the
            ID token.
        includeX5tInIdToken:
          type: boolean
          description:
            Determines whether the X.509 thumbprint header should be included
            in the ID Token.
        idTokenTypHeaderValue:
          type: string
          description: ID Token Type (typ) Header Value.
        returnIdTokenOnRefreshGrant:
          type: boolean
          description:
            Determines whether an ID Token should be returned when refresh
            grant is requested or not.
        reissueIdTokenInHybridFlow:
          type: boolean
          description:
            Determines whether a new ID Token should be returned during
            token request of the hybrid flow.
        attributeContract:
          $ref: "#/components/schemas/OpenIdConnectAttributeContract"
        attributeMapping:
          $ref: "#/components/schemas/AttributeMapping"
        scopeAttributeMappings:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ParameterValues"
          description: The attribute scope mappings from scopes to attribute names.
        lastModified:
          type: string
          description:
            The time at which the policy was last changed. This property
            is read only and is ignored on PUT and POST requests.
          format: date-time
      description: The set of attributes used to configure an OpenID Connect policy.
    PasswordCredentialValidatorDescriptors:
      type: object
      properties:
        items:
          type: array
          description: The list of password credential validator descriptors.
          items:
            $ref: "#/components/schemas/PasswordCredentialValidatorDescriptor"
      description: A collection of password credential validator descriptors.
    PasswordCredentialValidators:
      type: object
      properties:
        items:
          type: array
          description: The actual list of password credential validators.
          items:
            $ref: "#/components/schemas/PasswordCredentialValidator"
      description: A collection of password credential validators.
    PingOneConnection:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          description:
            "The persistent, unique ID of the connection. This property\
            \ is system-assigned if not specified."
        name:
          type: string
          description: The name of the PingOne connection.
        description:
          type: string
          description: A description for the PingOne connection.
        active:
          type: boolean
          description: Whether or not this connection is active. Defaults to true.
        credential:
          type: string
          description:
            "The credential for the PingOne connection. To update the credential,\
            \ specify the plaintext value of the credential in this field. This field\
            \ will not be populated for GET requests."
        encryptedCredential:
          type: string
          description:
            "The encrypted credential for the PingOne connection. For POST\
            \ and PUT requests, if you wish to keep the existing credential, this\
            \ field should be passed back unchanged."
        credentialId:
          type: string
          description: The ID of the PingOne credential. This field is read only.
        pingOneConnectionId:
          type: string
          description: The ID of the PingOne connection. This field is read only.
        environmentId:
          type: string
          description:
            The ID of the environment of the PingOne credential. This field
            is read only.
        creationDate:
          type: string
          description:
            The creation date of the PingOne connection. This field is
            read only.
          format: date-time
        organizationName:
          type: string
          description:
            The name of the organization associated with this PingOne connection.
            This field is read only.
        region:
          type: string
          description: The region of the PingOne connection. This field is read only.
        pingOneManagementApiEndpoint:
          type: string
          description: The PingOne management API endpoint. This field is read only.
        pingOneAuthenticationApiEndpoint:
          type: string
          description:
            The PingOne authentication API endpoint. This field is read
            only.
      description: PingOne connection.
    PingOneConnections:
      type: object
      properties:
        items:
          type: array
          description: The list of PingOne connections.
          items:
            $ref: "#/components/schemas/PingOneConnection"
      description: A collection of PingOne connections.
    PingOneCredentialStatus:
      type: object
      properties:
        pingOneCredentialStatus:
          type: string
          description: The status of the PingOne connection credential.
          enum:
            - VALID
            - INVALID
            - UNKNOWN
      description: PingOne credential Status
    PingOneEnvironment:
      type: object
      properties:
        name:
          type: string
          description: The name of the environment
        id:
          type: string
          description: The ID of the environment
        type:
          type: string
          description: The type of the environment
    PingOneEnvironments:
      type: object
      properties:
        items:
          type: array
          description: The list of PingOne environments.
          items:
            $ref: "#/components/schemas/PingOneEnvironment"
      description: A collection of PingOne Environments.
    ResourceCategoryInfo:
      type: object
      properties:
        id:
          type: string
          description: The ID of the resource category.
          enum:
            - IDP_CONNECTION
            - SP_CONNECTION
            - PASSWORD_CREDENTIAL_VALIDATOR
            - AUTHENTICATION_SELECTOR
            - IDP_ADAPTER
            - SP_ADAPTER
            - ACCESS_TOKEN_MGMT_PLUGIN
            - TOKEN_PROCESSOR
            - TOKEN_GENERATOR
            - NOTIFICATION_PUBLISHER
            - OOB_AUTH_PLUGIN
            - DATA_STORE
            - DYNAMIC_CLIENT_REGISTRATION_PLUGIN
            - RISK_PROVIDER
            - IDENTITY_STORE_PROVISIONER
        name:
          type: string
          description: The name of the resource category.
      description:
        A model containing information on a category of resource in the
        administrative API.
    ResourceUsage:
      type: object
      properties:
        id:
          type: string
          description: The ID of the referencing resource.
        name:
          type: string
          description: The name of the referencing resource.
        categoryId:
          type: string
          description: The category of the referencing resource.
          enum:
            - IDP_CONNECTION
            - SP_CONNECTION
            - PASSWORD_CREDENTIAL_VALIDATOR
            - AUTHENTICATION_SELECTOR
            - IDP_ADAPTER
            - SP_ADAPTER
            - ACCESS_TOKEN_MGMT_PLUGIN
            - TOKEN_PROCESSOR
            - TOKEN_GENERATOR
            - NOTIFICATION_PUBLISHER
            - OOB_AUTH_PLUGIN
            - DATA_STORE
            - DYNAMIC_CLIENT_REGISTRATION_PLUGIN
            - RISK_PROVIDER
            - IDENTITY_STORE_PROVISIONER
        type:
          type: string
          description:
            "The type of the referencing resource. In the case of plugins,\
            \ this is the plugin type. Otherwise, it is usually the same as the name\
            \ of the category."
        ref:
          $ref: "#/components/schemas/ResourceLink"
      description: An API model representing a reference to an API resource.
    ResourceUsages:
      type: object
      properties:
        categories:
          type: array
          description: The static list of available resource categories.
          items:
            $ref: "#/components/schemas/ResourceCategoryInfo"
        items:
          type: array
          description: The actual list of resource usages.
          items:
            $ref: "#/components/schemas/ResourceUsage"
      description: A collection of resource usages.
    ServiceAssociation:
      type: object
      properties:
        componentName:
          type: string
          description: The display name for the component.
        serviceNames:
          type: array
          description:
            The list of PingOne services consumed by the plugin. The first
            service represents the primary service consumed by the plugin.
          items:
            type: string
        configured:
          type: boolean
          description:
            Indicates whether one or more instances of the plugin are configured
            for a given PingOne connection.
      description:
        A model representing an association between a PingFederate component
        (typically a plugin) and a list of PingOne services.
    ServiceAssociations:
      type: object
      properties:
        items:
          type: array
          description: The actual list of component-to-service associations.
          items:
            $ref: "#/components/schemas/ServiceAssociation"
      description: A list of installed components that consume PingOne services.
    PingOneForEnterpriseSettings:
      type: object
      properties:
        connectedToPingOneForEnterprise:
          type: boolean
          description:
            A read only field indicating whether PingFederate is connected
            to PingOne for Enterprise.
        pingOneSsoConnection:
          $ref: "#/components/schemas/ResourceLink"
        companyName:
          type: string
          description: A read only field indicating the company name.
        enableAdminConsoleSso:
          type: boolean
          description:
            Indicates whether single sign on from PingOne for Enterprise
            to the PingFederate admin console is enabled. The default is false.
        enableMonitoring:
          type: boolean
          description:
            Indicates whether monitoring of PingFederate from PingOne for
            Enterprise is enabled. The default is true.
        currentAuthnKeyCreationTime:
          type: string
          description:
            A read only field indicating the creation time of the current
            authentication key.
          format: date-time
        previousAuthnKeyCreationTime:
          type: string
          description:
            A read only field indicating the creation time of the previous
            authentication key.
          format: date-time
        identityRepositoryUpdateRequired:
          type: boolean
          description:
            "A read-only field indicating whether changes were made in\
            \ the current PingFederate configuration that might affect your connection\
            \ with PingOne for Enterprise. For example, if you modified the attribute\
            \ contract of your SSO configuration. Update the identity repository to\
            \ keep your PingFederate and PingOne for Enterprise settings synchronized. "
      description: PingOne for Enterprise Settings
    P14EKeyPairView:
      type: object
      properties:
        currentAuthenticationKey:
          type: boolean
          description:
            Indicates whether this is the current key used to authenticate
            with PingOne.
        previousAuthenticationKey:
          type: boolean
          description:
            Indicates whether this is the previous key used to authenticate
            with PingOne.
        keyPairView:
          $ref: "#/components/schemas/CertView"
        creationTime:
          type: string
          description: The creation time of the key.
          format: date-time
      description: PingOne for Enterprise connection key pair details.
    P14EKeysView:
      type: object
      properties:
        keyPairs:
          type: array
          description: The key pairs used to authenticate to PingOne for Enterprise
          items:
            $ref: "#/components/schemas/P14EKeyPairView"
      description: The collection of PingOne for Enterprise connection key pair details.
    MetadataLifetimeSettings:
      type: object
      properties:
        cacheDuration:
          type: integer
          description:
            This field adjusts the validity of your metadata in minutes.
            The default value is 1440 (1 day).
          format: int32
        reloadDelay:
          type: integer
          description:
            This field adjusts the frequency of automatic reloading of
            SAML metadata in minutes. The default value is 1440 (1 day).
          format: int64
      description: Metadata lifetime settings.
    MetadataSigningSettings:
      type: object
      properties:
        signingKeyRef:
          $ref: "#/components/schemas/ResourceLink"
        signatureAlgorithm:
          type: string
          description:
            "Signature algorithm. If this property is unset, the default\
            \ signature algorithm for the key algorithm will be used. Supported signature\
            \ algorithms are available through the /keyPairs/keyAlgorithms endpoint."
      description:
        "Metadata signing settings. If metadata is not signed, this model\
        \ will be empty."
    RedirectValidationLocalSettings:
      type: object
      properties:
        enableTargetResourceValidationForSSO:
          type: boolean
          description: Enable target resource validation for SSO.
        enableTargetResourceValidationForSLO:
          type: boolean
          description: Enable target resource validation for SLO.
        enableTargetResourceValidationForIdpDiscovery:
          type: boolean
          description: Enable target resource validation for IdP discovery.
        enableInErrorResourceValidation:
          type: boolean
          description: Enable validation for error resource.
        whiteList:
          type: array
          description: List of URLs that are designated as valid target resources.
          items:
            $ref: "#/components/schemas/RedirectValidationSettingsWhitelistEntry"
      description: Settings for local redirect validation.
    RedirectValidationPartnerSettings:
      type: object
      properties:
        enableWreplyValidationSLO:
          type: boolean
          description: Enable wreply validation for SLO.
      description: Settings for redirection at a partner site.
    RedirectValidationSettings:
      type: object
      properties:
        redirectValidationLocalSettings:
          $ref: "#/components/schemas/RedirectValidationLocalSettings"
        redirectValidationPartnerSettings:
          $ref: "#/components/schemas/RedirectValidationPartnerSettings"
      description: "Settings for redirect validation for SSO, SLO and IdP discovery."
    RedirectValidationSettingsWhitelistEntry:
      required:
        - validDomain
      type: object
      properties:
        targetResourceSSO:
          type: boolean
          description: Enable this target resource for SSO redirect validation.
        targetResourceSLO:
          type: boolean
          description: Enable this target resource for SLO redirect validation.
        inErrorResource:
          type: boolean
          description: Enable this target resource for in error resource validation.
        idpDiscovery:
          type: boolean
          description: Enable this target resource for IdP discovery validation.
        validDomain:
          type: string
          description: Domain of a valid resource.
        validPath:
          type: string
          description: Path of a valid resource.
        allowQueryAndFragment:
          type: boolean
          description: Allow any query parameters and fragment in the resource.
        requireHttps:
          type: boolean
          description: Require HTTPS for accessing this resource.
      description: Whitelist entry for valid target resource.
    KeyAlgorithm:
      type: object
      properties:
        name:
          type: string
          description: Name of the key algorithm.
        keySizes:
          type: array
          description: "Possible key sizes for this algorithm, in bits."
          items:
            type: integer
            format: int32
        defaultKeySize:
          type: integer
          description: Default key size for this algorithm.
          format: int32
        signatureAlgorithms:
          type: array
          description: Possible signature algorithms for this key algorithm.
          items:
            type: string
        defaultSignatureAlgorithm:
          type: string
          description: Default signature algorithm for this key algorithm.
      description: Details for a key algorithm.
    KeyAlgorithms:
      type: object
      properties:
        items:
          type: array
          description: The actual list of key algorithms.
          items:
            $ref: "#/components/schemas/KeyAlgorithm"
      description: A collection of key algorithms.
    SecretManagers:
      type: object
      properties:
        items:
          type: array
          description: The list of secret manager plugin instances.
          items:
            $ref: "#/components/schemas/SecretManager"
      description: A collection of secret manager plugin instances.
    SecretManagerDescriptors:
      type: object
      properties:
        items:
          type: array
          description: The list of secret manager plugin descriptors.
          items:
            $ref: "#/components/schemas/SecretManagerDescriptor"
      description: A collection of secret manager plugin descriptors.
    BaseProviderRole:
      type: object
      properties:
        enable:
          type: boolean
        enableSaml11:
          type: boolean
          description: Enable SAML 1.1.
        enableSaml10:
          type: boolean
          description: Enable SAML 1.0.
        enableWsFed:
          type: boolean
          description: Enable WS Federation.
        enableWsTrust:
          type: boolean
          description: Enable WS Trust.
      description: Base Provider Role.
    CaptchaSettings:
      type: object
      properties:
        siteKey:
          type: string
          description: Site key for reCAPTCHA.
        secretKey:
          type: string
          description:
            "Secret key for reCAPTCHA. GETs will not return this attribute.\
            \ To update this field, specify the new value in this attribute."
        encryptedSecretKey:
          type: string
          description:
            "The encrypted secret key for reCAPTCHA. If you do not want\
            \ to update the stored value, this attribute should be passed back unchanged."
      description: Settings for CAPTCHA.
    CertificateExpirationNotificationSettings:
      required:
        - emailAddress
        - finalWarningPeriod
      type: object
      properties:
        emailAddress:
          type: string
          description: Email address where notifications are sent.
        initialWarningPeriod:
          type: integer
          description:
            Time before certificate expiration when initial warning is
            sent (in days).
          format: int32
        finalWarningPeriod:
          type: integer
          description:
            Time before certificate expiration when final warning is sent
            (in days).
          format: int32
        notificationPublisherRef:
          $ref: "#/components/schemas/ResourceLink"
        notificationMode:
          type: string
          description:
            The mode of notification. Set to NOTIFICATION_PUBLISHER to
            enable email notifications and server log messages. Set to LOGGING_ONLY
            to enable server log messages. Defaults to NOTIFICATION_PUBLISHER.
          enum:
            - NOTIFICATION_PUBLISHER
            - LOGGING_ONLY
      description: Notification settings for certificate expiration events.
    EmailServerSettings:
      required:
        - emailServer
        - port
        - sourceAddr
      type: object
      properties:
        sourceAddr:
          type: string
          description:
            The email address that appears in the 'From' header line in
            email messages generated by PingFederate.  The address must be in valid
            format but need not be set up on your system.
        emailServer:
          type: string
          description: The IP address or hostname of your email server.
        port:
          type: integer
          description:
            "The SMTP port on your email server. Allowable values: 1 -\
            \ 65535. The default value is 25."
          format: int32
        sslPort:
          type: integer
          description:
            "The secure SMTP port on your email server. This field is not\
            \ active unless Use SSL is enabled. Allowable values: 1 - 65535. The default\
            \ value is  465."
          format: int32
        timeout:
          type: integer
          description:
            "The amount of time in seconds that PingFederate will wait\
            \ before it times out connecting to the SMTP server. Allowable values:\
            \ 0 - 3600. The default value is 30."
          format: int32
        retryAttempts:
          type: integer
          description:
            The number of times PingFederate tries to resend an email upon
            unsuccessful delivery. The default value is 2.
          format: int32
        retryDelay:
          type: integer
          description:
            The number of minutes PingFederate waits before the next retry
            attempt. The default value is 2.
          format: int32
        useSSL:
          type: boolean
          description:
            "Requires the use of SSL/TLS on the port specified by 'sslPort'.\
            \ If this option is enabled, it overrides the 'useTLS' option."
        useTLS:
          type: boolean
          description:
            Requires the use of the STARTTLS protocol on the port specified
            by 'port'.
        verifyHostname:
          type: boolean
          description:
            "If useSSL or useTLS is enabled, this flag determines whether\
            \ the email server hostname is verified against the server's SMTPS certificate."
        enableUtf8MessageHeaders:
          type: boolean
          description:
            "Only set this flag to true if the email server supports UTF-8\
            \ characters in message headers. Otherwise, this is defaulted to false."
        useDebugging:
          type: boolean
          description:
            Turns on detailed error messages for the PingFederate server
            log to help troubleshoot any problems.
        username:
          type: string
          description: Authorized email username. Required if the password is provided.
        password:
          type: string
          description:
            "User password.  To update the password, specify the plaintext\
            \ value in this field.  This field will not be populated for GET requests."
        encryptedPassword:
          type: string
          description:
            "For GET requests, this field contains the encrypted password,\
            \ if one exists.  For POST and PUT requests, if you wish to reuse the\
            \ existing password, this field should be passed back unchanged."
      description: Email server configuration settings.
    FederationInfo:
      type: object
      properties:
        baseUrl:
          type: string
          description:
            "The fully qualified host name, port, and path (if applicable)\
            \ on which the PingFederate server runs."
        saml2EntityId:
          type: string
          description:
            "This ID defines your organization as the entity operating\
            \ the server for SAML 2.0 transactions. It is usually defined as an organization's\
            \ URL or a DNS address; for example: pingidentity.com. The SAML SourceID\
            \ used for artifact resolution is derived from this ID using SHA1."
        autoConnectEntityId:
          type: string
          description: This property has been deprecated and no longer used
        saml1xIssuerId:
          type: string
          description:
            "This ID identifies your federation server for SAML 1.x transactions.\
            \ As with SAML 2.0, it is usually defined as an organization's URL or\
            \ a DNS address. The SourceID used for artifact resolution is derived\
            \ from this ID using SHA1."
        saml1xSourceId:
          type: string
          description:
            "If supplied, the Source ID value entered here is used for\
            \ SAML 1.x, instead of being derived from the SAML 1.x Issuer/Audience."
        wsfedRealm:
          type: string
          description:
            The URI of the realm associated with the PingFederate server.
            A realm represents a single unit of security administration or trust.
      description: Federation Info.
    IdpRole:
      allOf:
        - $ref: "#/components/schemas/BaseProviderRole"
        - type: object
          properties:
            enable:
              type: boolean
              description: Enable Identity Provider Role.
            saml20Profile:
              $ref: "#/components/schemas/SAML20Profile"
            enableOutboundProvisioning:
              type: boolean
              description: Enable Outbound Provisioning.
          description:
            This property has been deprecated and is no longer used. All
            Roles and protocols are always enabled.
    LicenseEventNotificationSettings:
      required:
        - emailAddress
      type: object
      properties:
        emailAddress:
          type: string
          description: The email address where notifications are sent.
        notificationPublisherRef:
          $ref: "#/components/schemas/ResourceLink"
      description: Notification settings for licensing events.
    MetadataEventNotificationSettings:
      required:
        - emailAddress
      type: object
      properties:
        emailAddress:
          type: string
          description: The email address where metadata update notifications are sent.
        notificationPublisherRef:
          $ref: "#/components/schemas/ResourceLink"
      description: Notification settings for metadata update events.
    NotificationSettings:
      type: object
      properties:
        licenseEvents:
          $ref: "#/components/schemas/LicenseEventNotificationSettings"
        certificateExpirations:
          $ref: "#/components/schemas/CertificateExpirationNotificationSettings"
        notifyAdminUserPasswordChanges:
          type: boolean
          description:
            Determines whether admin users are notified through email when
            their account is changed.
        accountChangesNotificationPublisherRef:
          $ref: "#/components/schemas/ResourceLink"
        metadataNotificationSettings:
          $ref: "#/components/schemas/MetadataEventNotificationSettings"
        expiringCertificateAdministrativeConsoleWarningDays:
          type: integer
          description:
            "Indicates the number of days prior to certificate expiry date,\
            \ the administrative console warning starts. The default value is 14 days."
          format: int32
        expiredCertificateAdministrativeConsoleWarningDays:
          type: integer
          description:
            "Indicates the number of days past the certificate expiry date,\
            \ the administrative console warning ends. The default value is 14 days."
          format: int32
        threadPoolExhaustionNotificationSettings:
          $ref: "#/components/schemas/ThreadPoolExhaustionNotificationSettings"
      description:
        Settings for notifications relating to licensing and certificate
        expiration.
    OAuthRole:
      type: object
      properties:
        enableOauth:
          type: boolean
          description: Enable OAuth 2.0 Authorization Server (AS) Role.
        enableOpenIdConnect:
          type: boolean
          description: Enable Open ID Connect.
      description:
        This property has been deprecated and is no longer used. OAuth
        and OpenID Connect are always enabled.
    RolesAndProtocols:
      type: object
      properties:
        oauthRole:
          $ref: "#/components/schemas/OAuthRole"
        idpRole:
          $ref: "#/components/schemas/IdpRole"
        spRole:
          $ref: "#/components/schemas/SpRole"
        enableIdpDiscovery:
          type: boolean
          description: Enable IdP Discovery.
      description:
        This property has been deprecated and is no longer used. All Roles
        and protocols are always enabled.
    SAML20Profile:
      type: object
      properties:
        enable:
          type: boolean
          description: Enable SAML2.0 profile.
        enableAutoConnect:
          type: boolean
          description: This property has been deprecated and no longer used
      description: SAML 2.0 Profile.
    ServerSettings:
      type: object
      properties:
        contactInfo:
          $ref: "#/components/schemas/ContactInfo"
        notifications:
          $ref: "#/components/schemas/NotificationSettings"
        rolesAndProtocols:
          $ref: "#/components/schemas/RolesAndProtocols"
        federationInfo:
          $ref: "#/components/schemas/FederationInfo"
        emailServer:
          $ref: "#/components/schemas/EmailServerSettings"
        captchaSettings:
          $ref: "#/components/schemas/CaptchaSettings"
      description: Server configuration settings.
    SpRole:
      allOf:
        - $ref: "#/components/schemas/BaseProviderRole"
        - type: object
          properties:
            enable:
              type: boolean
              description: Enable Service Provider Role.
            saml20Profile:
              $ref: "#/components/schemas/SpSAML20Profile"
            enableOpenIDConnect:
              type: boolean
              description: Enable OpenID Connect.
            enableInboundProvisioning:
              type: boolean
              description: Enable Inbound Provisioning.
          description:
            This property has been deprecated and is no longer used. All
            Roles and protocols are always enabled.
    SpSAML20Profile:
      allOf:
        - $ref: "#/components/schemas/SAML20Profile"
        - type: object
          properties:
            enableXASP:
              type: boolean
              description:
                Enable Attribute Requester Mapping for X.509 Attribute Sharing
                Profile (XASP)
          description: SP SAML 2.0 Profile.
    ThreadPoolExhaustionNotificationSettings:
      required:
        - emailAddress
      type: object
      properties:
        emailAddress:
          type: string
          description: Email address where notifications are sent.
        threadDumpEnabled:
          type: boolean
          description: Generate a thread dump when approaching thread pool exhaustion.
        notificationPublisherRef:
          $ref: "#/components/schemas/ResourceLink"
        notificationMode:
          type: string
          description:
            The mode of notification. Set to NOTIFICATION_PUBLISHER to
            enable email notifications and server log messages. Set to LOGGING_ONLY
            to enable server log messages. Defaults to LOGGING_ONLY.
          enum:
            - NOTIFICATION_PUBLISHER
            - LOGGING_ONLY
      description: Notification settings for thread pool exhaustion events.
    OutboundProvisionDatabase:
      required:
        - dataStoreRef
      type: object
      properties:
        dataStoreRef:
          $ref: "#/components/schemas/ResourceLink"
        synchronizationFrequency:
          type: integer
          description:
            The synchronization frequency in seconds. The default value
            is 60.
          format: int32
      description:
        The settings for database used internally to facilitate outbound
        provisioning. The database stores state of synchronization between the source
        data store and the target data store.
    SystemKey:
      type: object
      properties:
        creationDate:
          type: string
          description: Creation time of the key.
          format: date-time
        encryptedKeyData:
          type: string
          description: The system key encrypted.
        keyData:
          type: string
          description:
            The clear text system key base 64 encoded. The system key must
            be 32 bytes before base 64 encoding.
      description: A system key.
    SystemKeys:
      required:
        - current
        - pending
      type: object
      properties:
        current:
          $ref: "#/components/schemas/SystemKey"
        previous:
          $ref: "#/components/schemas/SystemKey"
        pending:
          $ref: "#/components/schemas/SystemKey"
      description:
        Secrets that are used in cryptographic operations to generate and
        consume internal tokens
    IssuerCert:
      required:
        - x509File
      type: object
      properties:
        certView:
          $ref: "#/components/schemas/CertView"
        x509File:
          $ref: "#/components/schemas/X509File"
        active:
          type: boolean
          description: Indicates whether this an active certificate or not.
      description:
        A certificate used to validate certificates for access to the WS-Trust
        STS endpoints.
    ApiResponse:
      type: object
    GeneralSettings:
      type: object
      properties:
        disableAutomaticConnectionValidation:
          type: boolean
          description:
            Boolean that disables automatic connection validation when
            set to true. The default is false.
        idpConnectionTransactionLoggingOverride:
          type: string
          description:
            "Determines the level of transaction logging for all identity\
            \ provider connections. The default is DONT_OVERRIDE, in which case the\
            \ logging level will be determined by each individual IdP connection"
          enum:
            - DONT_OVERRIDE
            - NONE
            - FULL
            - STANDARD
            - ENHANCED
        spConnectionTransactionLoggingOverride:
          type: string
          description:
            "Determines the level of transaction logging for all service\
            \ provider connections. The default is DONT_OVERRIDE, in which case the\
            \ logging level will be determined by each individual SP connection"
          enum:
            - DONT_OVERRIDE
            - NONE
            - FULL
            - STANDARD
            - ENHANCED
        datastoreValidationIntervalSecs:
          type: integer
          description:
            Determines how long (in seconds) the result of testing a datastore
            connection is cached. The default is 300.
          format: int32
        requestHeaderForCorrelationId:
          type: string
          description: HTTP request header for retrieving correlation ID.
      description: General settings.
    LogCategorySettings:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description:
            The ID of the log category. This field must match one of the
            category IDs defined in log4j-categories.xml.
        name:
          type: string
          description:
            The name of the log category. This field is read-only and is
            ignored for PUT requests.
        description:
          type: string
          description:
            The description of the log category. This field is read-only
            and is ignored for PUT requests.
        enabled:
          type: boolean
          description:
            Determines whether or not the log category is enabled. The
            default is false.
      description:
        "The settings for a log category. A log category represents a group\
        \ of related loggers and is associated with a system property (the ID field\
        \ of the category with 'pf.log.level.' prepended). The system property can\
        \ be referenced in log4j2.xml to set the level for the associated loggers.\
        \ Log category IDs, names, and descriptions are defined in log4j-categories.xml.\
        \ Only the enabled state of the category can be modified through the administrative\
        \ console or API."
    LogSettings:
      type: object
      properties:
        logCategories:
          type: array
          description:
            "The log categories defined for the system and whether they\
            \ are enabled. On a PUT request, if a category is not included in the\
            \ list, it will be disabled."
          items:
            $ref: "#/components/schemas/LogCategorySettings"
      description: Settings related to server logging.
    WsTrustStsSettings:
      type: object
      properties:
        basicAuthnEnabled:
          type: boolean
          description:
            Require the use of HTTP Basic Authentication to access WS-Trust
            STS endpoints. Requires users be populated.
        clientCertAuthnEnabled:
          type: boolean
          description:
            Require the use of Client Cert Authentication to access WS-Trust
            STS endpoints. Requires either restrictBySubjectDn and/or restrictByIssuerCert
            be enabled.
        restrictBySubjectDn:
          type: boolean
          description:
            Restrict Access by Subject DN. Ignored if clientCertAuthnEnabled
            is disabled.
        restrictByIssuerCert:
          type: boolean
          description:
            Restrict Access by Issuer Certificate. Ignored if clientCertAuthnEnabled
            is disabled.
        subjectDns:
          type: array
          description:
            List of Subject DNs for certificates that are allowed to authenticate
            to WS-Trust STS endpoints. Required if restrictBySubjectDn is enabled.
          items:
            type: string
        users:
          type: array
          description:
            List of users authorized to access WS-Trust STS endpoints when
            basicAuthnEnabled is enabled. At least one users entry is required if
            basicAuthnEnabled is enabled.
          items:
            $ref: "#/components/schemas/UsernamePasswordCredentials"
        issuerCerts:
          type: array
          description:
            List of certificate Issuers that are used to validate certificates
            for access to the WS-Trust STS endpoints. Required if restrictByIssuerCert
            is enabled.
          items:
            $ref: "#/components/schemas/ResourceLink"
      description:
        Configure PingFederate to require that client applications provide
        credentials to access the WS-Trust STS endpoints.
    IssuerCerts:
      type: object
      properties:
        items:
          type: array
          description: The actual list of certificates.
          items:
            $ref: "#/components/schemas/IssuerCert"
      description:
        The certificates used to validate certificates for access to the
        WS-Trust STS endpoints.
    ServiceAuthentication:
      type: object
      properties:
        attributeQuery:
          $ref: "#/components/schemas/ServiceModel"
        jmx:
          $ref: "#/components/schemas/ServiceModel"
        connectionManagement:
          $ref: "#/components/schemas/ServiceModel"
        ssoDirectoryService:
          $ref: "#/components/schemas/ServiceModel"
      description: Service Authentication Settings.
    ServiceModel:
      type: object
      properties:
        id:
          type: string
          description: Id of the service.
        sharedSecret:
          type: string
          description: Shared secret for the service.
        encryptedSharedSecret:
          type: string
          description: Encrypted shared secret for the service.
      description: Service Model.
    KeyPairRotationSettings:
      required:
        - activationBufferDays
        - creationBufferDays
      type: object
      properties:
        id:
          type: string
        creationBufferDays:
          type: integer
          description:
            Buffer days before key pair expiration for creation of a new
            key pair.
          format: int32
        activationBufferDays:
          type: integer
          description:
            Buffer days before key pair expiration for activation of the
            new key pair.
          format: int32
        validDays:
          type: integer
          description:
            "Valid days for the new key pair to be created. If this property\
            \ is unset, the validity days of the original key pair will be used."
          format: int32
        keyAlgorithm:
          type: string
          description:
            "Key algorithm to be used while creating a new key pair. If\
            \ this property is unset, the key algorithm of the original key pair will\
            \ be used. Supported algorithms are available through the /keyPairs/keyAlgorithms\
            \ endpoint."
        keySize:
          type: integer
          description:
            "Key size, in bits. If this property is unset, the key size\
            \ of the original key pair will be used. Supported key sizes are available\
            \ through the /keyPairs/keyAlgorithms endpoint."
          format: int32
        signatureAlgorithm:
          type: string
          description:
            "Required if the original key pair used SHA1 algorithm. If\
            \ this property is unset, the default signature algorithm of the original\
            \ key pair will be used. Supported signature algorithms are available\
            \ through the /keyPairs/keyAlgorithms endpoint."
      description: Key Pair Rotation Details
    KeyPairView:
      type: object
      properties:
        id:
          type: string
          description: "The persistent, unique ID for the certificate."
        serialNumber:
          type: string
          description: The serial number assigned by the CA.
        subjectDN:
          type: string
          description: The subject's distinguished name.
        subjectAlternativeNames:
          type: array
          description: The subject alternative names (SAN).
          items:
            type: string
        issuerDN:
          type: string
          description: The issuer's distinguished name.
        validFrom:
          type: string
          description:
            "The start date from which the item is valid, in ISO 8601 format\
            \ (UTC)."
          format: date-time
        expires:
          type: string
          description:
            "The end date up until which the item is valid, in ISO 8601\
            \ format (UTC)."
          format: date-time
        keyAlgorithm:
          type: string
          description: The public key algorithm.
        keySize:
          type: integer
          description: The public key size.
          format: int32
        signatureAlgorithm:
          type: string
          description: The signature algorithm.
        version:
          type: integer
          description: The X.509 version to which the item conforms.
          format: int32
        sha1Fingerprint:
          type: string
          description: SHA-1 fingerprint in Hex encoding.
        sha256Fingerprint:
          type: string
          description: SHA-256 fingerprint in Hex encoding.
        status:
          type: string
          description: Status of the item.
          enum:
            - VALID
            - EXPIRED
            - NOT_YET_VALID
            - REVOKED
        cryptoProvider:
          type: string
          description:
            Cryptographic Provider. This is only applicable if Hybrid HSM
            mode is true.
          enum:
            - LOCAL
            - HSM
        rotationSettings:
          $ref: "#/components/schemas/KeyPairRotationSettings"
      description: Key pair details.
    KeyPairViews:
      type: object
      properties:
        items:
          type: array
          description: The actual list of KeyPairView instances.
          items:
            $ref: "#/components/schemas/KeyPairView"
      description: A collection of KeyPairView items.
    NewKeyPairSettings:
      required:
        - commonName
        - country
        - keyAlgorithm
        - organization
        - validDays
      type: object
      properties:
        id:
          type: string
          description:
            "The persistent, unique ID for the certificate. It can be any\
            \ combination of [a-z0-9._-]. This property is system-assigned if not\
            \ specified."
        commonName:
          type: string
          description: Common name for key pair subject.
        subjectAlternativeNames:
          type: array
          description: The subject alternative names (SAN).
          items:
            type: string
        organization:
          type: string
          description: Organization.
        organizationUnit:
          type: string
          description: Organization unit.
        city:
          type: string
          description: City.
        state:
          type: string
          description: State.
        country:
          type: string
          description: Country.
        validDays:
          type: integer
          description: Number of days the key pair will be valid for.
          format: int32
        keyAlgorithm:
          type: string
          description:
            Key generation algorithm. Supported algorithms are available
            through the /keyPairs/keyAlgorithms endpoint.
        keySize:
          type: integer
          description:
            "Key size, in bits. If this property is unset, the default\
            \ size for the key algorithm will be used. Supported key sizes are available\
            \ through the /keyPairs/keyAlgorithms endpoint."
          format: int32
        signatureAlgorithm:
          type: string
          description:
            "Signature algorithm. If this property is unset, the default\
            \ signature algorithm for the key algorithm will be used. Supported signature\
            \ algorithms are available through the /keyPairs/keyAlgorithms endpoint."
        cryptoProvider:
          type: string
          description:
            Cryptographic Provider.  This is only applicable if Hybrid
            HSM mode is true.
          enum:
            - LOCAL
            - HSM
      description: Settings for creating a new key pair.
    CSRResponse:
      required:
        - fileData
      type: object
      properties:
        fileData:
          type: string
          description:
            The CSR response file data in PKCS7 format or as an X.509 certificate.
            PEM encoding (with or without the header and footer lines) is required.
            New line characters should be omitted or encoded in this value.
      description: Represents a CSR response file.
    KeyPairExportSettings:
      required:
        - password
      type: object
      properties:
        password:
          type: string
          description: The password for the key pair file that is created.
      description: Settings for exporting a key pair file from the system.
    KeyPairFile:
      required:
        - fileData
        - password
      type: object
      properties:
        id:
          type: string
          description:
            "The persistent, unique ID for the certificate. It can be any\
            \ combination of [a-z0-9._-]. This property is system-assigned if not\
            \ specified."
        fileData:
          type: string
          description:
            "Base-64 encoded PKCS12 or PEM file data. In the case of PEM,\
            \ the raw (non-base-64) data is also accepted. In BCFIPS mode, only PEM\
            \ with PBES2 and AES or Triple DES encryption is accepted and 128-bit\
            \ salt is required."
        format:
          type: string
          description:
            "Key pair file format. If specified, this field will control\
            \ what file format is expected, otherwise the format will be auto-detected.\
            \ In BCFIPS mode, only PEM is supported."
          enum:
            - PKCS12
            - PEM
        password:
          type: string
          description:
            "Password for the file. In BCFIPS mode, the password must be\
            \ at least 14 characters."
        encryptedPassword:
          type: string
          description:
            "Encrypted password for the file. Only applicable for bulk\
            \ export/import operations. For bulk import operation, either password\
            \ or encrypted password must be set."
        cryptoProvider:
          type: string
          description:
            Cryptographic Provider. This is only applicable if Hybrid HSM
            mode is true.
          enum:
            - LOCAL
            - HSM
      description: Represents the contents of a PKCS12 or PEM file.
    SpAdapterDescriptors:
      type: object
      properties:
        items:
          type: array
          description: The list of SP adapter descriptors.
          items:
            $ref: "#/components/schemas/SpAdapterDescriptor"
      description: A collection of SP adapter descriptors.
    SpAdapters:
      type: object
      properties:
        items:
          type: array
          description: The actual list of SP adapters.
          items:
            $ref: "#/components/schemas/SpAdapter"
      description: A collection of SP adapters.
    SpAdapterUrlMapping:
      type: object
      properties:
        url:
          type: string
          description:
            The URL that will be compared against the target URL. Use a
            wildcard (*) to match multiple URLs to the same adapter instance.
        adapterRef:
          $ref: "#/components/schemas/ResourceLink"
      description: SP Adapter URL Mapping
    SpAdapterUrlMappings:
      type: object
      properties:
        items:
          type: array
          description: The actual list of SP adapter URL mappings.
          items:
            $ref: "#/components/schemas/SpAdapterUrlMapping"
    SpConnections:
      type: object
      properties:
        items:
          type: array
          description: The actual list of connections.
          items:
            $ref: "#/components/schemas/SpConnection"
      description: A collection of SP connections.
    SpDefaultUrls:
      type: object
      properties:
        ssoSuccessUrl:
          type: string
          description:
            Provide the default URL you would like to send the user to
            when Single Sign On (SSO) has succeeded.
        confirmSlo:
          type: boolean
          description:
            Determines whether the user is prompted to confirm Single Logout
            (SLO). The default is false.
        sloSuccessUrl:
          type: string
          description:
            Provide the default URL you would like to send the user to
            when Single Logout (SLO) has succeeded.
      description: SP Default URLs.
    SpUrlMapping:
      type: object
      properties:
        url:
          type: string
          description:
            The URL that will be compared against the target URL. Use a
            wildcard (*) to match multiple URLs to the same adapter or connection
            instance.
        type:
          type: string
          description: The URL mapping type
          enum:
            - SP_ADAPTER
            - SP_CONNECTION
        ref:
          $ref: "#/components/schemas/ResourceLink"
      description: SP URL mapping
    SpUrlMappings:
      type: object
      properties:
        items:
          type: array
          description: The actual list of SP connection URL mappings.
          items:
            $ref: "#/components/schemas/SpUrlMapping"
    SslServerSettings:
      required:
        - adminConsoleCertRef
        - runtimeServerCertRef
      type: object
      properties:
        runtimeServerCertRef:
          $ref: "#/components/schemas/ResourceLink"
        adminConsoleCertRef:
          $ref: "#/components/schemas/ResourceLink"
        activeRuntimeServerCerts:
          type: array
          description: The active SSL Server Certificate Key pairs for Runtime Server.
          items:
            $ref: "#/components/schemas/ResourceLink"
        activeAdminConsoleCerts:
          type: array
          description:
            The active SSL Server Certificate Key pairs for PF Administrator
            Console.
          items:
            $ref: "#/components/schemas/ResourceLink"
      description: Settings for the SSL Server certificate configuration.
    StsRequestParametersContract:
      required:
        - id
        - name
        - parameters
      type: object
      properties:
        id:
          type: string
          description:
            "The ID of the Security Token Service request parameter contract.<br>Note:\
            \ Ignored for PUT requests."
        name:
          type: string
          description:
            "The name of the Security Token Service request parameter contract.<br>Note:\
            \ Ignored for PUT requests."
        parameters:
          type: array
          description:
            The list of parameters within the Security  Token Service request
            parameter contract.
          items:
            type: string
        lastModified:
          type: string
          description:
            The time at which the request parameter contract was last changed.
            This property is read only and is ignored on PUT and POST requests.
          format: date-time
      description: A Security Token Service request parameter contract.
    StsRequestParametersContracts:
      type: object
      properties:
        items:
          type: array
          description: The actual list of STS Request Parameters Contracts.
          items:
            $ref: "#/components/schemas/StsRequestParametersContract"
      description: A Collection of STS Request Parameters Contracts
    TokenGeneratorDescriptors:
      type: object
      properties:
        items:
          type: array
          description: The list of token generator descriptors.
          items:
            $ref: "#/components/schemas/TokenGeneratorDescriptor"
      description: A collection of token generator descriptors.
    TokenGenerators:
      type: object
      properties:
        items:
          type: array
          description: The actual list of token generator.
          items:
            $ref: "#/components/schemas/TokenGenerator"
      description: A collection of token generators.
    TokenProcessors:
      type: object
      properties:
        items:
          type: array
          description: The actual list of token processors.
          items:
            $ref: "#/components/schemas/TokenProcessor"
      description: A collection of token processors.
    TokenProcessorDescriptors:
      type: object
      properties:
        items:
          type: array
          description: The list of token processor descriptors.
          items:
            $ref: "#/components/schemas/TokenProcessorDescriptor"
      description: A collection of token processor descriptors.
    TokenToTokenMapping:
      required:
        - attributeContractFulfillment
        - sourceId
        - targetId
      type: object
      properties:
        attributeSources:
          type: array
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: "#/components/schemas/AttributeSourceAggregation"
        attributeContractFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of mappings from attribute names to their fulfillment
            values.
        issuanceCriteria:
          $ref: "#/components/schemas/IssuanceCriteria"
        sourceId:
          type: string
          description: The id of the Token Processor.
        targetId:
          type: string
          description: The id of the Token Generator.
        id:
          type: string
          description:
            The id of the Token Processor to Token Generator mapping. This
            field is read-only and is ignored when passed in with the payload.
        defaultTargetResource:
          type: string
          description:
            Default target URL for this Token Processor to Token Generator
            mapping configuration.
        licenseConnectionGroupAssignment:
          type: string
          description: The license connection group.
      description: A Token Processor to Token Generator Mapping.
    TokenToTokenMappings:
      type: object
      properties:
        items:
          type: array
          description: The list of Token Processor to Token Generator mappings.
          items:
            $ref: "#/components/schemas/TokenToTokenMapping"
    Version:
      type: object
      properties:
        version:
          type: string
          description: Server version.
      description: Server version.
    VirtualHostNameSettings:
      type: object
      properties:
        virtualHostNames:
          type: array
          description: List of virtual host names.
          items:
            type: string
      description: Settings for virtual host names.
    AuthorizationDetailType:
      required:
        - authorizationDetailProcessorRef
        - type
      type: object
      properties:
        id:
          type: string
          description:
            The ID of the authorization detail type. The ID will be system-assigned
            if not specified.
        description:
          type: string
          description: The description of the authorization detail type.
        type:
          type: string
          description: The authorization detail type.
        authorizationDetailProcessorRef:
          $ref: "#/components/schemas/ResourceLink"
        active:
          type: boolean
          description:
            Whether or not this authorization detail type is active. Defaults
            to true.
      description:
        The authorization detail type and the authorization detail processor
        to process the type.
    AuthorizationDetailTypes:
      type: object
      properties:
        items:
          type: array
          description: The list of the authorization detail types.
          items:
            $ref: "#/components/schemas/AuthorizationDetailType"
      description: A collection of authorization detail types.
    Issuer:
      required:
        - host
        - name
      type: object
      properties:
        id:
          type: string
          description:
            "The persistent, unique ID for the virtual issuer. It can be\
            \ any combination of [a-zA-Z0-9._-]. This property is system-assigned\
            \ if not specified."
        name:
          type: string
          description: The name of this virtual issuer with a unique value.
        description:
          type: string
          description: The description of this virtual issuer.
        host:
          type: string
          description: The hostname of this virtual issuer.
        path:
          type: string
          description: The path of this virtual issuer.
      description: The set of attributes used to configure a virtual issuer.
    Issuers:
      type: object
      properties:
        items:
          type: array
          description: The list of the virtual issuers.
          items:
            $ref: "#/components/schemas/Issuer"
      description: A collection of virtual issuers.
    ProcessorPolicyToGeneratorMapping:
      required:
        - attributeContractFulfillment
        - sourceId
        - targetId
      type: object
      properties:
        attributeSources:
          type: array
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: "#/components/schemas/AttributeSourceAggregation"
        attributeContractFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of mappings from attribute names to their fulfillment
            values.
        issuanceCriteria:
          $ref: "#/components/schemas/IssuanceCriteria"
        id:
          type: string
          description:
            The id of the Token Exchange Processor policy to Token Generator
            mapping. This field is read-only and is ignored when passed in with the
            payload.
        sourceId:
          type: string
          description: The id of the Token Exchange Processor policy.
        targetId:
          type: string
          description: The id of the Token Generator.
        licenseConnectionGroupAssignment:
          type: string
          description: The license connection group.
      description: A Token Exchange Processor policy to Token Generator Mapping.
    ProcessorPolicyToGeneratorMappings:
      type: object
      properties:
        items:
          type: array
          description:
            The list of Token Exchange Processor policy to Token Generator
            mappings.
          items:
            $ref: "#/components/schemas/ProcessorPolicyToGeneratorMapping"
    TokenExchangeGeneratorSettings:
      type: object
      properties:
        defaultGeneratorGroupRef:
          $ref: "#/components/schemas/ResourceLink"
      description: Settings for the OAuth Token Exchange Generator Groups.
    TokenExchangeGeneratorGroup:
      required:
        - generatorMappings
        - id
        - name
      type: object
      properties:
        id:
          type: string
          description: The Token Exchange Generator group ID. ID is unique.
        name:
          type: string
          description: The Token Exchange Generator group name. Name is unique.
        resourceUris:
          type: array
          description:
            The list of  resource URI's which map to this Token Exchange
            Generator group.
          items:
            type: string
        generatorMappings:
          type: array
          description:
            A list of Token Generator mapping into an OAuth 2.0 Token Exchange
            requested token type.
          items:
            $ref: "#/components/schemas/TokenExchangeGeneratorMapping"
      description:
        The set of attributes used to configure a OAuth 2.0 Token Exchange
        Generator group.
    TokenExchangeGeneratorMapping:
      required:
        - requestedTokenType
        - tokenGenerator
      type: object
      properties:
        requestedTokenType:
          type: string
          description: The Requested token type
        tokenGenerator:
          $ref: "#/components/schemas/ResourceLink"
        defaultMapping:
          type: boolean
          description:
            Whether this is the default Token Generator Mapping. Defaults
            to false if not specified.
      description:
        A Token Generator mapping into an OAuth 2.0 Token Exchange requested
        token type.
    TokenExchangeGeneratorGroups:
      type: object
      properties:
        items:
          type: array
          description: The list of OAuth 2.0 Token Exchange Generator groups.
          items:
            $ref: "#/components/schemas/TokenExchangeGeneratorGroup"
      description: A collection of OAuth 2.0 Token Exchange Generator groups.
    TokenExchangeProcessorSettings:
      type: object
      properties:
        defaultProcessorPolicyRef:
          $ref: "#/components/schemas/ResourceLink"
      description: Settings for the OAuth Token Exchange Processor Policy configuration.
    TokenExchangeProcessorAttribute:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of this attribute.
      description:
        An attribute for the OAuth 2.0 Token Exchange Processor policy
        attribute contract.
    TokenExchangeProcessorAttributeContract:
      type: object
      properties:
        coreAttributes:
          type: array
          description:
            "A list of read-only attributes (for example, subject) that\
            \ are automatically populated by PingFederate."
          items:
            $ref: "#/components/schemas/TokenExchangeProcessorAttribute"
        extendedAttributes:
          type: array
          description: A list of additional attributes.
          items:
            $ref: "#/components/schemas/TokenExchangeProcessorAttribute"
      description:
        A set of attributes exposed by an OAuth 2.0 Token Exchange Processor
        policy.
    TokenExchangeProcessorMapping:
      required:
        - attributeContractFulfillment
        - subjectTokenProcessor
        - subjectTokenType
      type: object
      properties:
        attributeSources:
          type: array
          description: A list of configured data stores to look up attributes from.
          items:
            $ref: "#/components/schemas/AttributeSourceAggregation"
        attributeContractFulfillment:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AttributeFulfillmentValue"
          description:
            A list of mappings from attribute names to their fulfillment
            values.
        issuanceCriteria:
          $ref: "#/components/schemas/IssuanceCriteria"
        subjectTokenType:
          type: string
          description: The Subject token type
        subjectTokenProcessor:
          $ref: "#/components/schemas/ResourceLink"
        actorTokenType:
          type: string
          description: The Actor token type
        actorTokenProcessor:
          $ref: "#/components/schemas/ResourceLink"
      description:
        A Token Processor(s) mapping into an OAuth 2.0 Token Exchange Processor
        policy.
    TokenExchangeProcessorPolicies:
      type: object
      properties:
        items:
          type: array
          description: The list of OAuth 2.0 Token Exchange Processor policies.
          items:
            $ref: "#/components/schemas/TokenExchangeProcessorPolicy"
      description: A collection of OAuth 2.0 Token Exchange Processor policies.
    TokenExchangeProcessorPolicy:
      required:
        - attributeContract
        - id
        - name
        - processorMappings
      type: object
      properties:
        id:
          type: string
          description: The Token Exchange processor policy ID. ID is unique.
        name:
          type: string
          description: The Token Exchange processor policy name. Name is unique.
        actorTokenRequired:
          type: boolean
          description: Require an Actor token on a OAuth 2.0 Token Exchange request.
        attributeContract:
          $ref: "#/components/schemas/TokenExchangeProcessorAttributeContract"
        processorMappings:
          type: array
          description:
            A list of Token Processor(s) mappings into an OAuth 2.0 Token
            Exchange Processor policy.
          items:
            $ref: "#/components/schemas/TokenExchangeProcessorMapping"
      description:
        The set of attributes used to configure a OAuth 2.0 Token Exchange
        processor policy.
x-original-swagger-version: "2.0"
