/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"time"
)

// checks if the KeyPairView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyPairView{}

// KeyPairView Key pair details.
type KeyPairView struct {
	// The persistent, unique ID for the certificate.
	Id *string `json:"id,omitempty" tfsdk:"id"`
	// The serial number assigned by the CA.
	SerialNumber *string `json:"serialNumber,omitempty" tfsdk:"serial_number"`
	// The subject's distinguished name.
	SubjectDN *string `json:"subjectDN,omitempty" tfsdk:"subject_dn"`
	// The subject alternative names (SAN).
	SubjectAlternativeNames []string `json:"subjectAlternativeNames,omitempty" tfsdk:"subject_alternative_names"`
	// The issuer's distinguished name.
	IssuerDN *string `json:"issuerDN,omitempty" tfsdk:"issuer_dn"`
	// The start date from which the item is valid, in ISO 8601 format (UTC).
	ValidFrom *time.Time `json:"validFrom,omitempty" tfsdk:"valid_from"`
	// The end date up until which the item is valid, in ISO 8601 format (UTC).
	Expires *time.Time `json:"expires,omitempty" tfsdk:"expires"`
	// The public key algorithm.
	KeyAlgorithm *string `json:"keyAlgorithm,omitempty" tfsdk:"key_algorithm"`
	// The public key size.
	KeySize *int64 `json:"keySize,omitempty" tfsdk:"key_size"`
	// The signature algorithm.
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tfsdk:"signature_algorithm"`
	// The X.509 version to which the item conforms.
	Version *int64 `json:"version,omitempty" tfsdk:"version"`
	// SHA-1 fingerprint in Hex encoding.
	Sha1Fingerprint *string `json:"sha1Fingerprint,omitempty" tfsdk:"sha1_fingerprint"`
	// SHA-256 fingerprint in Hex encoding.
	Sha256Fingerprint *string `json:"sha256Fingerprint,omitempty" tfsdk:"sha256_fingerprint"`
	// Status of the item.
	Status *string `json:"status,omitempty" tfsdk:"status"`
	// Cryptographic Provider. This is only applicable if Hybrid HSM mode is true.
	CryptoProvider   *string                  `json:"cryptoProvider,omitempty" tfsdk:"crypto_provider"`
	RotationSettings *KeyPairRotationSettings `json:"rotationSettings,omitempty" tfsdk:"rotation_settings"`
}

// NewKeyPairView instantiates a new KeyPairView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyPairView() *KeyPairView {
	this := KeyPairView{}
	return &this
}

// NewKeyPairViewWithDefaults instantiates a new KeyPairView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyPairViewWithDefaults() *KeyPairView {
	this := KeyPairView{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KeyPairView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KeyPairView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *KeyPairView) SetId(v string) {
	o.Id = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *KeyPairView) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairView) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *KeyPairView) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *KeyPairView) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetSubjectDN returns the SubjectDN field value if set, zero value otherwise.
func (o *KeyPairView) GetSubjectDN() string {
	if o == nil || IsNil(o.SubjectDN) {
		var ret string
		return ret
	}
	return *o.SubjectDN
}

// GetSubjectDNOk returns a tuple with the SubjectDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairView) GetSubjectDNOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectDN) {
		return nil, false
	}
	return o.SubjectDN, true
}

// HasSubjectDN returns a boolean if a field has been set.
func (o *KeyPairView) HasSubjectDN() bool {
	if o != nil && !IsNil(o.SubjectDN) {
		return true
	}

	return false
}

// SetSubjectDN gets a reference to the given string and assigns it to the SubjectDN field.
func (o *KeyPairView) SetSubjectDN(v string) {
	o.SubjectDN = &v
}

// GetSubjectAlternativeNames returns the SubjectAlternativeNames field value if set, zero value otherwise.
func (o *KeyPairView) GetSubjectAlternativeNames() []string {
	if o == nil || IsNil(o.SubjectAlternativeNames) {
		var ret []string
		return ret
	}
	return o.SubjectAlternativeNames
}

// GetSubjectAlternativeNamesOk returns a tuple with the SubjectAlternativeNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairView) GetSubjectAlternativeNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.SubjectAlternativeNames) {
		return nil, false
	}
	return o.SubjectAlternativeNames, true
}

// HasSubjectAlternativeNames returns a boolean if a field has been set.
func (o *KeyPairView) HasSubjectAlternativeNames() bool {
	if o != nil && !IsNil(o.SubjectAlternativeNames) {
		return true
	}

	return false
}

// SetSubjectAlternativeNames gets a reference to the given []string and assigns it to the SubjectAlternativeNames field.
func (o *KeyPairView) SetSubjectAlternativeNames(v []string) {
	o.SubjectAlternativeNames = v
}

// GetIssuerDN returns the IssuerDN field value if set, zero value otherwise.
func (o *KeyPairView) GetIssuerDN() string {
	if o == nil || IsNil(o.IssuerDN) {
		var ret string
		return ret
	}
	return *o.IssuerDN
}

// GetIssuerDNOk returns a tuple with the IssuerDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairView) GetIssuerDNOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerDN) {
		return nil, false
	}
	return o.IssuerDN, true
}

// HasIssuerDN returns a boolean if a field has been set.
func (o *KeyPairView) HasIssuerDN() bool {
	if o != nil && !IsNil(o.IssuerDN) {
		return true
	}

	return false
}

// SetIssuerDN gets a reference to the given string and assigns it to the IssuerDN field.
func (o *KeyPairView) SetIssuerDN(v string) {
	o.IssuerDN = &v
}

// GetValidFrom returns the ValidFrom field value if set, zero value otherwise.
func (o *KeyPairView) GetValidFrom() time.Time {
	if o == nil || IsNil(o.ValidFrom) {
		var ret time.Time
		return ret
	}
	return *o.ValidFrom
}

// GetValidFromOk returns a tuple with the ValidFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairView) GetValidFromOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ValidFrom) {
		return nil, false
	}
	return o.ValidFrom, true
}

// HasValidFrom returns a boolean if a field has been set.
func (o *KeyPairView) HasValidFrom() bool {
	if o != nil && !IsNil(o.ValidFrom) {
		return true
	}

	return false
}

// SetValidFrom gets a reference to the given time.Time and assigns it to the ValidFrom field.
func (o *KeyPairView) SetValidFrom(v time.Time) {
	o.ValidFrom = &v
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *KeyPairView) GetExpires() time.Time {
	if o == nil || IsNil(o.Expires) {
		var ret time.Time
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairView) GetExpiresOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Expires) {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *KeyPairView) HasExpires() bool {
	if o != nil && !IsNil(o.Expires) {
		return true
	}

	return false
}

// SetExpires gets a reference to the given time.Time and assigns it to the Expires field.
func (o *KeyPairView) SetExpires(v time.Time) {
	o.Expires = &v
}

// GetKeyAlgorithm returns the KeyAlgorithm field value if set, zero value otherwise.
func (o *KeyPairView) GetKeyAlgorithm() string {
	if o == nil || IsNil(o.KeyAlgorithm) {
		var ret string
		return ret
	}
	return *o.KeyAlgorithm
}

// GetKeyAlgorithmOk returns a tuple with the KeyAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairView) GetKeyAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.KeyAlgorithm) {
		return nil, false
	}
	return o.KeyAlgorithm, true
}

// HasKeyAlgorithm returns a boolean if a field has been set.
func (o *KeyPairView) HasKeyAlgorithm() bool {
	if o != nil && !IsNil(o.KeyAlgorithm) {
		return true
	}

	return false
}

// SetKeyAlgorithm gets a reference to the given string and assigns it to the KeyAlgorithm field.
func (o *KeyPairView) SetKeyAlgorithm(v string) {
	o.KeyAlgorithm = &v
}

// GetKeySize returns the KeySize field value if set, zero value otherwise.
func (o *KeyPairView) GetKeySize() int64 {
	if o == nil || IsNil(o.KeySize) {
		var ret int64
		return ret
	}
	return *o.KeySize
}

// GetKeySizeOk returns a tuple with the KeySize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairView) GetKeySizeOk() (*int64, bool) {
	if o == nil || IsNil(o.KeySize) {
		return nil, false
	}
	return o.KeySize, true
}

// HasKeySize returns a boolean if a field has been set.
func (o *KeyPairView) HasKeySize() bool {
	if o != nil && !IsNil(o.KeySize) {
		return true
	}

	return false
}

// SetKeySize gets a reference to the given int64 and assigns it to the KeySize field.
func (o *KeyPairView) SetKeySize(v int64) {
	o.KeySize = &v
}

// GetSignatureAlgorithm returns the SignatureAlgorithm field value if set, zero value otherwise.
func (o *KeyPairView) GetSignatureAlgorithm() string {
	if o == nil || IsNil(o.SignatureAlgorithm) {
		var ret string
		return ret
	}
	return *o.SignatureAlgorithm
}

// GetSignatureAlgorithmOk returns a tuple with the SignatureAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairView) GetSignatureAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.SignatureAlgorithm) {
		return nil, false
	}
	return o.SignatureAlgorithm, true
}

// HasSignatureAlgorithm returns a boolean if a field has been set.
func (o *KeyPairView) HasSignatureAlgorithm() bool {
	if o != nil && !IsNil(o.SignatureAlgorithm) {
		return true
	}

	return false
}

// SetSignatureAlgorithm gets a reference to the given string and assigns it to the SignatureAlgorithm field.
func (o *KeyPairView) SetSignatureAlgorithm(v string) {
	o.SignatureAlgorithm = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *KeyPairView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *KeyPairView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *KeyPairView) SetVersion(v int64) {
	o.Version = &v
}

// GetSha1Fingerprint returns the Sha1Fingerprint field value if set, zero value otherwise.
func (o *KeyPairView) GetSha1Fingerprint() string {
	if o == nil || IsNil(o.Sha1Fingerprint) {
		var ret string
		return ret
	}
	return *o.Sha1Fingerprint
}

// GetSha1FingerprintOk returns a tuple with the Sha1Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairView) GetSha1FingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.Sha1Fingerprint) {
		return nil, false
	}
	return o.Sha1Fingerprint, true
}

// HasSha1Fingerprint returns a boolean if a field has been set.
func (o *KeyPairView) HasSha1Fingerprint() bool {
	if o != nil && !IsNil(o.Sha1Fingerprint) {
		return true
	}

	return false
}

// SetSha1Fingerprint gets a reference to the given string and assigns it to the Sha1Fingerprint field.
func (o *KeyPairView) SetSha1Fingerprint(v string) {
	o.Sha1Fingerprint = &v
}

// GetSha256Fingerprint returns the Sha256Fingerprint field value if set, zero value otherwise.
func (o *KeyPairView) GetSha256Fingerprint() string {
	if o == nil || IsNil(o.Sha256Fingerprint) {
		var ret string
		return ret
	}
	return *o.Sha256Fingerprint
}

// GetSha256FingerprintOk returns a tuple with the Sha256Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairView) GetSha256FingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.Sha256Fingerprint) {
		return nil, false
	}
	return o.Sha256Fingerprint, true
}

// HasSha256Fingerprint returns a boolean if a field has been set.
func (o *KeyPairView) HasSha256Fingerprint() bool {
	if o != nil && !IsNil(o.Sha256Fingerprint) {
		return true
	}

	return false
}

// SetSha256Fingerprint gets a reference to the given string and assigns it to the Sha256Fingerprint field.
func (o *KeyPairView) SetSha256Fingerprint(v string) {
	o.Sha256Fingerprint = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *KeyPairView) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairView) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *KeyPairView) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *KeyPairView) SetStatus(v string) {
	o.Status = &v
}

// GetCryptoProvider returns the CryptoProvider field value if set, zero value otherwise.
func (o *KeyPairView) GetCryptoProvider() string {
	if o == nil || IsNil(o.CryptoProvider) {
		var ret string
		return ret
	}
	return *o.CryptoProvider
}

// GetCryptoProviderOk returns a tuple with the CryptoProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairView) GetCryptoProviderOk() (*string, bool) {
	if o == nil || IsNil(o.CryptoProvider) {
		return nil, false
	}
	return o.CryptoProvider, true
}

// HasCryptoProvider returns a boolean if a field has been set.
func (o *KeyPairView) HasCryptoProvider() bool {
	if o != nil && !IsNil(o.CryptoProvider) {
		return true
	}

	return false
}

// SetCryptoProvider gets a reference to the given string and assigns it to the CryptoProvider field.
func (o *KeyPairView) SetCryptoProvider(v string) {
	o.CryptoProvider = &v
}

// GetRotationSettings returns the RotationSettings field value if set, zero value otherwise.
func (o *KeyPairView) GetRotationSettings() KeyPairRotationSettings {
	if o == nil || IsNil(o.RotationSettings) {
		var ret KeyPairRotationSettings
		return ret
	}
	return *o.RotationSettings
}

// GetRotationSettingsOk returns a tuple with the RotationSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairView) GetRotationSettingsOk() (*KeyPairRotationSettings, bool) {
	if o == nil || IsNil(o.RotationSettings) {
		return nil, false
	}
	return o.RotationSettings, true
}

// HasRotationSettings returns a boolean if a field has been set.
func (o *KeyPairView) HasRotationSettings() bool {
	if o != nil && !IsNil(o.RotationSettings) {
		return true
	}

	return false
}

// SetRotationSettings gets a reference to the given KeyPairRotationSettings and assigns it to the RotationSettings field.
func (o *KeyPairView) SetRotationSettings(v KeyPairRotationSettings) {
	o.RotationSettings = &v
}

func (o KeyPairView) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyPairView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.SubjectDN) {
		toSerialize["subjectDN"] = o.SubjectDN
	}
	if !IsNil(o.SubjectAlternativeNames) {
		toSerialize["subjectAlternativeNames"] = o.SubjectAlternativeNames
	}
	if !IsNil(o.IssuerDN) {
		toSerialize["issuerDN"] = o.IssuerDN
	}
	if !IsNil(o.ValidFrom) {
		toSerialize["validFrom"] = o.ValidFrom
	}
	if !IsNil(o.Expires) {
		toSerialize["expires"] = o.Expires
	}
	if !IsNil(o.KeyAlgorithm) {
		toSerialize["keyAlgorithm"] = o.KeyAlgorithm
	}
	if !IsNil(o.KeySize) {
		toSerialize["keySize"] = o.KeySize
	}
	if !IsNil(o.SignatureAlgorithm) {
		toSerialize["signatureAlgorithm"] = o.SignatureAlgorithm
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Sha1Fingerprint) {
		toSerialize["sha1Fingerprint"] = o.Sha1Fingerprint
	}
	if !IsNil(o.Sha256Fingerprint) {
		toSerialize["sha256Fingerprint"] = o.Sha256Fingerprint
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CryptoProvider) {
		toSerialize["cryptoProvider"] = o.CryptoProvider
	}
	if !IsNil(o.RotationSettings) {
		toSerialize["rotationSettings"] = o.RotationSettings
	}
	return toSerialize, nil
}

type NullableKeyPairView struct {
	value *KeyPairView
	isSet bool
}

func (v NullableKeyPairView) Get() *KeyPairView {
	return v.value
}

func (v *NullableKeyPairView) Set(val *KeyPairView) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyPairView) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyPairView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyPairView(val *KeyPairView) *NullableKeyPairView {
	return &NullableKeyPairView{value: val, isSet: true}
}

func (v NullableKeyPairView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyPairView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
