/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SpBrowserSsoAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpBrowserSsoAttribute{}

// SpBrowserSsoAttribute An attribute for the SP Browser SSO attribute contract.
type SpBrowserSsoAttribute struct {
	// The name of this attribute.
	Name string `json:"name" tfsdk:"name"`
	// The SAML Name Format for the attribute.
	NameFormat *string `json:"nameFormat,omitempty" tfsdk:"name_format"`
}

type _SpBrowserSsoAttribute SpBrowserSsoAttribute

// NewSpBrowserSsoAttribute instantiates a new SpBrowserSsoAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpBrowserSsoAttribute(name string) *SpBrowserSsoAttribute {
	this := SpBrowserSsoAttribute{}
	this.Name = name
	return &this
}

// NewSpBrowserSsoAttributeWithDefaults instantiates a new SpBrowserSsoAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpBrowserSsoAttributeWithDefaults() *SpBrowserSsoAttribute {
	this := SpBrowserSsoAttribute{}
	return &this
}

// GetName returns the Name field value
func (o *SpBrowserSsoAttribute) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SpBrowserSsoAttribute) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SpBrowserSsoAttribute) SetName(v string) {
	o.Name = v
}

// GetNameFormat returns the NameFormat field value if set, zero value otherwise.
func (o *SpBrowserSsoAttribute) GetNameFormat() string {
	if o == nil || IsNil(o.NameFormat) {
		var ret string
		return ret
	}
	return *o.NameFormat
}

// GetNameFormatOk returns a tuple with the NameFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpBrowserSsoAttribute) GetNameFormatOk() (*string, bool) {
	if o == nil || IsNil(o.NameFormat) {
		return nil, false
	}
	return o.NameFormat, true
}

// HasNameFormat returns a boolean if a field has been set.
func (o *SpBrowserSsoAttribute) HasNameFormat() bool {
	if o != nil && !IsNil(o.NameFormat) {
		return true
	}

	return false
}

// SetNameFormat gets a reference to the given string and assigns it to the NameFormat field.
func (o *SpBrowserSsoAttribute) SetNameFormat(v string) {
	o.NameFormat = &v
}

func (o SpBrowserSsoAttribute) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpBrowserSsoAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.NameFormat) {
		toSerialize["nameFormat"] = o.NameFormat
	}
	return toSerialize, nil
}

func (o *SpBrowserSsoAttribute) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSpBrowserSsoAttribute := _SpBrowserSsoAttribute{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varSpBrowserSsoAttribute)

	if err != nil {
		return err
	}

	*o = SpBrowserSsoAttribute(varSpBrowserSsoAttribute)

	return err
}

type NullableSpBrowserSsoAttribute struct {
	value *SpBrowserSsoAttribute
	isSet bool
}

func (v NullableSpBrowserSsoAttribute) Get() *SpBrowserSsoAttribute {
	return v.value
}

func (v *NullableSpBrowserSsoAttribute) Set(val *SpBrowserSsoAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableSpBrowserSsoAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableSpBrowserSsoAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpBrowserSsoAttribute(val *SpBrowserSsoAttribute) *NullableSpBrowserSsoAttribute {
	return &NullableSpBrowserSsoAttribute{value: val, isSet: true}
}

func (v NullableSpBrowserSsoAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpBrowserSsoAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
