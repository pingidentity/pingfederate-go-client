/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the NotificationSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationSettings{}

// NotificationSettings Settings for notifications relating to licensing and certificate expiration.
type NotificationSettings struct {
	LicenseEvents          *LicenseEventNotificationSettings          `json:"licenseEvents,omitempty" tfsdk:"license_events"`
	CertificateExpirations *CertificateExpirationNotificationSettings `json:"certificateExpirations,omitempty" tfsdk:"certificate_expirations"`
	// Determines whether admin users are notified through email when their account is changed.
	NotifyAdminUserPasswordChanges         *bool                              `json:"notifyAdminUserPasswordChanges,omitempty" tfsdk:"notify_admin_user_password_changes"`
	AccountChangesNotificationPublisherRef *ResourceLink                      `json:"accountChangesNotificationPublisherRef,omitempty" tfsdk:"account_changes_notification_publisher_ref"`
	MetadataNotificationSettings           *MetadataEventNotificationSettings `json:"metadataNotificationSettings,omitempty" tfsdk:"metadata_notification_settings"`
}

// NewNotificationSettings instantiates a new NotificationSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationSettings() *NotificationSettings {
	this := NotificationSettings{}
	return &this
}

// NewNotificationSettingsWithDefaults instantiates a new NotificationSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationSettingsWithDefaults() *NotificationSettings {
	this := NotificationSettings{}
	return &this
}

// GetLicenseEvents returns the LicenseEvents field value if set, zero value otherwise.
func (o *NotificationSettings) GetLicenseEvents() LicenseEventNotificationSettings {
	if o == nil || IsNil(o.LicenseEvents) {
		var ret LicenseEventNotificationSettings
		return ret
	}
	return *o.LicenseEvents
}

// GetLicenseEventsOk returns a tuple with the LicenseEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSettings) GetLicenseEventsOk() (*LicenseEventNotificationSettings, bool) {
	if o == nil || IsNil(o.LicenseEvents) {
		return nil, false
	}
	return o.LicenseEvents, true
}

// HasLicenseEvents returns a boolean if a field has been set.
func (o *NotificationSettings) HasLicenseEvents() bool {
	if o != nil && !IsNil(o.LicenseEvents) {
		return true
	}

	return false
}

// SetLicenseEvents gets a reference to the given LicenseEventNotificationSettings and assigns it to the LicenseEvents field.
func (o *NotificationSettings) SetLicenseEvents(v LicenseEventNotificationSettings) {
	o.LicenseEvents = &v
}

// GetCertificateExpirations returns the CertificateExpirations field value if set, zero value otherwise.
func (o *NotificationSettings) GetCertificateExpirations() CertificateExpirationNotificationSettings {
	if o == nil || IsNil(o.CertificateExpirations) {
		var ret CertificateExpirationNotificationSettings
		return ret
	}
	return *o.CertificateExpirations
}

// GetCertificateExpirationsOk returns a tuple with the CertificateExpirations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSettings) GetCertificateExpirationsOk() (*CertificateExpirationNotificationSettings, bool) {
	if o == nil || IsNil(o.CertificateExpirations) {
		return nil, false
	}
	return o.CertificateExpirations, true
}

// HasCertificateExpirations returns a boolean if a field has been set.
func (o *NotificationSettings) HasCertificateExpirations() bool {
	if o != nil && !IsNil(o.CertificateExpirations) {
		return true
	}

	return false
}

// SetCertificateExpirations gets a reference to the given CertificateExpirationNotificationSettings and assigns it to the CertificateExpirations field.
func (o *NotificationSettings) SetCertificateExpirations(v CertificateExpirationNotificationSettings) {
	o.CertificateExpirations = &v
}

// GetNotifyAdminUserPasswordChanges returns the NotifyAdminUserPasswordChanges field value if set, zero value otherwise.
func (o *NotificationSettings) GetNotifyAdminUserPasswordChanges() bool {
	if o == nil || IsNil(o.NotifyAdminUserPasswordChanges) {
		var ret bool
		return ret
	}
	return *o.NotifyAdminUserPasswordChanges
}

// GetNotifyAdminUserPasswordChangesOk returns a tuple with the NotifyAdminUserPasswordChanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSettings) GetNotifyAdminUserPasswordChangesOk() (*bool, bool) {
	if o == nil || IsNil(o.NotifyAdminUserPasswordChanges) {
		return nil, false
	}
	return o.NotifyAdminUserPasswordChanges, true
}

// HasNotifyAdminUserPasswordChanges returns a boolean if a field has been set.
func (o *NotificationSettings) HasNotifyAdminUserPasswordChanges() bool {
	if o != nil && !IsNil(o.NotifyAdminUserPasswordChanges) {
		return true
	}

	return false
}

// SetNotifyAdminUserPasswordChanges gets a reference to the given bool and assigns it to the NotifyAdminUserPasswordChanges field.
func (o *NotificationSettings) SetNotifyAdminUserPasswordChanges(v bool) {
	o.NotifyAdminUserPasswordChanges = &v
}

// GetAccountChangesNotificationPublisherRef returns the AccountChangesNotificationPublisherRef field value if set, zero value otherwise.
func (o *NotificationSettings) GetAccountChangesNotificationPublisherRef() ResourceLink {
	if o == nil || IsNil(o.AccountChangesNotificationPublisherRef) {
		var ret ResourceLink
		return ret
	}
	return *o.AccountChangesNotificationPublisherRef
}

// GetAccountChangesNotificationPublisherRefOk returns a tuple with the AccountChangesNotificationPublisherRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSettings) GetAccountChangesNotificationPublisherRefOk() (*ResourceLink, bool) {
	if o == nil || IsNil(o.AccountChangesNotificationPublisherRef) {
		return nil, false
	}
	return o.AccountChangesNotificationPublisherRef, true
}

// HasAccountChangesNotificationPublisherRef returns a boolean if a field has been set.
func (o *NotificationSettings) HasAccountChangesNotificationPublisherRef() bool {
	if o != nil && !IsNil(o.AccountChangesNotificationPublisherRef) {
		return true
	}

	return false
}

// SetAccountChangesNotificationPublisherRef gets a reference to the given ResourceLink and assigns it to the AccountChangesNotificationPublisherRef field.
func (o *NotificationSettings) SetAccountChangesNotificationPublisherRef(v ResourceLink) {
	o.AccountChangesNotificationPublisherRef = &v
}

// GetMetadataNotificationSettings returns the MetadataNotificationSettings field value if set, zero value otherwise.
func (o *NotificationSettings) GetMetadataNotificationSettings() MetadataEventNotificationSettings {
	if o == nil || IsNil(o.MetadataNotificationSettings) {
		var ret MetadataEventNotificationSettings
		return ret
	}
	return *o.MetadataNotificationSettings
}

// GetMetadataNotificationSettingsOk returns a tuple with the MetadataNotificationSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSettings) GetMetadataNotificationSettingsOk() (*MetadataEventNotificationSettings, bool) {
	if o == nil || IsNil(o.MetadataNotificationSettings) {
		return nil, false
	}
	return o.MetadataNotificationSettings, true
}

// HasMetadataNotificationSettings returns a boolean if a field has been set.
func (o *NotificationSettings) HasMetadataNotificationSettings() bool {
	if o != nil && !IsNil(o.MetadataNotificationSettings) {
		return true
	}

	return false
}

// SetMetadataNotificationSettings gets a reference to the given MetadataEventNotificationSettings and assigns it to the MetadataNotificationSettings field.
func (o *NotificationSettings) SetMetadataNotificationSettings(v MetadataEventNotificationSettings) {
	o.MetadataNotificationSettings = &v
}

func (o NotificationSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LicenseEvents) {
		toSerialize["licenseEvents"] = o.LicenseEvents
	}
	if !IsNil(o.CertificateExpirations) {
		toSerialize["certificateExpirations"] = o.CertificateExpirations
	}
	if !IsNil(o.NotifyAdminUserPasswordChanges) {
		toSerialize["notifyAdminUserPasswordChanges"] = o.NotifyAdminUserPasswordChanges
	}
	if !IsNil(o.AccountChangesNotificationPublisherRef) {
		toSerialize["accountChangesNotificationPublisherRef"] = o.AccountChangesNotificationPublisherRef
	}
	if !IsNil(o.MetadataNotificationSettings) {
		toSerialize["metadataNotificationSettings"] = o.MetadataNotificationSettings
	}
	return toSerialize, nil
}

type NullableNotificationSettings struct {
	value *NotificationSettings
	isSet bool
}

func (v NullableNotificationSettings) Get() *NotificationSettings {
	return v.value
}

func (v *NullableNotificationSettings) Set(val *NotificationSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationSettings(val *NotificationSettings) *NullableNotificationSettings {
	return &NullableNotificationSettings{value: val, isSet: true}
}

func (v NullableNotificationSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
