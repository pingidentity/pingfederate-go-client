/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AttributeRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttributeRules{}

// AttributeRules A collection of attribute rules
type AttributeRules struct {
	// When all the rules fail, you may choose to default to the general success action or fail. Default to success.
	FallbackToSuccess *bool `json:"fallbackToSuccess,omitempty" tfsdk:"fallback_to_success"`
	// The actual list of attribute rules.
	Items []AttributeRule `json:"items,omitempty" tfsdk:"items"`
}

// NewAttributeRules instantiates a new AttributeRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttributeRules() *AttributeRules {
	this := AttributeRules{}
	return &this
}

// NewAttributeRulesWithDefaults instantiates a new AttributeRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributeRulesWithDefaults() *AttributeRules {
	this := AttributeRules{}
	return &this
}

// GetFallbackToSuccess returns the FallbackToSuccess field value if set, zero value otherwise.
func (o *AttributeRules) GetFallbackToSuccess() bool {
	if o == nil || IsNil(o.FallbackToSuccess) {
		var ret bool
		return ret
	}
	return *o.FallbackToSuccess
}

// GetFallbackToSuccessOk returns a tuple with the FallbackToSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeRules) GetFallbackToSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.FallbackToSuccess) {
		return nil, false
	}
	return o.FallbackToSuccess, true
}

// HasFallbackToSuccess returns a boolean if a field has been set.
func (o *AttributeRules) HasFallbackToSuccess() bool {
	if o != nil && !IsNil(o.FallbackToSuccess) {
		return true
	}

	return false
}

// SetFallbackToSuccess gets a reference to the given bool and assigns it to the FallbackToSuccess field.
func (o *AttributeRules) SetFallbackToSuccess(v bool) {
	o.FallbackToSuccess = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *AttributeRules) GetItems() []AttributeRule {
	if o == nil || IsNil(o.Items) {
		var ret []AttributeRule
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeRules) GetItemsOk() ([]AttributeRule, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *AttributeRules) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []AttributeRule and assigns it to the Items field.
func (o *AttributeRules) SetItems(v []AttributeRule) {
	o.Items = v
}

func (o AttributeRules) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttributeRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FallbackToSuccess) {
		toSerialize["fallbackToSuccess"] = o.FallbackToSuccess
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return toSerialize, nil
}

type NullableAttributeRules struct {
	value *AttributeRules
	isSet bool
}

func (v NullableAttributeRules) Get() *AttributeRules {
	return v.value
}

func (v *NullableAttributeRules) Set(val *AttributeRules) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeRules) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeRules(val *AttributeRules) *NullableAttributeRules {
	return &NullableAttributeRules{value: val, isSet: true}
}

func (v NullableAttributeRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
