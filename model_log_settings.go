/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the LogSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogSettings{}

// LogSettings Settings related to server logging.
type LogSettings struct {
	// The log categories defined for the system and whether they are enabled. On a PUT request, if a category is not included in the list, it will be disabled.
	LogCategories []LogCategorySettings `json:"logCategories,omitempty" tfsdk:"log_categories"`
}

// NewLogSettings instantiates a new LogSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogSettings() *LogSettings {
	this := LogSettings{}
	return &this
}

// NewLogSettingsWithDefaults instantiates a new LogSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogSettingsWithDefaults() *LogSettings {
	this := LogSettings{}
	return &this
}

// GetLogCategories returns the LogCategories field value if set, zero value otherwise.
func (o *LogSettings) GetLogCategories() []LogCategorySettings {
	if o == nil || IsNil(o.LogCategories) {
		var ret []LogCategorySettings
		return ret
	}
	return o.LogCategories
}

// GetLogCategoriesOk returns a tuple with the LogCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSettings) GetLogCategoriesOk() ([]LogCategorySettings, bool) {
	if o == nil || IsNil(o.LogCategories) {
		return nil, false
	}
	return o.LogCategories, true
}

// HasLogCategories returns a boolean if a field has been set.
func (o *LogSettings) HasLogCategories() bool {
	if o != nil && !IsNil(o.LogCategories) {
		return true
	}

	return false
}

// SetLogCategories gets a reference to the given []LogCategorySettings and assigns it to the LogCategories field.
func (o *LogSettings) SetLogCategories(v []LogCategorySettings) {
	o.LogCategories = v
}

func (o LogSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LogCategories) {
		toSerialize["logCategories"] = o.LogCategories
	}
	return toSerialize, nil
}

type NullableLogSettings struct {
	value *LogSettings
	isSet bool
}

func (v NullableLogSettings) Get() *LogSettings {
	return v.value
}

func (v *NullableLogSettings) Set(val *LogSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableLogSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableLogSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogSettings(val *LogSettings) *NullableLogSettings {
	return &NullableLogSettings{value: val, isSet: true}
}

func (v NullableLogSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
