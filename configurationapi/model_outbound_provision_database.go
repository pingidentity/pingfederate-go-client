/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the OutboundProvisionDatabase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutboundProvisionDatabase{}

// OutboundProvisionDatabase The settings for database used internally to facilitate outbound provisioning. The database stores state of synchronization between the source data store and the target data store.
type OutboundProvisionDatabase struct {
	DataStoreRef ResourceLink `json:"dataStoreRef" tfsdk:"data_store_ref"`
	// The synchronization frequency in seconds. The default value is 60.
	SynchronizationFrequency *int64 `json:"synchronizationFrequency,omitempty" tfsdk:"synchronization_frequency"`
}

type _OutboundProvisionDatabase OutboundProvisionDatabase

// NewOutboundProvisionDatabase instantiates a new OutboundProvisionDatabase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutboundProvisionDatabase(dataStoreRef ResourceLink) *OutboundProvisionDatabase {
	this := OutboundProvisionDatabase{}
	this.DataStoreRef = dataStoreRef
	return &this
}

// NewOutboundProvisionDatabaseWithDefaults instantiates a new OutboundProvisionDatabase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutboundProvisionDatabaseWithDefaults() *OutboundProvisionDatabase {
	this := OutboundProvisionDatabase{}
	return &this
}

// GetDataStoreRef returns the DataStoreRef field value
func (o *OutboundProvisionDatabase) GetDataStoreRef() ResourceLink {
	if o == nil {
		var ret ResourceLink
		return ret
	}

	return o.DataStoreRef
}

// GetDataStoreRefOk returns a tuple with the DataStoreRef field value
// and a boolean to check if the value has been set.
func (o *OutboundProvisionDatabase) GetDataStoreRefOk() (*ResourceLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataStoreRef, true
}

// SetDataStoreRef sets field value
func (o *OutboundProvisionDatabase) SetDataStoreRef(v ResourceLink) {
	o.DataStoreRef = v
}

// GetSynchronizationFrequency returns the SynchronizationFrequency field value if set, zero value otherwise.
func (o *OutboundProvisionDatabase) GetSynchronizationFrequency() int64 {
	if o == nil || IsNil(o.SynchronizationFrequency) {
		var ret int64
		return ret
	}
	return *o.SynchronizationFrequency
}

// GetSynchronizationFrequencyOk returns a tuple with the SynchronizationFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutboundProvisionDatabase) GetSynchronizationFrequencyOk() (*int64, bool) {
	if o == nil || IsNil(o.SynchronizationFrequency) {
		return nil, false
	}
	return o.SynchronizationFrequency, true
}

// HasSynchronizationFrequency returns a boolean if a field has been set.
func (o *OutboundProvisionDatabase) HasSynchronizationFrequency() bool {
	if o != nil && !IsNil(o.SynchronizationFrequency) {
		return true
	}

	return false
}

// SetSynchronizationFrequency gets a reference to the given int64 and assigns it to the SynchronizationFrequency field.
func (o *OutboundProvisionDatabase) SetSynchronizationFrequency(v int64) {
	o.SynchronizationFrequency = &v
}

func (o OutboundProvisionDatabase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutboundProvisionDatabase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dataStoreRef"] = o.DataStoreRef
	if !IsNil(o.SynchronizationFrequency) {
		toSerialize["synchronizationFrequency"] = o.SynchronizationFrequency
	}
	return toSerialize, nil
}

func (o *OutboundProvisionDatabase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dataStoreRef",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOutboundProvisionDatabase := _OutboundProvisionDatabase{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varOutboundProvisionDatabase)

	if err != nil {
		return err
	}

	*o = OutboundProvisionDatabase(varOutboundProvisionDatabase)

	return err
}

type NullableOutboundProvisionDatabase struct {
	value *OutboundProvisionDatabase
	isSet bool
}

func (v NullableOutboundProvisionDatabase) Get() *OutboundProvisionDatabase {
	return v.value
}

func (v *NullableOutboundProvisionDatabase) Set(val *OutboundProvisionDatabase) {
	v.value = val
	v.isSet = true
}

func (v NullableOutboundProvisionDatabase) IsSet() bool {
	return v.isSet
}

func (v *NullableOutboundProvisionDatabase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutboundProvisionDatabase(val *OutboundProvisionDatabase) *NullableOutboundProvisionDatabase {
	return &NullableOutboundProvisionDatabase{value: val, isSet: true}
}

func (v NullableOutboundProvisionDatabase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutboundProvisionDatabase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
