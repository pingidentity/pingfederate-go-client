/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"time"
)

// checks if the ConnectionGroupLicenseView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionGroupLicenseView{}

// ConnectionGroupLicenseView Connection group license information.
type ConnectionGroupLicenseView struct {
	// Group name from the license file.
	Name *string `json:"name,omitempty" tfsdk:"name"`
	// Maximum number of connections permitted under the group.
	ConnectionCount *int64 `json:"connectionCount,omitempty" tfsdk:"connection_count"`
	// Start date for the group.
	StartDate *time.Time `json:"startDate,omitempty" tfsdk:"start_date"`
	// End date for the group.
	EndDate *time.Time `json:"endDate,omitempty" tfsdk:"end_date"`
}

// NewConnectionGroupLicenseView instantiates a new ConnectionGroupLicenseView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionGroupLicenseView() *ConnectionGroupLicenseView {
	this := ConnectionGroupLicenseView{}
	return &this
}

// NewConnectionGroupLicenseViewWithDefaults instantiates a new ConnectionGroupLicenseView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionGroupLicenseViewWithDefaults() *ConnectionGroupLicenseView {
	this := ConnectionGroupLicenseView{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConnectionGroupLicenseView) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionGroupLicenseView) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConnectionGroupLicenseView) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConnectionGroupLicenseView) SetName(v string) {
	o.Name = &v
}

// GetConnectionCount returns the ConnectionCount field value if set, zero value otherwise.
func (o *ConnectionGroupLicenseView) GetConnectionCount() int64 {
	if o == nil || IsNil(o.ConnectionCount) {
		var ret int64
		return ret
	}
	return *o.ConnectionCount
}

// GetConnectionCountOk returns a tuple with the ConnectionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionGroupLicenseView) GetConnectionCountOk() (*int64, bool) {
	if o == nil || IsNil(o.ConnectionCount) {
		return nil, false
	}
	return o.ConnectionCount, true
}

// HasConnectionCount returns a boolean if a field has been set.
func (o *ConnectionGroupLicenseView) HasConnectionCount() bool {
	if o != nil && !IsNil(o.ConnectionCount) {
		return true
	}

	return false
}

// SetConnectionCount gets a reference to the given int64 and assigns it to the ConnectionCount field.
func (o *ConnectionGroupLicenseView) SetConnectionCount(v int64) {
	o.ConnectionCount = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ConnectionGroupLicenseView) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionGroupLicenseView) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ConnectionGroupLicenseView) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *ConnectionGroupLicenseView) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ConnectionGroupLicenseView) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionGroupLicenseView) GetEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ConnectionGroupLicenseView) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *ConnectionGroupLicenseView) SetEndDate(v time.Time) {
	o.EndDate = &v
}

func (o ConnectionGroupLicenseView) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionGroupLicenseView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ConnectionCount) {
		toSerialize["connectionCount"] = o.ConnectionCount
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	return toSerialize, nil
}

type NullableConnectionGroupLicenseView struct {
	value *ConnectionGroupLicenseView
	isSet bool
}

func (v NullableConnectionGroupLicenseView) Get() *ConnectionGroupLicenseView {
	return v.value
}

func (v *NullableConnectionGroupLicenseView) Set(val *ConnectionGroupLicenseView) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionGroupLicenseView) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionGroupLicenseView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionGroupLicenseView(val *ConnectionGroupLicenseView) *NullableConnectionGroupLicenseView {
	return &NullableConnectionGroupLicenseView{value: val, isSet: true}
}

func (v NullableConnectionGroupLicenseView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionGroupLicenseView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
