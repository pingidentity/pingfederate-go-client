/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the SaasPluginDescriptor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SaasPluginDescriptor{}

// SaasPluginDescriptor A SaaS Plugin.
type SaasPluginDescriptor struct {
	// The SaaS plugin type.
	Id *string `json:"id,omitempty" tfsdk:"id"`
	// The SaaS plugin description.
	Description      *string                 `json:"description,omitempty" tfsdk:"description"`
	ConfigDescriptor *PluginConfigDescriptor `json:"configDescriptor,omitempty" tfsdk:"config_descriptor"`
	// The SaaS plugin attribute list for mapping from the local data store into Fields specified by the service provide.
	SaasPluginFieldInfoDescriptors []SaasPluginFieldInfoDescriptor `json:"saasPluginFieldInfoDescriptors,omitempty" tfsdk:"saas_plugin_field_info_descriptors"`
}

// NewSaasPluginDescriptor instantiates a new SaasPluginDescriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSaasPluginDescriptor() *SaasPluginDescriptor {
	this := SaasPluginDescriptor{}
	return &this
}

// NewSaasPluginDescriptorWithDefaults instantiates a new SaasPluginDescriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSaasPluginDescriptorWithDefaults() *SaasPluginDescriptor {
	this := SaasPluginDescriptor{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SaasPluginDescriptor) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasPluginDescriptor) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SaasPluginDescriptor) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SaasPluginDescriptor) SetId(v string) {
	o.Id = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SaasPluginDescriptor) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasPluginDescriptor) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SaasPluginDescriptor) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SaasPluginDescriptor) SetDescription(v string) {
	o.Description = &v
}

// GetConfigDescriptor returns the ConfigDescriptor field value if set, zero value otherwise.
func (o *SaasPluginDescriptor) GetConfigDescriptor() PluginConfigDescriptor {
	if o == nil || IsNil(o.ConfigDescriptor) {
		var ret PluginConfigDescriptor
		return ret
	}
	return *o.ConfigDescriptor
}

// GetConfigDescriptorOk returns a tuple with the ConfigDescriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasPluginDescriptor) GetConfigDescriptorOk() (*PluginConfigDescriptor, bool) {
	if o == nil || IsNil(o.ConfigDescriptor) {
		return nil, false
	}
	return o.ConfigDescriptor, true
}

// HasConfigDescriptor returns a boolean if a field has been set.
func (o *SaasPluginDescriptor) HasConfigDescriptor() bool {
	if o != nil && !IsNil(o.ConfigDescriptor) {
		return true
	}

	return false
}

// SetConfigDescriptor gets a reference to the given PluginConfigDescriptor and assigns it to the ConfigDescriptor field.
func (o *SaasPluginDescriptor) SetConfigDescriptor(v PluginConfigDescriptor) {
	o.ConfigDescriptor = &v
}

// GetSaasPluginFieldInfoDescriptors returns the SaasPluginFieldInfoDescriptors field value if set, zero value otherwise.
func (o *SaasPluginDescriptor) GetSaasPluginFieldInfoDescriptors() []SaasPluginFieldInfoDescriptor {
	if o == nil || IsNil(o.SaasPluginFieldInfoDescriptors) {
		var ret []SaasPluginFieldInfoDescriptor
		return ret
	}
	return o.SaasPluginFieldInfoDescriptors
}

// GetSaasPluginFieldInfoDescriptorsOk returns a tuple with the SaasPluginFieldInfoDescriptors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasPluginDescriptor) GetSaasPluginFieldInfoDescriptorsOk() ([]SaasPluginFieldInfoDescriptor, bool) {
	if o == nil || IsNil(o.SaasPluginFieldInfoDescriptors) {
		return nil, false
	}
	return o.SaasPluginFieldInfoDescriptors, true
}

// HasSaasPluginFieldInfoDescriptors returns a boolean if a field has been set.
func (o *SaasPluginDescriptor) HasSaasPluginFieldInfoDescriptors() bool {
	if o != nil && !IsNil(o.SaasPluginFieldInfoDescriptors) {
		return true
	}

	return false
}

// SetSaasPluginFieldInfoDescriptors gets a reference to the given []SaasPluginFieldInfoDescriptor and assigns it to the SaasPluginFieldInfoDescriptors field.
func (o *SaasPluginDescriptor) SetSaasPluginFieldInfoDescriptors(v []SaasPluginFieldInfoDescriptor) {
	o.SaasPluginFieldInfoDescriptors = v
}

func (o SaasPluginDescriptor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SaasPluginDescriptor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ConfigDescriptor) {
		toSerialize["configDescriptor"] = o.ConfigDescriptor
	}
	if !IsNil(o.SaasPluginFieldInfoDescriptors) {
		toSerialize["saasPluginFieldInfoDescriptors"] = o.SaasPluginFieldInfoDescriptors
	}
	return toSerialize, nil
}

type NullableSaasPluginDescriptor struct {
	value *SaasPluginDescriptor
	isSet bool
}

func (v NullableSaasPluginDescriptor) Get() *SaasPluginDescriptor {
	return v.value
}

func (v *NullableSaasPluginDescriptor) Set(val *SaasPluginDescriptor) {
	v.value = val
	v.isSet = true
}

func (v NullableSaasPluginDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullableSaasPluginDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSaasPluginDescriptor(val *SaasPluginDescriptor) *NullableSaasPluginDescriptor {
	return &NullableSaasPluginDescriptor{value: val, isSet: true}
}

func (v NullableSaasPluginDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSaasPluginDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
