/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DataStoreConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataStoreConfig{}

// DataStoreConfig Local identity profile data store.
type DataStoreConfig struct {
	// The data store config type.
	Type         string       `json:"type" tfsdk:"type"`
	DataStoreRef ResourceLink `json:"dataStoreRef" tfsdk:"data_store_ref"`
	// The data store mapping.
	DataStoreMapping *map[string]DataStoreAttribute `json:"dataStoreMapping,omitempty" tfsdk:"data_store_mapping"`
}

type _DataStoreConfig DataStoreConfig

// NewDataStoreConfig instantiates a new DataStoreConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataStoreConfig(type_ string, dataStoreRef ResourceLink) *DataStoreConfig {
	this := DataStoreConfig{}
	this.Type = type_
	this.DataStoreRef = dataStoreRef
	return &this
}

// NewDataStoreConfigWithDefaults instantiates a new DataStoreConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataStoreConfigWithDefaults() *DataStoreConfig {
	this := DataStoreConfig{}
	return &this
}

// GetType returns the Type field value
func (o *DataStoreConfig) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DataStoreConfig) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DataStoreConfig) SetType(v string) {
	o.Type = v
}

// GetDataStoreRef returns the DataStoreRef field value
func (o *DataStoreConfig) GetDataStoreRef() ResourceLink {
	if o == nil {
		var ret ResourceLink
		return ret
	}

	return o.DataStoreRef
}

// GetDataStoreRefOk returns a tuple with the DataStoreRef field value
// and a boolean to check if the value has been set.
func (o *DataStoreConfig) GetDataStoreRefOk() (*ResourceLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataStoreRef, true
}

// SetDataStoreRef sets field value
func (o *DataStoreConfig) SetDataStoreRef(v ResourceLink) {
	o.DataStoreRef = v
}

// GetDataStoreMapping returns the DataStoreMapping field value if set, zero value otherwise.
func (o *DataStoreConfig) GetDataStoreMapping() map[string]DataStoreAttribute {
	if o == nil || IsNil(o.DataStoreMapping) {
		var ret map[string]DataStoreAttribute
		return ret
	}
	return *o.DataStoreMapping
}

// GetDataStoreMappingOk returns a tuple with the DataStoreMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStoreConfig) GetDataStoreMappingOk() (*map[string]DataStoreAttribute, bool) {
	if o == nil || IsNil(o.DataStoreMapping) {
		return nil, false
	}
	return o.DataStoreMapping, true
}

// HasDataStoreMapping returns a boolean if a field has been set.
func (o *DataStoreConfig) HasDataStoreMapping() bool {
	if o != nil && !IsNil(o.DataStoreMapping) {
		return true
	}

	return false
}

// SetDataStoreMapping gets a reference to the given map[string]DataStoreAttribute and assigns it to the DataStoreMapping field.
func (o *DataStoreConfig) SetDataStoreMapping(v map[string]DataStoreAttribute) {
	o.DataStoreMapping = &v
}

func (o DataStoreConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataStoreConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["dataStoreRef"] = o.DataStoreRef
	if !IsNil(o.DataStoreMapping) {
		toSerialize["dataStoreMapping"] = o.DataStoreMapping
	}
	return toSerialize, nil
}

func (o *DataStoreConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"dataStoreRef",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataStoreConfig := _DataStoreConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varDataStoreConfig)

	if err != nil {
		return err
	}

	*o = DataStoreConfig(varDataStoreConfig)

	return err
}

type NullableDataStoreConfig struct {
	value *DataStoreConfig
	isSet bool
}

func (v NullableDataStoreConfig) Get() *DataStoreConfig {
	return v.value
}

func (v *NullableDataStoreConfig) Set(val *DataStoreConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDataStoreConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDataStoreConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataStoreConfig(val *DataStoreConfig) *NullableDataStoreConfig {
	return &NullableDataStoreConfig{value: val, isSet: true}
}

func (v NullableDataStoreConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataStoreConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
