/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the LocalIdentityAuthSourceUpdatePolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocalIdentityAuthSourceUpdatePolicy{}

// LocalIdentityAuthSourceUpdatePolicy Settings to determine whether to store attributes that came from third-party authentication sources.
type LocalIdentityAuthSourceUpdatePolicy struct {
	// Whether or not to store attributes that came from authentication sources.
	StoreAttributes *bool `json:"storeAttributes,omitempty" tfsdk:"store_attributes"`
	// Whether or not to keep attributes after user disconnects.
	RetainAttributes *bool `json:"retainAttributes,omitempty" tfsdk:"retain_attributes"`
	// Whether or not to update attributes when users authenticate.
	UpdateAttributes *bool `json:"updateAttributes,omitempty" tfsdk:"update_attributes"`
	// The minimum number of days between updates.
	UpdateInterval *float64 `json:"updateInterval,omitempty" tfsdk:"update_interval"`
}

// NewLocalIdentityAuthSourceUpdatePolicy instantiates a new LocalIdentityAuthSourceUpdatePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocalIdentityAuthSourceUpdatePolicy() *LocalIdentityAuthSourceUpdatePolicy {
	this := LocalIdentityAuthSourceUpdatePolicy{}
	return &this
}

// NewLocalIdentityAuthSourceUpdatePolicyWithDefaults instantiates a new LocalIdentityAuthSourceUpdatePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocalIdentityAuthSourceUpdatePolicyWithDefaults() *LocalIdentityAuthSourceUpdatePolicy {
	this := LocalIdentityAuthSourceUpdatePolicy{}
	return &this
}

// GetStoreAttributes returns the StoreAttributes field value if set, zero value otherwise.
func (o *LocalIdentityAuthSourceUpdatePolicy) GetStoreAttributes() bool {
	if o == nil || IsNil(o.StoreAttributes) {
		var ret bool
		return ret
	}
	return *o.StoreAttributes
}

// GetStoreAttributesOk returns a tuple with the StoreAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalIdentityAuthSourceUpdatePolicy) GetStoreAttributesOk() (*bool, bool) {
	if o == nil || IsNil(o.StoreAttributes) {
		return nil, false
	}
	return o.StoreAttributes, true
}

// HasStoreAttributes returns a boolean if a field has been set.
func (o *LocalIdentityAuthSourceUpdatePolicy) HasStoreAttributes() bool {
	if o != nil && !IsNil(o.StoreAttributes) {
		return true
	}

	return false
}

// SetStoreAttributes gets a reference to the given bool and assigns it to the StoreAttributes field.
func (o *LocalIdentityAuthSourceUpdatePolicy) SetStoreAttributes(v bool) {
	o.StoreAttributes = &v
}

// GetRetainAttributes returns the RetainAttributes field value if set, zero value otherwise.
func (o *LocalIdentityAuthSourceUpdatePolicy) GetRetainAttributes() bool {
	if o == nil || IsNil(o.RetainAttributes) {
		var ret bool
		return ret
	}
	return *o.RetainAttributes
}

// GetRetainAttributesOk returns a tuple with the RetainAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalIdentityAuthSourceUpdatePolicy) GetRetainAttributesOk() (*bool, bool) {
	if o == nil || IsNil(o.RetainAttributes) {
		return nil, false
	}
	return o.RetainAttributes, true
}

// HasRetainAttributes returns a boolean if a field has been set.
func (o *LocalIdentityAuthSourceUpdatePolicy) HasRetainAttributes() bool {
	if o != nil && !IsNil(o.RetainAttributes) {
		return true
	}

	return false
}

// SetRetainAttributes gets a reference to the given bool and assigns it to the RetainAttributes field.
func (o *LocalIdentityAuthSourceUpdatePolicy) SetRetainAttributes(v bool) {
	o.RetainAttributes = &v
}

// GetUpdateAttributes returns the UpdateAttributes field value if set, zero value otherwise.
func (o *LocalIdentityAuthSourceUpdatePolicy) GetUpdateAttributes() bool {
	if o == nil || IsNil(o.UpdateAttributes) {
		var ret bool
		return ret
	}
	return *o.UpdateAttributes
}

// GetUpdateAttributesOk returns a tuple with the UpdateAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalIdentityAuthSourceUpdatePolicy) GetUpdateAttributesOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateAttributes) {
		return nil, false
	}
	return o.UpdateAttributes, true
}

// HasUpdateAttributes returns a boolean if a field has been set.
func (o *LocalIdentityAuthSourceUpdatePolicy) HasUpdateAttributes() bool {
	if o != nil && !IsNil(o.UpdateAttributes) {
		return true
	}

	return false
}

// SetUpdateAttributes gets a reference to the given bool and assigns it to the UpdateAttributes field.
func (o *LocalIdentityAuthSourceUpdatePolicy) SetUpdateAttributes(v bool) {
	o.UpdateAttributes = &v
}

// GetUpdateInterval returns the UpdateInterval field value if set, zero value otherwise.
func (o *LocalIdentityAuthSourceUpdatePolicy) GetUpdateInterval() float64 {
	if o == nil || IsNil(o.UpdateInterval) {
		var ret float64
		return ret
	}
	return *o.UpdateInterval
}

// GetUpdateIntervalOk returns a tuple with the UpdateInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalIdentityAuthSourceUpdatePolicy) GetUpdateIntervalOk() (*float64, bool) {
	if o == nil || IsNil(o.UpdateInterval) {
		return nil, false
	}
	return o.UpdateInterval, true
}

// HasUpdateInterval returns a boolean if a field has been set.
func (o *LocalIdentityAuthSourceUpdatePolicy) HasUpdateInterval() bool {
	if o != nil && !IsNil(o.UpdateInterval) {
		return true
	}

	return false
}

// SetUpdateInterval gets a reference to the given float64 and assigns it to the UpdateInterval field.
func (o *LocalIdentityAuthSourceUpdatePolicy) SetUpdateInterval(v float64) {
	o.UpdateInterval = &v
}

func (o LocalIdentityAuthSourceUpdatePolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocalIdentityAuthSourceUpdatePolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StoreAttributes) {
		toSerialize["storeAttributes"] = o.StoreAttributes
	}
	if !IsNil(o.RetainAttributes) {
		toSerialize["retainAttributes"] = o.RetainAttributes
	}
	if !IsNil(o.UpdateAttributes) {
		toSerialize["updateAttributes"] = o.UpdateAttributes
	}
	if !IsNil(o.UpdateInterval) {
		toSerialize["updateInterval"] = o.UpdateInterval
	}
	return toSerialize, nil
}

type NullableLocalIdentityAuthSourceUpdatePolicy struct {
	value *LocalIdentityAuthSourceUpdatePolicy
	isSet bool
}

func (v NullableLocalIdentityAuthSourceUpdatePolicy) Get() *LocalIdentityAuthSourceUpdatePolicy {
	return v.value
}

func (v *NullableLocalIdentityAuthSourceUpdatePolicy) Set(val *LocalIdentityAuthSourceUpdatePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableLocalIdentityAuthSourceUpdatePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableLocalIdentityAuthSourceUpdatePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocalIdentityAuthSourceUpdatePolicy(val *LocalIdentityAuthSourceUpdatePolicy) *NullableLocalIdentityAuthSourceUpdatePolicy {
	return &NullableLocalIdentityAuthSourceUpdatePolicy{value: val, isSet: true}
}

func (v NullableLocalIdentityAuthSourceUpdatePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocalIdentityAuthSourceUpdatePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
