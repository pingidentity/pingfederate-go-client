/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the DataStoreRepository type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataStoreRepository{}

// DataStoreRepository Jit Provisioning user repository data store.
type DataStoreRepository struct {
	// The data store repository type.
	Type         string       `json:"type" tfsdk:"type"`
	DataStoreRef ResourceLink `json:"dataStoreRef" tfsdk:"data_store_ref"`
	// The user repository attribute mapping.
	JitRepositoryAttributeMapping map[string]AttributeFulfillmentValue `json:"jitRepositoryAttributeMapping" tfsdk:"jit_repository_attribute_mapping"`
}

// NewDataStoreRepository instantiates a new DataStoreRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataStoreRepository(type_ string, dataStoreRef ResourceLink, jitRepositoryAttributeMapping map[string]AttributeFulfillmentValue) *DataStoreRepository {
	this := DataStoreRepository{}
	this.Type = type_
	this.DataStoreRef = dataStoreRef
	this.JitRepositoryAttributeMapping = jitRepositoryAttributeMapping
	return &this
}

// NewDataStoreRepositoryWithDefaults instantiates a new DataStoreRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataStoreRepositoryWithDefaults() *DataStoreRepository {
	this := DataStoreRepository{}
	return &this
}

// GetType returns the Type field value
func (o *DataStoreRepository) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DataStoreRepository) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DataStoreRepository) SetType(v string) {
	o.Type = v
}

// GetDataStoreRef returns the DataStoreRef field value
func (o *DataStoreRepository) GetDataStoreRef() ResourceLink {
	if o == nil {
		var ret ResourceLink
		return ret
	}

	return o.DataStoreRef
}

// GetDataStoreRefOk returns a tuple with the DataStoreRef field value
// and a boolean to check if the value has been set.
func (o *DataStoreRepository) GetDataStoreRefOk() (*ResourceLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataStoreRef, true
}

// SetDataStoreRef sets field value
func (o *DataStoreRepository) SetDataStoreRef(v ResourceLink) {
	o.DataStoreRef = v
}

// GetJitRepositoryAttributeMapping returns the JitRepositoryAttributeMapping field value
func (o *DataStoreRepository) GetJitRepositoryAttributeMapping() map[string]AttributeFulfillmentValue {
	if o == nil {
		var ret map[string]AttributeFulfillmentValue
		return ret
	}

	return o.JitRepositoryAttributeMapping
}

// GetJitRepositoryAttributeMappingOk returns a tuple with the JitRepositoryAttributeMapping field value
// and a boolean to check if the value has been set.
func (o *DataStoreRepository) GetJitRepositoryAttributeMappingOk() (*map[string]AttributeFulfillmentValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JitRepositoryAttributeMapping, true
}

// SetJitRepositoryAttributeMapping sets field value
func (o *DataStoreRepository) SetJitRepositoryAttributeMapping(v map[string]AttributeFulfillmentValue) {
	o.JitRepositoryAttributeMapping = v
}

func (o DataStoreRepository) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataStoreRepository) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["dataStoreRef"] = o.DataStoreRef
	toSerialize["jitRepositoryAttributeMapping"] = o.JitRepositoryAttributeMapping
	return toSerialize, nil
}

type NullableDataStoreRepository struct {
	value *DataStoreRepository
	isSet bool
}

func (v NullableDataStoreRepository) Get() *DataStoreRepository {
	return v.value
}

func (v *NullableDataStoreRepository) Set(val *DataStoreRepository) {
	v.value = val
	v.isSet = true
}

func (v NullableDataStoreRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableDataStoreRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataStoreRepository(val *DataStoreRepository) *NullableDataStoreRepository {
	return &NullableDataStoreRepository{value: val, isSet: true}
}

func (v NullableDataStoreRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataStoreRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
