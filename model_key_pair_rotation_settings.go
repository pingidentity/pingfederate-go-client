/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the KeyPairRotationSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyPairRotationSettings{}

// KeyPairRotationSettings Key Pair Rotation Details
type KeyPairRotationSettings struct {
	Id *string `json:"id,omitempty"`
	// Buffer days before key pair expiration for creation of a new key pair.
	CreationBufferDays int64 `json:"creationBufferDays"`
	// Buffer days before key pair expiration for activation of the new key pair.
	ActivationBufferDays int64 `json:"activationBufferDays"`
	// Valid days for the new key pair to be created. If this property is unset, the validity days of the original key pair will be used.
	ValidDays *int64 `json:"validDays,omitempty"`
	// Key algorithm to be used while creating a new key pair. If this property is unset, the key algorithm of the original key pair will be used. Supported algorithms are available through the /keyPairs/keyAlgorithms endpoint.
	KeyAlgorithm *string `json:"keyAlgorithm,omitempty"`
	// Key size, in bits. If this property is unset, the key size of the original key pair will be used. Supported key sizes are available through the /keyPairs/keyAlgorithms endpoint.
	KeySize *int64 `json:"keySize,omitempty"`
	// Required if the original key pair used SHA1 algorithm. If this property is unset, the default signature algorithm of the original key pair will be used. Supported signature algorithms are available through the /keyPairs/keyAlgorithms endpoint.
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty"`
}

// NewKeyPairRotationSettings instantiates a new KeyPairRotationSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyPairRotationSettings(creationBufferDays int64, activationBufferDays int64) *KeyPairRotationSettings {
	this := KeyPairRotationSettings{}
	this.CreationBufferDays = creationBufferDays
	this.ActivationBufferDays = activationBufferDays
	return &this
}

// NewKeyPairRotationSettingsWithDefaults instantiates a new KeyPairRotationSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyPairRotationSettingsWithDefaults() *KeyPairRotationSettings {
	this := KeyPairRotationSettings{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KeyPairRotationSettings) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairRotationSettings) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KeyPairRotationSettings) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *KeyPairRotationSettings) SetId(v string) {
	o.Id = &v
}

// GetCreationBufferDays returns the CreationBufferDays field value
func (o *KeyPairRotationSettings) GetCreationBufferDays() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreationBufferDays
}

// GetCreationBufferDaysOk returns a tuple with the CreationBufferDays field value
// and a boolean to check if the value has been set.
func (o *KeyPairRotationSettings) GetCreationBufferDaysOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreationBufferDays, true
}

// SetCreationBufferDays sets field value
func (o *KeyPairRotationSettings) SetCreationBufferDays(v int64) {
	o.CreationBufferDays = v
}

// GetActivationBufferDays returns the ActivationBufferDays field value
func (o *KeyPairRotationSettings) GetActivationBufferDays() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ActivationBufferDays
}

// GetActivationBufferDaysOk returns a tuple with the ActivationBufferDays field value
// and a boolean to check if the value has been set.
func (o *KeyPairRotationSettings) GetActivationBufferDaysOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActivationBufferDays, true
}

// SetActivationBufferDays sets field value
func (o *KeyPairRotationSettings) SetActivationBufferDays(v int64) {
	o.ActivationBufferDays = v
}

// GetValidDays returns the ValidDays field value if set, zero value otherwise.
func (o *KeyPairRotationSettings) GetValidDays() int64 {
	if o == nil || IsNil(o.ValidDays) {
		var ret int64
		return ret
	}
	return *o.ValidDays
}

// GetValidDaysOk returns a tuple with the ValidDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairRotationSettings) GetValidDaysOk() (*int64, bool) {
	if o == nil || IsNil(o.ValidDays) {
		return nil, false
	}
	return o.ValidDays, true
}

// HasValidDays returns a boolean if a field has been set.
func (o *KeyPairRotationSettings) HasValidDays() bool {
	if o != nil && !IsNil(o.ValidDays) {
		return true
	}

	return false
}

// SetValidDays gets a reference to the given int64 and assigns it to the ValidDays field.
func (o *KeyPairRotationSettings) SetValidDays(v int64) {
	o.ValidDays = &v
}

// GetKeyAlgorithm returns the KeyAlgorithm field value if set, zero value otherwise.
func (o *KeyPairRotationSettings) GetKeyAlgorithm() string {
	if o == nil || IsNil(o.KeyAlgorithm) {
		var ret string
		return ret
	}
	return *o.KeyAlgorithm
}

// GetKeyAlgorithmOk returns a tuple with the KeyAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairRotationSettings) GetKeyAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.KeyAlgorithm) {
		return nil, false
	}
	return o.KeyAlgorithm, true
}

// HasKeyAlgorithm returns a boolean if a field has been set.
func (o *KeyPairRotationSettings) HasKeyAlgorithm() bool {
	if o != nil && !IsNil(o.KeyAlgorithm) {
		return true
	}

	return false
}

// SetKeyAlgorithm gets a reference to the given string and assigns it to the KeyAlgorithm field.
func (o *KeyPairRotationSettings) SetKeyAlgorithm(v string) {
	o.KeyAlgorithm = &v
}

// GetKeySize returns the KeySize field value if set, zero value otherwise.
func (o *KeyPairRotationSettings) GetKeySize() int64 {
	if o == nil || IsNil(o.KeySize) {
		var ret int64
		return ret
	}
	return *o.KeySize
}

// GetKeySizeOk returns a tuple with the KeySize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairRotationSettings) GetKeySizeOk() (*int64, bool) {
	if o == nil || IsNil(o.KeySize) {
		return nil, false
	}
	return o.KeySize, true
}

// HasKeySize returns a boolean if a field has been set.
func (o *KeyPairRotationSettings) HasKeySize() bool {
	if o != nil && !IsNil(o.KeySize) {
		return true
	}

	return false
}

// SetKeySize gets a reference to the given int64 and assigns it to the KeySize field.
func (o *KeyPairRotationSettings) SetKeySize(v int64) {
	o.KeySize = &v
}

// GetSignatureAlgorithm returns the SignatureAlgorithm field value if set, zero value otherwise.
func (o *KeyPairRotationSettings) GetSignatureAlgorithm() string {
	if o == nil || IsNil(o.SignatureAlgorithm) {
		var ret string
		return ret
	}
	return *o.SignatureAlgorithm
}

// GetSignatureAlgorithmOk returns a tuple with the SignatureAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairRotationSettings) GetSignatureAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.SignatureAlgorithm) {
		return nil, false
	}
	return o.SignatureAlgorithm, true
}

// HasSignatureAlgorithm returns a boolean if a field has been set.
func (o *KeyPairRotationSettings) HasSignatureAlgorithm() bool {
	if o != nil && !IsNil(o.SignatureAlgorithm) {
		return true
	}

	return false
}

// SetSignatureAlgorithm gets a reference to the given string and assigns it to the SignatureAlgorithm field.
func (o *KeyPairRotationSettings) SetSignatureAlgorithm(v string) {
	o.SignatureAlgorithm = &v
}

func (o KeyPairRotationSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyPairRotationSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["creationBufferDays"] = o.CreationBufferDays
	toSerialize["activationBufferDays"] = o.ActivationBufferDays
	if !IsNil(o.ValidDays) {
		toSerialize["validDays"] = o.ValidDays
	}
	if !IsNil(o.KeyAlgorithm) {
		toSerialize["keyAlgorithm"] = o.KeyAlgorithm
	}
	if !IsNil(o.KeySize) {
		toSerialize["keySize"] = o.KeySize
	}
	if !IsNil(o.SignatureAlgorithm) {
		toSerialize["signatureAlgorithm"] = o.SignatureAlgorithm
	}
	return toSerialize, nil
}

type NullableKeyPairRotationSettings struct {
	value *KeyPairRotationSettings
	isSet bool
}

func (v NullableKeyPairRotationSettings) Get() *KeyPairRotationSettings {
	return v.value
}

func (v *NullableKeyPairRotationSettings) Set(val *KeyPairRotationSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyPairRotationSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyPairRotationSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyPairRotationSettings(val *KeyPairRotationSettings) *NullableKeyPairRotationSettings {
	return &NullableKeyPairRotationSettings{value: val, isSet: true}
}

func (v NullableKeyPairRotationSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyPairRotationSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
