/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"time"
)

// checks if the LicenseView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseView{}

// LicenseView PingFederate License details.
type LicenseView struct {
	// Name of the person the license was issued to.
	Name *string `json:"name,omitempty" tfsdk:"name"`
	// Unique identifier of a license.
	Id *string `json:"id,omitempty" tfsdk:"id"`
	// Maximum number of connections that can be created under this license (if applicable).
	MaxConnections *int64 `json:"maxConnections,omitempty" tfsdk:"max_connections"`
	// Number of used connections under this license.
	UsedConnections *int64 `json:"usedConnections,omitempty" tfsdk:"used_connections"`
	// The tier value from the license file. The possible values are FREE, PERPETUAL or SUBSCRIPTION.
	Tier *string `json:"tier,omitempty" tfsdk:"tier"`
	// The issue date value from the license file.
	IssueDate *time.Time `json:"issueDate,omitempty" tfsdk:"issue_date"`
	// The expiration date value from the license file (if applicable).
	ExpirationDate *time.Time `json:"expirationDate,omitempty" tfsdk:"expiration_date"`
	// The enforcement type is a 3-bit binary value, expressed as a decimal digit. The bits from left to right are: <br>1: Shutdown on expire <br>2: Notify on expire <br>4: Enforce minor version <br>if all three enforcements are active, the enforcement type will be 7 (1 + 2 + 4); if only the first two are active, you have an enforcement type of 3 (1 + 2).
	EnforcementType *string `json:"enforcementType,omitempty" tfsdk:"enforcement_type"`
	// The Ping Identity product version from the license file.
	Version *string `json:"version,omitempty" tfsdk:"version"`
	// The Ping Identity product value from the license file.
	Product *string `json:"product,omitempty" tfsdk:"product"`
	// The organization value from the license file.
	Organization *string `json:"organization,omitempty" tfsdk:"organization"`
	// Number of days provided as grace period, past the expiration date (if applicable).
	GracePeriod *int64 `json:"gracePeriod,omitempty" tfsdk:"grace_period"`
	// Maximum number of clustered nodes allowed under this license (if applicable).
	NodeLimit *int64 `json:"nodeLimit,omitempty" tfsdk:"node_limit"`
	// License connection groups, if applicable.
	LicenseGroups []ConnectionGroupLicenseView `json:"licenseGroups,omitempty" tfsdk:"license_groups"`
	// Indicates whether OAuth role is enabled for this license.
	OauthEnabled *bool `json:"oauthEnabled,omitempty" tfsdk:"oauth_enabled"`
	// Indicates whether WS-Trust role is enabled for this license.
	WsTrustEnabled *bool `json:"wsTrustEnabled,omitempty" tfsdk:"ws_trust_enabled"`
	// Indicates whether Provisioning role is enabled for this license.
	ProvisioningEnabled *bool `json:"provisioningEnabled,omitempty" tfsdk:"provisioning_enabled"`
	// Indicates whether this license is a bridge license or not.
	BridgeMode *bool `json:"bridgeMode,omitempty" tfsdk:"bridge_mode"`
	// Other licence features, if applicable.
	Features []LicenseFeatureView `json:"features,omitempty" tfsdk:"features"`
}

// NewLicenseView instantiates a new LicenseView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseView() *LicenseView {
	this := LicenseView{}
	return &this
}

// NewLicenseViewWithDefaults instantiates a new LicenseView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseViewWithDefaults() *LicenseView {
	this := LicenseView{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LicenseView) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseView) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LicenseView) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LicenseView) SetName(v string) {
	o.Name = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LicenseView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LicenseView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LicenseView) SetId(v string) {
	o.Id = &v
}

// GetMaxConnections returns the MaxConnections field value if set, zero value otherwise.
func (o *LicenseView) GetMaxConnections() int64 {
	if o == nil || IsNil(o.MaxConnections) {
		var ret int64
		return ret
	}
	return *o.MaxConnections
}

// GetMaxConnectionsOk returns a tuple with the MaxConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseView) GetMaxConnectionsOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxConnections) {
		return nil, false
	}
	return o.MaxConnections, true
}

// HasMaxConnections returns a boolean if a field has been set.
func (o *LicenseView) HasMaxConnections() bool {
	if o != nil && !IsNil(o.MaxConnections) {
		return true
	}

	return false
}

// SetMaxConnections gets a reference to the given int64 and assigns it to the MaxConnections field.
func (o *LicenseView) SetMaxConnections(v int64) {
	o.MaxConnections = &v
}

// GetUsedConnections returns the UsedConnections field value if set, zero value otherwise.
func (o *LicenseView) GetUsedConnections() int64 {
	if o == nil || IsNil(o.UsedConnections) {
		var ret int64
		return ret
	}
	return *o.UsedConnections
}

// GetUsedConnectionsOk returns a tuple with the UsedConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseView) GetUsedConnectionsOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedConnections) {
		return nil, false
	}
	return o.UsedConnections, true
}

// HasUsedConnections returns a boolean if a field has been set.
func (o *LicenseView) HasUsedConnections() bool {
	if o != nil && !IsNil(o.UsedConnections) {
		return true
	}

	return false
}

// SetUsedConnections gets a reference to the given int64 and assigns it to the UsedConnections field.
func (o *LicenseView) SetUsedConnections(v int64) {
	o.UsedConnections = &v
}

// GetTier returns the Tier field value if set, zero value otherwise.
func (o *LicenseView) GetTier() string {
	if o == nil || IsNil(o.Tier) {
		var ret string
		return ret
	}
	return *o.Tier
}

// GetTierOk returns a tuple with the Tier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseView) GetTierOk() (*string, bool) {
	if o == nil || IsNil(o.Tier) {
		return nil, false
	}
	return o.Tier, true
}

// HasTier returns a boolean if a field has been set.
func (o *LicenseView) HasTier() bool {
	if o != nil && !IsNil(o.Tier) {
		return true
	}

	return false
}

// SetTier gets a reference to the given string and assigns it to the Tier field.
func (o *LicenseView) SetTier(v string) {
	o.Tier = &v
}

// GetIssueDate returns the IssueDate field value if set, zero value otherwise.
func (o *LicenseView) GetIssueDate() time.Time {
	if o == nil || IsNil(o.IssueDate) {
		var ret time.Time
		return ret
	}
	return *o.IssueDate
}

// GetIssueDateOk returns a tuple with the IssueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseView) GetIssueDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.IssueDate) {
		return nil, false
	}
	return o.IssueDate, true
}

// HasIssueDate returns a boolean if a field has been set.
func (o *LicenseView) HasIssueDate() bool {
	if o != nil && !IsNil(o.IssueDate) {
		return true
	}

	return false
}

// SetIssueDate gets a reference to the given time.Time and assigns it to the IssueDate field.
func (o *LicenseView) SetIssueDate(v time.Time) {
	o.IssueDate = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *LicenseView) GetExpirationDate() time.Time {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseView) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *LicenseView) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *LicenseView) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

// GetEnforcementType returns the EnforcementType field value if set, zero value otherwise.
func (o *LicenseView) GetEnforcementType() string {
	if o == nil || IsNil(o.EnforcementType) {
		var ret string
		return ret
	}
	return *o.EnforcementType
}

// GetEnforcementTypeOk returns a tuple with the EnforcementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseView) GetEnforcementTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EnforcementType) {
		return nil, false
	}
	return o.EnforcementType, true
}

// HasEnforcementType returns a boolean if a field has been set.
func (o *LicenseView) HasEnforcementType() bool {
	if o != nil && !IsNil(o.EnforcementType) {
		return true
	}

	return false
}

// SetEnforcementType gets a reference to the given string and assigns it to the EnforcementType field.
func (o *LicenseView) SetEnforcementType(v string) {
	o.EnforcementType = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *LicenseView) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseView) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *LicenseView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *LicenseView) SetVersion(v string) {
	o.Version = &v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *LicenseView) GetProduct() string {
	if o == nil || IsNil(o.Product) {
		var ret string
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseView) GetProductOk() (*string, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *LicenseView) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given string and assigns it to the Product field.
func (o *LicenseView) SetProduct(v string) {
	o.Product = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *LicenseView) GetOrganization() string {
	if o == nil || IsNil(o.Organization) {
		var ret string
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseView) GetOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *LicenseView) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given string and assigns it to the Organization field.
func (o *LicenseView) SetOrganization(v string) {
	o.Organization = &v
}

// GetGracePeriod returns the GracePeriod field value if set, zero value otherwise.
func (o *LicenseView) GetGracePeriod() int64 {
	if o == nil || IsNil(o.GracePeriod) {
		var ret int64
		return ret
	}
	return *o.GracePeriod
}

// GetGracePeriodOk returns a tuple with the GracePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseView) GetGracePeriodOk() (*int64, bool) {
	if o == nil || IsNil(o.GracePeriod) {
		return nil, false
	}
	return o.GracePeriod, true
}

// HasGracePeriod returns a boolean if a field has been set.
func (o *LicenseView) HasGracePeriod() bool {
	if o != nil && !IsNil(o.GracePeriod) {
		return true
	}

	return false
}

// SetGracePeriod gets a reference to the given int64 and assigns it to the GracePeriod field.
func (o *LicenseView) SetGracePeriod(v int64) {
	o.GracePeriod = &v
}

// GetNodeLimit returns the NodeLimit field value if set, zero value otherwise.
func (o *LicenseView) GetNodeLimit() int64 {
	if o == nil || IsNil(o.NodeLimit) {
		var ret int64
		return ret
	}
	return *o.NodeLimit
}

// GetNodeLimitOk returns a tuple with the NodeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseView) GetNodeLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.NodeLimit) {
		return nil, false
	}
	return o.NodeLimit, true
}

// HasNodeLimit returns a boolean if a field has been set.
func (o *LicenseView) HasNodeLimit() bool {
	if o != nil && !IsNil(o.NodeLimit) {
		return true
	}

	return false
}

// SetNodeLimit gets a reference to the given int64 and assigns it to the NodeLimit field.
func (o *LicenseView) SetNodeLimit(v int64) {
	o.NodeLimit = &v
}

// GetLicenseGroups returns the LicenseGroups field value if set, zero value otherwise.
func (o *LicenseView) GetLicenseGroups() []ConnectionGroupLicenseView {
	if o == nil || IsNil(o.LicenseGroups) {
		var ret []ConnectionGroupLicenseView
		return ret
	}
	return o.LicenseGroups
}

// GetLicenseGroupsOk returns a tuple with the LicenseGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseView) GetLicenseGroupsOk() ([]ConnectionGroupLicenseView, bool) {
	if o == nil || IsNil(o.LicenseGroups) {
		return nil, false
	}
	return o.LicenseGroups, true
}

// HasLicenseGroups returns a boolean if a field has been set.
func (o *LicenseView) HasLicenseGroups() bool {
	if o != nil && !IsNil(o.LicenseGroups) {
		return true
	}

	return false
}

// SetLicenseGroups gets a reference to the given []ConnectionGroupLicenseView and assigns it to the LicenseGroups field.
func (o *LicenseView) SetLicenseGroups(v []ConnectionGroupLicenseView) {
	o.LicenseGroups = v
}

// GetOauthEnabled returns the OauthEnabled field value if set, zero value otherwise.
func (o *LicenseView) GetOauthEnabled() bool {
	if o == nil || IsNil(o.OauthEnabled) {
		var ret bool
		return ret
	}
	return *o.OauthEnabled
}

// GetOauthEnabledOk returns a tuple with the OauthEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseView) GetOauthEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.OauthEnabled) {
		return nil, false
	}
	return o.OauthEnabled, true
}

// HasOauthEnabled returns a boolean if a field has been set.
func (o *LicenseView) HasOauthEnabled() bool {
	if o != nil && !IsNil(o.OauthEnabled) {
		return true
	}

	return false
}

// SetOauthEnabled gets a reference to the given bool and assigns it to the OauthEnabled field.
func (o *LicenseView) SetOauthEnabled(v bool) {
	o.OauthEnabled = &v
}

// GetWsTrustEnabled returns the WsTrustEnabled field value if set, zero value otherwise.
func (o *LicenseView) GetWsTrustEnabled() bool {
	if o == nil || IsNil(o.WsTrustEnabled) {
		var ret bool
		return ret
	}
	return *o.WsTrustEnabled
}

// GetWsTrustEnabledOk returns a tuple with the WsTrustEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseView) GetWsTrustEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.WsTrustEnabled) {
		return nil, false
	}
	return o.WsTrustEnabled, true
}

// HasWsTrustEnabled returns a boolean if a field has been set.
func (o *LicenseView) HasWsTrustEnabled() bool {
	if o != nil && !IsNil(o.WsTrustEnabled) {
		return true
	}

	return false
}

// SetWsTrustEnabled gets a reference to the given bool and assigns it to the WsTrustEnabled field.
func (o *LicenseView) SetWsTrustEnabled(v bool) {
	o.WsTrustEnabled = &v
}

// GetProvisioningEnabled returns the ProvisioningEnabled field value if set, zero value otherwise.
func (o *LicenseView) GetProvisioningEnabled() bool {
	if o == nil || IsNil(o.ProvisioningEnabled) {
		var ret bool
		return ret
	}
	return *o.ProvisioningEnabled
}

// GetProvisioningEnabledOk returns a tuple with the ProvisioningEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseView) GetProvisioningEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ProvisioningEnabled) {
		return nil, false
	}
	return o.ProvisioningEnabled, true
}

// HasProvisioningEnabled returns a boolean if a field has been set.
func (o *LicenseView) HasProvisioningEnabled() bool {
	if o != nil && !IsNil(o.ProvisioningEnabled) {
		return true
	}

	return false
}

// SetProvisioningEnabled gets a reference to the given bool and assigns it to the ProvisioningEnabled field.
func (o *LicenseView) SetProvisioningEnabled(v bool) {
	o.ProvisioningEnabled = &v
}

// GetBridgeMode returns the BridgeMode field value if set, zero value otherwise.
func (o *LicenseView) GetBridgeMode() bool {
	if o == nil || IsNil(o.BridgeMode) {
		var ret bool
		return ret
	}
	return *o.BridgeMode
}

// GetBridgeModeOk returns a tuple with the BridgeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseView) GetBridgeModeOk() (*bool, bool) {
	if o == nil || IsNil(o.BridgeMode) {
		return nil, false
	}
	return o.BridgeMode, true
}

// HasBridgeMode returns a boolean if a field has been set.
func (o *LicenseView) HasBridgeMode() bool {
	if o != nil && !IsNil(o.BridgeMode) {
		return true
	}

	return false
}

// SetBridgeMode gets a reference to the given bool and assigns it to the BridgeMode field.
func (o *LicenseView) SetBridgeMode(v bool) {
	o.BridgeMode = &v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *LicenseView) GetFeatures() []LicenseFeatureView {
	if o == nil || IsNil(o.Features) {
		var ret []LicenseFeatureView
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseView) GetFeaturesOk() ([]LicenseFeatureView, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *LicenseView) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []LicenseFeatureView and assigns it to the Features field.
func (o *LicenseView) SetFeatures(v []LicenseFeatureView) {
	o.Features = v
}

func (o LicenseView) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MaxConnections) {
		toSerialize["maxConnections"] = o.MaxConnections
	}
	if !IsNil(o.UsedConnections) {
		toSerialize["usedConnections"] = o.UsedConnections
	}
	if !IsNil(o.Tier) {
		toSerialize["tier"] = o.Tier
	}
	if !IsNil(o.IssueDate) {
		toSerialize["issueDate"] = o.IssueDate
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.EnforcementType) {
		toSerialize["enforcementType"] = o.EnforcementType
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.GracePeriod) {
		toSerialize["gracePeriod"] = o.GracePeriod
	}
	if !IsNil(o.NodeLimit) {
		toSerialize["nodeLimit"] = o.NodeLimit
	}
	if !IsNil(o.LicenseGroups) {
		toSerialize["licenseGroups"] = o.LicenseGroups
	}
	if !IsNil(o.OauthEnabled) {
		toSerialize["oauthEnabled"] = o.OauthEnabled
	}
	if !IsNil(o.WsTrustEnabled) {
		toSerialize["wsTrustEnabled"] = o.WsTrustEnabled
	}
	if !IsNil(o.ProvisioningEnabled) {
		toSerialize["provisioningEnabled"] = o.ProvisioningEnabled
	}
	if !IsNil(o.BridgeMode) {
		toSerialize["bridgeMode"] = o.BridgeMode
	}
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	return toSerialize, nil
}

type NullableLicenseView struct {
	value *LicenseView
	isSet bool
}

func (v NullableLicenseView) Get() *LicenseView {
	return v.value
}

func (v *NullableLicenseView) Set(val *LicenseView) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseView) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseView(val *LicenseView) *NullableLicenseView {
	return &NullableLicenseView{value: val, isSet: true}
}

func (v NullableLicenseView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
