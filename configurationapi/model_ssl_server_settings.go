/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the SslServerSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SslServerSettings{}

// SslServerSettings Settings for the SSL Server certificate configuration.
type SslServerSettings struct {
	RuntimeServerCertRef ResourceLink `json:"runtimeServerCertRef" tfsdk:"runtime_server_cert_ref"`
	AdminConsoleCertRef  ResourceLink `json:"adminConsoleCertRef" tfsdk:"admin_console_cert_ref"`
	// The active SSL Server Certificate Key pairs for Runtime Server.
	ActiveRuntimeServerCerts []ResourceLink `json:"activeRuntimeServerCerts,omitempty" tfsdk:"active_runtime_server_certs"`
	// The active SSL Server Certificate Key pairs for PF Administrator Console.
	ActiveAdminConsoleCerts []ResourceLink `json:"activeAdminConsoleCerts,omitempty" tfsdk:"active_admin_console_certs"`
}

// NewSslServerSettings instantiates a new SslServerSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSslServerSettings(runtimeServerCertRef ResourceLink, adminConsoleCertRef ResourceLink) *SslServerSettings {
	this := SslServerSettings{}
	this.RuntimeServerCertRef = runtimeServerCertRef
	this.AdminConsoleCertRef = adminConsoleCertRef
	return &this
}

// NewSslServerSettingsWithDefaults instantiates a new SslServerSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSslServerSettingsWithDefaults() *SslServerSettings {
	this := SslServerSettings{}
	return &this
}

// GetRuntimeServerCertRef returns the RuntimeServerCertRef field value
func (o *SslServerSettings) GetRuntimeServerCertRef() ResourceLink {
	if o == nil {
		var ret ResourceLink
		return ret
	}

	return o.RuntimeServerCertRef
}

// GetRuntimeServerCertRefOk returns a tuple with the RuntimeServerCertRef field value
// and a boolean to check if the value has been set.
func (o *SslServerSettings) GetRuntimeServerCertRefOk() (*ResourceLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuntimeServerCertRef, true
}

// SetRuntimeServerCertRef sets field value
func (o *SslServerSettings) SetRuntimeServerCertRef(v ResourceLink) {
	o.RuntimeServerCertRef = v
}

// GetAdminConsoleCertRef returns the AdminConsoleCertRef field value
func (o *SslServerSettings) GetAdminConsoleCertRef() ResourceLink {
	if o == nil {
		var ret ResourceLink
		return ret
	}

	return o.AdminConsoleCertRef
}

// GetAdminConsoleCertRefOk returns a tuple with the AdminConsoleCertRef field value
// and a boolean to check if the value has been set.
func (o *SslServerSettings) GetAdminConsoleCertRefOk() (*ResourceLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdminConsoleCertRef, true
}

// SetAdminConsoleCertRef sets field value
func (o *SslServerSettings) SetAdminConsoleCertRef(v ResourceLink) {
	o.AdminConsoleCertRef = v
}

// GetActiveRuntimeServerCerts returns the ActiveRuntimeServerCerts field value if set, zero value otherwise.
func (o *SslServerSettings) GetActiveRuntimeServerCerts() []ResourceLink {
	if o == nil || IsNil(o.ActiveRuntimeServerCerts) {
		var ret []ResourceLink
		return ret
	}
	return o.ActiveRuntimeServerCerts
}

// GetActiveRuntimeServerCertsOk returns a tuple with the ActiveRuntimeServerCerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslServerSettings) GetActiveRuntimeServerCertsOk() ([]ResourceLink, bool) {
	if o == nil || IsNil(o.ActiveRuntimeServerCerts) {
		return nil, false
	}
	return o.ActiveRuntimeServerCerts, true
}

// HasActiveRuntimeServerCerts returns a boolean if a field has been set.
func (o *SslServerSettings) HasActiveRuntimeServerCerts() bool {
	if o != nil && !IsNil(o.ActiveRuntimeServerCerts) {
		return true
	}

	return false
}

// SetActiveRuntimeServerCerts gets a reference to the given []ResourceLink and assigns it to the ActiveRuntimeServerCerts field.
func (o *SslServerSettings) SetActiveRuntimeServerCerts(v []ResourceLink) {
	o.ActiveRuntimeServerCerts = v
}

// GetActiveAdminConsoleCerts returns the ActiveAdminConsoleCerts field value if set, zero value otherwise.
func (o *SslServerSettings) GetActiveAdminConsoleCerts() []ResourceLink {
	if o == nil || IsNil(o.ActiveAdminConsoleCerts) {
		var ret []ResourceLink
		return ret
	}
	return o.ActiveAdminConsoleCerts
}

// GetActiveAdminConsoleCertsOk returns a tuple with the ActiveAdminConsoleCerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslServerSettings) GetActiveAdminConsoleCertsOk() ([]ResourceLink, bool) {
	if o == nil || IsNil(o.ActiveAdminConsoleCerts) {
		return nil, false
	}
	return o.ActiveAdminConsoleCerts, true
}

// HasActiveAdminConsoleCerts returns a boolean if a field has been set.
func (o *SslServerSettings) HasActiveAdminConsoleCerts() bool {
	if o != nil && !IsNil(o.ActiveAdminConsoleCerts) {
		return true
	}

	return false
}

// SetActiveAdminConsoleCerts gets a reference to the given []ResourceLink and assigns it to the ActiveAdminConsoleCerts field.
func (o *SslServerSettings) SetActiveAdminConsoleCerts(v []ResourceLink) {
	o.ActiveAdminConsoleCerts = v
}

func (o SslServerSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SslServerSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["runtimeServerCertRef"] = o.RuntimeServerCertRef
	toSerialize["adminConsoleCertRef"] = o.AdminConsoleCertRef
	if !IsNil(o.ActiveRuntimeServerCerts) {
		toSerialize["activeRuntimeServerCerts"] = o.ActiveRuntimeServerCerts
	}
	if !IsNil(o.ActiveAdminConsoleCerts) {
		toSerialize["activeAdminConsoleCerts"] = o.ActiveAdminConsoleCerts
	}
	return toSerialize, nil
}

type NullableSslServerSettings struct {
	value *SslServerSettings
	isSet bool
}

func (v NullableSslServerSettings) Get() *SslServerSettings {
	return v.value
}

func (v *NullableSslServerSettings) Set(val *SslServerSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableSslServerSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSslServerSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSslServerSettings(val *SslServerSettings) *NullableSslServerSettings {
	return &NullableSslServerSettings{value: val, isSet: true}
}

func (v NullableSslServerSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSslServerSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
