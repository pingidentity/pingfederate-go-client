/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AccessTokenMappingContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessTokenMappingContext{}

// AccessTokenMappingContext The Access Token Attribute Mapping.
type AccessTokenMappingContext struct {
	// The Access Token Mapping Context type.
	Type       string       `json:"type"`
	ContextRef ResourceLink `json:"contextRef"`
}

// NewAccessTokenMappingContext instantiates a new AccessTokenMappingContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessTokenMappingContext(type_ string, contextRef ResourceLink) *AccessTokenMappingContext {
	this := AccessTokenMappingContext{}
	this.Type = type_
	this.ContextRef = contextRef
	return &this
}

// NewAccessTokenMappingContextWithDefaults instantiates a new AccessTokenMappingContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessTokenMappingContextWithDefaults() *AccessTokenMappingContext {
	this := AccessTokenMappingContext{}
	return &this
}

// GetType returns the Type field value
func (o *AccessTokenMappingContext) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AccessTokenMappingContext) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AccessTokenMappingContext) SetType(v string) {
	o.Type = v
}

// GetContextRef returns the ContextRef field value
func (o *AccessTokenMappingContext) GetContextRef() ResourceLink {
	if o == nil {
		var ret ResourceLink
		return ret
	}

	return o.ContextRef
}

// GetContextRefOk returns a tuple with the ContextRef field value
// and a boolean to check if the value has been set.
func (o *AccessTokenMappingContext) GetContextRefOk() (*ResourceLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContextRef, true
}

// SetContextRef sets field value
func (o *AccessTokenMappingContext) SetContextRef(v ResourceLink) {
	o.ContextRef = v
}

func (o AccessTokenMappingContext) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessTokenMappingContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["contextRef"] = o.ContextRef
	return toSerialize, nil
}

type NullableAccessTokenMappingContext struct {
	value *AccessTokenMappingContext
	isSet bool
}

func (v NullableAccessTokenMappingContext) Get() *AccessTokenMappingContext {
	return v.value
}

func (v *NullableAccessTokenMappingContext) Set(val *AccessTokenMappingContext) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessTokenMappingContext) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessTokenMappingContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessTokenMappingContext(val *AccessTokenMappingContext) *NullableAccessTokenMappingContext {
	return &NullableAccessTokenMappingContext{value: val, isSet: true}
}

func (v NullableAccessTokenMappingContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessTokenMappingContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
