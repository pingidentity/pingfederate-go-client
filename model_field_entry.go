/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the FieldEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FieldEntry{}

// FieldEntry A simple name value pair to represent a field entry.
type FieldEntry struct {
	// The value of this field. Whether or not the value is required will be determined by plugin validation checks.
	Value *string `json:"value,omitempty"`
	// The name of this field.
	Name string `json:"name"`
}

// NewFieldEntry instantiates a new FieldEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldEntry(name string) *FieldEntry {
	this := FieldEntry{}
	this.Name = name
	return &this
}

// NewFieldEntryWithDefaults instantiates a new FieldEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldEntryWithDefaults() *FieldEntry {
	this := FieldEntry{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *FieldEntry) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldEntry) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *FieldEntry) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *FieldEntry) SetValue(v string) {
	o.Value = &v
}

// GetName returns the Name field value
func (o *FieldEntry) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FieldEntry) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FieldEntry) SetName(v string) {
	o.Name = v
}

func (o FieldEntry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FieldEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableFieldEntry struct {
	value *FieldEntry
	isSet bool
}

func (v NullableFieldEntry) Get() *FieldEntry {
	return v.value
}

func (v *NullableFieldEntry) Set(val *FieldEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEntry(val *FieldEntry) *NullableFieldEntry {
	return &NullableFieldEntry{value: val, isSet: true}
}

func (v NullableFieldEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
