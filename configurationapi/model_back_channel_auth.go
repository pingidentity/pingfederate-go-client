/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the BackChannelAuth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackChannelAuth{}

// BackChannelAuth The SOAP authentication methods when sending or receiving a message using SOAP back channel.
type BackChannelAuth struct {
	// The back channel authentication type.
	Type                 string                       `json:"type" tfsdk:"type"`
	HttpBasicCredentials *UsernamePasswordCredentials `json:"httpBasicCredentials,omitempty" tfsdk:"http_basic_credentials"`
	// If incoming or outgoing messages must be signed.
	DigitalSignature *bool `json:"digitalSignature,omitempty" tfsdk:"digital_signature"`
}

// NewBackChannelAuth instantiates a new BackChannelAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackChannelAuth(type_ string) *BackChannelAuth {
	this := BackChannelAuth{}
	this.Type = type_
	return &this
}

// NewBackChannelAuthWithDefaults instantiates a new BackChannelAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackChannelAuthWithDefaults() *BackChannelAuth {
	this := BackChannelAuth{}
	return &this
}

// GetType returns the Type field value
func (o *BackChannelAuth) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BackChannelAuth) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BackChannelAuth) SetType(v string) {
	o.Type = v
}

// GetHttpBasicCredentials returns the HttpBasicCredentials field value if set, zero value otherwise.
func (o *BackChannelAuth) GetHttpBasicCredentials() UsernamePasswordCredentials {
	if o == nil || IsNil(o.HttpBasicCredentials) {
		var ret UsernamePasswordCredentials
		return ret
	}
	return *o.HttpBasicCredentials
}

// GetHttpBasicCredentialsOk returns a tuple with the HttpBasicCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackChannelAuth) GetHttpBasicCredentialsOk() (*UsernamePasswordCredentials, bool) {
	if o == nil || IsNil(o.HttpBasicCredentials) {
		return nil, false
	}
	return o.HttpBasicCredentials, true
}

// HasHttpBasicCredentials returns a boolean if a field has been set.
func (o *BackChannelAuth) HasHttpBasicCredentials() bool {
	if o != nil && !IsNil(o.HttpBasicCredentials) {
		return true
	}

	return false
}

// SetHttpBasicCredentials gets a reference to the given UsernamePasswordCredentials and assigns it to the HttpBasicCredentials field.
func (o *BackChannelAuth) SetHttpBasicCredentials(v UsernamePasswordCredentials) {
	o.HttpBasicCredentials = &v
}

// GetDigitalSignature returns the DigitalSignature field value if set, zero value otherwise.
func (o *BackChannelAuth) GetDigitalSignature() bool {
	if o == nil || IsNil(o.DigitalSignature) {
		var ret bool
		return ret
	}
	return *o.DigitalSignature
}

// GetDigitalSignatureOk returns a tuple with the DigitalSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackChannelAuth) GetDigitalSignatureOk() (*bool, bool) {
	if o == nil || IsNil(o.DigitalSignature) {
		return nil, false
	}
	return o.DigitalSignature, true
}

// HasDigitalSignature returns a boolean if a field has been set.
func (o *BackChannelAuth) HasDigitalSignature() bool {
	if o != nil && !IsNil(o.DigitalSignature) {
		return true
	}

	return false
}

// SetDigitalSignature gets a reference to the given bool and assigns it to the DigitalSignature field.
func (o *BackChannelAuth) SetDigitalSignature(v bool) {
	o.DigitalSignature = &v
}

func (o BackChannelAuth) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackChannelAuth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.HttpBasicCredentials) {
		toSerialize["httpBasicCredentials"] = o.HttpBasicCredentials
	}
	if !IsNil(o.DigitalSignature) {
		toSerialize["digitalSignature"] = o.DigitalSignature
	}
	return toSerialize, nil
}

type NullableBackChannelAuth struct {
	value *BackChannelAuth
	isSet bool
}

func (v NullableBackChannelAuth) Get() *BackChannelAuth {
	return v.value
}

func (v *NullableBackChannelAuth) Set(val *BackChannelAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableBackChannelAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableBackChannelAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackChannelAuth(val *BackChannelAuth) *NullableBackChannelAuth {
	return &NullableBackChannelAuth{value: val, isSet: true}
}

func (v NullableBackChannelAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackChannelAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
