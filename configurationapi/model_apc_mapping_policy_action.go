/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ApcMappingPolicyAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApcMappingPolicyAction{}

// ApcMappingPolicyAction struct for ApcMappingPolicyAction
type ApcMappingPolicyAction struct {
	// The authentication selection type.
	Type string `json:"type" tfsdk:"type"`
	// The result context.
	Context                         *string          `json:"context,omitempty" tfsdk:"context"`
	AuthenticationPolicyContractRef ResourceLink     `json:"authenticationPolicyContractRef" tfsdk:"authentication_policy_contract_ref"`
	AttributeMapping                AttributeMapping `json:"attributeMapping" tfsdk:"attribute_mapping"`
}

type _ApcMappingPolicyAction ApcMappingPolicyAction

// NewApcMappingPolicyAction instantiates a new ApcMappingPolicyAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApcMappingPolicyAction(type_ string, authenticationPolicyContractRef ResourceLink, attributeMapping AttributeMapping) *ApcMappingPolicyAction {
	this := ApcMappingPolicyAction{}
	this.Type = type_
	this.AuthenticationPolicyContractRef = authenticationPolicyContractRef
	this.AttributeMapping = attributeMapping
	return &this
}

// NewApcMappingPolicyActionWithDefaults instantiates a new ApcMappingPolicyAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApcMappingPolicyActionWithDefaults() *ApcMappingPolicyAction {
	this := ApcMappingPolicyAction{}
	return &this
}

// GetType returns the Type field value
func (o *ApcMappingPolicyAction) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ApcMappingPolicyAction) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ApcMappingPolicyAction) SetType(v string) {
	o.Type = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *ApcMappingPolicyAction) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApcMappingPolicyAction) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *ApcMappingPolicyAction) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *ApcMappingPolicyAction) SetContext(v string) {
	o.Context = &v
}

// GetAuthenticationPolicyContractRef returns the AuthenticationPolicyContractRef field value
func (o *ApcMappingPolicyAction) GetAuthenticationPolicyContractRef() ResourceLink {
	if o == nil {
		var ret ResourceLink
		return ret
	}

	return o.AuthenticationPolicyContractRef
}

// GetAuthenticationPolicyContractRefOk returns a tuple with the AuthenticationPolicyContractRef field value
// and a boolean to check if the value has been set.
func (o *ApcMappingPolicyAction) GetAuthenticationPolicyContractRefOk() (*ResourceLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthenticationPolicyContractRef, true
}

// SetAuthenticationPolicyContractRef sets field value
func (o *ApcMappingPolicyAction) SetAuthenticationPolicyContractRef(v ResourceLink) {
	o.AuthenticationPolicyContractRef = v
}

// GetAttributeMapping returns the AttributeMapping field value
func (o *ApcMappingPolicyAction) GetAttributeMapping() AttributeMapping {
	if o == nil {
		var ret AttributeMapping
		return ret
	}

	return o.AttributeMapping
}

// GetAttributeMappingOk returns a tuple with the AttributeMapping field value
// and a boolean to check if the value has been set.
func (o *ApcMappingPolicyAction) GetAttributeMappingOk() (*AttributeMapping, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttributeMapping, true
}

// SetAttributeMapping sets field value
func (o *ApcMappingPolicyAction) SetAttributeMapping(v AttributeMapping) {
	o.AttributeMapping = v
}

func (o ApcMappingPolicyAction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApcMappingPolicyAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	toSerialize["authenticationPolicyContractRef"] = o.AuthenticationPolicyContractRef
	toSerialize["attributeMapping"] = o.AttributeMapping
	return toSerialize, nil
}

func (o *ApcMappingPolicyAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"authenticationPolicyContractRef",
		"attributeMapping",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApcMappingPolicyAction := _ApcMappingPolicyAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varApcMappingPolicyAction)

	if err != nil {
		return err
	}

	*o = ApcMappingPolicyAction(varApcMappingPolicyAction)

	return err
}

type NullableApcMappingPolicyAction struct {
	value *ApcMappingPolicyAction
	isSet bool
}

func (v NullableApcMappingPolicyAction) Get() *ApcMappingPolicyAction {
	return v.value
}

func (v *NullableApcMappingPolicyAction) Set(val *ApcMappingPolicyAction) {
	v.value = val
	v.isSet = true
}

func (v NullableApcMappingPolicyAction) IsSet() bool {
	return v.isSet
}

func (v *NullableApcMappingPolicyAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApcMappingPolicyAction(val *ApcMappingPolicyAction) *NullableApcMappingPolicyAction {
	return &NullableApcMappingPolicyAction{value: val, isSet: true}
}

func (v NullableApcMappingPolicyAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApcMappingPolicyAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
