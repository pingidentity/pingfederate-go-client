/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the OIDCSessionSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OIDCSessionSettings{}

// OIDCSessionSettings (Deprecated) Settings relating to OpenID Connect session management.
type OIDCSessionSettings struct {
	// (Deprecated) Determines whether user sessions are tracked for logout. This property is now available under /oauth/authServerSettings and should be accessed through that resource.
	TrackUserSessionsForLogout *bool `json:"trackUserSessionsForLogout,omitempty" tfsdk:"track_user_sessions_for_logout"`
	// (Deprecated) Determines whether the user's session is revoked on logout. This property is now available under /session/settings and should be accessed through that resource.
	RevokeUserSessionOnLogout *bool `json:"revokeUserSessionOnLogout,omitempty" tfsdk:"revoke_user_session_on_logout"`
	// (Deprecated) How long a session revocation is tracked and stored, in minutes. This property is now available under /session/settings and should be accessed through that resource.
	SessionRevocationLifetime *int64 `json:"sessionRevocationLifetime,omitempty" tfsdk:"session_revocation_lifetime"`
}

// NewOIDCSessionSettings instantiates a new OIDCSessionSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOIDCSessionSettings() *OIDCSessionSettings {
	this := OIDCSessionSettings{}
	return &this
}

// NewOIDCSessionSettingsWithDefaults instantiates a new OIDCSessionSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOIDCSessionSettingsWithDefaults() *OIDCSessionSettings {
	this := OIDCSessionSettings{}
	return &this
}

// GetTrackUserSessionsForLogout returns the TrackUserSessionsForLogout field value if set, zero value otherwise.
func (o *OIDCSessionSettings) GetTrackUserSessionsForLogout() bool {
	if o == nil || IsNil(o.TrackUserSessionsForLogout) {
		var ret bool
		return ret
	}
	return *o.TrackUserSessionsForLogout
}

// GetTrackUserSessionsForLogoutOk returns a tuple with the TrackUserSessionsForLogout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OIDCSessionSettings) GetTrackUserSessionsForLogoutOk() (*bool, bool) {
	if o == nil || IsNil(o.TrackUserSessionsForLogout) {
		return nil, false
	}
	return o.TrackUserSessionsForLogout, true
}

// HasTrackUserSessionsForLogout returns a boolean if a field has been set.
func (o *OIDCSessionSettings) HasTrackUserSessionsForLogout() bool {
	if o != nil && !IsNil(o.TrackUserSessionsForLogout) {
		return true
	}

	return false
}

// SetTrackUserSessionsForLogout gets a reference to the given bool and assigns it to the TrackUserSessionsForLogout field.
func (o *OIDCSessionSettings) SetTrackUserSessionsForLogout(v bool) {
	o.TrackUserSessionsForLogout = &v
}

// GetRevokeUserSessionOnLogout returns the RevokeUserSessionOnLogout field value if set, zero value otherwise.
func (o *OIDCSessionSettings) GetRevokeUserSessionOnLogout() bool {
	if o == nil || IsNil(o.RevokeUserSessionOnLogout) {
		var ret bool
		return ret
	}
	return *o.RevokeUserSessionOnLogout
}

// GetRevokeUserSessionOnLogoutOk returns a tuple with the RevokeUserSessionOnLogout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OIDCSessionSettings) GetRevokeUserSessionOnLogoutOk() (*bool, bool) {
	if o == nil || IsNil(o.RevokeUserSessionOnLogout) {
		return nil, false
	}
	return o.RevokeUserSessionOnLogout, true
}

// HasRevokeUserSessionOnLogout returns a boolean if a field has been set.
func (o *OIDCSessionSettings) HasRevokeUserSessionOnLogout() bool {
	if o != nil && !IsNil(o.RevokeUserSessionOnLogout) {
		return true
	}

	return false
}

// SetRevokeUserSessionOnLogout gets a reference to the given bool and assigns it to the RevokeUserSessionOnLogout field.
func (o *OIDCSessionSettings) SetRevokeUserSessionOnLogout(v bool) {
	o.RevokeUserSessionOnLogout = &v
}

// GetSessionRevocationLifetime returns the SessionRevocationLifetime field value if set, zero value otherwise.
func (o *OIDCSessionSettings) GetSessionRevocationLifetime() int64 {
	if o == nil || IsNil(o.SessionRevocationLifetime) {
		var ret int64
		return ret
	}
	return *o.SessionRevocationLifetime
}

// GetSessionRevocationLifetimeOk returns a tuple with the SessionRevocationLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OIDCSessionSettings) GetSessionRevocationLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.SessionRevocationLifetime) {
		return nil, false
	}
	return o.SessionRevocationLifetime, true
}

// HasSessionRevocationLifetime returns a boolean if a field has been set.
func (o *OIDCSessionSettings) HasSessionRevocationLifetime() bool {
	if o != nil && !IsNil(o.SessionRevocationLifetime) {
		return true
	}

	return false
}

// SetSessionRevocationLifetime gets a reference to the given int64 and assigns it to the SessionRevocationLifetime field.
func (o *OIDCSessionSettings) SetSessionRevocationLifetime(v int64) {
	o.SessionRevocationLifetime = &v
}

func (o OIDCSessionSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OIDCSessionSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TrackUserSessionsForLogout) {
		toSerialize["trackUserSessionsForLogout"] = o.TrackUserSessionsForLogout
	}
	if !IsNil(o.RevokeUserSessionOnLogout) {
		toSerialize["revokeUserSessionOnLogout"] = o.RevokeUserSessionOnLogout
	}
	if !IsNil(o.SessionRevocationLifetime) {
		toSerialize["sessionRevocationLifetime"] = o.SessionRevocationLifetime
	}
	return toSerialize, nil
}

type NullableOIDCSessionSettings struct {
	value *OIDCSessionSettings
	isSet bool
}

func (v NullableOIDCSessionSettings) Get() *OIDCSessionSettings {
	return v.value
}

func (v *NullableOIDCSessionSettings) Set(val *OIDCSessionSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableOIDCSessionSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableOIDCSessionSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOIDCSessionSettings(val *OIDCSessionSettings) *NullableOIDCSessionSettings {
	return &NullableOIDCSessionSettings{value: val, isSet: true}
}

func (v NullableOIDCSessionSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOIDCSessionSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
