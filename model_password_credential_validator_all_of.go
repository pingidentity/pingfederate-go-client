/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the PasswordCredentialValidatorAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PasswordCredentialValidatorAllOf{}

// PasswordCredentialValidatorAllOf The set of attributes used to configure a password credential validator
type PasswordCredentialValidatorAllOf struct {
	AttributeContract *PasswordCredentialValidatorAttributeContract `json:"attributeContract,omitempty"`
}

// NewPasswordCredentialValidatorAllOf instantiates a new PasswordCredentialValidatorAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordCredentialValidatorAllOf() *PasswordCredentialValidatorAllOf {
	this := PasswordCredentialValidatorAllOf{}
	return &this
}

// NewPasswordCredentialValidatorAllOfWithDefaults instantiates a new PasswordCredentialValidatorAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordCredentialValidatorAllOfWithDefaults() *PasswordCredentialValidatorAllOf {
	this := PasswordCredentialValidatorAllOf{}
	return &this
}

// GetAttributeContract returns the AttributeContract field value if set, zero value otherwise.
func (o *PasswordCredentialValidatorAllOf) GetAttributeContract() PasswordCredentialValidatorAttributeContract {
	if o == nil || IsNil(o.AttributeContract) {
		var ret PasswordCredentialValidatorAttributeContract
		return ret
	}
	return *o.AttributeContract
}

// GetAttributeContractOk returns a tuple with the AttributeContract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordCredentialValidatorAllOf) GetAttributeContractOk() (*PasswordCredentialValidatorAttributeContract, bool) {
	if o == nil || IsNil(o.AttributeContract) {
		return nil, false
	}
	return o.AttributeContract, true
}

// HasAttributeContract returns a boolean if a field has been set.
func (o *PasswordCredentialValidatorAllOf) HasAttributeContract() bool {
	if o != nil && !IsNil(o.AttributeContract) {
		return true
	}

	return false
}

// SetAttributeContract gets a reference to the given PasswordCredentialValidatorAttributeContract and assigns it to the AttributeContract field.
func (o *PasswordCredentialValidatorAllOf) SetAttributeContract(v PasswordCredentialValidatorAttributeContract) {
	o.AttributeContract = &v
}

func (o PasswordCredentialValidatorAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PasswordCredentialValidatorAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttributeContract) {
		toSerialize["attributeContract"] = o.AttributeContract
	}
	return toSerialize, nil
}

type NullablePasswordCredentialValidatorAllOf struct {
	value *PasswordCredentialValidatorAllOf
	isSet bool
}

func (v NullablePasswordCredentialValidatorAllOf) Get() *PasswordCredentialValidatorAllOf {
	return v.value
}

func (v *NullablePasswordCredentialValidatorAllOf) Set(val *PasswordCredentialValidatorAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordCredentialValidatorAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordCredentialValidatorAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordCredentialValidatorAllOf(val *PasswordCredentialValidatorAllOf) *NullablePasswordCredentialValidatorAllOf {
	return &NullablePasswordCredentialValidatorAllOf{value: val, isSet: true}
}

func (v NullablePasswordCredentialValidatorAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordCredentialValidatorAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
