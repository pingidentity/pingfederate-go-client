/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the OpenIdConnectSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenIdConnectSettings{}

// OpenIdConnectSettings Settings for the OpenID Connect configuration.
type OpenIdConnectSettings struct {
	DefaultPolicyRef *ResourceLink        `json:"defaultPolicyRef,omitempty" tfsdk:"default_policy_ref"`
	SessionSettings  *OIDCSessionSettings `json:"sessionSettings,omitempty" tfsdk:"session_settings"`
}

// NewOpenIdConnectSettings instantiates a new OpenIdConnectSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenIdConnectSettings() *OpenIdConnectSettings {
	this := OpenIdConnectSettings{}
	return &this
}

// NewOpenIdConnectSettingsWithDefaults instantiates a new OpenIdConnectSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenIdConnectSettingsWithDefaults() *OpenIdConnectSettings {
	this := OpenIdConnectSettings{}
	return &this
}

// GetDefaultPolicyRef returns the DefaultPolicyRef field value if set, zero value otherwise.
func (o *OpenIdConnectSettings) GetDefaultPolicyRef() ResourceLink {
	if o == nil || IsNil(o.DefaultPolicyRef) {
		var ret ResourceLink
		return ret
	}
	return *o.DefaultPolicyRef
}

// GetDefaultPolicyRefOk returns a tuple with the DefaultPolicyRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenIdConnectSettings) GetDefaultPolicyRefOk() (*ResourceLink, bool) {
	if o == nil || IsNil(o.DefaultPolicyRef) {
		return nil, false
	}
	return o.DefaultPolicyRef, true
}

// HasDefaultPolicyRef returns a boolean if a field has been set.
func (o *OpenIdConnectSettings) HasDefaultPolicyRef() bool {
	if o != nil && !IsNil(o.DefaultPolicyRef) {
		return true
	}

	return false
}

// SetDefaultPolicyRef gets a reference to the given ResourceLink and assigns it to the DefaultPolicyRef field.
func (o *OpenIdConnectSettings) SetDefaultPolicyRef(v ResourceLink) {
	o.DefaultPolicyRef = &v
}

// GetSessionSettings returns the SessionSettings field value if set, zero value otherwise.
func (o *OpenIdConnectSettings) GetSessionSettings() OIDCSessionSettings {
	if o == nil || IsNil(o.SessionSettings) {
		var ret OIDCSessionSettings
		return ret
	}
	return *o.SessionSettings
}

// GetSessionSettingsOk returns a tuple with the SessionSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenIdConnectSettings) GetSessionSettingsOk() (*OIDCSessionSettings, bool) {
	if o == nil || IsNil(o.SessionSettings) {
		return nil, false
	}
	return o.SessionSettings, true
}

// HasSessionSettings returns a boolean if a field has been set.
func (o *OpenIdConnectSettings) HasSessionSettings() bool {
	if o != nil && !IsNil(o.SessionSettings) {
		return true
	}

	return false
}

// SetSessionSettings gets a reference to the given OIDCSessionSettings and assigns it to the SessionSettings field.
func (o *OpenIdConnectSettings) SetSessionSettings(v OIDCSessionSettings) {
	o.SessionSettings = &v
}

func (o OpenIdConnectSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenIdConnectSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultPolicyRef) {
		toSerialize["defaultPolicyRef"] = o.DefaultPolicyRef
	}
	if !IsNil(o.SessionSettings) {
		toSerialize["sessionSettings"] = o.SessionSettings
	}
	return toSerialize, nil
}

type NullableOpenIdConnectSettings struct {
	value *OpenIdConnectSettings
	isSet bool
}

func (v NullableOpenIdConnectSettings) Get() *OpenIdConnectSettings {
	return v.value
}

func (v *NullableOpenIdConnectSettings) Set(val *OpenIdConnectSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenIdConnectSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenIdConnectSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenIdConnectSettings(val *OpenIdConnectSettings) *NullableOpenIdConnectSettings {
	return &NullableOpenIdConnectSettings{value: val, isSet: true}
}

func (v NullableOpenIdConnectSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenIdConnectSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
