/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ServerSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerSettings{}

// ServerSettings Server configuration settings.
type ServerSettings struct {
	ContactInfo       *ContactInfo          `json:"contactInfo,omitempty" tfsdk:"contact_info"`
	Notifications     *NotificationSettings `json:"notifications,omitempty" tfsdk:"notifications"`
	RolesAndProtocols *RolesAndProtocols    `json:"rolesAndProtocols,omitempty" tfsdk:"roles_and_protocols"`
	FederationInfo    *FederationInfo       `json:"federationInfo,omitempty" tfsdk:"federation_info"`
	EmailServer       *EmailServerSettings  `json:"emailServer,omitempty" tfsdk:"email_server"`
	CaptchaSettings   *CaptchaSettings      `json:"captchaSettings,omitempty" tfsdk:"captcha_settings"`
}

// NewServerSettings instantiates a new ServerSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerSettings() *ServerSettings {
	this := ServerSettings{}
	return &this
}

// NewServerSettingsWithDefaults instantiates a new ServerSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerSettingsWithDefaults() *ServerSettings {
	this := ServerSettings{}
	return &this
}

// GetContactInfo returns the ContactInfo field value if set, zero value otherwise.
func (o *ServerSettings) GetContactInfo() ContactInfo {
	if o == nil || IsNil(o.ContactInfo) {
		var ret ContactInfo
		return ret
	}
	return *o.ContactInfo
}

// GetContactInfoOk returns a tuple with the ContactInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerSettings) GetContactInfoOk() (*ContactInfo, bool) {
	if o == nil || IsNil(o.ContactInfo) {
		return nil, false
	}
	return o.ContactInfo, true
}

// HasContactInfo returns a boolean if a field has been set.
func (o *ServerSettings) HasContactInfo() bool {
	if o != nil && !IsNil(o.ContactInfo) {
		return true
	}

	return false
}

// SetContactInfo gets a reference to the given ContactInfo and assigns it to the ContactInfo field.
func (o *ServerSettings) SetContactInfo(v ContactInfo) {
	o.ContactInfo = &v
}

// GetNotifications returns the Notifications field value if set, zero value otherwise.
func (o *ServerSettings) GetNotifications() NotificationSettings {
	if o == nil || IsNil(o.Notifications) {
		var ret NotificationSettings
		return ret
	}
	return *o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerSettings) GetNotificationsOk() (*NotificationSettings, bool) {
	if o == nil || IsNil(o.Notifications) {
		return nil, false
	}
	return o.Notifications, true
}

// HasNotifications returns a boolean if a field has been set.
func (o *ServerSettings) HasNotifications() bool {
	if o != nil && !IsNil(o.Notifications) {
		return true
	}

	return false
}

// SetNotifications gets a reference to the given NotificationSettings and assigns it to the Notifications field.
func (o *ServerSettings) SetNotifications(v NotificationSettings) {
	o.Notifications = &v
}

// GetRolesAndProtocols returns the RolesAndProtocols field value if set, zero value otherwise.
func (o *ServerSettings) GetRolesAndProtocols() RolesAndProtocols {
	if o == nil || IsNil(o.RolesAndProtocols) {
		var ret RolesAndProtocols
		return ret
	}
	return *o.RolesAndProtocols
}

// GetRolesAndProtocolsOk returns a tuple with the RolesAndProtocols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerSettings) GetRolesAndProtocolsOk() (*RolesAndProtocols, bool) {
	if o == nil || IsNil(o.RolesAndProtocols) {
		return nil, false
	}
	return o.RolesAndProtocols, true
}

// HasRolesAndProtocols returns a boolean if a field has been set.
func (o *ServerSettings) HasRolesAndProtocols() bool {
	if o != nil && !IsNil(o.RolesAndProtocols) {
		return true
	}

	return false
}

// SetRolesAndProtocols gets a reference to the given RolesAndProtocols and assigns it to the RolesAndProtocols field.
func (o *ServerSettings) SetRolesAndProtocols(v RolesAndProtocols) {
	o.RolesAndProtocols = &v
}

// GetFederationInfo returns the FederationInfo field value if set, zero value otherwise.
func (o *ServerSettings) GetFederationInfo() FederationInfo {
	if o == nil || IsNil(o.FederationInfo) {
		var ret FederationInfo
		return ret
	}
	return *o.FederationInfo
}

// GetFederationInfoOk returns a tuple with the FederationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerSettings) GetFederationInfoOk() (*FederationInfo, bool) {
	if o == nil || IsNil(o.FederationInfo) {
		return nil, false
	}
	return o.FederationInfo, true
}

// HasFederationInfo returns a boolean if a field has been set.
func (o *ServerSettings) HasFederationInfo() bool {
	if o != nil && !IsNil(o.FederationInfo) {
		return true
	}

	return false
}

// SetFederationInfo gets a reference to the given FederationInfo and assigns it to the FederationInfo field.
func (o *ServerSettings) SetFederationInfo(v FederationInfo) {
	o.FederationInfo = &v
}

// GetEmailServer returns the EmailServer field value if set, zero value otherwise.
func (o *ServerSettings) GetEmailServer() EmailServerSettings {
	if o == nil || IsNil(o.EmailServer) {
		var ret EmailServerSettings
		return ret
	}
	return *o.EmailServer
}

// GetEmailServerOk returns a tuple with the EmailServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerSettings) GetEmailServerOk() (*EmailServerSettings, bool) {
	if o == nil || IsNil(o.EmailServer) {
		return nil, false
	}
	return o.EmailServer, true
}

// HasEmailServer returns a boolean if a field has been set.
func (o *ServerSettings) HasEmailServer() bool {
	if o != nil && !IsNil(o.EmailServer) {
		return true
	}

	return false
}

// SetEmailServer gets a reference to the given EmailServerSettings and assigns it to the EmailServer field.
func (o *ServerSettings) SetEmailServer(v EmailServerSettings) {
	o.EmailServer = &v
}

// GetCaptchaSettings returns the CaptchaSettings field value if set, zero value otherwise.
func (o *ServerSettings) GetCaptchaSettings() CaptchaSettings {
	if o == nil || IsNil(o.CaptchaSettings) {
		var ret CaptchaSettings
		return ret
	}
	return *o.CaptchaSettings
}

// GetCaptchaSettingsOk returns a tuple with the CaptchaSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerSettings) GetCaptchaSettingsOk() (*CaptchaSettings, bool) {
	if o == nil || IsNil(o.CaptchaSettings) {
		return nil, false
	}
	return o.CaptchaSettings, true
}

// HasCaptchaSettings returns a boolean if a field has been set.
func (o *ServerSettings) HasCaptchaSettings() bool {
	if o != nil && !IsNil(o.CaptchaSettings) {
		return true
	}

	return false
}

// SetCaptchaSettings gets a reference to the given CaptchaSettings and assigns it to the CaptchaSettings field.
func (o *ServerSettings) SetCaptchaSettings(v CaptchaSettings) {
	o.CaptchaSettings = &v
}

func (o ServerSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContactInfo) {
		toSerialize["contactInfo"] = o.ContactInfo
	}
	if !IsNil(o.Notifications) {
		toSerialize["notifications"] = o.Notifications
	}
	if !IsNil(o.RolesAndProtocols) {
		toSerialize["rolesAndProtocols"] = o.RolesAndProtocols
	}
	if !IsNil(o.FederationInfo) {
		toSerialize["federationInfo"] = o.FederationInfo
	}
	if !IsNil(o.EmailServer) {
		toSerialize["emailServer"] = o.EmailServer
	}
	if !IsNil(o.CaptchaSettings) {
		toSerialize["captchaSettings"] = o.CaptchaSettings
	}
	return toSerialize, nil
}

type NullableServerSettings struct {
	value *ServerSettings
	isSet bool
}

func (v NullableServerSettings) Get() *ServerSettings {
	return v.value
}

func (v *NullableServerSettings) Set(val *ServerSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableServerSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableServerSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerSettings(val *ServerSettings) *NullableServerSettings {
	return &NullableServerSettings{value: val, isSet: true}
}

func (v NullableServerSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
