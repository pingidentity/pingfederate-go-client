/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the JdbcDataStoreRepository type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JdbcDataStoreRepository{}

// JdbcDataStoreRepository struct for JdbcDataStoreRepository
type JdbcDataStoreRepository struct {
	DataStoreRepository
	SqlMethod SqlMethod `json:"sqlMethod" tfsdk:"sql_method"`
	// A list of user repository mappings from attribute names to their fulfillment values.
	JitRepositoryAttributeMapping map[string]AttributeFulfillmentValue `json:"jitRepositoryAttributeMapping" tfsdk:"jit_repository_attribute_mapping"`
}

type _JdbcDataStoreRepository JdbcDataStoreRepository

// NewJdbcDataStoreRepository instantiates a new JdbcDataStoreRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJdbcDataStoreRepository(sqlMethod SqlMethod, jitRepositoryAttributeMapping map[string]AttributeFulfillmentValue, type_ string, dataStoreRef ResourceLink) *JdbcDataStoreRepository {
	this := JdbcDataStoreRepository{}
	this.Type = type_
	this.DataStoreRef = dataStoreRef
	this.JitRepositoryAttributeMapping = jitRepositoryAttributeMapping
	this.SqlMethod = sqlMethod
	return &this
}

// NewJdbcDataStoreRepositoryWithDefaults instantiates a new JdbcDataStoreRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJdbcDataStoreRepositoryWithDefaults() *JdbcDataStoreRepository {
	this := JdbcDataStoreRepository{}
	return &this
}

// GetSqlMethod returns the SqlMethod field value
func (o *JdbcDataStoreRepository) GetSqlMethod() SqlMethod {
	if o == nil {
		var ret SqlMethod
		return ret
	}

	return o.SqlMethod
}

// GetSqlMethodOk returns a tuple with the SqlMethod field value
// and a boolean to check if the value has been set.
func (o *JdbcDataStoreRepository) GetSqlMethodOk() (*SqlMethod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SqlMethod, true
}

// SetSqlMethod sets field value
func (o *JdbcDataStoreRepository) SetSqlMethod(v SqlMethod) {
	o.SqlMethod = v
}

// GetJitRepositoryAttributeMapping returns the JitRepositoryAttributeMapping field value
func (o *JdbcDataStoreRepository) GetJitRepositoryAttributeMapping() map[string]AttributeFulfillmentValue {
	if o == nil {
		var ret map[string]AttributeFulfillmentValue
		return ret
	}

	return o.JitRepositoryAttributeMapping
}

// GetJitRepositoryAttributeMappingOk returns a tuple with the JitRepositoryAttributeMapping field value
// and a boolean to check if the value has been set.
func (o *JdbcDataStoreRepository) GetJitRepositoryAttributeMappingOk() (*map[string]AttributeFulfillmentValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JitRepositoryAttributeMapping, true
}

// SetJitRepositoryAttributeMapping sets field value
func (o *JdbcDataStoreRepository) SetJitRepositoryAttributeMapping(v map[string]AttributeFulfillmentValue) {
	o.JitRepositoryAttributeMapping = v
}

func (o JdbcDataStoreRepository) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JdbcDataStoreRepository) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedDataStoreRepository, errDataStoreRepository := json.Marshal(o.DataStoreRepository)
	if errDataStoreRepository != nil {
		return map[string]interface{}{}, errDataStoreRepository
	}
	errDataStoreRepository = json.Unmarshal([]byte(serializedDataStoreRepository), &toSerialize)
	if errDataStoreRepository != nil {
		return map[string]interface{}{}, errDataStoreRepository
	}
	toSerialize["sqlMethod"] = o.SqlMethod
	toSerialize["jitRepositoryAttributeMapping"] = o.JitRepositoryAttributeMapping
	return toSerialize, nil
}

func (o *JdbcDataStoreRepository) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sqlMethod",
		"jitRepositoryAttributeMapping",
		"type",
		"dataStoreRef",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJdbcDataStoreRepository := _JdbcDataStoreRepository{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varJdbcDataStoreRepository)

	if err != nil {
		return err
	}

	*o = JdbcDataStoreRepository(varJdbcDataStoreRepository)

	return err
}

type NullableJdbcDataStoreRepository struct {
	value *JdbcDataStoreRepository
	isSet bool
}

func (v NullableJdbcDataStoreRepository) Get() *JdbcDataStoreRepository {
	return v.value
}

func (v *NullableJdbcDataStoreRepository) Set(val *JdbcDataStoreRepository) {
	v.value = val
	v.isSet = true
}

func (v NullableJdbcDataStoreRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableJdbcDataStoreRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJdbcDataStoreRepository(val *JdbcDataStoreRepository) *NullableJdbcDataStoreRepository {
	return &NullableJdbcDataStoreRepository{value: val, isSet: true}
}

func (v NullableJdbcDataStoreRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJdbcDataStoreRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
