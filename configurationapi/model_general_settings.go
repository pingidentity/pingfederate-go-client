/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the GeneralSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeneralSettings{}

// GeneralSettings General settings.
type GeneralSettings struct {
	// Boolean that disables automatic connection validation when set to true. The default is false.
	DisableAutomaticConnectionValidation *bool `json:"disableAutomaticConnectionValidation,omitempty" tfsdk:"disable_automatic_connection_validation"`
	// Determines the level of transaction logging for all identity provider connections. The default is DONT_OVERRIDE, in which case the logging level will be determined by each individual IdP connection
	IdpConnectionTransactionLoggingOverride *string `json:"idpConnectionTransactionLoggingOverride,omitempty" tfsdk:"idp_connection_transaction_logging_override"`
	// Determines the level of transaction logging for all service provider connections. The default is DONT_OVERRIDE, in which case the logging level will be determined by each individual SP connection
	SpConnectionTransactionLoggingOverride *string `json:"spConnectionTransactionLoggingOverride,omitempty" tfsdk:"sp_connection_transaction_logging_override"`
	// Determines how long (in seconds) the result of testing a datastore connection is cached. The default is 300.
	DatastoreValidationIntervalSecs *int64 `json:"datastoreValidationIntervalSecs,omitempty" tfsdk:"datastore_validation_interval_secs"`
	// HTTP request header for retrieving correlation ID.
	RequestHeaderForCorrelationId *string `json:"requestHeaderForCorrelationId,omitempty" tfsdk:"request_header_for_correlation_id"`
}

// NewGeneralSettings instantiates a new GeneralSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeneralSettings() *GeneralSettings {
	this := GeneralSettings{}
	return &this
}

// NewGeneralSettingsWithDefaults instantiates a new GeneralSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeneralSettingsWithDefaults() *GeneralSettings {
	this := GeneralSettings{}
	return &this
}

// GetDisableAutomaticConnectionValidation returns the DisableAutomaticConnectionValidation field value if set, zero value otherwise.
func (o *GeneralSettings) GetDisableAutomaticConnectionValidation() bool {
	if o == nil || IsNil(o.DisableAutomaticConnectionValidation) {
		var ret bool
		return ret
	}
	return *o.DisableAutomaticConnectionValidation
}

// GetDisableAutomaticConnectionValidationOk returns a tuple with the DisableAutomaticConnectionValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettings) GetDisableAutomaticConnectionValidationOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableAutomaticConnectionValidation) {
		return nil, false
	}
	return o.DisableAutomaticConnectionValidation, true
}

// HasDisableAutomaticConnectionValidation returns a boolean if a field has been set.
func (o *GeneralSettings) HasDisableAutomaticConnectionValidation() bool {
	if o != nil && !IsNil(o.DisableAutomaticConnectionValidation) {
		return true
	}

	return false
}

// SetDisableAutomaticConnectionValidation gets a reference to the given bool and assigns it to the DisableAutomaticConnectionValidation field.
func (o *GeneralSettings) SetDisableAutomaticConnectionValidation(v bool) {
	o.DisableAutomaticConnectionValidation = &v
}

// GetIdpConnectionTransactionLoggingOverride returns the IdpConnectionTransactionLoggingOverride field value if set, zero value otherwise.
func (o *GeneralSettings) GetIdpConnectionTransactionLoggingOverride() string {
	if o == nil || IsNil(o.IdpConnectionTransactionLoggingOverride) {
		var ret string
		return ret
	}
	return *o.IdpConnectionTransactionLoggingOverride
}

// GetIdpConnectionTransactionLoggingOverrideOk returns a tuple with the IdpConnectionTransactionLoggingOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettings) GetIdpConnectionTransactionLoggingOverrideOk() (*string, bool) {
	if o == nil || IsNil(o.IdpConnectionTransactionLoggingOverride) {
		return nil, false
	}
	return o.IdpConnectionTransactionLoggingOverride, true
}

// HasIdpConnectionTransactionLoggingOverride returns a boolean if a field has been set.
func (o *GeneralSettings) HasIdpConnectionTransactionLoggingOverride() bool {
	if o != nil && !IsNil(o.IdpConnectionTransactionLoggingOverride) {
		return true
	}

	return false
}

// SetIdpConnectionTransactionLoggingOverride gets a reference to the given string and assigns it to the IdpConnectionTransactionLoggingOverride field.
func (o *GeneralSettings) SetIdpConnectionTransactionLoggingOverride(v string) {
	o.IdpConnectionTransactionLoggingOverride = &v
}

// GetSpConnectionTransactionLoggingOverride returns the SpConnectionTransactionLoggingOverride field value if set, zero value otherwise.
func (o *GeneralSettings) GetSpConnectionTransactionLoggingOverride() string {
	if o == nil || IsNil(o.SpConnectionTransactionLoggingOverride) {
		var ret string
		return ret
	}
	return *o.SpConnectionTransactionLoggingOverride
}

// GetSpConnectionTransactionLoggingOverrideOk returns a tuple with the SpConnectionTransactionLoggingOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettings) GetSpConnectionTransactionLoggingOverrideOk() (*string, bool) {
	if o == nil || IsNil(o.SpConnectionTransactionLoggingOverride) {
		return nil, false
	}
	return o.SpConnectionTransactionLoggingOverride, true
}

// HasSpConnectionTransactionLoggingOverride returns a boolean if a field has been set.
func (o *GeneralSettings) HasSpConnectionTransactionLoggingOverride() bool {
	if o != nil && !IsNil(o.SpConnectionTransactionLoggingOverride) {
		return true
	}

	return false
}

// SetSpConnectionTransactionLoggingOverride gets a reference to the given string and assigns it to the SpConnectionTransactionLoggingOverride field.
func (o *GeneralSettings) SetSpConnectionTransactionLoggingOverride(v string) {
	o.SpConnectionTransactionLoggingOverride = &v
}

// GetDatastoreValidationIntervalSecs returns the DatastoreValidationIntervalSecs field value if set, zero value otherwise.
func (o *GeneralSettings) GetDatastoreValidationIntervalSecs() int64 {
	if o == nil || IsNil(o.DatastoreValidationIntervalSecs) {
		var ret int64
		return ret
	}
	return *o.DatastoreValidationIntervalSecs
}

// GetDatastoreValidationIntervalSecsOk returns a tuple with the DatastoreValidationIntervalSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettings) GetDatastoreValidationIntervalSecsOk() (*int64, bool) {
	if o == nil || IsNil(o.DatastoreValidationIntervalSecs) {
		return nil, false
	}
	return o.DatastoreValidationIntervalSecs, true
}

// HasDatastoreValidationIntervalSecs returns a boolean if a field has been set.
func (o *GeneralSettings) HasDatastoreValidationIntervalSecs() bool {
	if o != nil && !IsNil(o.DatastoreValidationIntervalSecs) {
		return true
	}

	return false
}

// SetDatastoreValidationIntervalSecs gets a reference to the given int64 and assigns it to the DatastoreValidationIntervalSecs field.
func (o *GeneralSettings) SetDatastoreValidationIntervalSecs(v int64) {
	o.DatastoreValidationIntervalSecs = &v
}

// GetRequestHeaderForCorrelationId returns the RequestHeaderForCorrelationId field value if set, zero value otherwise.
func (o *GeneralSettings) GetRequestHeaderForCorrelationId() string {
	if o == nil || IsNil(o.RequestHeaderForCorrelationId) {
		var ret string
		return ret
	}
	return *o.RequestHeaderForCorrelationId
}

// GetRequestHeaderForCorrelationIdOk returns a tuple with the RequestHeaderForCorrelationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettings) GetRequestHeaderForCorrelationIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestHeaderForCorrelationId) {
		return nil, false
	}
	return o.RequestHeaderForCorrelationId, true
}

// HasRequestHeaderForCorrelationId returns a boolean if a field has been set.
func (o *GeneralSettings) HasRequestHeaderForCorrelationId() bool {
	if o != nil && !IsNil(o.RequestHeaderForCorrelationId) {
		return true
	}

	return false
}

// SetRequestHeaderForCorrelationId gets a reference to the given string and assigns it to the RequestHeaderForCorrelationId field.
func (o *GeneralSettings) SetRequestHeaderForCorrelationId(v string) {
	o.RequestHeaderForCorrelationId = &v
}

func (o GeneralSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeneralSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisableAutomaticConnectionValidation) {
		toSerialize["disableAutomaticConnectionValidation"] = o.DisableAutomaticConnectionValidation
	}
	if !IsNil(o.IdpConnectionTransactionLoggingOverride) {
		toSerialize["idpConnectionTransactionLoggingOverride"] = o.IdpConnectionTransactionLoggingOverride
	}
	if !IsNil(o.SpConnectionTransactionLoggingOverride) {
		toSerialize["spConnectionTransactionLoggingOverride"] = o.SpConnectionTransactionLoggingOverride
	}
	if !IsNil(o.DatastoreValidationIntervalSecs) {
		toSerialize["datastoreValidationIntervalSecs"] = o.DatastoreValidationIntervalSecs
	}
	if !IsNil(o.RequestHeaderForCorrelationId) {
		toSerialize["requestHeaderForCorrelationId"] = o.RequestHeaderForCorrelationId
	}
	return toSerialize, nil
}

type NullableGeneralSettings struct {
	value *GeneralSettings
	isSet bool
}

func (v NullableGeneralSettings) Get() *GeneralSettings {
	return v.value
}

func (v *NullableGeneralSettings) Set(val *GeneralSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableGeneralSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableGeneralSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeneralSettings(val *GeneralSettings) *NullableGeneralSettings {
	return &NullableGeneralSettings{value: val, isSet: true}
}

func (v NullableGeneralSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeneralSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
