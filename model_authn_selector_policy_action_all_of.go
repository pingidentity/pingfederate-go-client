/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AuthnSelectorPolicyActionAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthnSelectorPolicyActionAllOf{}

// AuthnSelectorPolicyActionAllOf An authentication selector selection action.
type AuthnSelectorPolicyActionAllOf struct {
	AuthenticationSelectorRef ResourceLink `json:"authenticationSelectorRef"`
}

// NewAuthnSelectorPolicyActionAllOf instantiates a new AuthnSelectorPolicyActionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthnSelectorPolicyActionAllOf(authenticationSelectorRef ResourceLink) *AuthnSelectorPolicyActionAllOf {
	this := AuthnSelectorPolicyActionAllOf{}
	this.AuthenticationSelectorRef = authenticationSelectorRef
	return &this
}

// NewAuthnSelectorPolicyActionAllOfWithDefaults instantiates a new AuthnSelectorPolicyActionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthnSelectorPolicyActionAllOfWithDefaults() *AuthnSelectorPolicyActionAllOf {
	this := AuthnSelectorPolicyActionAllOf{}
	return &this
}

// GetAuthenticationSelectorRef returns the AuthenticationSelectorRef field value
func (o *AuthnSelectorPolicyActionAllOf) GetAuthenticationSelectorRef() ResourceLink {
	if o == nil {
		var ret ResourceLink
		return ret
	}

	return o.AuthenticationSelectorRef
}

// GetAuthenticationSelectorRefOk returns a tuple with the AuthenticationSelectorRef field value
// and a boolean to check if the value has been set.
func (o *AuthnSelectorPolicyActionAllOf) GetAuthenticationSelectorRefOk() (*ResourceLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthenticationSelectorRef, true
}

// SetAuthenticationSelectorRef sets field value
func (o *AuthnSelectorPolicyActionAllOf) SetAuthenticationSelectorRef(v ResourceLink) {
	o.AuthenticationSelectorRef = v
}

func (o AuthnSelectorPolicyActionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthnSelectorPolicyActionAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["authenticationSelectorRef"] = o.AuthenticationSelectorRef
	return toSerialize, nil
}

type NullableAuthnSelectorPolicyActionAllOf struct {
	value *AuthnSelectorPolicyActionAllOf
	isSet bool
}

func (v NullableAuthnSelectorPolicyActionAllOf) Get() *AuthnSelectorPolicyActionAllOf {
	return v.value
}

func (v *NullableAuthnSelectorPolicyActionAllOf) Set(val *AuthnSelectorPolicyActionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthnSelectorPolicyActionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthnSelectorPolicyActionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthnSelectorPolicyActionAllOf(val *AuthnSelectorPolicyActionAllOf) *NullableAuthnSelectorPolicyActionAllOf {
	return &NullableAuthnSelectorPolicyActionAllOf{value: val, isSet: true}
}

func (v NullableAuthnSelectorPolicyActionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthnSelectorPolicyActionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
