/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.0.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ResourceUsages type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceUsages{}

// ResourceUsages A collection of resource usages.
type ResourceUsages struct {
	// The static list of available resource categories.
	Categories []ResourceCategoryInfo `json:"categories,omitempty" tfsdk:"categories"`
	// The actual list of resource usages.
	Items []ResourceUsage `json:"items,omitempty" tfsdk:"items"`
}

// NewResourceUsages instantiates a new ResourceUsages object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceUsages() *ResourceUsages {
	this := ResourceUsages{}
	return &this
}

// NewResourceUsagesWithDefaults instantiates a new ResourceUsages object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceUsagesWithDefaults() *ResourceUsages {
	this := ResourceUsages{}
	return &this
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *ResourceUsages) GetCategories() []ResourceCategoryInfo {
	if o == nil || IsNil(o.Categories) {
		var ret []ResourceCategoryInfo
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceUsages) GetCategoriesOk() ([]ResourceCategoryInfo, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *ResourceUsages) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []ResourceCategoryInfo and assigns it to the Categories field.
func (o *ResourceUsages) SetCategories(v []ResourceCategoryInfo) {
	o.Categories = v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *ResourceUsages) GetItems() []ResourceUsage {
	if o == nil || IsNil(o.Items) {
		var ret []ResourceUsage
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceUsages) GetItemsOk() ([]ResourceUsage, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ResourceUsages) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []ResourceUsage and assigns it to the Items field.
func (o *ResourceUsages) SetItems(v []ResourceUsage) {
	o.Items = v
}

func (o ResourceUsages) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceUsages) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return toSerialize, nil
}

type NullableResourceUsages struct {
	value *ResourceUsages
	isSet bool
}

func (v NullableResourceUsages) Get() *ResourceUsages {
	return v.value
}

func (v *NullableResourceUsages) Set(val *ResourceUsages) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceUsages) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceUsages) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceUsages(val *ResourceUsages) *NullableResourceUsages {
	return &NullableResourceUsages{value: val, isSet: true}
}

func (v NullableResourceUsages) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceUsages) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
