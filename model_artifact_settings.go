/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ArtifactSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArtifactSettings{}

// ArtifactSettings The settings for an Artifact binding.
type ArtifactSettings struct {
	// The lifetime of the artifact in seconds.
	Lifetime int64 `json:"lifetime"`
	// Remote party URLs that you will use to resolve/translate the artifact and get the actual protocol message
	ResolverLocations []ArtifactResolverLocation `json:"resolverLocations"`
	// Source ID for SAML1.x connections
	SourceId *string `json:"sourceId,omitempty"`
}

// NewArtifactSettings instantiates a new ArtifactSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtifactSettings(lifetime int64, resolverLocations []ArtifactResolverLocation) *ArtifactSettings {
	this := ArtifactSettings{}
	this.Lifetime = lifetime
	this.ResolverLocations = resolverLocations
	return &this
}

// NewArtifactSettingsWithDefaults instantiates a new ArtifactSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtifactSettingsWithDefaults() *ArtifactSettings {
	this := ArtifactSettings{}
	return &this
}

// GetLifetime returns the Lifetime field value
func (o *ArtifactSettings) GetLifetime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Lifetime
}

// GetLifetimeOk returns a tuple with the Lifetime field value
// and a boolean to check if the value has been set.
func (o *ArtifactSettings) GetLifetimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lifetime, true
}

// SetLifetime sets field value
func (o *ArtifactSettings) SetLifetime(v int64) {
	o.Lifetime = v
}

// GetResolverLocations returns the ResolverLocations field value
func (o *ArtifactSettings) GetResolverLocations() []ArtifactResolverLocation {
	if o == nil {
		var ret []ArtifactResolverLocation
		return ret
	}

	return o.ResolverLocations
}

// GetResolverLocationsOk returns a tuple with the ResolverLocations field value
// and a boolean to check if the value has been set.
func (o *ArtifactSettings) GetResolverLocationsOk() ([]ArtifactResolverLocation, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResolverLocations, true
}

// SetResolverLocations sets field value
func (o *ArtifactSettings) SetResolverLocations(v []ArtifactResolverLocation) {
	o.ResolverLocations = v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *ArtifactSettings) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactSettings) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *ArtifactSettings) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *ArtifactSettings) SetSourceId(v string) {
	o.SourceId = &v
}

func (o ArtifactSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArtifactSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lifetime"] = o.Lifetime
	toSerialize["resolverLocations"] = o.ResolverLocations
	if !IsNil(o.SourceId) {
		toSerialize["sourceId"] = o.SourceId
	}
	return toSerialize, nil
}

type NullableArtifactSettings struct {
	value *ArtifactSettings
	isSet bool
}

func (v NullableArtifactSettings) Get() *ArtifactSettings {
	return v.value
}

func (v *NullableArtifactSettings) Set(val *ArtifactSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactSettings(val *ArtifactSettings) *NullableArtifactSettings {
	return &NullableArtifactSettings{value: val, isSet: true}
}

func (v NullableArtifactSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
