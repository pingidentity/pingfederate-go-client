/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 12.1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the SpDefaultUrls type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpDefaultUrls{}

// SpDefaultUrls SP Default URLs.
type SpDefaultUrls struct {
	// Provide the default URL you would like to send the user to when Single Sign On (SSO) has succeeded.
	SsoSuccessUrl *string `json:"ssoSuccessUrl,omitempty" tfsdk:"sso_success_url"`
	// Determines whether the user is prompted to confirm Single Logout (SLO). The default is false.
	ConfirmSlo *bool `json:"confirmSlo,omitempty" tfsdk:"confirm_slo"`
	// Provide the default URL you would like to send the user to when Single Logout (SLO) has succeeded.
	SloSuccessUrl *string `json:"sloSuccessUrl,omitempty" tfsdk:"slo_success_url"`
}

// NewSpDefaultUrls instantiates a new SpDefaultUrls object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpDefaultUrls() *SpDefaultUrls {
	this := SpDefaultUrls{}
	return &this
}

// NewSpDefaultUrlsWithDefaults instantiates a new SpDefaultUrls object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpDefaultUrlsWithDefaults() *SpDefaultUrls {
	this := SpDefaultUrls{}
	return &this
}

// GetSsoSuccessUrl returns the SsoSuccessUrl field value if set, zero value otherwise.
func (o *SpDefaultUrls) GetSsoSuccessUrl() string {
	if o == nil || IsNil(o.SsoSuccessUrl) {
		var ret string
		return ret
	}
	return *o.SsoSuccessUrl
}

// GetSsoSuccessUrlOk returns a tuple with the SsoSuccessUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpDefaultUrls) GetSsoSuccessUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SsoSuccessUrl) {
		return nil, false
	}
	return o.SsoSuccessUrl, true
}

// HasSsoSuccessUrl returns a boolean if a field has been set.
func (o *SpDefaultUrls) HasSsoSuccessUrl() bool {
	if o != nil && !IsNil(o.SsoSuccessUrl) {
		return true
	}

	return false
}

// SetSsoSuccessUrl gets a reference to the given string and assigns it to the SsoSuccessUrl field.
func (o *SpDefaultUrls) SetSsoSuccessUrl(v string) {
	o.SsoSuccessUrl = &v
}

// GetConfirmSlo returns the ConfirmSlo field value if set, zero value otherwise.
func (o *SpDefaultUrls) GetConfirmSlo() bool {
	if o == nil || IsNil(o.ConfirmSlo) {
		var ret bool
		return ret
	}
	return *o.ConfirmSlo
}

// GetConfirmSloOk returns a tuple with the ConfirmSlo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpDefaultUrls) GetConfirmSloOk() (*bool, bool) {
	if o == nil || IsNil(o.ConfirmSlo) {
		return nil, false
	}
	return o.ConfirmSlo, true
}

// HasConfirmSlo returns a boolean if a field has been set.
func (o *SpDefaultUrls) HasConfirmSlo() bool {
	if o != nil && !IsNil(o.ConfirmSlo) {
		return true
	}

	return false
}

// SetConfirmSlo gets a reference to the given bool and assigns it to the ConfirmSlo field.
func (o *SpDefaultUrls) SetConfirmSlo(v bool) {
	o.ConfirmSlo = &v
}

// GetSloSuccessUrl returns the SloSuccessUrl field value if set, zero value otherwise.
func (o *SpDefaultUrls) GetSloSuccessUrl() string {
	if o == nil || IsNil(o.SloSuccessUrl) {
		var ret string
		return ret
	}
	return *o.SloSuccessUrl
}

// GetSloSuccessUrlOk returns a tuple with the SloSuccessUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpDefaultUrls) GetSloSuccessUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SloSuccessUrl) {
		return nil, false
	}
	return o.SloSuccessUrl, true
}

// HasSloSuccessUrl returns a boolean if a field has been set.
func (o *SpDefaultUrls) HasSloSuccessUrl() bool {
	if o != nil && !IsNil(o.SloSuccessUrl) {
		return true
	}

	return false
}

// SetSloSuccessUrl gets a reference to the given string and assigns it to the SloSuccessUrl field.
func (o *SpDefaultUrls) SetSloSuccessUrl(v string) {
	o.SloSuccessUrl = &v
}

func (o SpDefaultUrls) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpDefaultUrls) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SsoSuccessUrl) {
		toSerialize["ssoSuccessUrl"] = o.SsoSuccessUrl
	}
	if !IsNil(o.ConfirmSlo) {
		toSerialize["confirmSlo"] = o.ConfirmSlo
	}
	if !IsNil(o.SloSuccessUrl) {
		toSerialize["sloSuccessUrl"] = o.SloSuccessUrl
	}
	return toSerialize, nil
}

type NullableSpDefaultUrls struct {
	value *SpDefaultUrls
	isSet bool
}

func (v NullableSpDefaultUrls) Get() *SpDefaultUrls {
	return v.value
}

func (v *NullableSpDefaultUrls) Set(val *SpDefaultUrls) {
	v.value = val
	v.isSet = true
}

func (v NullableSpDefaultUrls) IsSet() bool {
	return v.isSet
}

func (v *NullableSpDefaultUrls) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpDefaultUrls(val *SpDefaultUrls) *NullableSpDefaultUrls {
	return &NullableSpDefaultUrls{value: val, isSet: true}
}

func (v NullableSpDefaultUrls) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpDefaultUrls) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
