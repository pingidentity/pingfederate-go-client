/*
Administrative API Documentation

The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the RedirectValidationLocalSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RedirectValidationLocalSettings{}

// RedirectValidationLocalSettings Settings for local redirect validation.
type RedirectValidationLocalSettings struct {
	// Enable target resource validation for SSO.
	EnableTargetResourceValidationForSSO *bool `json:"enableTargetResourceValidationForSSO,omitempty" tfsdk:"enable_target_resource_validation_for_sso"`
	// Enable target resource validation for SLO.
	EnableTargetResourceValidationForSLO *bool `json:"enableTargetResourceValidationForSLO,omitempty" tfsdk:"enable_target_resource_validation_for_slo"`
	// Enable target resource validation for IdP discovery.
	EnableTargetResourceValidationForIdpDiscovery *bool `json:"enableTargetResourceValidationForIdpDiscovery,omitempty" tfsdk:"enable_target_resource_validation_for_idp_discovery"`
	// Enable validation for error resource.
	EnableInErrorResourceValidation *bool `json:"enableInErrorResourceValidation,omitempty" tfsdk:"enable_in_error_resource_validation"`
	// List of URLs that are designated as valid target resources.
	WhiteList []RedirectValidationSettingsWhitelistEntry `json:"whiteList,omitempty" tfsdk:"white_list"`
}

// NewRedirectValidationLocalSettings instantiates a new RedirectValidationLocalSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedirectValidationLocalSettings() *RedirectValidationLocalSettings {
	this := RedirectValidationLocalSettings{}
	return &this
}

// NewRedirectValidationLocalSettingsWithDefaults instantiates a new RedirectValidationLocalSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedirectValidationLocalSettingsWithDefaults() *RedirectValidationLocalSettings {
	this := RedirectValidationLocalSettings{}
	return &this
}

// GetEnableTargetResourceValidationForSSO returns the EnableTargetResourceValidationForSSO field value if set, zero value otherwise.
func (o *RedirectValidationLocalSettings) GetEnableTargetResourceValidationForSSO() bool {
	if o == nil || IsNil(o.EnableTargetResourceValidationForSSO) {
		var ret bool
		return ret
	}
	return *o.EnableTargetResourceValidationForSSO
}

// GetEnableTargetResourceValidationForSSOOk returns a tuple with the EnableTargetResourceValidationForSSO field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectValidationLocalSettings) GetEnableTargetResourceValidationForSSOOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableTargetResourceValidationForSSO) {
		return nil, false
	}
	return o.EnableTargetResourceValidationForSSO, true
}

// HasEnableTargetResourceValidationForSSO returns a boolean if a field has been set.
func (o *RedirectValidationLocalSettings) HasEnableTargetResourceValidationForSSO() bool {
	if o != nil && !IsNil(o.EnableTargetResourceValidationForSSO) {
		return true
	}

	return false
}

// SetEnableTargetResourceValidationForSSO gets a reference to the given bool and assigns it to the EnableTargetResourceValidationForSSO field.
func (o *RedirectValidationLocalSettings) SetEnableTargetResourceValidationForSSO(v bool) {
	o.EnableTargetResourceValidationForSSO = &v
}

// GetEnableTargetResourceValidationForSLO returns the EnableTargetResourceValidationForSLO field value if set, zero value otherwise.
func (o *RedirectValidationLocalSettings) GetEnableTargetResourceValidationForSLO() bool {
	if o == nil || IsNil(o.EnableTargetResourceValidationForSLO) {
		var ret bool
		return ret
	}
	return *o.EnableTargetResourceValidationForSLO
}

// GetEnableTargetResourceValidationForSLOOk returns a tuple with the EnableTargetResourceValidationForSLO field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectValidationLocalSettings) GetEnableTargetResourceValidationForSLOOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableTargetResourceValidationForSLO) {
		return nil, false
	}
	return o.EnableTargetResourceValidationForSLO, true
}

// HasEnableTargetResourceValidationForSLO returns a boolean if a field has been set.
func (o *RedirectValidationLocalSettings) HasEnableTargetResourceValidationForSLO() bool {
	if o != nil && !IsNil(o.EnableTargetResourceValidationForSLO) {
		return true
	}

	return false
}

// SetEnableTargetResourceValidationForSLO gets a reference to the given bool and assigns it to the EnableTargetResourceValidationForSLO field.
func (o *RedirectValidationLocalSettings) SetEnableTargetResourceValidationForSLO(v bool) {
	o.EnableTargetResourceValidationForSLO = &v
}

// GetEnableTargetResourceValidationForIdpDiscovery returns the EnableTargetResourceValidationForIdpDiscovery field value if set, zero value otherwise.
func (o *RedirectValidationLocalSettings) GetEnableTargetResourceValidationForIdpDiscovery() bool {
	if o == nil || IsNil(o.EnableTargetResourceValidationForIdpDiscovery) {
		var ret bool
		return ret
	}
	return *o.EnableTargetResourceValidationForIdpDiscovery
}

// GetEnableTargetResourceValidationForIdpDiscoveryOk returns a tuple with the EnableTargetResourceValidationForIdpDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectValidationLocalSettings) GetEnableTargetResourceValidationForIdpDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableTargetResourceValidationForIdpDiscovery) {
		return nil, false
	}
	return o.EnableTargetResourceValidationForIdpDiscovery, true
}

// HasEnableTargetResourceValidationForIdpDiscovery returns a boolean if a field has been set.
func (o *RedirectValidationLocalSettings) HasEnableTargetResourceValidationForIdpDiscovery() bool {
	if o != nil && !IsNil(o.EnableTargetResourceValidationForIdpDiscovery) {
		return true
	}

	return false
}

// SetEnableTargetResourceValidationForIdpDiscovery gets a reference to the given bool and assigns it to the EnableTargetResourceValidationForIdpDiscovery field.
func (o *RedirectValidationLocalSettings) SetEnableTargetResourceValidationForIdpDiscovery(v bool) {
	o.EnableTargetResourceValidationForIdpDiscovery = &v
}

// GetEnableInErrorResourceValidation returns the EnableInErrorResourceValidation field value if set, zero value otherwise.
func (o *RedirectValidationLocalSettings) GetEnableInErrorResourceValidation() bool {
	if o == nil || IsNil(o.EnableInErrorResourceValidation) {
		var ret bool
		return ret
	}
	return *o.EnableInErrorResourceValidation
}

// GetEnableInErrorResourceValidationOk returns a tuple with the EnableInErrorResourceValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectValidationLocalSettings) GetEnableInErrorResourceValidationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableInErrorResourceValidation) {
		return nil, false
	}
	return o.EnableInErrorResourceValidation, true
}

// HasEnableInErrorResourceValidation returns a boolean if a field has been set.
func (o *RedirectValidationLocalSettings) HasEnableInErrorResourceValidation() bool {
	if o != nil && !IsNil(o.EnableInErrorResourceValidation) {
		return true
	}

	return false
}

// SetEnableInErrorResourceValidation gets a reference to the given bool and assigns it to the EnableInErrorResourceValidation field.
func (o *RedirectValidationLocalSettings) SetEnableInErrorResourceValidation(v bool) {
	o.EnableInErrorResourceValidation = &v
}

// GetWhiteList returns the WhiteList field value if set, zero value otherwise.
func (o *RedirectValidationLocalSettings) GetWhiteList() []RedirectValidationSettingsWhitelistEntry {
	if o == nil || IsNil(o.WhiteList) {
		var ret []RedirectValidationSettingsWhitelistEntry
		return ret
	}
	return o.WhiteList
}

// GetWhiteListOk returns a tuple with the WhiteList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectValidationLocalSettings) GetWhiteListOk() ([]RedirectValidationSettingsWhitelistEntry, bool) {
	if o == nil || IsNil(o.WhiteList) {
		return nil, false
	}
	return o.WhiteList, true
}

// HasWhiteList returns a boolean if a field has been set.
func (o *RedirectValidationLocalSettings) HasWhiteList() bool {
	if o != nil && !IsNil(o.WhiteList) {
		return true
	}

	return false
}

// SetWhiteList gets a reference to the given []RedirectValidationSettingsWhitelistEntry and assigns it to the WhiteList field.
func (o *RedirectValidationLocalSettings) SetWhiteList(v []RedirectValidationSettingsWhitelistEntry) {
	o.WhiteList = v
}

func (o RedirectValidationLocalSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RedirectValidationLocalSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnableTargetResourceValidationForSSO) {
		toSerialize["enableTargetResourceValidationForSSO"] = o.EnableTargetResourceValidationForSSO
	}
	if !IsNil(o.EnableTargetResourceValidationForSLO) {
		toSerialize["enableTargetResourceValidationForSLO"] = o.EnableTargetResourceValidationForSLO
	}
	if !IsNil(o.EnableTargetResourceValidationForIdpDiscovery) {
		toSerialize["enableTargetResourceValidationForIdpDiscovery"] = o.EnableTargetResourceValidationForIdpDiscovery
	}
	if !IsNil(o.EnableInErrorResourceValidation) {
		toSerialize["enableInErrorResourceValidation"] = o.EnableInErrorResourceValidation
	}
	if !IsNil(o.WhiteList) {
		toSerialize["whiteList"] = o.WhiteList
	}
	return toSerialize, nil
}

type NullableRedirectValidationLocalSettings struct {
	value *RedirectValidationLocalSettings
	isSet bool
}

func (v NullableRedirectValidationLocalSettings) Get() *RedirectValidationLocalSettings {
	return v.value
}

func (v *NullableRedirectValidationLocalSettings) Set(val *RedirectValidationLocalSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableRedirectValidationLocalSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableRedirectValidationLocalSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedirectValidationLocalSettings(val *RedirectValidationLocalSettings) *NullableRedirectValidationLocalSettings {
	return &NullableRedirectValidationLocalSettings{value: val, isSet: true}
}

func (v NullableRedirectValidationLocalSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedirectValidationLocalSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
